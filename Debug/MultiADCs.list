
MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08008578  08008578  00018578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089f4  080089f4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080089f4  080089f4  000189f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089fc  080089fc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089fc  080089fc  000189fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a00  08008a00  00018a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c8  200001e8  08008be8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  08008be8  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbe3  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a87  00000000  00000000  0002cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0002f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000305b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bb8  00000000  00000000  000311d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011993  00000000  00000000  0004ad90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bc08  00000000  00000000  0005c723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e832b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c8  00000000  00000000  000e837c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800855c 	.word	0x0800855c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800855c 	.word	0x0800855c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <__aeabi_ldivmod>:
 8001030:	b97b      	cbnz	r3, 8001052 <__aeabi_ldivmod+0x22>
 8001032:	b972      	cbnz	r2, 8001052 <__aeabi_ldivmod+0x22>
 8001034:	2900      	cmp	r1, #0
 8001036:	bfbe      	ittt	lt
 8001038:	2000      	movlt	r0, #0
 800103a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800103e:	e006      	blt.n	800104e <__aeabi_ldivmod+0x1e>
 8001040:	bf08      	it	eq
 8001042:	2800      	cmpeq	r0, #0
 8001044:	bf1c      	itt	ne
 8001046:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800104a:	f04f 30ff 	movne.w	r0, #4294967295
 800104e:	f000 b9a9 	b.w	80013a4 <__aeabi_idiv0>
 8001052:	f1ad 0c08 	sub.w	ip, sp, #8
 8001056:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800105a:	2900      	cmp	r1, #0
 800105c:	db09      	blt.n	8001072 <__aeabi_ldivmod+0x42>
 800105e:	2b00      	cmp	r3, #0
 8001060:	db1a      	blt.n	8001098 <__aeabi_ldivmod+0x68>
 8001062:	f000 f835 	bl	80010d0 <__udivmoddi4>
 8001066:	f8dd e004 	ldr.w	lr, [sp, #4]
 800106a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800106e:	b004      	add	sp, #16
 8001070:	4770      	bx	lr
 8001072:	4240      	negs	r0, r0
 8001074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	db1b      	blt.n	80010b4 <__aeabi_ldivmod+0x84>
 800107c:	f000 f828 	bl	80010d0 <__udivmoddi4>
 8001080:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001088:	b004      	add	sp, #16
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	4252      	negs	r2, r2
 8001092:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001096:	4770      	bx	lr
 8001098:	4252      	negs	r2, r2
 800109a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800109e:	f000 f817 	bl	80010d0 <__udivmoddi4>
 80010a2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010aa:	b004      	add	sp, #16
 80010ac:	4240      	negs	r0, r0
 80010ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b2:	4770      	bx	lr
 80010b4:	4252      	negs	r2, r2
 80010b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ba:	f000 f809 	bl	80010d0 <__udivmoddi4>
 80010be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010c6:	b004      	add	sp, #16
 80010c8:	4252      	negs	r2, r2
 80010ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ce:	4770      	bx	lr

080010d0 <__udivmoddi4>:
 80010d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010d4:	9e08      	ldr	r6, [sp, #32]
 80010d6:	460d      	mov	r5, r1
 80010d8:	4604      	mov	r4, r0
 80010da:	4688      	mov	r8, r1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d14d      	bne.n	800117c <__udivmoddi4+0xac>
 80010e0:	428a      	cmp	r2, r1
 80010e2:	4694      	mov	ip, r2
 80010e4:	d968      	bls.n	80011b8 <__udivmoddi4+0xe8>
 80010e6:	fab2 f282 	clz	r2, r2
 80010ea:	b152      	cbz	r2, 8001102 <__udivmoddi4+0x32>
 80010ec:	fa01 f302 	lsl.w	r3, r1, r2
 80010f0:	f1c2 0120 	rsb	r1, r2, #32
 80010f4:	fa20 f101 	lsr.w	r1, r0, r1
 80010f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010fc:	ea41 0803 	orr.w	r8, r1, r3
 8001100:	4094      	lsls	r4, r2
 8001102:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8001106:	fbb8 f7f1 	udiv	r7, r8, r1
 800110a:	fa1f fe8c 	uxth.w	lr, ip
 800110e:	fb01 8817 	mls	r8, r1, r7, r8
 8001112:	fb07 f00e 	mul.w	r0, r7, lr
 8001116:	0c23      	lsrs	r3, r4, #16
 8001118:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800111c:	4298      	cmp	r0, r3
 800111e:	d90a      	bls.n	8001136 <__udivmoddi4+0x66>
 8001120:	eb1c 0303 	adds.w	r3, ip, r3
 8001124:	f107 35ff 	add.w	r5, r7, #4294967295
 8001128:	f080 811e 	bcs.w	8001368 <__udivmoddi4+0x298>
 800112c:	4298      	cmp	r0, r3
 800112e:	f240 811b 	bls.w	8001368 <__udivmoddi4+0x298>
 8001132:	3f02      	subs	r7, #2
 8001134:	4463      	add	r3, ip
 8001136:	1a1b      	subs	r3, r3, r0
 8001138:	fbb3 f0f1 	udiv	r0, r3, r1
 800113c:	fb01 3310 	mls	r3, r1, r0, r3
 8001140:	fb00 fe0e 	mul.w	lr, r0, lr
 8001144:	b2a4      	uxth	r4, r4
 8001146:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800114a:	45a6      	cmp	lr, r4
 800114c:	d90a      	bls.n	8001164 <__udivmoddi4+0x94>
 800114e:	eb1c 0404 	adds.w	r4, ip, r4
 8001152:	f100 33ff 	add.w	r3, r0, #4294967295
 8001156:	f080 8109 	bcs.w	800136c <__udivmoddi4+0x29c>
 800115a:	45a6      	cmp	lr, r4
 800115c:	f240 8106 	bls.w	800136c <__udivmoddi4+0x29c>
 8001160:	4464      	add	r4, ip
 8001162:	3802      	subs	r0, #2
 8001164:	2100      	movs	r1, #0
 8001166:	eba4 040e 	sub.w	r4, r4, lr
 800116a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800116e:	b11e      	cbz	r6, 8001178 <__udivmoddi4+0xa8>
 8001170:	2300      	movs	r3, #0
 8001172:	40d4      	lsrs	r4, r2
 8001174:	e9c6 4300 	strd	r4, r3, [r6]
 8001178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800117c:	428b      	cmp	r3, r1
 800117e:	d908      	bls.n	8001192 <__udivmoddi4+0xc2>
 8001180:	2e00      	cmp	r6, #0
 8001182:	f000 80ee 	beq.w	8001362 <__udivmoddi4+0x292>
 8001186:	2100      	movs	r1, #0
 8001188:	e9c6 0500 	strd	r0, r5, [r6]
 800118c:	4608      	mov	r0, r1
 800118e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001192:	fab3 f183 	clz	r1, r3
 8001196:	2900      	cmp	r1, #0
 8001198:	d14a      	bne.n	8001230 <__udivmoddi4+0x160>
 800119a:	42ab      	cmp	r3, r5
 800119c:	d302      	bcc.n	80011a4 <__udivmoddi4+0xd4>
 800119e:	4282      	cmp	r2, r0
 80011a0:	f200 80fc 	bhi.w	800139c <__udivmoddi4+0x2cc>
 80011a4:	1a84      	subs	r4, r0, r2
 80011a6:	eb65 0303 	sbc.w	r3, r5, r3
 80011aa:	2001      	movs	r0, #1
 80011ac:	4698      	mov	r8, r3
 80011ae:	2e00      	cmp	r6, #0
 80011b0:	d0e2      	beq.n	8001178 <__udivmoddi4+0xa8>
 80011b2:	e9c6 4800 	strd	r4, r8, [r6]
 80011b6:	e7df      	b.n	8001178 <__udivmoddi4+0xa8>
 80011b8:	b902      	cbnz	r2, 80011bc <__udivmoddi4+0xec>
 80011ba:	deff      	udf	#255	; 0xff
 80011bc:	fab2 f282 	clz	r2, r2
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	f040 8091 	bne.w	80012e8 <__udivmoddi4+0x218>
 80011c6:	eba1 000c 	sub.w	r0, r1, ip
 80011ca:	2101      	movs	r1, #1
 80011cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011d0:	fa1f fe8c 	uxth.w	lr, ip
 80011d4:	fbb0 f3f7 	udiv	r3, r0, r7
 80011d8:	fb07 0013 	mls	r0, r7, r3, r0
 80011dc:	0c25      	lsrs	r5, r4, #16
 80011de:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80011e2:	fb0e f003 	mul.w	r0, lr, r3
 80011e6:	42a8      	cmp	r0, r5
 80011e8:	d908      	bls.n	80011fc <__udivmoddi4+0x12c>
 80011ea:	eb1c 0505 	adds.w	r5, ip, r5
 80011ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80011f2:	d202      	bcs.n	80011fa <__udivmoddi4+0x12a>
 80011f4:	42a8      	cmp	r0, r5
 80011f6:	f200 80ce 	bhi.w	8001396 <__udivmoddi4+0x2c6>
 80011fa:	4643      	mov	r3, r8
 80011fc:	1a2d      	subs	r5, r5, r0
 80011fe:	fbb5 f0f7 	udiv	r0, r5, r7
 8001202:	fb07 5510 	mls	r5, r7, r0, r5
 8001206:	fb0e fe00 	mul.w	lr, lr, r0
 800120a:	b2a4      	uxth	r4, r4
 800120c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001210:	45a6      	cmp	lr, r4
 8001212:	d908      	bls.n	8001226 <__udivmoddi4+0x156>
 8001214:	eb1c 0404 	adds.w	r4, ip, r4
 8001218:	f100 35ff 	add.w	r5, r0, #4294967295
 800121c:	d202      	bcs.n	8001224 <__udivmoddi4+0x154>
 800121e:	45a6      	cmp	lr, r4
 8001220:	f200 80b6 	bhi.w	8001390 <__udivmoddi4+0x2c0>
 8001224:	4628      	mov	r0, r5
 8001226:	eba4 040e 	sub.w	r4, r4, lr
 800122a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800122e:	e79e      	b.n	800116e <__udivmoddi4+0x9e>
 8001230:	f1c1 0720 	rsb	r7, r1, #32
 8001234:	408b      	lsls	r3, r1
 8001236:	fa22 fc07 	lsr.w	ip, r2, r7
 800123a:	ea4c 0c03 	orr.w	ip, ip, r3
 800123e:	fa25 fa07 	lsr.w	sl, r5, r7
 8001242:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001246:	fbba f8f9 	udiv	r8, sl, r9
 800124a:	fa20 f307 	lsr.w	r3, r0, r7
 800124e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001252:	408d      	lsls	r5, r1
 8001254:	fa1f fe8c 	uxth.w	lr, ip
 8001258:	431d      	orrs	r5, r3
 800125a:	fa00 f301 	lsl.w	r3, r0, r1
 800125e:	fb08 f00e 	mul.w	r0, r8, lr
 8001262:	0c2c      	lsrs	r4, r5, #16
 8001264:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001268:	42a0      	cmp	r0, r4
 800126a:	fa02 f201 	lsl.w	r2, r2, r1
 800126e:	d90b      	bls.n	8001288 <__udivmoddi4+0x1b8>
 8001270:	eb1c 0404 	adds.w	r4, ip, r4
 8001274:	f108 3aff 	add.w	sl, r8, #4294967295
 8001278:	f080 8088 	bcs.w	800138c <__udivmoddi4+0x2bc>
 800127c:	42a0      	cmp	r0, r4
 800127e:	f240 8085 	bls.w	800138c <__udivmoddi4+0x2bc>
 8001282:	f1a8 0802 	sub.w	r8, r8, #2
 8001286:	4464      	add	r4, ip
 8001288:	1a24      	subs	r4, r4, r0
 800128a:	fbb4 f0f9 	udiv	r0, r4, r9
 800128e:	fb09 4410 	mls	r4, r9, r0, r4
 8001292:	fb00 fe0e 	mul.w	lr, r0, lr
 8001296:	b2ad      	uxth	r5, r5
 8001298:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800129c:	45a6      	cmp	lr, r4
 800129e:	d908      	bls.n	80012b2 <__udivmoddi4+0x1e2>
 80012a0:	eb1c 0404 	adds.w	r4, ip, r4
 80012a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80012a8:	d26c      	bcs.n	8001384 <__udivmoddi4+0x2b4>
 80012aa:	45a6      	cmp	lr, r4
 80012ac:	d96a      	bls.n	8001384 <__udivmoddi4+0x2b4>
 80012ae:	3802      	subs	r0, #2
 80012b0:	4464      	add	r4, ip
 80012b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80012b6:	fba0 9502 	umull	r9, r5, r0, r2
 80012ba:	eba4 040e 	sub.w	r4, r4, lr
 80012be:	42ac      	cmp	r4, r5
 80012c0:	46c8      	mov	r8, r9
 80012c2:	46ae      	mov	lr, r5
 80012c4:	d356      	bcc.n	8001374 <__udivmoddi4+0x2a4>
 80012c6:	d053      	beq.n	8001370 <__udivmoddi4+0x2a0>
 80012c8:	2e00      	cmp	r6, #0
 80012ca:	d069      	beq.n	80013a0 <__udivmoddi4+0x2d0>
 80012cc:	ebb3 0208 	subs.w	r2, r3, r8
 80012d0:	eb64 040e 	sbc.w	r4, r4, lr
 80012d4:	fa22 f301 	lsr.w	r3, r2, r1
 80012d8:	fa04 f707 	lsl.w	r7, r4, r7
 80012dc:	431f      	orrs	r7, r3
 80012de:	40cc      	lsrs	r4, r1
 80012e0:	e9c6 7400 	strd	r7, r4, [r6]
 80012e4:	2100      	movs	r1, #0
 80012e6:	e747      	b.n	8001178 <__udivmoddi4+0xa8>
 80012e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80012ec:	f1c2 0120 	rsb	r1, r2, #32
 80012f0:	fa25 f301 	lsr.w	r3, r5, r1
 80012f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80012f8:	fa20 f101 	lsr.w	r1, r0, r1
 80012fc:	4095      	lsls	r5, r2
 80012fe:	430d      	orrs	r5, r1
 8001300:	fbb3 f1f7 	udiv	r1, r3, r7
 8001304:	fb07 3311 	mls	r3, r7, r1, r3
 8001308:	fa1f fe8c 	uxth.w	lr, ip
 800130c:	0c28      	lsrs	r0, r5, #16
 800130e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001312:	fb01 f30e 	mul.w	r3, r1, lr
 8001316:	4283      	cmp	r3, r0
 8001318:	fa04 f402 	lsl.w	r4, r4, r2
 800131c:	d908      	bls.n	8001330 <__udivmoddi4+0x260>
 800131e:	eb1c 0000 	adds.w	r0, ip, r0
 8001322:	f101 38ff 	add.w	r8, r1, #4294967295
 8001326:	d22f      	bcs.n	8001388 <__udivmoddi4+0x2b8>
 8001328:	4283      	cmp	r3, r0
 800132a:	d92d      	bls.n	8001388 <__udivmoddi4+0x2b8>
 800132c:	3902      	subs	r1, #2
 800132e:	4460      	add	r0, ip
 8001330:	1ac0      	subs	r0, r0, r3
 8001332:	fbb0 f3f7 	udiv	r3, r0, r7
 8001336:	fb07 0013 	mls	r0, r7, r3, r0
 800133a:	b2ad      	uxth	r5, r5
 800133c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001340:	fb03 f00e 	mul.w	r0, r3, lr
 8001344:	42a8      	cmp	r0, r5
 8001346:	d908      	bls.n	800135a <__udivmoddi4+0x28a>
 8001348:	eb1c 0505 	adds.w	r5, ip, r5
 800134c:	f103 38ff 	add.w	r8, r3, #4294967295
 8001350:	d216      	bcs.n	8001380 <__udivmoddi4+0x2b0>
 8001352:	42a8      	cmp	r0, r5
 8001354:	d914      	bls.n	8001380 <__udivmoddi4+0x2b0>
 8001356:	3b02      	subs	r3, #2
 8001358:	4465      	add	r5, ip
 800135a:	1a28      	subs	r0, r5, r0
 800135c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8001360:	e738      	b.n	80011d4 <__udivmoddi4+0x104>
 8001362:	4631      	mov	r1, r6
 8001364:	4630      	mov	r0, r6
 8001366:	e707      	b.n	8001178 <__udivmoddi4+0xa8>
 8001368:	462f      	mov	r7, r5
 800136a:	e6e4      	b.n	8001136 <__udivmoddi4+0x66>
 800136c:	4618      	mov	r0, r3
 800136e:	e6f9      	b.n	8001164 <__udivmoddi4+0x94>
 8001370:	454b      	cmp	r3, r9
 8001372:	d2a9      	bcs.n	80012c8 <__udivmoddi4+0x1f8>
 8001374:	ebb9 0802 	subs.w	r8, r9, r2
 8001378:	eb65 0e0c 	sbc.w	lr, r5, ip
 800137c:	3801      	subs	r0, #1
 800137e:	e7a3      	b.n	80012c8 <__udivmoddi4+0x1f8>
 8001380:	4643      	mov	r3, r8
 8001382:	e7ea      	b.n	800135a <__udivmoddi4+0x28a>
 8001384:	4628      	mov	r0, r5
 8001386:	e794      	b.n	80012b2 <__udivmoddi4+0x1e2>
 8001388:	4641      	mov	r1, r8
 800138a:	e7d1      	b.n	8001330 <__udivmoddi4+0x260>
 800138c:	46d0      	mov	r8, sl
 800138e:	e77b      	b.n	8001288 <__udivmoddi4+0x1b8>
 8001390:	4464      	add	r4, ip
 8001392:	3802      	subs	r0, #2
 8001394:	e747      	b.n	8001226 <__udivmoddi4+0x156>
 8001396:	3b02      	subs	r3, #2
 8001398:	4465      	add	r5, ip
 800139a:	e72f      	b.n	80011fc <__udivmoddi4+0x12c>
 800139c:	4608      	mov	r0, r1
 800139e:	e706      	b.n	80011ae <__udivmoddi4+0xde>
 80013a0:	4631      	mov	r1, r6
 80013a2:	e6e9      	b.n	8001178 <__udivmoddi4+0xa8>

080013a4 <__aeabi_idiv0>:
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop

080013a8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <MX_ADC1_Init+0xd0>)
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <MX_ADC1_Init+0xd4>)
 80013c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <MX_ADC1_Init+0xd0>)
 80013c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013ca:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <MX_ADC1_Init+0xd0>)
 80013cc:	2201      	movs	r2, #1
 80013ce:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d0:	4b29      	ldr	r3, [pc, #164]	; (8001478 <MX_ADC1_Init+0xd0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d6:	4b28      	ldr	r3, [pc, #160]	; (8001478 <MX_ADC1_Init+0xd0>)
 80013d8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <MX_ADC1_Init+0xd0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <MX_ADC1_Init+0xd0>)
 80013e6:	2203      	movs	r2, #3
 80013e8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013ea:	4823      	ldr	r0, [pc, #140]	; (8001478 <MX_ADC1_Init+0xd0>)
 80013ec:	f001 fbb8 	bl	8002b60 <HAL_ADC_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 80013f6:	f000 fc2c 	bl	8001c52 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80013fa:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80013fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4619      	mov	r1, r3
 8001406:	481c      	ldr	r0, [pc, #112]	; (8001478 <MX_ADC1_Init+0xd0>)
 8001408:	f002 f96c 	bl	80036e4 <HAL_ADCEx_MultiModeConfigChannel>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001412:	f000 fc1e 	bl	8001c52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001416:	2300      	movs	r3, #0
 8001418:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800141a:	2301      	movs	r3, #1
 800141c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800141e:	2307      	movs	r3, #7
 8001420:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4814      	ldr	r0, [pc, #80]	; (8001478 <MX_ADC1_Init+0xd0>)
 8001428:	f001 fdf6 	bl	8003018 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001432:	f000 fc0e 	bl	8001c52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001436:	2304      	movs	r3, #4
 8001438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800143a:	2302      	movs	r3, #2
 800143c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	480d      	ldr	r0, [pc, #52]	; (8001478 <MX_ADC1_Init+0xd0>)
 8001444:	f001 fde8 	bl	8003018 <HAL_ADC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800144e:	f000 fc00 	bl	8001c52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001452:	230b      	movs	r3, #11
 8001454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001456:	2303      	movs	r3, #3
 8001458:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	4619      	mov	r1, r3
 800145e:	4806      	ldr	r0, [pc, #24]	; (8001478 <MX_ADC1_Init+0xd0>)
 8001460:	f001 fdda 	bl	8003018 <HAL_ADC_ConfigChannel>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800146a:	f000 fbf2 	bl	8001c52 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000204 	.word	0x20000204
 800147c:	40012400 	.word	0x40012400

08001480 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001490:	4b27      	ldr	r3, [pc, #156]	; (8001530 <MX_ADC2_Init+0xb0>)
 8001492:	4a28      	ldr	r2, [pc, #160]	; (8001534 <MX_ADC2_Init+0xb4>)
 8001494:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_ADC2_Init+0xb0>)
 8001498:	f44f 7280 	mov.w	r2, #256	; 0x100
 800149c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <MX_ADC2_Init+0xb0>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <MX_ADC2_Init+0xb0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014aa:	4b21      	ldr	r3, [pc, #132]	; (8001530 <MX_ADC2_Init+0xb0>)
 80014ac:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014b0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014b2:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <MX_ADC2_Init+0xb0>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	; (8001530 <MX_ADC2_Init+0xb0>)
 80014ba:	2203      	movs	r2, #3
 80014bc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80014be:	481c      	ldr	r0, [pc, #112]	; (8001530 <MX_ADC2_Init+0xb0>)
 80014c0:	f001 fb4e 	bl	8002b60 <HAL_ADC_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 80014ca:	f000 fbc2 	bl	8001c52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014ce:	2301      	movs	r3, #1
 80014d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80014d6:	2307      	movs	r3, #7
 80014d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4814      	ldr	r0, [pc, #80]	; (8001530 <MX_ADC2_Init+0xb0>)
 80014e0:	f001 fd9a 	bl	8003018 <HAL_ADC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 fbb2 	bl	8001c52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80014ee:	2308      	movs	r3, #8
 80014f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <MX_ADC2_Init+0xb0>)
 80014fc:	f001 fd8c 	bl	8003018 <HAL_ADC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001506:	f000 fba4 	bl	8001c52 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800150a:	230a      	movs	r3, #10
 800150c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800150e:	2303      	movs	r3, #3
 8001510:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <MX_ADC2_Init+0xb0>)
 8001518:	f001 fd7e 	bl	8003018 <HAL_ADC_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8001522:	f000 fb96 	bl	8001c52 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000234 	.word	0x20000234
 8001534:	40012800 	.word	0x40012800

08001538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08e      	sub	sp, #56	; 0x38
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a65      	ldr	r2, [pc, #404]	; (80016e8 <HAL_ADC_MspInit+0x1b0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d168      	bne.n	800162a <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001558:	4b64      	ldr	r3, [pc, #400]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a63      	ldr	r2, [pc, #396]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001570:	4b5e      	ldr	r3, [pc, #376]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a5d      	ldr	r2, [pc, #372]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001576:	f043 0310 	orr.w	r3, r3, #16
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b5b      	ldr	r3, [pc, #364]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	623b      	str	r3, [r7, #32]
 8001586:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b58      	ldr	r3, [pc, #352]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a57      	ldr	r2, [pc, #348]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b55      	ldr	r3, [pc, #340]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	61fb      	str	r3, [r7, #28]
 800159e:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015a0:	2303      	movs	r3, #3
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a4:	2303      	movs	r3, #3
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4850      	ldr	r0, [pc, #320]	; (80016f0 <HAL_ADC_MspInit+0x1b8>)
 80015b0:	f002 fbe6 	bl	8003d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80015b4:	2311      	movs	r3, #17
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b8:	2303      	movs	r3, #3
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015c0:	4619      	mov	r1, r3
 80015c2:	484c      	ldr	r0, [pc, #304]	; (80016f4 <HAL_ADC_MspInit+0x1bc>)
 80015c4:	f002 fbdc 	bl	8003d80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015ca:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <HAL_ADC_MspInit+0x1c4>)
 80015cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	4b4a      	ldr	r3, [pc, #296]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d4:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015da:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015e8:	4b43      	ldr	r3, [pc, #268]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015f2:	2220      	movs	r2, #32
 80015f4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015fc:	483e      	ldr	r0, [pc, #248]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 80015fe:	f002 f9d1 	bl	80039a4 <HAL_DMA_Init>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001608:	f000 fb23 	bl	8001c52 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a3a      	ldr	r2, [pc, #232]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 8001610:	621a      	str	r2, [r3, #32]
 8001612:	4a39      	ldr	r2, [pc, #228]	; (80016f8 <HAL_ADC_MspInit+0x1c0>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2100      	movs	r1, #0
 800161c:	2012      	movs	r0, #18
 800161e:	f002 f98a 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001622:	2012      	movs	r0, #18
 8001624:	f002 f9a3 	bl	800396e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001628:	e05a      	b.n	80016e0 <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a34      	ldr	r2, [pc, #208]	; (8001700 <HAL_ADC_MspInit+0x1c8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d155      	bne.n	80016e0 <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800163a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163e:	6193      	str	r3, [r2, #24]
 8001640:	4b2a      	ldr	r3, [pc, #168]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164c:	4b27      	ldr	r3, [pc, #156]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	4a26      	ldr	r2, [pc, #152]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6193      	str	r3, [r2, #24]
 8001658:	4b24      	ldr	r3, [pc, #144]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b21      	ldr	r3, [pc, #132]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a20      	ldr	r2, [pc, #128]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a1a      	ldr	r2, [pc, #104]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 8001682:	f043 0308 	orr.w	r3, r3, #8
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <HAL_ADC_MspInit+0x1b4>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001694:	2303      	movs	r3, #3
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001698:	2303      	movs	r3, #3
 800169a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a0:	4619      	mov	r1, r3
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <HAL_ADC_MspInit+0x1b8>)
 80016a4:	f002 fb6c 	bl	8003d80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016a8:	2302      	movs	r3, #2
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ac:	2303      	movs	r3, #3
 80016ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b4:	4619      	mov	r1, r3
 80016b6:	480f      	ldr	r0, [pc, #60]	; (80016f4 <HAL_ADC_MspInit+0x1bc>)
 80016b8:	f002 fb62 	bl	8003d80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016bc:	2301      	movs	r3, #1
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c0:	2303      	movs	r3, #3
 80016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c8:	4619      	mov	r1, r3
 80016ca:	480e      	ldr	r0, [pc, #56]	; (8001704 <HAL_ADC_MspInit+0x1cc>)
 80016cc:	f002 fb58 	bl	8003d80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2012      	movs	r0, #18
 80016d6:	f002 f92e 	bl	8003936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80016da:	2012      	movs	r0, #18
 80016dc:	f002 f947 	bl	800396e <HAL_NVIC_EnableIRQ>
}
 80016e0:	bf00      	nop
 80016e2:	3738      	adds	r7, #56	; 0x38
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40012400 	.word	0x40012400
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40011000 	.word	0x40011000
 80016f4:	40010800 	.word	0x40010800
 80016f8:	20000264 	.word	0x20000264
 80016fc:	40020008 	.word	0x40020008
 8001700:	40012800 	.word	0x40012800
 8001704:	40010c00 	.word	0x40010c00

08001708 <ADC_Start>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Start(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 800170c:	bf00      	nop
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <ADC_Start+0x40>)
 8001710:	f001 fe7c 	bl	800340c <HAL_ADCEx_Calibration_Start>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f9      	bne.n	800170e <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 800171a:	bf00      	nop
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <ADC_Start+0x44>)
 800171e:	f001 fe75 	bl	800340c <HAL_ADCEx_Calibration_Start>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1f9      	bne.n	800171c <ADC_Start+0x14>
	HAL_Delay(10);
 8001728:	200a      	movs	r0, #10
 800172a:	f001 f9f5 	bl	8002b18 <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <ADC_Start+0x44>)
 8001730:	f001 faee 	bl	8002d10 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, getADC_Buffer(), (uint32_t)2 * CHANNELS);
 8001734:	f000 fe40 	bl	80023b8 <getADC_Buffer>
 8001738:	4603      	mov	r3, r0
 800173a:	2202      	movs	r2, #2
 800173c:	4619      	mov	r1, r3
 800173e:	4802      	ldr	r0, [pc, #8]	; (8001748 <ADC_Start+0x40>)
 8001740:	f001 ff10 	bl	8003564 <HAL_ADCEx_MultiModeStart_DMA>
}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000204 	.word	0x20000204
 800174c:	20000234 	.word	0x20000234

08001750 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	if(hadc)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d005      	beq.n	800176a <HAL_ADC_ConvHalfCpltCallback+0x1a>
	{
		takeData(getADC_Buffer());
 800175e:	f000 fe2b 	bl	80023b8 <getADC_Buffer>
 8001762:	4603      	mov	r3, r0
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fb91 	bl	8001e8c <takeData>
	}
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	if(hadc)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_ADC_ConvCpltCallback+0x1a>
	{
		takeData(gethalfOfADC_Buffer());
 8001780:	f000 fe24 	bl	80023cc <gethalfOfADC_Buffer>
 8001784:	4603      	mov	r3, r0
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fb80 	bl	8001e8c <takeData>
	}
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800179a:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_DMA_Init+0x38>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <MX_DMA_Init+0x38>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6153      	str	r3, [r2, #20]
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_DMA_Init+0x38>)
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	200b      	movs	r0, #11
 80017b8:	f002 f8bd 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017bc:	200b      	movs	r0, #11
 80017be:	f002 f8d6 	bl	800396e <HAL_NVIC_EnableIRQ>

}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000

080017d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <MX_GPIO_Init+0xa8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a23      	ldr	r2, [pc, #140]	; (8001878 <MX_GPIO_Init+0xa8>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b21      	ldr	r3, [pc, #132]	; (8001878 <MX_GPIO_Init+0xa8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0310 	and.w	r3, r3, #16
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_GPIO_Init+0xa8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <MX_GPIO_Init+0xa8>)
 8001802:	f043 0320 	orr.w	r3, r3, #32
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_GPIO_Init+0xa8>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0320 	and.w	r3, r3, #32
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_GPIO_Init+0xa8>)
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	4a17      	ldr	r2, [pc, #92]	; (8001878 <MX_GPIO_Init+0xa8>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6193      	str	r3, [r2, #24]
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_GPIO_Init+0xa8>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_GPIO_Init+0xa8>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a11      	ldr	r2, [pc, #68]	; (8001878 <MX_GPIO_Init+0xa8>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_GPIO_Init+0xa8>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_GPIO_Init+0xac>)
 800184c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4619      	mov	r1, r3
 8001858:	4809      	ldr	r0, [pc, #36]	; (8001880 <MX_GPIO_Init+0xb0>)
 800185a:	f002 fa91 	bl	8003d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2028      	movs	r0, #40	; 0x28
 8001864:	f002 f867 	bl	8003936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001868:	2028      	movs	r0, #40	; 0x28
 800186a:	f002 f880 	bl	800396e <HAL_NVIC_EnableIRQ>

}
 800186e:	bf00      	nop
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	10110000 	.word	0x10110000
 8001880:	40011000 	.word	0x40011000

08001884 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <MX_I2C1_Init+0x54>)
 800188a:	4a14      	ldr	r2, [pc, #80]	; (80018dc <MX_I2C1_Init+0x58>)
 800188c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_I2C1_Init+0x54>)
 8001890:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <MX_I2C1_Init+0x5c>)
 8001892:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001894:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <MX_I2C1_Init+0x54>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_I2C1_Init+0x54>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <MX_I2C1_Init+0x54>)
 80018a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <MX_I2C1_Init+0x54>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_I2C1_Init+0x54>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <MX_I2C1_Init+0x54>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_I2C1_Init+0x54>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018c0:	4805      	ldr	r0, [pc, #20]	; (80018d8 <MX_I2C1_Init+0x54>)
 80018c2:	f002 fc1b 	bl	80040fc <HAL_I2C_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018cc:	f000 f9c1 	bl	8001c52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  PCF8574_update();
 80018d0:	f000 f8a4 	bl	8001a1c <PCF8574_update>
  /* USER CODE END I2C1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200002a8 	.word	0x200002a8
 80018dc:	40005400 	.word	0x40005400
 80018e0:	000186a0 	.word	0x000186a0

080018e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1d      	ldr	r2, [pc, #116]	; (8001974 <HAL_I2C_MspInit+0x90>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d132      	bne.n	800196a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_I2C_MspInit+0x94>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <HAL_I2C_MspInit+0x94>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_I2C_MspInit+0x94>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800191c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001922:	2312      	movs	r3, #18
 8001924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4812      	ldr	r0, [pc, #72]	; (800197c <HAL_I2C_MspInit+0x98>)
 8001932:	f002 fa25 	bl	8003d80 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_I2C_MspInit+0x9c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	627b      	str	r3, [r7, #36]	; 0x24
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001942:	627b      	str	r3, [r7, #36]	; 0x24
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
 800194c:	4a0c      	ldr	r2, [pc, #48]	; (8001980 <HAL_I2C_MspInit+0x9c>)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_I2C_MspInit+0x94>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	4a08      	ldr	r2, [pc, #32]	; (8001978 <HAL_I2C_MspInit+0x94>)
 8001958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195c:	61d3      	str	r3, [r2, #28]
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_I2C_MspInit+0x94>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40005400 	.word	0x40005400
 8001978:	40021000 	.word	0x40021000
 800197c:	40010c00 	.word	0x40010c00
 8001980:	40010000 	.word	0x40010000

08001984 <PCF8574_turnOn>:
  }
}

/* USER CODE BEGIN 1 */
void PCF8574_turnOn(uint8_t pin)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	PCF8574_check(pin);
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f835 	bl	8001a00 <PCF8574_check>
	pinState &= (~(1 << pin));
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	2201      	movs	r2, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	b25a      	sxtb	r2, r3
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <PCF8574_turnOn+0x3c>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	b25b      	sxtb	r3, r3
 80019aa:	4013      	ands	r3, r2
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <PCF8574_turnOn+0x3c>)
 80019b2:	701a      	strb	r2, [r3, #0]
	PCF8574_update();
 80019b4:	f000 f832 	bl	8001a1c <PCF8574_update>
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000000 	.word	0x20000000

080019c4 <PCF8574_turnOff>:

void PCF8574_turnOff(uint8_t pin)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
	PCF8574_check(pin);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f815 	bl	8001a00 <PCF8574_check>
	pinState |= (1 << pin);
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2201      	movs	r2, #1
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <PCF8574_turnOff+0x38>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	4313      	orrs	r3, r2
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <PCF8574_turnOff+0x38>)
 80019ee:	701a      	strb	r2, [r3, #0]
	PCF8574_update();
 80019f0:	f000 f814 	bl	8001a1c <PCF8574_update>
}
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000000 	.word	0x20000000

08001a00 <PCF8574_check>:
	PCF8574_update();
}


void PCF8574_check(uint8_t pin)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	if(pin >= 8)
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b07      	cmp	r3, #7
 8001a0e:	d901      	bls.n	8001a14 <PCF8574_check+0x14>
	{
		Error_Handler();
 8001a10:	f000 f91f 	bl	8001c52 <Error_Handler>
	}
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <PCF8574_update>:

void PCF8574_update()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1,PCF8574_ADDRESS,(uint8_t*)&pinState,sizeof(pinState),HAL_MAX_DELAY);
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <PCF8574_update+0x20>)
 8001a2c:	2170      	movs	r1, #112	; 0x70
 8001a2e:	4804      	ldr	r0, [pc, #16]	; (8001a40 <PCF8574_update+0x24>)
 8001a30:	f002 fca8 	bl	8004384 <HAL_I2C_Master_Transmit>
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	200002a8 	.word	0x200002a8

08001a44 <showControls>:




void showControls(float Q)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	uint8_t i = ((int) Q) / 250;
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff fac9 	bl	8000fe4 <__aeabi_f2iz>
 8001a52:	4603      	mov	r3, r0
 8001a54:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <showControls+0x54>)
 8001a56:	fb82 1203 	smull	r1, r2, r2, r3
 8001a5a:	1112      	asrs	r2, r2, #4
 8001a5c:	17db      	asrs	r3, r3, #31
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	73bb      	strb	r3, [r7, #14]

	for(uint8_t j = 0; j < 8; j++)
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
 8001a66:	e00f      	b.n	8001a88 <showControls+0x44>
	{
		if(j < i)
 8001a68:	7bfa      	ldrb	r2, [r7, #15]
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d204      	bcs.n	8001a7a <showControls+0x36>
			PCF8574_turnOn(j);
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff ff86 	bl	8001984 <PCF8574_turnOn>
 8001a78:	e003      	b.n	8001a82 <showControls+0x3e>
		else
			PCF8574_turnOff(j);
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ffa1 	bl	80019c4 <PCF8574_turnOff>
	for(uint8_t j = 0; j < 8; j++)
 8001a82:	7bfb      	ldrb	r3, [r7, #15]
 8001a84:	3301      	adds	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	2b07      	cmp	r3, #7
 8001a8c:	d9ec      	bls.n	8001a68 <showControls+0x24>
	}
}
 8001a8e:	bf00      	nop
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	10624dd3 	.word	0x10624dd3

08001a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa0:	b08c      	sub	sp, #48	; 0x30
 8001aa2:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa4:	f000 ffd6 	bl	8002a54 <HAL_Init>

  uint32_t lastGetTick;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aa8:	f000 f87c 	bl	8001ba4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  powerParamInit();
 8001aac:	f000 f8d6 	bl	8001c5c <powerParamInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab0:	f7ff fe8e 	bl	80017d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab4:	f7ff fe6e 	bl	8001794 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ab8:	f000 ff3e 	bl	8002938 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001abc:	f7ff fc74 	bl	80013a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001ac0:	f7ff fcde 	bl	8001480 <MX_ADC2_Init>
  MX_I2C1_Init();
 8001ac4:	f7ff fede 	bl	8001884 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 8001ac8:	f7ff fe1e 	bl	8001708 <ADC_Start>
  HAL_Delay(1500);
 8001acc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001ad0:	f001 f822 	bl	8002b18 <HAL_Delay>
  CalibrateZero();
 8001ad4:	f000 f934 	bl	8001d40 <CalibrateZero>
  CalcRMScorection();
 8001ad8:	f000 f8e0 	bl	8001c9c <CalcRMScorection>
  param = (Params*)malloc(sizeof(Params));
 8001adc:	2018      	movs	r0, #24
 8001ade:	f003 fec9 	bl	8005874 <malloc>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001ae6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aea:	482b      	ldr	r0, [pc, #172]	; (8001b98 <main+0xfc>)
 8001aec:	f002 facc 	bl	8004088 <HAL_GPIO_ReadPin>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <main+0x5e>
	  {
		  CalibrateZero();
 8001af6:	f000 f923 	bl	8001d40 <CalibrateZero>
	  }

	  if((HAL_GetTick()-lastGetTick)>=SHOWDATAPERIOD)
 8001afa:	f001 f803 	bl	8002b04 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b08:	d3ed      	bcc.n	8001ae6 <main+0x4a>
	  {

		  getParams(param,0);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	68b8      	ldr	r0, [r7, #8]
 8001b0e:	f000 fd1b 	bl	8002548 <getParams>
		  printf("RMS: V: %.1f,  I:%.2f,  P:%.2f,  Q:%.2f,  S:%.2f\n",param->V ,param->I, param->P, param->Q, param->S);
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fc86 	bl	8000428 <__aeabi_f2d>
 8001b1c:	e9c7 0100 	strd	r0, r1, [r7]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fc7f 	bl	8000428 <__aeabi_f2d>
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	460d      	mov	r5, r1
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fc78 	bl	8000428 <__aeabi_f2d>
 8001b38:	4680      	mov	r8, r0
 8001b3a:	4689      	mov	r9, r1
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fc71 	bl	8000428 <__aeabi_f2d>
 8001b46:	4682      	mov	sl, r0
 8001b48:	468b      	mov	fp, r1
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fc6a 	bl	8000428 <__aeabi_f2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001b5c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001b60:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b64:	e9cd 4500 	strd	r4, r5, [sp]
 8001b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <main+0x100>)
 8001b6e:	f004 fbcd 	bl	800630c <iprintf>
		  printf("Fi: %f\n", param->fi);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fc56 	bl	8000428 <__aeabi_f2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <main+0x104>)
 8001b82:	f004 fbc3 	bl	800630c <iprintf>

		  showControls(param->Q);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff5a 	bl	8001a44 <showControls>

		  lastGetTick=HAL_GetTick();
 8001b90:	f000 ffb8 	bl	8002b04 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001b96:	e7a6      	b.n	8001ae6 <main+0x4a>
 8001b98:	40011000 	.word	0x40011000
 8001b9c:	08008578 	.word	0x08008578
 8001ba0:	080085ac 	.word	0x080085ac

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	; 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bae:	2228      	movs	r2, #40	; 0x28
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fe66 	bl	8005884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bdc:	2310      	movs	r3, #16
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be0:	2302      	movs	r3, #2
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001be4:	2300      	movs	r3, #0
 8001be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001be8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001bec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fecc 	bl	8004990 <HAL_RCC_OscConfig>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001bfe:	f000 f828 	bl	8001c52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c02:	230f      	movs	r3, #15
 8001c04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 f938 	bl	8004e94 <HAL_RCC_ClockConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c2a:	f000 f812 	bl	8001c52 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001c32:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001c36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 fac2 	bl	80051c4 <HAL_RCCEx_PeriphCLKConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c46:	f000 f804 	bl	8001c52 <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3750      	adds	r7, #80	; 0x50
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c56:	b672      	cpsid	i
}
 8001c58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <Error_Handler+0x8>

08001c5c <powerParamInit>:
uint8_t sign[2*CHANNELS][BUFFERSIZE/8] = {0};
uint8_t disableSetting;


void powerParamInit()
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	indexCircBuffer = 0;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <powerParamInit+0x2c>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	801a      	strh	r2, [r3, #0]
	oversamplingIndex = 0;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <powerParamInit+0x30>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
	correctionRMS = 1;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <powerParamInit+0x34>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
	calibCounter = 0;
 8001c72:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <powerParamInit+0x38>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	801a      	strh	r2, [r3, #0]
	disableSetting = 0;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <powerParamInit+0x3c>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000708 	.word	0x20000708
 8001c8c:	2000070a 	.word	0x2000070a
 8001c90:	20000720 	.word	0x20000720
 8001c94:	20000722 	.word	0x20000722
 8001c98:	20000750 	.word	0x20000750

08001c9c <CalcRMScorection>:

void CalcRMScorection()
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
		while(indexCircBuffer!= 0);
 8001ca2:	bf00      	nop
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <CalcRMScorection+0x94>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1fb      	bne.n	8001ca4 <CalcRMScorection+0x8>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
		__disable_irq();
		uint32_t timeOfBufforing = time[BUFFERSIZE-1]- time[0];
 8001cb0:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <CalcRMScorection+0x98>)
 8001cb2:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <CalcRMScorection+0x98>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	60fb      	str	r3, [r7, #12]
		uint32_t halfPhase = 1000000/EXPECTEDFREQ/2;
 8001cbe:	f242 7310 	movw	r3, #10000	; 0x2710
 8001cc2:	60bb      	str	r3, [r7, #8]
		uint16_t halfPeriods = timeOfBufforing/halfPhase;
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	80fb      	strh	r3, [r7, #6]
		Tinterval = halfPhase*halfPeriods;
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	68ba      	ldr	r2, [r7, #8]
 8001cd2:	fb02 f303 	mul.w	r3, r2, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <CalcRMScorection+0x9c>)
 8001cda:	601a      	str	r2, [r3, #0]
		while(time[BUFFERSIZE-1-correctionRMS] > time[0] + Tinterval) correctionRMS++;
 8001cdc:	e005      	b.n	8001cea <CalcRMScorection+0x4e>
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <CalcRMScorection+0xa0>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <CalcRMScorection+0xa0>)
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	4b14      	ldr	r3, [pc, #80]	; (8001d3c <CalcRMScorection+0xa0>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <CalcRMScorection+0x98>)
 8001cf4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <CalcRMScorection+0x98>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	490e      	ldr	r1, [pc, #56]	; (8001d38 <CalcRMScorection+0x9c>)
 8001cfe:	6809      	ldr	r1, [r1, #0]
 8001d00:	440b      	add	r3, r1
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d8eb      	bhi.n	8001cde <CalcRMScorection+0x42>
		Tinterval = time[BUFFERSIZE-1-correctionRMS] - time[0];
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <CalcRMScorection+0xa0>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001d0e:	4a09      	ldr	r2, [pc, #36]	; (8001d34 <CalcRMScorection+0x98>)
 8001d10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <CalcRMScorection+0x98>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <CalcRMScorection+0x9c>)
 8001d1e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d20:	b662      	cpsie	i
}
 8001d22:	bf00      	nop
		__enable_irq();
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000708 	.word	0x20000708
 8001d34:	20000504 	.word	0x20000504
 8001d38:	20000704 	.word	0x20000704
 8001d3c:	20000720 	.word	0x20000720

08001d40 <CalibrateZero>:

void CalibrateZero()
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0

	printf("Starting calibration...\n");
 8001d46:	4849      	ldr	r0, [pc, #292]	; (8001e6c <CalibrateZero+0x12c>)
 8001d48:	f004 fb66 	bl	8006418 <puts>
	while(indexCircBuffer!= 0);
 8001d4c:	bf00      	nop
 8001d4e:	4b48      	ldr	r3, [pc, #288]	; (8001e70 <CalibrateZero+0x130>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1fb      	bne.n	8001d4e <CalibrateZero+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 8001d56:	b672      	cpsid	i
}
 8001d58:	bf00      	nop
	__disable_irq();

	//Vpp calibration
	int32_t min = 1 << 16, max = 0;
 8001d5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 8001d64:	2300      	movs	r3, #0
 8001d66:	71fb      	strb	r3, [r7, #7]
 8001d68:	e060      	b.n	8001e2c <CalibrateZero+0xec>
	{
		for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 8001d6a:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <CalibrateZero+0x134>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	80bb      	strh	r3, [r7, #4]
 8001d70:	e030      	b.n	8001dd4 <CalibrateZero+0x94>
		{
			if(max < data[i][j]) max = data[i][j];
 8001d72:	88ba      	ldrh	r2, [r7, #4]
 8001d74:	79fb      	ldrb	r3, [r7, #7]
 8001d76:	4940      	ldr	r1, [pc, #256]	; (8001e78 <CalibrateZero+0x138>)
 8001d78:	0052      	lsls	r2, r2, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	4293      	cmp	r3, r2
 8001d86:	da07      	bge.n	8001d98 <CalibrateZero+0x58>
 8001d88:	88ba      	ldrh	r2, [r7, #4]
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	493a      	ldr	r1, [pc, #232]	; (8001e78 <CalibrateZero+0x138>)
 8001d8e:	0052      	lsls	r2, r2, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001d96:	60bb      	str	r3, [r7, #8]
			if(min > data[i][j]) min = data[i][j];
 8001d98:	88ba      	ldrh	r2, [r7, #4]
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	4936      	ldr	r1, [pc, #216]	; (8001e78 <CalibrateZero+0x138>)
 8001d9e:	0052      	lsls	r2, r2, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4293      	cmp	r3, r2
 8001dac:	dd07      	ble.n	8001dbe <CalibrateZero+0x7e>
 8001dae:	88ba      	ldrh	r2, [r7, #4]
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4931      	ldr	r1, [pc, #196]	; (8001e78 <CalibrateZero+0x138>)
 8001db4:	0052      	lsls	r2, r2, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001dbc:	60fb      	str	r3, [r7, #12]
			data[i][j] = 0;
 8001dbe:	88ba      	ldrh	r2, [r7, #4]
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	492d      	ldr	r1, [pc, #180]	; (8001e78 <CalibrateZero+0x138>)
 8001dc4:	0052      	lsls	r2, r2, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 8001dce:	88bb      	ldrh	r3, [r7, #4]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	80bb      	strh	r3, [r7, #4]
 8001dd4:	88bb      	ldrh	r3, [r7, #4]
 8001dd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001dd8:	d9cb      	bls.n	8001d72 <CalibrateZero+0x32>
		}
		calibZeros[j] += (min+max)/2;
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <CalibrateZero+0x13c>)
 8001dde:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	4413      	add	r3, r2
 8001de8:	0fda      	lsrs	r2, r3, #31
 8001dea:	4413      	add	r3, r2
 8001dec:	105b      	asrs	r3, r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	79fb      	ldrb	r3, [r7, #7]
 8001df2:	440a      	add	r2, r1
 8001df4:	b291      	uxth	r1, r2
 8001df6:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <CalibrateZero+0x13c>)
 8001df8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data[0][j] = -calibZeros[j];
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <CalibrateZero+0x13c>)
 8001e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e04:	425b      	negs	r3, r3
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	b211      	sxth	r1, r2
 8001e0c:	4a1a      	ldr	r2, [pc, #104]	; (8001e78 <CalibrateZero+0x138>)
 8001e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RMS[j] = 0;
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <CalibrateZero+0x140>)
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	18d1      	adds	r1, r2, r3
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	f04f 0300 	mov.w	r3, #0
 8001e22:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d99b      	bls.n	8001d6a <CalibrateZero+0x2a>
	}
	for(uint8_t j = 0; j < CHANNELS;j++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	70fb      	strb	r3, [r7, #3]
 8001e36:	e00c      	b.n	8001e52 <CalibrateZero+0x112>
	{
		P[j] = 0;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <CalibrateZero+0x144>)
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	18d1      	adds	r1, r2, r3
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS;j++)
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	70fb      	strb	r3, [r7, #3]
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ef      	beq.n	8001e38 <CalibrateZero+0xf8>
	}
	printf("Calibration completed\n");
 8001e58:	480b      	ldr	r0, [pc, #44]	; (8001e88 <CalibrateZero+0x148>)
 8001e5a:	f004 fadd 	bl	8006418 <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e5e:	b662      	cpsie	i
}
 8001e60:	bf00      	nop
	__enable_irq();
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	080085b4 	.word	0x080085b4
 8001e70:	20000708 	.word	0x20000708
 8001e74:	20000720 	.word	0x20000720
 8001e78:	20000304 	.word	0x20000304
 8001e7c:	2000070c 	.word	0x2000070c
 8001e80:	20000710 	.word	0x20000710
 8001e84:	20000728 	.word	0x20000728
 8001e88:	080085cc 	.word	0x080085cc

08001e8c <takeData>:

void takeData(uint32_t* buffer)
{
 8001e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e90:	b091      	sub	sp, #68	; 0x44
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6378      	str	r0, [r7, #52]	; 0x34
	if(oversamplingIndex == OVERSAMPLING)
 8001e96:	4bae      	ldr	r3, [pc, #696]	; (8002150 <takeData+0x2c4>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	f040 8154 	bne.w	8002148 <takeData+0x2bc>
	{
		oversamplingIndex = 0;
 8001ea0:	4aab      	ldr	r2, [pc, #684]	; (8002150 <takeData+0x2c4>)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	7013      	strb	r3, [r2, #0]
		time[indexCircBuffer] = getCurrentMicros();
 8001ea6:	4bab      	ldr	r3, [pc, #684]	; (8002154 <takeData+0x2c8>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	461c      	mov	r4, r3
 8001eac:	f000 fbd2 	bl	8002654 <getCurrentMicros>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	4ba9      	ldr	r3, [pc, #676]	; (8002158 <takeData+0x2cc>)
 8001eb4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001ebe:	e02e      	b.n	8001f1e <takeData+0x92>
		{
			RMS[i] += data[indexCircBuffer][i]*data[indexCircBuffer][i];
 8001ec0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001ec4:	4aa5      	ldr	r2, [pc, #660]	; (800215c <takeData+0x2d0>)
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001ece:	4ba1      	ldr	r3, [pc, #644]	; (8002154 <takeData+0x2c8>)
 8001ed0:	881b      	ldrh	r3, [r3, #0]
 8001ed2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001ed6:	49a2      	ldr	r1, [pc, #648]	; (8002160 <takeData+0x2d4>)
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4b9c      	ldr	r3, [pc, #624]	; (8002154 <takeData+0x2c8>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001eea:	499d      	ldr	r1, [pc, #628]	; (8002160 <takeData+0x2d4>)
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	4413      	add	r3, r2
 8001ef0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001ef4:	fb00 f303 	mul.w	r3, r0, r3
 8001ef8:	17da      	asrs	r2, r3, #31
 8001efa:	4698      	mov	r8, r3
 8001efc:	4691      	mov	r9, r2
 8001efe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f02:	eb14 0a08 	adds.w	sl, r4, r8
 8001f06:	eb45 0b09 	adc.w	fp, r5, r9
 8001f0a:	4a94      	ldr	r2, [pc, #592]	; (800215c <takeData+0x2d0>)
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	e9c3 ab00 	strd	sl, fp, [r3]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001f14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f18:	3301      	adds	r3, #1
 8001f1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001f1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d9cc      	bls.n	8001ec0 <takeData+0x34>
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001f2c:	e03a      	b.n	8001fa4 <takeData+0x118>
		{
			P[i] += data[indexCircBuffer][2*i]*data[indexCircBuffer][2*i+1];
 8001f2e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001f32:	4a8c      	ldr	r2, [pc, #560]	; (8002164 <takeData+0x2d8>)
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f3c:	4b85      	ldr	r3, [pc, #532]	; (8002154 <takeData+0x2c8>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001f46:	005a      	lsls	r2, r3, #1
 8001f48:	4985      	ldr	r1, [pc, #532]	; (8002160 <takeData+0x2d4>)
 8001f4a:	0043      	lsls	r3, r0, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001f52:	461e      	mov	r6, r3
 8001f54:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <takeData+0x2c8>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	497f      	ldr	r1, [pc, #508]	; (8002160 <takeData+0x2d4>)
 8001f64:	0043      	lsls	r3, r0, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001f6c:	fb06 f303 	mul.w	r3, r6, r3
 8001f70:	17da      	asrs	r2, r3, #31
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f76:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001f7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f7e:	4602      	mov	r2, r0
 8001f80:	18a2      	adds	r2, r4, r2
 8001f82:	623a      	str	r2, [r7, #32]
 8001f84:	460a      	mov	r2, r1
 8001f86:	eb45 0202 	adc.w	r2, r5, r2
 8001f8a:	627a      	str	r2, [r7, #36]	; 0x24
 8001f8c:	4a75      	ldr	r2, [pc, #468]	; (8002164 <takeData+0x2d8>)
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001f96:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 8001f9a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001fa4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0c0      	beq.n	8001f2e <takeData+0xa2>
		}
		indexCircBuffer++;
 8001fac:	4b69      	ldr	r3, [pc, #420]	; (8002154 <takeData+0x2c8>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	4b67      	ldr	r3, [pc, #412]	; (8002154 <takeData+0x2c8>)
 8001fb6:	801a      	strh	r2, [r3, #0]
		if(indexCircBuffer == BUFFERSIZE)
 8001fb8:	4b66      	ldr	r3, [pc, #408]	; (8002154 <takeData+0x2c8>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d102      	bne.n	8001fc6 <takeData+0x13a>
		{
			indexCircBuffer = 0;
 8001fc0:	4b64      	ldr	r3, [pc, #400]	; (8002154 <takeData+0x2c8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	801a      	strh	r2, [r3, #0]
			//	calibCounter = 0;
			//	CalibrateZero();
			//}
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001fcc:	e044      	b.n	8002058 <takeData+0x1cc>
		{
			P[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i]*data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i+1];
 8001fce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001fd2:	4a64      	ldr	r2, [pc, #400]	; (8002164 <takeData+0x2d8>)
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	495d      	ldr	r1, [pc, #372]	; (8002154 <takeData+0x2c8>)
 8001fde:	8809      	ldrh	r1, [r1, #0]
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4961      	ldr	r1, [pc, #388]	; (8002168 <takeData+0x2dc>)
 8001fe4:	7809      	ldrb	r1, [r1, #0]
 8001fe6:	4401      	add	r1, r0
 8001fe8:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8001fec:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
 8001ff0:	0049      	lsls	r1, r1, #1
 8001ff2:	4c5b      	ldr	r4, [pc, #364]	; (8002160 <takeData+0x2d4>)
 8001ff4:	0040      	lsls	r0, r0, #1
 8001ff6:	4401      	add	r1, r0
 8001ff8:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 8001ffc:	460e      	mov	r6, r1
 8001ffe:	4955      	ldr	r1, [pc, #340]	; (8002154 <takeData+0x2c8>)
 8002000:	8809      	ldrh	r1, [r1, #0]
 8002002:	4608      	mov	r0, r1
 8002004:	4958      	ldr	r1, [pc, #352]	; (8002168 <takeData+0x2dc>)
 8002006:	7809      	ldrb	r1, [r1, #0]
 8002008:	4401      	add	r1, r0
 800200a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 800200e:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
 8002012:	0049      	lsls	r1, r1, #1
 8002014:	1c4c      	adds	r4, r1, #1
 8002016:	4d52      	ldr	r5, [pc, #328]	; (8002160 <takeData+0x2d4>)
 8002018:	0041      	lsls	r1, r0, #1
 800201a:	4421      	add	r1, r4
 800201c:	f935 1011 	ldrsh.w	r1, [r5, r1, lsl #1]
 8002020:	fb06 f101 	mul.w	r1, r6, r1
 8002024:	17c8      	asrs	r0, r1, #31
 8002026:	61b9      	str	r1, [r7, #24]
 8002028:	61f8      	str	r0, [r7, #28]
 800202a:	f897 103d 	ldrb.w	r1, [r7, #61]	; 0x3d
 800202e:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002032:	4620      	mov	r0, r4
 8002034:	1a10      	subs	r0, r2, r0
 8002036:	6138      	str	r0, [r7, #16]
 8002038:	4628      	mov	r0, r5
 800203a:	eb63 0300 	sbc.w	r3, r3, r0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	4a48      	ldr	r2, [pc, #288]	; (8002164 <takeData+0x2d8>)
 8002042:	00cb      	lsls	r3, r1, #3
 8002044:	4413      	add	r3, r2
 8002046:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800204a:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 800204e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002052:	3301      	adds	r3, #1
 8002054:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002058:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0b6      	beq.n	8001fce <takeData+0x142>
		}
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8002060:	2300      	movs	r3, #0
 8002062:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002066:	e06b      	b.n	8002140 <takeData+0x2b4>
		{
			RMS[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][i]*data[(indexCircBuffer+ correctionRMS)% BUFFERSIZE][i];
 8002068:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800206c:	4a3b      	ldr	r2, [pc, #236]	; (800215c <takeData+0x2d0>)
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	4937      	ldr	r1, [pc, #220]	; (8002154 <takeData+0x2c8>)
 8002078:	8809      	ldrh	r1, [r1, #0]
 800207a:	4608      	mov	r0, r1
 800207c:	493a      	ldr	r1, [pc, #232]	; (8002168 <takeData+0x2dc>)
 800207e:	7809      	ldrb	r1, [r1, #0]
 8002080:	4401      	add	r1, r0
 8002082:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 8002086:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 800208a:	4c35      	ldr	r4, [pc, #212]	; (8002160 <takeData+0x2d4>)
 800208c:	0040      	lsls	r0, r0, #1
 800208e:	4401      	add	r1, r0
 8002090:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 8002094:	460d      	mov	r5, r1
 8002096:	492f      	ldr	r1, [pc, #188]	; (8002154 <takeData+0x2c8>)
 8002098:	8809      	ldrh	r1, [r1, #0]
 800209a:	4608      	mov	r0, r1
 800209c:	4932      	ldr	r1, [pc, #200]	; (8002168 <takeData+0x2dc>)
 800209e:	7809      	ldrb	r1, [r1, #0]
 80020a0:	4401      	add	r1, r0
 80020a2:	f001 007f 	and.w	r0, r1, #127	; 0x7f
 80020a6:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 80020aa:	4c2d      	ldr	r4, [pc, #180]	; (8002160 <takeData+0x2d4>)
 80020ac:	0040      	lsls	r0, r0, #1
 80020ae:	4401      	add	r1, r0
 80020b0:	f934 1011 	ldrsh.w	r1, [r4, r1, lsl #1]
 80020b4:	fb05 f101 	mul.w	r1, r5, r1
 80020b8:	17c8      	asrs	r0, r1, #31
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	f897 103c 	ldrb.w	r1, [r7, #60]	; 0x3c
 80020c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020c6:	4620      	mov	r0, r4
 80020c8:	1a10      	subs	r0, r2, r0
 80020ca:	6038      	str	r0, [r7, #0]
 80020cc:	4628      	mov	r0, r5
 80020ce:	eb63 0300 	sbc.w	r3, r3, r0
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <takeData+0x2d0>)
 80020d6:	00cb      	lsls	r3, r1, #3
 80020d8:	4413      	add	r3, r2
 80020da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80020de:	e9c3 1200 	strd	r1, r2, [r3]
			setSign(i,indexCircBuffer, (data[indexCircBuffer][i]> 0) ? 1: 0);
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <takeData+0x2c8>)
 80020e4:	8819      	ldrh	r1, [r3, #0]
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <takeData+0x2c8>)
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80020f0:	481b      	ldr	r0, [pc, #108]	; (8002160 <takeData+0x2d4>)
 80020f2:	0052      	lsls	r2, r2, #1
 80020f4:	4413      	add	r3, r2
 80020f6:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bfcc      	ite	gt
 80020fe:	2301      	movgt	r3, #1
 8002100:	2300      	movle	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f892 	bl	8002234 <setSign>
			data[indexCircBuffer][i] = -calibZeros[i];
 8002110:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002114:	4a15      	ldr	r2, [pc, #84]	; (800216c <takeData+0x2e0>)
 8002116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800211a:	425b      	negs	r3, r3
 800211c:	b299      	uxth	r1, r3
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <takeData+0x2c8>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002128:	b208      	sxth	r0, r1
 800212a:	490d      	ldr	r1, [pc, #52]	; (8002160 <takeData+0x2d4>)
 800212c:	0052      	lsls	r2, r2, #1
 800212e:	4413      	add	r3, r2
 8002130:	4602      	mov	r2, r0
 8002132:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8002136:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800213a:	3301      	adds	r3, #1
 800213c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002140:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002144:	2b01      	cmp	r3, #1
 8002146:	d98f      	bls.n	8002068 <takeData+0x1dc>
		}


	}
	for(uint8_t i = 0; i < CHANNELS;i++)
 8002148:	2300      	movs	r3, #0
 800214a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800214e:	e05b      	b.n	8002208 <takeData+0x37c>
 8002150:	2000070a 	.word	0x2000070a
 8002154:	20000708 	.word	0x20000708
 8002158:	20000504 	.word	0x20000504
 800215c:	20000710 	.word	0x20000710
 8002160:	20000304 	.word	0x20000304
 8002164:	20000728 	.word	0x20000728
 8002168:	20000720 	.word	0x20000720
 800216c:	2000070c 	.word	0x2000070c
	{
		data[indexCircBuffer][2*i] += (uint16_t) buffer[i];
 8002170:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <takeData+0x39c>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	492b      	ldr	r1, [pc, #172]	; (800222c <takeData+0x3a0>)
 800217e:	0052      	lsls	r2, r2, #1
 8002180:	4413      	add	r3, r2
 8002182:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002186:	b29a      	uxth	r2, r3
 8002188:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002190:	440b      	add	r3, r1
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4413      	add	r3, r2
 8002198:	b299      	uxth	r1, r3
 800219a:	4b23      	ldr	r3, [pc, #140]	; (8002228 <takeData+0x39c>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	b208      	sxth	r0, r1
 80021a8:	4920      	ldr	r1, [pc, #128]	; (800222c <takeData+0x3a0>)
 80021aa:	0052      	lsls	r2, r2, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	4602      	mov	r2, r0
 80021b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		data[indexCircBuffer][2*i+1] += (uint16_t) (buffer[i] >> 16);
 80021b4:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <takeData+0x39c>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	3301      	adds	r3, #1
 80021c2:	491a      	ldr	r1, [pc, #104]	; (800222c <takeData+0x3a0>)
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	4413      	add	r3, r2
 80021c8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021d6:	440b      	add	r3, r1
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4413      	add	r3, r2
 80021e0:	b299      	uxth	r1, r3
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <takeData+0x39c>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	3301      	adds	r3, #1
 80021f0:	b208      	sxth	r0, r1
 80021f2:	490e      	ldr	r1, [pc, #56]	; (800222c <takeData+0x3a0>)
 80021f4:	0052      	lsls	r2, r2, #1
 80021f6:	4413      	add	r3, r2
 80021f8:	4602      	mov	r2, r0
 80021fa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t i = 0; i < CHANNELS;i++)
 80021fe:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002202:	3301      	adds	r3, #1
 8002204:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002208:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0af      	beq.n	8002170 <takeData+0x2e4>
	}
	oversamplingIndex++;
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <takeData+0x3a4>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <takeData+0x3a4>)
 800221a:	701a      	strb	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3744      	adds	r7, #68	; 0x44
 8002220:	46bd      	mov	sp, r7
 8002222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002226:	bf00      	nop
 8002228:	20000708 	.word	0x20000708
 800222c:	20000304 	.word	0x20000304
 8002230:	2000070a 	.word	0x2000070a

08002234 <setSign>:

void setSign(uint8_t channel, uint16_t index,uint8_t value)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	460b      	mov	r3, r1
 8002240:	80bb      	strh	r3, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	71bb      	strb	r3, [r7, #6]
	if(disableSetting != 0) return;
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <setSign+0xa4>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d13e      	bne.n	80022cc <setSign+0x98>
	if(value == 1)
 800224e:	79bb      	ldrb	r3, [r7, #6]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d11c      	bne.n	800228e <setSign+0x5a>
	{
		sign[channel][index/8] |= (1 << (index % 8));
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	88ba      	ldrh	r2, [r7, #4]
 8002258:	08d2      	lsrs	r2, r2, #3
 800225a:	b290      	uxth	r0, r2
 800225c:	4601      	mov	r1, r0
 800225e:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <setSign+0xa8>)
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	440b      	add	r3, r1
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b25a      	sxtb	r2, r3
 800226a:	88bb      	ldrh	r3, [r7, #4]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	2101      	movs	r1, #1
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	b25b      	sxtb	r3, r3
 8002278:	4313      	orrs	r3, r2
 800227a:	b25a      	sxtb	r2, r3
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	b2d1      	uxtb	r1, r2
 8002280:	4a16      	ldr	r2, [pc, #88]	; (80022dc <setSign+0xa8>)
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4413      	add	r3, r2
 8002286:	4403      	add	r3, r0
 8002288:	460a      	mov	r2, r1
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	e01f      	b.n	80022ce <setSign+0x9a>
	}
	else
	{
		sign[channel][index/8] &= ~(1 << (index % 8));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	88ba      	ldrh	r2, [r7, #4]
 8002292:	08d2      	lsrs	r2, r2, #3
 8002294:	b290      	uxth	r0, r2
 8002296:	4601      	mov	r1, r0
 8002298:	4a10      	ldr	r2, [pc, #64]	; (80022dc <setSign+0xa8>)
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	4413      	add	r3, r2
 800229e:	440b      	add	r3, r1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	b25a      	sxtb	r2, r3
 80022a4:	88bb      	ldrh	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	4013      	ands	r3, r2
 80022b8:	b25a      	sxtb	r2, r3
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	b2d1      	uxtb	r1, r2
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <setSign+0xa8>)
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	4413      	add	r3, r2
 80022c4:	4403      	add	r3, r0
 80022c6:	460a      	mov	r2, r1
 80022c8:	701a      	strb	r2, [r3, #0]
 80022ca:	e000      	b.n	80022ce <setSign+0x9a>
	if(disableSetting != 0) return;
 80022cc:	bf00      	nop
	}
}
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000750 	.word	0x20000750
 80022dc:	20000730 	.word	0x20000730

080022e0 <calcXOR>:

float calcXOR(uint8_t channel)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
	disableSetting = 1;
 80022ea:	4b2f      	ldr	r3, [pc, #188]	; (80023a8 <calcXOR+0xc8>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
	uint16_t count = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	82fb      	strh	r3, [r7, #22]
	uint16_t counter = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = 0; i < (BUFFERSIZE)/8; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	74fb      	strb	r3, [r7, #19]
 80022fc:	e02e      	b.n	800235c <calcXOR+0x7c>
	{
		uint8_t xor = (sign[channel*2][i]) ^ (sign[channel*2 + 1][i]);
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	005a      	lsls	r2, r3, #1
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	4929      	ldr	r1, [pc, #164]	; (80023ac <calcXOR+0xcc>)
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	440a      	add	r2, r1
 800230a:	4413      	add	r3, r2
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	1c59      	adds	r1, r3, #1
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	4825      	ldr	r0, [pc, #148]	; (80023ac <calcXOR+0xcc>)
 8002318:	0109      	lsls	r1, r1, #4
 800231a:	4401      	add	r1, r0
 800231c:	440b      	add	r3, r1
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4053      	eors	r3, r2
 8002322:	74bb      	strb	r3, [r7, #18]
		while (xor > 0)
 8002324:	e014      	b.n	8002350 <calcXOR+0x70>
		{
			if(counter < BUFFERSIZE - correctionRMS)
 8002326:	8aba      	ldrh	r2, [r7, #20]
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <calcXOR+0xd0>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002330:	429a      	cmp	r2, r3
 8002332:	da07      	bge.n	8002344 <calcXOR+0x64>
			{
				count += xor & 1;
 8002334:	7cbb      	ldrb	r3, [r7, #18]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	8afb      	ldrh	r3, [r7, #22]
 8002340:	4413      	add	r3, r2
 8002342:	82fb      	strh	r3, [r7, #22]
			}
			xor >>= 1;
 8002344:	7cbb      	ldrb	r3, [r7, #18]
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	74bb      	strb	r3, [r7, #18]
			counter++;
 800234a:	8abb      	ldrh	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	82bb      	strh	r3, [r7, #20]
		while (xor > 0)
 8002350:	7cbb      	ldrb	r3, [r7, #18]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e7      	bne.n	8002326 <calcXOR+0x46>
	for(uint8_t i = 0; i < (BUFFERSIZE)/8; i++)
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	3301      	adds	r3, #1
 800235a:	74fb      	strb	r3, [r7, #19]
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	2b0f      	cmp	r3, #15
 8002360:	d9cd      	bls.n	80022fe <calcXOR+0x1e>
		}
	}


	float angle = count;
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fc95 	bl	8000c94 <__aeabi_ui2f>
 800236a:	4603      	mov	r3, r0
 800236c:	60fb      	str	r3, [r7, #12]
	angle /= (BUFFERSIZE-correctionRMS);
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <calcXOR+0xd0>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002376:	4618      	mov	r0, r3
 8002378:	f7fe fc90 	bl	8000c9c <__aeabi_i2f>
 800237c:	4603      	mov	r3, r0
 800237e:	4619      	mov	r1, r3
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7fe fd93 	bl	8000eac <__aeabi_fdiv>
 8002386:	4603      	mov	r3, r0
 8002388:	60fb      	str	r3, [r7, #12]
	//angle = 1 - angle;
	angle *= 180.0f;
 800238a:	490a      	ldr	r1, [pc, #40]	; (80023b4 <calcXOR+0xd4>)
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7fe fcd9 	bl	8000d44 <__aeabi_fmul>
 8002392:	4603      	mov	r3, r0
 8002394:	60fb      	str	r3, [r7, #12]
	disableSetting = 0;
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <calcXOR+0xc8>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
	return angle;
 800239c:	68fb      	ldr	r3, [r7, #12]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000750 	.word	0x20000750
 80023ac:	20000730 	.word	0x20000730
 80023b0:	20000720 	.word	0x20000720
 80023b4:	43340000 	.word	0x43340000

080023b8 <getADC_Buffer>:

uint32_t* getADC_Buffer()
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
	return ADC_Buffer;
 80023bc:	4b02      	ldr	r3, [pc, #8]	; (80023c8 <getADC_Buffer+0x10>)
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	200002fc 	.word	0x200002fc

080023cc <gethalfOfADC_Buffer>:

uint32_t* gethalfOfADC_Buffer()
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
	return halfOfADC_Buffer;
 80023d0:	4b02      	ldr	r3, [pc, #8]	; (80023dc <gethalfOfADC_Buffer+0x10>)
 80023d2:	681b      	ldr	r3, [r3, #0]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	20000004 	.word	0x20000004

080023e0 <getV>:

float getV(uint8_t channel)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
	return sqrt(((float)RMS[2*channel+1])/(BUFFERSIZE - correctionRMS)) / (VOLTAGESCALE * OVERSAMPLING);
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	3301      	adds	r3, #1
 80023f0:	4a19      	ldr	r2, [pc, #100]	; (8002458 <getV+0x78>)
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fc5b 	bl	8000cb8 <__aeabi_ul2f>
 8002402:	4604      	mov	r4, r0
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <getV+0x7c>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fc45 	bl	8000c9c <__aeabi_i2f>
 8002412:	4603      	mov	r3, r0
 8002414:	4619      	mov	r1, r3
 8002416:	4620      	mov	r0, r4
 8002418:	f7fe fd48 	bl	8000eac <__aeabi_fdiv>
 800241c:	4603      	mov	r3, r0
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe f802 	bl	8000428 <__aeabi_f2d>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	f005 ffc2 	bl	80083b4 <sqrt>
 8002430:	a307      	add	r3, pc, #28	; (adr r3, 8002450 <getV+0x70>)
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	f7fe f979 	bl	800072c <__aeabi_ddiv>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f7fe fb21 	bl	8000a88 <__aeabi_d2f>
 8002446:	4603      	mov	r3, r0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bd90      	pop	{r4, r7, pc}
 8002450:	f0068db9 	.word	0xf0068db9
 8002454:	40428816 	.word	0x40428816
 8002458:	20000710 	.word	0x20000710
 800245c:	20000720 	.word	0x20000720

08002460 <getI>:

float getI(uint8_t channel)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	return sqrt(((float)RMS[2*channel])/(BUFFERSIZE - correctionRMS)) / (CURRENTSCALE * OVERSAMPLING);
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <getI+0x78>)
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fc1c 	bl	8000cb8 <__aeabi_ul2f>
 8002480:	4604      	mov	r4, r0
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <getI+0x7c>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fc06 	bl	8000c9c <__aeabi_i2f>
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	4620      	mov	r0, r4
 8002496:	f7fe fd09 	bl	8000eac <__aeabi_fdiv>
 800249a:	4603      	mov	r3, r0
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd ffc3 	bl	8000428 <__aeabi_f2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4610      	mov	r0, r2
 80024a8:	4619      	mov	r1, r3
 80024aa:	f005 ff83 	bl	80083b4 <sqrt>
 80024ae:	a308      	add	r3, pc, #32	; (adr r3, 80024d0 <getI+0x70>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f93a 	bl	800072c <__aeabi_ddiv>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f7fe fae2 	bl	8000a88 <__aeabi_d2f>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd90      	pop	{r4, r7, pc}
 80024ce:	bf00      	nop
 80024d0:	60418937 	.word	0x60418937
 80024d4:	407b60e5 	.word	0x407b60e5
 80024d8:	20000710 	.word	0x20000710
 80024dc:	20000720 	.word	0x20000720

080024e0 <getP>:

float getP(uint8_t channel)
{
 80024e0:	b5b0      	push	{r4, r5, r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	71fb      	strb	r3, [r7, #7]
	return P[channel] /(BUFFERSIZE - correctionRMS)/ (VOLTAGESCALE *CURRENTSCALE * OVERSAMPLING * OVERSAMPLING);
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <getP+0x60>)
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <getP+0x64>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80024fe:	17da      	asrs	r2, r3, #31
 8002500:	461c      	mov	r4, r3
 8002502:	4615      	mov	r5, r2
 8002504:	4622      	mov	r2, r4
 8002506:	462b      	mov	r3, r5
 8002508:	f7fe fd92 	bl	8001030 <__aeabi_ldivmod>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fd ffb2 	bl	800047c <__aeabi_l2d>
 8002518:	a307      	add	r3, pc, #28	; (adr r3, 8002538 <getP+0x58>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe f905 	bl	800072c <__aeabi_ddiv>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7fe faad 	bl	8000a88 <__aeabi_d2f>
 800252e:	4603      	mov	r3, r0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bdb0      	pop	{r4, r5, r7, pc}
 8002538:	e9eff343 	.word	0xe9eff343
 800253c:	40cfb5e0 	.word	0x40cfb5e0
 8002540:	20000728 	.word	0x20000728
 8002544:	20000720 	.word	0x20000720

08002548 <getParams>:
	float S = getS(channel);
	return sqrt(S*S-P*P);
}

void getParams(Params* p, uint8_t channel)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	70fb      	strb	r3, [r7, #3]

	p->V = getV(channel);
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff42 	bl	80023e0 <getV>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	601a      	str	r2, [r3, #0]
	p->I = getI(channel);
 8002562:	78fb      	ldrb	r3, [r7, #3]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff7b 	bl	8002460 <getI>
 800256a:	4602      	mov	r2, r0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	605a      	str	r2, [r3, #4]
	p->P = getP(channel);
 8002570:	78fb      	ldrb	r3, [r7, #3]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ffb4 	bl	80024e0 <getP>
 8002578:	4602      	mov	r2, r0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	609a      	str	r2, [r3, #8]
	p->S = p->V*p->I;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f7fe fbdb 	bl	8000d44 <__aeabi_fmul>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60da      	str	r2, [r3, #12]
	p->Q = sqrt(p->S*p->S-p->P*p->P);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4619      	mov	r1, r3
 80025a0:	4610      	mov	r0, r2
 80025a2:	f7fe fbcf 	bl	8000d44 <__aeabi_fmul>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461c      	mov	r4, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	4619      	mov	r1, r3
 80025b4:	4610      	mov	r0, r2
 80025b6:	f7fe fbc5 	bl	8000d44 <__aeabi_fmul>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	4620      	mov	r0, r4
 80025c0:	f7fe fab6 	bl	8000b30 <__aeabi_fsub>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd ff2e 	bl	8000428 <__aeabi_f2d>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f005 feee 	bl	80083b4 <sqrt>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe fa52 	bl	8000a88 <__aeabi_d2f>
 80025e4:	4602      	mov	r2, r0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	611a      	str	r2, [r3, #16]
	p->fi = calcXOR(channel);
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe77 	bl	80022e0 <calcXOR>
 80025f2:	4602      	mov	r2, r0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	615a      	str	r2, [r3, #20]
	return;
 80025f8:	bf00      	nop
}
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd90      	pop	{r4, r7, pc}

08002600 <LL_SYSTICK_IsActiveCounterFlag>:
#include "stm32f1xx_hal.h"

int __io_putchar(int ch);

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	e000e010 	.word	0xe000e010

08002624 <__io_putchar>:
 */
#include "smart_common.h"
#include "usart.h"

int __io_putchar(int ch)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b0a      	cmp	r3, #10
 8002630:	d102      	bne.n	8002638 <__io_putchar+0x14>
    __io_putchar('\r');
 8002632:	200d      	movs	r0, #13
 8002634:	f7ff fff6 	bl	8002624 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002638:	1d39      	adds	r1, r7, #4
 800263a:	f04f 33ff 	mov.w	r3, #4294967295
 800263e:	2201      	movs	r2, #1
 8002640:	4803      	ldr	r0, [pc, #12]	; (8002650 <__io_putchar+0x2c>)
 8002642:	f002 ff82 	bl	800554a <HAL_UART_Transmit>
  return 1;
 8002646:	2301      	movs	r3, #1
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000758 	.word	0x20000758

08002654 <getCurrentMicros>:

uint32_t getCurrentMicros(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 800265a:	f7ff ffd1 	bl	8002600 <LL_SYSTICK_IsActiveCounterFlag>
  uint32_t m = HAL_GetTick();
 800265e:	f000 fa51 	bl	8002b04 <HAL_GetTick>
 8002662:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <getCurrentMicros+0x60>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	3301      	adds	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <getCurrentMicros+0x60>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 8002676:	f7ff ffc3 	bl	8002600 <LL_SYSTICK_IsActiveCounterFlag>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <getCurrentMicros+0x3c>
    m = HAL_GetTick();
 8002680:	f000 fa40 	bl	8002b04 <HAL_GetTick>
 8002684:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <getCurrentMicros+0x60>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002696:	fb03 f202 	mul.w	r2, r3, r2
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026a0:	fb03 f101 	mul.w	r1, r3, r1
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026aa:	4413      	add	r3, r2
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_MspInit+0x5c>)
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	4a14      	ldr	r2, [pc, #80]	; (8002714 <HAL_MspInit+0x5c>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6193      	str	r3, [r2, #24]
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_MspInit+0x5c>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <HAL_MspInit+0x5c>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <HAL_MspInit+0x5c>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e0:	61d3      	str	r3, [r2, #28]
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <HAL_MspInit+0x5c>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_MspInit+0x60>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_MspInit+0x60>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	40021000 	.word	0x40021000
 8002718:	40010000 	.word	0x40010000

0800271c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002720:	e7fe      	b.n	8002720 <NMI_Handler+0x4>

08002722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002726:	e7fe      	b.n	8002726 <HardFault_Handler+0x4>

08002728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800272c:	e7fe      	b.n	800272c <MemManage_Handler+0x4>

0800272e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272e:	b480      	push	{r7}
 8002730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002732:	e7fe      	b.n	8002732 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	e7fe      	b.n	8002738 <UsageFault_Handler+0x4>

0800273a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273a:	b480      	push	{r7}
 800273c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	46bd      	mov	sp, r7
 8002742:	bc80      	pop	{r7}
 8002744:	4770      	bx	lr

08002746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002752:	b480      	push	{r7}
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002762:	f000 f9bd 	bl	8002ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002770:	4802      	ldr	r0, [pc, #8]	; (800277c <DMA1_Channel1_IRQHandler+0x10>)
 8002772:	f001 f9d1 	bl	8003b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000264 	.word	0x20000264

08002780 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002784:	4803      	ldr	r0, [pc, #12]	; (8002794 <ADC1_2_IRQHandler+0x14>)
 8002786:	f000 fb71 	bl	8002e6c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800278a:	4803      	ldr	r0, [pc, #12]	; (8002798 <ADC1_2_IRQHandler+0x18>)
 800278c:	f000 fb6e 	bl	8002e6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000204 	.word	0x20000204
 8002798:	20000234 	.word	0x20000234

0800279c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027a0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80027a4:	f001 fc88 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
	return 1;
 80027b0:	2301      	movs	r3, #1
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <_kill>:

int _kill(int pid, int sig)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
 80027c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027c4:	f003 f82c 	bl	8005820 <__errno>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2216      	movs	r2, #22
 80027cc:	601a      	str	r2, [r3, #0]
	return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_exit>:

void _exit (int status)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027e2:	f04f 31ff 	mov.w	r1, #4294967295
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffe7 	bl	80027ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80027ec:	e7fe      	b.n	80027ec <_exit+0x12>

080027ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e00a      	b.n	8002816 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002800:	f3af 8000 	nop.w
 8002804:	4601      	mov	r1, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	60ba      	str	r2, [r7, #8]
 800280c:	b2ca      	uxtb	r2, r1
 800280e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3301      	adds	r3, #1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	429a      	cmp	r2, r3
 800281c:	dbf0      	blt.n	8002800 <_read+0x12>
	}

return len;
 800281e:	687b      	ldr	r3, [r7, #4]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	e009      	b.n	800284e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	60ba      	str	r2, [r7, #8]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff feee 	bl	8002624 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	dbf1      	blt.n	800283a <_write+0x12>
	}
	return len;
 8002856:	687b      	ldr	r3, [r7, #4]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_close>:

int _close(int file)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	return -1;
 8002868:	f04f 33ff 	mov.w	r3, #4294967295
}
 800286c:	4618      	mov	r0, r3
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr

08002876 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002886:	605a      	str	r2, [r3, #4]
	return 0;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <_isatty>:

int _isatty(int file)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	return 1;
 800289c:	2301      	movs	r3, #1
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
	return 0;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <_sbrk+0x5c>)
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <_sbrk+0x60>)
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d4:	4b13      	ldr	r3, [pc, #76]	; (8002924 <_sbrk+0x64>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <_sbrk+0x64>)
 80028de:	4a12      	ldr	r2, [pc, #72]	; (8002928 <_sbrk+0x68>)
 80028e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028e2:	4b10      	ldr	r3, [pc, #64]	; (8002924 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d207      	bcs.n	8002900 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f0:	f002 ff96 	bl	8005820 <__errno>
 80028f4:	4603      	mov	r3, r0
 80028f6:	220c      	movs	r2, #12
 80028f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	e009      	b.n	8002914 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <_sbrk+0x64>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002906:	4b07      	ldr	r3, [pc, #28]	; (8002924 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	4a05      	ldr	r2, [pc, #20]	; (8002924 <_sbrk+0x64>)
 8002910:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002912:	68fb      	ldr	r3, [r7, #12]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20005000 	.word	0x20005000
 8002920:	00000400 	.word	0x00000400
 8002924:	20000754 	.word	0x20000754
 8002928:	200007b0 	.word	0x200007b0

0800292c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002930:	bf00      	nop
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800293c:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 800293e:	4a12      	ldr	r2, [pc, #72]	; (8002988 <MX_USART2_UART_Init+0x50>)
 8002940:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002948:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002952:	2200      	movs	r2, #0
 8002954:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002956:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002958:	2200      	movs	r2, #0
 800295a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 800295e:	220c      	movs	r2, #12
 8002960:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800296e:	4805      	ldr	r0, [pc, #20]	; (8002984 <MX_USART2_UART_Init+0x4c>)
 8002970:	f002 fd9e 	bl	80054b0 <HAL_UART_Init>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800297a:	f7ff f96a 	bl	8001c52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800297e:	bf00      	nop
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000758 	.word	0x20000758
 8002988:	40004400 	.word	0x40004400

0800298c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b088      	sub	sp, #32
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a15      	ldr	r2, [pc, #84]	; (80029fc <HAL_UART_MspInit+0x70>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d123      	bne.n	80029f4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_UART_MspInit+0x74>)
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <HAL_UART_MspInit+0x74>)
 80029b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b6:	61d3      	str	r3, [r2, #28]
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_UART_MspInit+0x74>)
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_UART_MspInit+0x74>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <HAL_UART_MspInit+0x74>)
 80029ca:	f043 0304 	orr.w	r3, r3, #4
 80029ce:	6193      	str	r3, [r2, #24]
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_UART_MspInit+0x74>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029dc:	230c      	movs	r3, #12
 80029de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2302      	movs	r3, #2
 80029e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	4619      	mov	r1, r3
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <HAL_UART_MspInit+0x78>)
 80029f0:	f001 f9c6 	bl	8003d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029f4:	bf00      	nop
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40004400 	.word	0x40004400
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010800 	.word	0x40010800

08002a08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a08:	480c      	ldr	r0, [pc, #48]	; (8002a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a0a:	490d      	ldr	r1, [pc, #52]	; (8002a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0a      	ldr	r2, [pc, #40]	; (8002a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a20:	4c0a      	ldr	r4, [pc, #40]	; (8002a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a2e:	f7ff ff7d 	bl	800292c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a32:	f002 fefb 	bl	800582c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a36:	f7ff f831 	bl	8001a9c <main>
  bx lr
 8002a3a:	4770      	bx	lr
  ldr r0, =_sdata
 8002a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a40:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a44:	08008a04 	.word	0x08008a04
  ldr r2, =_sbss
 8002a48:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002a4c:	200007b0 	.word	0x200007b0

08002a50 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a50:	e7fe      	b.n	8002a50 <CAN1_RX1_IRQHandler>
	...

08002a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_Init+0x28>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a07      	ldr	r2, [pc, #28]	; (8002a7c <HAL_Init+0x28>)
 8002a5e:	f043 0310 	orr.w	r3, r3, #16
 8002a62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a64:	2003      	movs	r0, #3
 8002a66:	f000 ff5b 	bl	8003920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f000 f808 	bl	8002a80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a70:	f7ff fe22 	bl	80026b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40022000 	.word	0x40022000

08002a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <HAL_InitTick+0x54>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_InitTick+0x58>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f000 ff73 	bl	800398a <HAL_SYSTICK_Config>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e00e      	b.n	8002acc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d80a      	bhi.n	8002aca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8002abc:	f000 ff3b 	bl	8003936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ac0:	4a06      	ldr	r2, [pc, #24]	; (8002adc <HAL_InitTick+0x5c>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000008 	.word	0x20000008
 8002ad8:	20000010 	.word	0x20000010
 8002adc:	2000000c 	.word	0x2000000c

08002ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_IncTick+0x1c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	461a      	mov	r2, r3
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_IncTick+0x20>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4413      	add	r3, r2
 8002af0:	4a03      	ldr	r2, [pc, #12]	; (8002b00 <HAL_IncTick+0x20>)
 8002af2:	6013      	str	r3, [r2, #0]
}
 8002af4:	bf00      	nop
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	20000010 	.word	0x20000010
 8002b00:	2000079c 	.word	0x2000079c

08002b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return uwTick;
 8002b08:	4b02      	ldr	r3, [pc, #8]	; (8002b14 <HAL_GetTick+0x10>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	2000079c 	.word	0x2000079c

08002b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b20:	f7ff fff0 	bl	8002b04 <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d005      	beq.n	8002b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_Delay+0x44>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b3e:	bf00      	nop
 8002b40:	f7ff ffe0 	bl	8002b04 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d8f7      	bhi.n	8002b40 <HAL_Delay+0x28>
  {
  }
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000010 	.word	0x20000010

08002b60 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e0be      	b.n	8002d00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d109      	bne.n	8002ba4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fe fcca 	bl	8001538 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fb89 	bl	80032bc <ADC_ConversionStop_Disable>
 8002baa:	4603      	mov	r3, r0
 8002bac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	f003 0310 	and.w	r3, r3, #16
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 8099 	bne.w	8002cee <HAL_ADC_Init+0x18e>
 8002bbc:	7dfb      	ldrb	r3, [r7, #23]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f040 8095 	bne.w	8002cee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bcc:	f023 0302 	bic.w	r3, r3, #2
 8002bd0:	f043 0202 	orr.w	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002be0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7b1b      	ldrb	r3, [r3, #12]
 8002be6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002be8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf8:	d003      	beq.n	8002c02 <HAL_ADC_Init+0xa2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d102      	bne.n	8002c08 <HAL_ADC_Init+0xa8>
 8002c02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c06:	e000      	b.n	8002c0a <HAL_ADC_Init+0xaa>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7d1b      	ldrb	r3, [r3, #20]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d119      	bne.n	8002c4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	7b1b      	ldrb	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	035a      	lsls	r2, r3, #13
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	e00b      	b.n	8002c4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f043 0220 	orr.w	r2, r3, #32
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	4b28      	ldr	r3, [pc, #160]	; (8002d08 <HAL_ADC_Init+0x1a8>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	430b      	orrs	r3, r1
 8002c72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7c:	d003      	beq.n	8002c86 <HAL_ADC_Init+0x126>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d104      	bne.n	8002c90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	051b      	lsls	r3, r3, #20
 8002c8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_ADC_Init+0x1ac>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d10b      	bne.n	8002ccc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	f023 0303 	bic.w	r3, r3, #3
 8002cc2:	f043 0201 	orr.w	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cca:	e018      	b.n	8002cfe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd0:	f023 0312 	bic.w	r3, r3, #18
 8002cd4:	f043 0210 	orr.w	r2, r3, #16
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	f043 0201 	orr.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002cec:	e007      	b.n	8002cfe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	f043 0210 	orr.w	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	ffe1f7fd 	.word	0xffe1f7fd
 8002d0c:	ff1f0efe 	.word	0xff1f0efe

08002d10 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_ADC_Start+0x1a>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e098      	b.n	8002e5c <HAL_ADC_Start+0x14c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fa68 	bl	8003208 <ADC_Enable>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 8087 	bne.w	8002e52 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a41      	ldr	r2, [pc, #260]	; (8002e64 <HAL_ADC_Start+0x154>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d105      	bne.n	8002d6e <HAL_ADC_Start+0x5e>
 8002d62:	4b41      	ldr	r3, [pc, #260]	; (8002e68 <HAL_ADC_Start+0x158>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d115      	bne.n	8002d9a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d026      	beq.n	8002dd6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d98:	e01d      	b.n	8002dd6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <HAL_ADC_Start+0x158>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d004      	beq.n	8002dba <HAL_ADC_Start+0xaa>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <HAL_ADC_Start+0x154>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d10d      	bne.n	8002dd6 <HAL_ADC_Start+0xc6>
 8002dba:	4b2b      	ldr	r3, [pc, #172]	; (8002e68 <HAL_ADC_Start+0x158>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d007      	beq.n	8002dd6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d006      	beq.n	8002df0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	f023 0206 	bic.w	r2, r3, #6
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dee:	e002      	b.n	8002df6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f06f 0202 	mvn.w	r2, #2
 8002e06:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e12:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e16:	d113      	bne.n	8002e40 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e1c:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <HAL_ADC_Start+0x154>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d105      	bne.n	8002e2e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_ADC_Start+0x158>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	e00c      	b.n	8002e5a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40012800 	.word	0x40012800
 8002e68:	40012400 	.word	0x40012400

08002e6c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d140      	bne.n	8002f04 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d139      	bne.n	8002f04 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002eb2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002eb6:	d11d      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d119      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0220 	bic.w	r2, r2, #32
 8002ece:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d105      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7fe fc3c 	bl	8001772 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f06f 0212 	mvn.w	r2, #18
 8002f02:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0e:	2b80      	cmp	r3, #128	; 0x80
 8002f10:	d14f      	bne.n	8002fb2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d148      	bne.n	8002fb2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002f42:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002f46:	d012      	beq.n	8002f6e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d125      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002f60:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f64:	d11d      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d119      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f7c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9a:	f043 0201 	orr.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 fb94 	bl	80036d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 020c 	mvn.w	r2, #12
 8002fb0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fbc:	2b40      	cmp	r3, #64	; 0x40
 8002fbe:	d114      	bne.n	8002fea <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10d      	bne.n	8002fea <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f809 	bl	8002ff2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0201 	mvn.w	r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
	...

08003018 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x20>
 8003034:	2302      	movs	r3, #2
 8003036:	e0dc      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x1da>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b06      	cmp	r3, #6
 8003046:	d81c      	bhi.n	8003082 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	3b05      	subs	r3, #5
 800305a:	221f      	movs	r2, #31
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	43db      	mvns	r3, r3
 8003062:	4019      	ands	r1, r3
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	3b05      	subs	r3, #5
 8003074:	fa00 f203 	lsl.w	r2, r0, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	635a      	str	r2, [r3, #52]	; 0x34
 8003080:	e03c      	b.n	80030fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d81c      	bhi.n	80030c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	3b23      	subs	r3, #35	; 0x23
 800309c:	221f      	movs	r2, #31
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	4019      	ands	r1, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	3b23      	subs	r3, #35	; 0x23
 80030b6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	631a      	str	r2, [r3, #48]	; 0x30
 80030c2:	e01b      	b.n	80030fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	3b41      	subs	r3, #65	; 0x41
 80030d6:	221f      	movs	r2, #31
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	4019      	ands	r1, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	6818      	ldr	r0, [r3, #0]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	3b41      	subs	r3, #65	; 0x41
 80030f0:	fa00 f203 	lsl.w	r2, r0, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b09      	cmp	r3, #9
 8003102:	d91c      	bls.n	800313e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68d9      	ldr	r1, [r3, #12]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	3b1e      	subs	r3, #30
 8003116:	2207      	movs	r2, #7
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	4019      	ands	r1, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6898      	ldr	r0, [r3, #8]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	3b1e      	subs	r3, #30
 8003130:	fa00 f203 	lsl.w	r2, r0, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	430a      	orrs	r2, r1
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	e019      	b.n	8003172 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6919      	ldr	r1, [r3, #16]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	2207      	movs	r2, #7
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	4019      	ands	r1, r3
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6898      	ldr	r0, [r3, #8]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	4613      	mov	r3, r2
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	4413      	add	r3, r2
 8003166:	fa00 f203 	lsl.w	r2, r0, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b10      	cmp	r3, #16
 8003178:	d003      	beq.n	8003182 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800317e:	2b11      	cmp	r3, #17
 8003180:	d132      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a1d      	ldr	r2, [pc, #116]	; (80031fc <HAL_ADC_ConfigChannel+0x1e4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d125      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d126      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80031a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d11a      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031b2:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_ADC_ConfigChannel+0x1e8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <HAL_ADC_ConfigChannel+0x1ec>)
 80031b8:	fba2 2303 	umull	r2, r3, r2, r3
 80031bc:	0c9a      	lsrs	r2, r3, #18
 80031be:	4613      	mov	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031c8:	e002      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f9      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x1b2>
 80031d6:	e007      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40012400 	.word	0x40012400
 8003200:	20000008 	.word	0x20000008
 8003204:	431bde83 	.word	0x431bde83

08003208 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d040      	beq.n	80032a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003236:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <ADC_Enable+0xac>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <ADC_Enable+0xb0>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	0c9b      	lsrs	r3, r3, #18
 8003242:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003244:	e002      	b.n	800324c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3b01      	subs	r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f9      	bne.n	8003246 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003252:	f7ff fc57 	bl	8002b04 <HAL_GetTick>
 8003256:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003258:	e01f      	b.n	800329a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800325a:	f7ff fc53 	bl	8002b04 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	1ad3      	subs	r3, r2, r3
 8003264:	2b02      	cmp	r3, #2
 8003266:	d918      	bls.n	800329a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b01      	cmp	r3, #1
 8003274:	d011      	beq.n	800329a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f043 0210 	orr.w	r2, r3, #16
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	f043 0201 	orr.w	r2, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e007      	b.n	80032aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d1d8      	bne.n	800325a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000008 	.word	0x20000008
 80032b8:	431bde83 	.word	0x431bde83

080032bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d12e      	bne.n	8003334 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0201 	bic.w	r2, r2, #1
 80032e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032e6:	f7ff fc0d 	bl	8002b04 <HAL_GetTick>
 80032ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032ec:	e01b      	b.n	8003326 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032ee:	f7ff fc09 	bl	8002b04 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d914      	bls.n	8003326 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d10d      	bne.n	8003326 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e007      	b.n	8003336 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b01      	cmp	r3, #1
 8003332:	d0dc      	beq.n	80032ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003354:	2b00      	cmp	r3, #0
 8003356:	d127      	bne.n	80033a8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800336e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003372:	d115      	bne.n	80033a0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003378:	2b00      	cmp	r3, #0
 800337a:	d111      	bne.n	80033a0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7fe f9e6 	bl	8001772 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80033a6:	e004      	b.n	80033b2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	4798      	blx	r3
}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f7fe f9c1 	bl	8001750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f4:	f043 0204 	orr.w	r2, r3, #4
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff fe01 	bl	8003004 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_ADCEx_Calibration_Start+0x1e>
 8003426:	2302      	movs	r3, #2
 8003428:	e095      	b.n	8003556 <HAL_ADCEx_Calibration_Start+0x14a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ff42 	bl	80032bc <ADC_ConversionStop_Disable>
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800343c:	7dfb      	ldrb	r3, [r7, #23]
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 8084 	bne.w	800354c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800344c:	f023 0302 	bic.w	r3, r3, #2
 8003450:	f043 0202 	orr.w	r2, r3, #2
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003458:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_ADCEx_Calibration_Start+0x154>)
 800345a:	681c      	ldr	r4, [r3, #0]
 800345c:	2002      	movs	r0, #2
 800345e:	f001 ff67 	bl	8005330 <HAL_RCCEx_GetPeriphCLKFreq>
 8003462:	4603      	mov	r3, r0
 8003464:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003468:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800346a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800346c:	e002      	b.n	8003474 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3b01      	subs	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f9      	bne.n	800346e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff fec4 	bl	8003208 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0208 	orr.w	r2, r2, #8
 800348e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003490:	f7ff fb38 	bl	8002b04 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003496:	e01b      	b.n	80034d0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003498:	f7ff fb34 	bl	8002b04 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b0a      	cmp	r3, #10
 80034a4:	d914      	bls.n	80034d0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00d      	beq.n	80034d0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b8:	f023 0312 	bic.w	r3, r3, #18
 80034bc:	f043 0210 	orr.w	r2, r3, #16
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e042      	b.n	8003556 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1dc      	bne.n	8003498 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0204 	orr.w	r2, r2, #4
 80034ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80034ee:	f7ff fb09 	bl	8002b04 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80034f4:	e01b      	b.n	800352e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80034f6:	f7ff fb05 	bl	8002b04 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b0a      	cmp	r3, #10
 8003502:	d914      	bls.n	800352e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003516:	f023 0312 	bic.w	r3, r3, #18
 800351a:	f043 0210 	orr.w	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e013      	b.n	8003556 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1dc      	bne.n	80034f6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	f023 0303 	bic.w	r3, r3, #3
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003554:	7dfb      	ldrb	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}
 800355e:	bf00      	nop
 8003560:	20000008 	.word	0x20000008

08003564 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b092      	sub	sp, #72	; 0x48
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003570:	2300      	movs	r3, #0
 8003572:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 8003576:	f107 0314 	add.w	r3, r7, #20
 800357a:	2230      	movs	r2, #48	; 0x30
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f002 f980 	bl	8005884 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800358e:	2302      	movs	r3, #2
 8003590:	e08f      	b.n	80036b2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800359a:	4b48      	ldr	r3, [pc, #288]	; (80036bc <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800359c:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80035a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80035aa:	d00b      	beq.n	80035c4 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e076      	b.n	80036b2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff fe1f 	bl	8003208 <ADC_Enable>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 80035d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d107      	bne.n	80035e8 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80035d8:	f107 0314 	add.w	r3, r7, #20
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fe13 	bl	8003208 <ADC_Enable>
 80035e2:	4603      	mov	r3, r0
 80035e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80035e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d15a      	bne.n	80036a6 <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360a:	2b00      	cmp	r3, #0
 800360c:	d007      	beq.n	800361e <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003616:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a24      	ldr	r2, [pc, #144]	; (80036c4 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a23      	ldr	r2, [pc, #140]	; (80036c8 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800363a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0202 	mvn.w	r2, #2
 800364c:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a18      	ldr	r0, [r3, #32]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	334c      	adds	r3, #76	; 0x4c
 8003668:	4619      	mov	r1, r3
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f000 f9f3 	bl	8003a58 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800367c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003680:	d108      	bne.n	8003694 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	e00c      	b.n	80036ae <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	e003      	b.n	80036ae <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80036ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3748      	adds	r7, #72	; 0x48
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40012800 	.word	0x40012800
 80036c0:	ffeffcfe 	.word	0xffeffcfe
 80036c4:	0800333f 	.word	0x0800333f
 80036c8:	080033bb 	.word	0x080033bb
 80036cc:	080033d7 	.word	0x080033d7

080036d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr
	...

080036e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b090      	sub	sp, #64	; 0x40
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	2230      	movs	r2, #48	; 0x30
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 f8c1 	bl	8005884 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 800370c:	2302      	movs	r3, #2
 800370e:	e032      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 800371a:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d016      	beq.n	8003758 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8003732:	2b01      	cmp	r3, #1
 8003734:	d010      	beq.n	8003758 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 800373a:	4a12      	ldr	r2, [pc, #72]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d10b      	bne.n	8003758 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	e008      	b.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003772:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8003776:	4618      	mov	r0, r3
 8003778:	3740      	adds	r7, #64	; 0x40
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40012800 	.word	0x40012800
 8003784:	40012400 	.word	0x40012400

08003788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <__NVIC_SetPriorityGrouping+0x44>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037a4:	4013      	ands	r3, r2
 80037a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ba:	4a04      	ldr	r2, [pc, #16]	; (80037cc <__NVIC_SetPriorityGrouping+0x44>)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	60d3      	str	r3, [r2, #12]
}
 80037c0:	bf00      	nop
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <__NVIC_GetPriorityGrouping+0x18>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	0a1b      	lsrs	r3, r3, #8
 80037da:	f003 0307 	and.w	r3, r3, #7
}
 80037de:	4618      	mov	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	e000ed00 	.word	0xe000ed00

080037ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	db0b      	blt.n	8003816 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	4906      	ldr	r1, [pc, #24]	; (8003820 <__NVIC_EnableIRQ+0x34>)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2001      	movs	r0, #1
 800380e:	fa00 f202 	lsl.w	r2, r0, r2
 8003812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	bc80      	pop	{r7}
 800381e:	4770      	bx	lr
 8003820:	e000e100 	.word	0xe000e100

08003824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	db0a      	blt.n	800384e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	490c      	ldr	r1, [pc, #48]	; (8003870 <__NVIC_SetPriority+0x4c>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	440b      	add	r3, r1
 8003848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800384c:	e00a      	b.n	8003864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4908      	ldr	r1, [pc, #32]	; (8003874 <__NVIC_SetPriority+0x50>)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3b04      	subs	r3, #4
 800385c:	0112      	lsls	r2, r2, #4
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	440b      	add	r3, r1
 8003862:	761a      	strb	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf28      	it	cs
 8003896:	2304      	movcs	r3, #4
 8003898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3304      	adds	r3, #4
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d902      	bls.n	80038a8 <NVIC_EncodePriority+0x30>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3b03      	subs	r3, #3
 80038a6:	e000      	b.n	80038aa <NVIC_EncodePriority+0x32>
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	4313      	orrs	r3, r2
         );
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ec:	d301      	bcc.n	80038f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ee:	2301      	movs	r3, #1
 80038f0:	e00f      	b.n	8003912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <SysTick_Config+0x40>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038fa:	210f      	movs	r1, #15
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	f7ff ff90 	bl	8003824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003904:	4b05      	ldr	r3, [pc, #20]	; (800391c <SysTick_Config+0x40>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800390a:	4b04      	ldr	r3, [pc, #16]	; (800391c <SysTick_Config+0x40>)
 800390c:	2207      	movs	r2, #7
 800390e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	e000e010 	.word	0xe000e010

08003920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff2d 	bl	8003788 <__NVIC_SetPriorityGrouping>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003936:	b580      	push	{r7, lr}
 8003938:	b086      	sub	sp, #24
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
 8003942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003948:	f7ff ff42 	bl	80037d0 <__NVIC_GetPriorityGrouping>
 800394c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	6978      	ldr	r0, [r7, #20]
 8003954:	f7ff ff90 	bl	8003878 <NVIC_EncodePriority>
 8003958:	4602      	mov	r2, r0
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff ff5f 	bl	8003824 <__NVIC_SetPriority>
}
 8003966:	bf00      	nop
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b082      	sub	sp, #8
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff ff35 	bl	80037ec <__NVIC_EnableIRQ>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b082      	sub	sp, #8
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ffa2 	bl	80038dc <SysTick_Config>
 8003998:	4603      	mov	r3, r0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e043      	b.n	8003a42 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_DMA_Init+0xa8>)
 80039c2:	4413      	add	r3, r2
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_DMA_Init+0xac>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	091b      	lsrs	r3, r3, #4
 80039cc:	009a      	lsls	r2, r3, #2
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a1f      	ldr	r2, [pc, #124]	; (8003a54 <HAL_DMA_Init+0xb0>)
 80039d6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80039f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80039fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr
 8003a4c:	bffdfff8 	.word	0xbffdfff8
 8003a50:	cccccccd 	.word	0xcccccccd
 8003a54:	40020000 	.word	0x40020000

08003a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a66:	2300      	movs	r3, #0
 8003a68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_DMA_Start_IT+0x20>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e04a      	b.n	8003b0e <HAL_DMA_Start_IT+0xb6>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d13a      	bne.n	8003b00 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f938 	bl	8003d24 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 020e 	orr.w	r2, r2, #14
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e00f      	b.n	8003aee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0204 	bic.w	r2, r2, #4
 8003adc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f042 020a 	orr.w	r2, r2, #10
 8003aec:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	e005      	b.n	8003b0c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2204      	movs	r2, #4
 8003b36:	409a      	lsls	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d04f      	beq.n	8003be0 <HAL_DMA_IRQHandler+0xc8>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d04a      	beq.n	8003be0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d107      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f022 0204 	bic.w	r2, r2, #4
 8003b66:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a66      	ldr	r2, [pc, #408]	; (8003d08 <HAL_DMA_IRQHandler+0x1f0>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d029      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0xae>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a65      	ldr	r2, [pc, #404]	; (8003d0c <HAL_DMA_IRQHandler+0x1f4>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xaa>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <HAL_DMA_IRQHandler+0x1f8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01a      	beq.n	8003bbc <HAL_DMA_IRQHandler+0xa4>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a62      	ldr	r2, [pc, #392]	; (8003d14 <HAL_DMA_IRQHandler+0x1fc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d012      	beq.n	8003bb6 <HAL_DMA_IRQHandler+0x9e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a60      	ldr	r2, [pc, #384]	; (8003d18 <HAL_DMA_IRQHandler+0x200>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00a      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x98>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a5f      	ldr	r2, [pc, #380]	; (8003d1c <HAL_DMA_IRQHandler+0x204>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d102      	bne.n	8003baa <HAL_DMA_IRQHandler+0x92>
 8003ba4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ba8:	e00e      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xb0>
 8003baa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003bae:	e00b      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xb0>
 8003bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bb4:	e008      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xb0>
 8003bb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bba:	e005      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xb0>
 8003bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc0:	e002      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xb0>
 8003bc2:	2340      	movs	r3, #64	; 0x40
 8003bc4:	e000      	b.n	8003bc8 <HAL_DMA_IRQHandler+0xb0>
 8003bc6:	2304      	movs	r3, #4
 8003bc8:	4a55      	ldr	r2, [pc, #340]	; (8003d20 <HAL_DMA_IRQHandler+0x208>)
 8003bca:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8094 	beq.w	8003cfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003bde:	e08e      	b.n	8003cfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	2202      	movs	r2, #2
 8003be6:	409a      	lsls	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d056      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x186>
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d051      	beq.n	8003c9e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10b      	bne.n	8003c20 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 020a 	bic.w	r2, r2, #10
 8003c16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a38      	ldr	r2, [pc, #224]	; (8003d08 <HAL_DMA_IRQHandler+0x1f0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d029      	beq.n	8003c7e <HAL_DMA_IRQHandler+0x166>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a37      	ldr	r2, [pc, #220]	; (8003d0c <HAL_DMA_IRQHandler+0x1f4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d022      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x162>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a35      	ldr	r2, [pc, #212]	; (8003d10 <HAL_DMA_IRQHandler+0x1f8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d01a      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x15c>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a34      	ldr	r2, [pc, #208]	; (8003d14 <HAL_DMA_IRQHandler+0x1fc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d012      	beq.n	8003c6e <HAL_DMA_IRQHandler+0x156>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a32      	ldr	r2, [pc, #200]	; (8003d18 <HAL_DMA_IRQHandler+0x200>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00a      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x150>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a31      	ldr	r2, [pc, #196]	; (8003d1c <HAL_DMA_IRQHandler+0x204>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d102      	bne.n	8003c62 <HAL_DMA_IRQHandler+0x14a>
 8003c5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003c60:	e00e      	b.n	8003c80 <HAL_DMA_IRQHandler+0x168>
 8003c62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c66:	e00b      	b.n	8003c80 <HAL_DMA_IRQHandler+0x168>
 8003c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c6c:	e008      	b.n	8003c80 <HAL_DMA_IRQHandler+0x168>
 8003c6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c72:	e005      	b.n	8003c80 <HAL_DMA_IRQHandler+0x168>
 8003c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c78:	e002      	b.n	8003c80 <HAL_DMA_IRQHandler+0x168>
 8003c7a:	2320      	movs	r3, #32
 8003c7c:	e000      	b.n	8003c80 <HAL_DMA_IRQHandler+0x168>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	4a27      	ldr	r2, [pc, #156]	; (8003d20 <HAL_DMA_IRQHandler+0x208>)
 8003c82:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d034      	beq.n	8003cfe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c9c:	e02f      	b.n	8003cfe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	2208      	movs	r2, #8
 8003ca4:	409a      	lsls	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d028      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x1e8>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d023      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 020e 	bic.w	r2, r2, #14
 8003cc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d004      	beq.n	8003d00 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	4798      	blx	r3
    }
  }
  return;
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
}
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40020008 	.word	0x40020008
 8003d0c:	4002001c 	.word	0x4002001c
 8003d10:	40020030 	.word	0x40020030
 8003d14:	40020044 	.word	0x40020044
 8003d18:	40020058 	.word	0x40020058
 8003d1c:	4002006c 	.word	0x4002006c
 8003d20:	40020000 	.word	0x40020000

08003d24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d40:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d108      	bne.n	8003d64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d62:	e007      	b.n	8003d74 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	60da      	str	r2, [r3, #12]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b08b      	sub	sp, #44	; 0x2c
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d92:	e169      	b.n	8004068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d94:	2201      	movs	r2, #1
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	f040 8158 	bne.w	8004062 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a9a      	ldr	r2, [pc, #616]	; (8004020 <HAL_GPIO_Init+0x2a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d05e      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003dbc:	4a98      	ldr	r2, [pc, #608]	; (8004020 <HAL_GPIO_Init+0x2a0>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d875      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003dc2:	4a98      	ldr	r2, [pc, #608]	; (8004024 <HAL_GPIO_Init+0x2a4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d058      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003dc8:	4a96      	ldr	r2, [pc, #600]	; (8004024 <HAL_GPIO_Init+0x2a4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d86f      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003dce:	4a96      	ldr	r2, [pc, #600]	; (8004028 <HAL_GPIO_Init+0x2a8>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d052      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003dd4:	4a94      	ldr	r2, [pc, #592]	; (8004028 <HAL_GPIO_Init+0x2a8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d869      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003dda:	4a94      	ldr	r2, [pc, #592]	; (800402c <HAL_GPIO_Init+0x2ac>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d04c      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003de0:	4a92      	ldr	r2, [pc, #584]	; (800402c <HAL_GPIO_Init+0x2ac>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d863      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003de6:	4a92      	ldr	r2, [pc, #584]	; (8004030 <HAL_GPIO_Init+0x2b0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d046      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
 8003dec:	4a90      	ldr	r2, [pc, #576]	; (8004030 <HAL_GPIO_Init+0x2b0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d85d      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003df2:	2b12      	cmp	r3, #18
 8003df4:	d82a      	bhi.n	8003e4c <HAL_GPIO_Init+0xcc>
 8003df6:	2b12      	cmp	r3, #18
 8003df8:	d859      	bhi.n	8003eae <HAL_GPIO_Init+0x12e>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <HAL_GPIO_Init+0x80>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e7b 	.word	0x08003e7b
 8003e04:	08003e55 	.word	0x08003e55
 8003e08:	08003e67 	.word	0x08003e67
 8003e0c:	08003ea9 	.word	0x08003ea9
 8003e10:	08003eaf 	.word	0x08003eaf
 8003e14:	08003eaf 	.word	0x08003eaf
 8003e18:	08003eaf 	.word	0x08003eaf
 8003e1c:	08003eaf 	.word	0x08003eaf
 8003e20:	08003eaf 	.word	0x08003eaf
 8003e24:	08003eaf 	.word	0x08003eaf
 8003e28:	08003eaf 	.word	0x08003eaf
 8003e2c:	08003eaf 	.word	0x08003eaf
 8003e30:	08003eaf 	.word	0x08003eaf
 8003e34:	08003eaf 	.word	0x08003eaf
 8003e38:	08003eaf 	.word	0x08003eaf
 8003e3c:	08003eaf 	.word	0x08003eaf
 8003e40:	08003eaf 	.word	0x08003eaf
 8003e44:	08003e5d 	.word	0x08003e5d
 8003e48:	08003e71 	.word	0x08003e71
 8003e4c:	4a79      	ldr	r2, [pc, #484]	; (8004034 <HAL_GPIO_Init+0x2b4>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e52:	e02c      	b.n	8003eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	623b      	str	r3, [r7, #32]
          break;
 8003e5a:	e029      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	3304      	adds	r3, #4
 8003e62:	623b      	str	r3, [r7, #32]
          break;
 8003e64:	e024      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	623b      	str	r3, [r7, #32]
          break;
 8003e6e:	e01f      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	330c      	adds	r3, #12
 8003e76:	623b      	str	r3, [r7, #32]
          break;
 8003e78:	e01a      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003e82:	2304      	movs	r3, #4
 8003e84:	623b      	str	r3, [r7, #32]
          break;
 8003e86:	e013      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e90:	2308      	movs	r3, #8
 8003e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	611a      	str	r2, [r3, #16]
          break;
 8003e9a:	e009      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003e9c:	2308      	movs	r3, #8
 8003e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	615a      	str	r2, [r3, #20]
          break;
 8003ea6:	e003      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	623b      	str	r3, [r7, #32]
          break;
 8003eac:	e000      	b.n	8003eb0 <HAL_GPIO_Init+0x130>
          break;
 8003eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	2bff      	cmp	r3, #255	; 0xff
 8003eb4:	d801      	bhi.n	8003eba <HAL_GPIO_Init+0x13a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	e001      	b.n	8003ebe <HAL_GPIO_Init+0x13e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2bff      	cmp	r3, #255	; 0xff
 8003ec4:	d802      	bhi.n	8003ecc <HAL_GPIO_Init+0x14c>
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	e002      	b.n	8003ed2 <HAL_GPIO_Init+0x152>
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	3b08      	subs	r3, #8
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	210f      	movs	r1, #15
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	401a      	ands	r2, r3
 8003ee4:	6a39      	ldr	r1, [r7, #32]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	431a      	orrs	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 80b1 	beq.w	8004062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f00:	4b4d      	ldr	r3, [pc, #308]	; (8004038 <HAL_GPIO_Init+0x2b8>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	4a4c      	ldr	r2, [pc, #304]	; (8004038 <HAL_GPIO_Init+0x2b8>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	6193      	str	r3, [r2, #24]
 8003f0c:	4b4a      	ldr	r3, [pc, #296]	; (8004038 <HAL_GPIO_Init+0x2b8>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f18:	4a48      	ldr	r2, [pc, #288]	; (800403c <HAL_GPIO_Init+0x2bc>)
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1c:	089b      	lsrs	r3, r3, #2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	220f      	movs	r2, #15
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a40      	ldr	r2, [pc, #256]	; (8004040 <HAL_GPIO_Init+0x2c0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d013      	beq.n	8003f6c <HAL_GPIO_Init+0x1ec>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a3f      	ldr	r2, [pc, #252]	; (8004044 <HAL_GPIO_Init+0x2c4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d00d      	beq.n	8003f68 <HAL_GPIO_Init+0x1e8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a3e      	ldr	r2, [pc, #248]	; (8004048 <HAL_GPIO_Init+0x2c8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d007      	beq.n	8003f64 <HAL_GPIO_Init+0x1e4>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a3d      	ldr	r2, [pc, #244]	; (800404c <HAL_GPIO_Init+0x2cc>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d101      	bne.n	8003f60 <HAL_GPIO_Init+0x1e0>
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e006      	b.n	8003f6e <HAL_GPIO_Init+0x1ee>
 8003f60:	2304      	movs	r3, #4
 8003f62:	e004      	b.n	8003f6e <HAL_GPIO_Init+0x1ee>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e002      	b.n	8003f6e <HAL_GPIO_Init+0x1ee>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_GPIO_Init+0x1ee>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003f7e:	492f      	ldr	r1, [pc, #188]	; (800403c <HAL_GPIO_Init+0x2bc>)
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d006      	beq.n	8003fa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003f98:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	492c      	ldr	r1, [pc, #176]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	600b      	str	r3, [r1, #0]
 8003fa4:	e006      	b.n	8003fb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fa6:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	43db      	mvns	r3, r3
 8003fae:	4928      	ldr	r1, [pc, #160]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fc0:	4b23      	ldr	r3, [pc, #140]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4922      	ldr	r1, [pc, #136]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	604b      	str	r3, [r1, #4]
 8003fcc:	e006      	b.n	8003fdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fd0:	685a      	ldr	r2, [r3, #4]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	491e      	ldr	r1, [pc, #120]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	4918      	ldr	r1, [pc, #96]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	608b      	str	r3, [r1, #8]
 8003ff4:	e006      	b.n	8004004 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	4914      	ldr	r1, [pc, #80]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8004000:	4013      	ands	r3, r2
 8004002:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d021      	beq.n	8004054 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	490e      	ldr	r1, [pc, #56]	; (8004050 <HAL_GPIO_Init+0x2d0>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	60cb      	str	r3, [r1, #12]
 800401c:	e021      	b.n	8004062 <HAL_GPIO_Init+0x2e2>
 800401e:	bf00      	nop
 8004020:	10320000 	.word	0x10320000
 8004024:	10310000 	.word	0x10310000
 8004028:	10220000 	.word	0x10220000
 800402c:	10210000 	.word	0x10210000
 8004030:	10120000 	.word	0x10120000
 8004034:	10110000 	.word	0x10110000
 8004038:	40021000 	.word	0x40021000
 800403c:	40010000 	.word	0x40010000
 8004040:	40010800 	.word	0x40010800
 8004044:	40010c00 	.word	0x40010c00
 8004048:	40011000 	.word	0x40011000
 800404c:	40011400 	.word	0x40011400
 8004050:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_GPIO_Init+0x304>)
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	43db      	mvns	r3, r3
 800405c:	4909      	ldr	r1, [pc, #36]	; (8004084 <HAL_GPIO_Init+0x304>)
 800405e:	4013      	ands	r3, r2
 8004060:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	3301      	adds	r3, #1
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	f47f ae8e 	bne.w	8003d94 <HAL_GPIO_Init+0x14>
  }
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	372c      	adds	r7, #44	; 0x2c
 800407e:	46bd      	mov	sp, r7
 8004080:	bc80      	pop	{r7}
 8004082:	4770      	bx	lr
 8004084:	40010400 	.word	0x40010400

08004088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	887b      	ldrh	r3, [r7, #2]
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
 80040a4:	e001      	b.n	80040aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	4603      	mov	r3, r0
 80040c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040ce:	4a05      	ldr	r2, [pc, #20]	; (80040e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040d0:	88fb      	ldrh	r3, [r7, #6]
 80040d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f806 	bl	80040e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40010400 	.word	0x40010400

080040e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e12b      	b.n	8004366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d106      	bne.n	8004128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7fd fbde 	bl	80018e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2224      	movs	r2, #36	; 0x24
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800414e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800415e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004160:	f000 ffea 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8004164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4a81      	ldr	r2, [pc, #516]	; (8004370 <HAL_I2C_Init+0x274>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d807      	bhi.n	8004180 <HAL_I2C_Init+0x84>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a80      	ldr	r2, [pc, #512]	; (8004374 <HAL_I2C_Init+0x278>)
 8004174:	4293      	cmp	r3, r2
 8004176:	bf94      	ite	ls
 8004178:	2301      	movls	r3, #1
 800417a:	2300      	movhi	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	e006      	b.n	800418e <HAL_I2C_Init+0x92>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4a7d      	ldr	r2, [pc, #500]	; (8004378 <HAL_I2C_Init+0x27c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	bf94      	ite	ls
 8004188:	2301      	movls	r3, #1
 800418a:	2300      	movhi	r3, #0
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e0e7      	b.n	8004366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4a78      	ldr	r2, [pc, #480]	; (800437c <HAL_I2C_Init+0x280>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0c9b      	lsrs	r3, r3, #18
 80041a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a6a      	ldr	r2, [pc, #424]	; (8004370 <HAL_I2C_Init+0x274>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d802      	bhi.n	80041d0 <HAL_I2C_Init+0xd4>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	3301      	adds	r3, #1
 80041ce:	e009      	b.n	80041e4 <HAL_I2C_Init+0xe8>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041d6:	fb02 f303 	mul.w	r3, r2, r3
 80041da:	4a69      	ldr	r2, [pc, #420]	; (8004380 <HAL_I2C_Init+0x284>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	3301      	adds	r3, #1
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6812      	ldr	r2, [r2, #0]
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	495c      	ldr	r1, [pc, #368]	; (8004370 <HAL_I2C_Init+0x274>)
 8004200:	428b      	cmp	r3, r1
 8004202:	d819      	bhi.n	8004238 <HAL_I2C_Init+0x13c>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1e59      	subs	r1, r3, #1
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004212:	1c59      	adds	r1, r3, #1
 8004214:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004218:	400b      	ands	r3, r1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_I2C_Init+0x138>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1e59      	subs	r1, r3, #1
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	fbb1 f3f3 	udiv	r3, r1, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004232:	e051      	b.n	80042d8 <HAL_I2C_Init+0x1dc>
 8004234:	2304      	movs	r3, #4
 8004236:	e04f      	b.n	80042d8 <HAL_I2C_Init+0x1dc>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d111      	bne.n	8004264 <HAL_I2C_Init+0x168>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1e58      	subs	r0, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6859      	ldr	r1, [r3, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	440b      	add	r3, r1
 800424e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004252:	3301      	adds	r3, #1
 8004254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf0c      	ite	eq
 800425c:	2301      	moveq	r3, #1
 800425e:	2300      	movne	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	e012      	b.n	800428a <HAL_I2C_Init+0x18e>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	1e58      	subs	r0, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6859      	ldr	r1, [r3, #4]
 800426c:	460b      	mov	r3, r1
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	0099      	lsls	r1, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	fbb0 f3f3 	udiv	r3, r0, r3
 800427a:	3301      	adds	r3, #1
 800427c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Init+0x196>
 800428e:	2301      	movs	r3, #1
 8004290:	e022      	b.n	80042d8 <HAL_I2C_Init+0x1dc>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10e      	bne.n	80042b8 <HAL_I2C_Init+0x1bc>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	1e58      	subs	r0, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6859      	ldr	r1, [r3, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	440b      	add	r3, r1
 80042a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042b6:	e00f      	b.n	80042d8 <HAL_I2C_Init+0x1dc>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	1e58      	subs	r0, r3, #1
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6859      	ldr	r1, [r3, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	0099      	lsls	r1, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80042ce:	3301      	adds	r3, #1
 80042d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	6809      	ldr	r1, [r1, #0]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69da      	ldr	r2, [r3, #28]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6911      	ldr	r1, [r2, #16]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68d2      	ldr	r2, [r2, #12]
 8004312:	4311      	orrs	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	430b      	orrs	r3, r1
 800431a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695a      	ldr	r2, [r3, #20]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	000186a0 	.word	0x000186a0
 8004374:	001e847f 	.word	0x001e847f
 8004378:	003d08ff 	.word	0x003d08ff
 800437c:	431bde83 	.word	0x431bde83
 8004380:	10624dd3 	.word	0x10624dd3

08004384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b088      	sub	sp, #32
 8004388:	af02      	add	r7, sp, #8
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	607a      	str	r2, [r7, #4]
 800438e:	461a      	mov	r2, r3
 8004390:	460b      	mov	r3, r1
 8004392:	817b      	strh	r3, [r7, #10]
 8004394:	4613      	mov	r3, r2
 8004396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004398:	f7fe fbb4 	bl	8002b04 <HAL_GetTick>
 800439c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b20      	cmp	r3, #32
 80043a8:	f040 80e0 	bne.w	800456c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2319      	movs	r3, #25
 80043b2:	2201      	movs	r2, #1
 80043b4:	4970      	ldr	r1, [pc, #448]	; (8004578 <HAL_I2C_Master_Transmit+0x1f4>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f964 	bl	8004684 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
 80043c4:	e0d3      	b.n	800456e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_I2C_Master_Transmit+0x50>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e0cc      	b.n	800456e <HAL_I2C_Master_Transmit+0x1ea>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d007      	beq.n	80043fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2221      	movs	r2, #33	; 0x21
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2210      	movs	r2, #16
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	893a      	ldrh	r2, [r7, #8]
 800442a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4a50      	ldr	r2, [pc, #320]	; (800457c <HAL_I2C_Master_Transmit+0x1f8>)
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800443c:	8979      	ldrh	r1, [r7, #10]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f89c 	bl	8004580 <I2C_MasterRequestWrite>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e08d      	b.n	800456e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004452:	2300      	movs	r3, #0
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	613b      	str	r3, [r7, #16]
 8004466:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004468:	e066      	b.n	8004538 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	6a39      	ldr	r1, [r7, #32]
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f9de 	bl	8004830 <I2C_WaitOnTXEFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447e:	2b04      	cmp	r3, #4
 8004480:	d107      	bne.n	8004492 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e06b      	b.n	800456e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	1c5a      	adds	r2, r3, #1
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044be:	3b01      	subs	r3, #1
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d11b      	bne.n	800450c <HAL_I2C_Master_Transmit+0x188>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d017      	beq.n	800450c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004504:	3b01      	subs	r3, #1
 8004506:	b29a      	uxth	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	6a39      	ldr	r1, [r7, #32]
 8004510:	68f8      	ldr	r0, [r7, #12]
 8004512:	f000 f9ce 	bl	80048b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00d      	beq.n	8004538 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004520:	2b04      	cmp	r3, #4
 8004522:	d107      	bne.n	8004534 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004532:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e01a      	b.n	800456e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800453c:	2b00      	cmp	r3, #0
 800453e:	d194      	bne.n	800446a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e000      	b.n	800456e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	00100002 	.word	0x00100002
 800457c:	ffff0000 	.word	0xffff0000

08004580 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af02      	add	r7, sp, #8
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	460b      	mov	r3, r1
 800458e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004594:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b08      	cmp	r3, #8
 800459a:	d006      	beq.n	80045aa <I2C_MasterRequestWrite+0x2a>
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d003      	beq.n	80045aa <I2C_MasterRequestWrite+0x2a>
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045a8:	d108      	bne.n	80045bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	e00b      	b.n	80045d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	2b12      	cmp	r3, #18
 80045c2:	d107      	bne.n	80045d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e0:	68f8      	ldr	r0, [r7, #12]
 80045e2:	f000 f84f 	bl	8004684 <I2C_WaitOnFlagUntilTimeout>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00d      	beq.n	8004608 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045fa:	d103      	bne.n	8004604 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e035      	b.n	8004674 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004610:	d108      	bne.n	8004624 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004612:	897b      	ldrh	r3, [r7, #10]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004620:	611a      	str	r2, [r3, #16]
 8004622:	e01b      	b.n	800465c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004624:	897b      	ldrh	r3, [r7, #10]
 8004626:	11db      	asrs	r3, r3, #7
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 0306 	and.w	r3, r3, #6
 800462e:	b2db      	uxtb	r3, r3
 8004630:	f063 030f 	orn	r3, r3, #15
 8004634:	b2da      	uxtb	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	490e      	ldr	r1, [pc, #56]	; (800467c <I2C_MasterRequestWrite+0xfc>)
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f000 f875 	bl	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e010      	b.n	8004674 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004652:	897b      	ldrh	r3, [r7, #10]
 8004654:	b2da      	uxtb	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	4907      	ldr	r1, [pc, #28]	; (8004680 <I2C_MasterRequestWrite+0x100>)
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f865 	bl	8004732 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	00010008 	.word	0x00010008
 8004680:	00010002 	.word	0x00010002

08004684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004694:	e025      	b.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469c:	d021      	beq.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469e:	f7fe fa31 	bl	8002b04 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d116      	bne.n	80046e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e023      	b.n	800472a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10d      	bne.n	8004708 <I2C_WaitOnFlagUntilTimeout+0x84>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf0c      	ite	eq
 80046fe:	2301      	moveq	r3, #1
 8004700:	2300      	movne	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	e00c      	b.n	8004722 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	43da      	mvns	r2, r3
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4013      	ands	r3, r2
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2300      	movne	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	429a      	cmp	r2, r3
 8004726:	d0b6      	beq.n	8004696 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004740:	e051      	b.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004750:	d123      	bne.n	800479a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004760:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800476a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f043 0204 	orr.w	r2, r3, #4
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e046      	b.n	8004828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a0:	d021      	beq.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a2:	f7fe f9af 	bl	8002b04 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d302      	bcc.n	80047b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d116      	bne.n	80047e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e020      	b.n	8004828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	0c1b      	lsrs	r3, r3, #16
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d10c      	bne.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	43da      	mvns	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4013      	ands	r3, r2
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	e00b      	b.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	43da      	mvns	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	4013      	ands	r3, r2
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	bf14      	ite	ne
 800481c:	2301      	movne	r3, #1
 800481e:	2300      	moveq	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d18d      	bne.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800483c:	e02d      	b.n	800489a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f878 	bl	8004934 <I2C_IsAcknowledgeFailed>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e02d      	b.n	80048aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d021      	beq.n	800489a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004856:	f7fe f955 	bl	8002b04 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d116      	bne.n	800489a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f043 0220 	orr.w	r2, r3, #32
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e007      	b.n	80048aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a4:	2b80      	cmp	r3, #128	; 0x80
 80048a6:	d1ca      	bne.n	800483e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3710      	adds	r7, #16
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048be:	e02d      	b.n	800491c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f837 	bl	8004934 <I2C_IsAcknowledgeFailed>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e02d      	b.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d021      	beq.n	800491c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d8:	f7fe f914 	bl	8002b04 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d302      	bcc.n	80048ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d116      	bne.n	800491c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	f043 0220 	orr.w	r2, r3, #32
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e007      	b.n	800492c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d1ca      	bne.n	80048c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494a:	d11b      	bne.n	8004984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	f043 0204 	orr.w	r2, r3, #4
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e272      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8087 	beq.w	8004abe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049b0:	4b92      	ldr	r3, [pc, #584]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f003 030c 	and.w	r3, r3, #12
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d00c      	beq.n	80049d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049bc:	4b8f      	ldr	r3, [pc, #572]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b08      	cmp	r3, #8
 80049c6:	d112      	bne.n	80049ee <HAL_RCC_OscConfig+0x5e>
 80049c8:	4b8c      	ldr	r3, [pc, #560]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d4:	d10b      	bne.n	80049ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d6:	4b89      	ldr	r3, [pc, #548]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d06c      	beq.n	8004abc <HAL_RCC_OscConfig+0x12c>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d168      	bne.n	8004abc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e24c      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x76>
 80049f8:	4b80      	ldr	r3, [pc, #512]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a7f      	ldr	r2, [pc, #508]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 80049fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	e02e      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x98>
 8004a0e:	4b7b      	ldr	r3, [pc, #492]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a7a      	ldr	r2, [pc, #488]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b78      	ldr	r3, [pc, #480]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a77      	ldr	r2, [pc, #476]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e01d      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0xbc>
 8004a32:	4b72      	ldr	r3, [pc, #456]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a71      	ldr	r2, [pc, #452]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b6f      	ldr	r3, [pc, #444]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6e      	ldr	r2, [pc, #440]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0xd4>
 8004a4c:	4b6b      	ldr	r3, [pc, #428]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a6a      	ldr	r2, [pc, #424]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b68      	ldr	r3, [pc, #416]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a67      	ldr	r2, [pc, #412]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fe f84a 	bl	8002b04 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fe f846 	bl	8002b04 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e200      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b5d      	ldr	r3, [pc, #372]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0xe4>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fe f836 	bl	8002b04 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fe f832 	bl	8002b04 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e1ec      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	4b53      	ldr	r3, [pc, #332]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0x10c>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d063      	beq.n	8004b92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aca:	4b4c      	ldr	r3, [pc, #304]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ad6:	4b49      	ldr	r3, [pc, #292]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d11c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x18c>
 8004ae2:	4b46      	ldr	r3, [pc, #280]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d116      	bne.n	8004b1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aee:	4b43      	ldr	r3, [pc, #268]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_RCC_OscConfig+0x176>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d001      	beq.n	8004b06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e1c0      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b06:	4b3d      	ldr	r3, [pc, #244]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4939      	ldr	r1, [pc, #228]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b1a:	e03a      	b.n	8004b92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b24:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <HAL_RCC_OscConfig+0x270>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7fd ffeb 	bl	8002b04 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b32:	f7fd ffe7 	bl	8002b04 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e1a1      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	4b2d      	ldr	r3, [pc, #180]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b50:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4927      	ldr	r1, [pc, #156]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	600b      	str	r3, [r1, #0]
 8004b64:	e015      	b.n	8004b92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b66:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <HAL_RCC_OscConfig+0x270>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fd ffca 	bl	8002b04 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b74:	f7fd ffc6 	bl	8002b04 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e180      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d03a      	beq.n	8004c14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d019      	beq.n	8004bda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ba6:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bac:	f7fd ffaa 	bl	8002b04 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb4:	f7fd ffa6 	bl	8002b04 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e160      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	4b0d      	ldr	r3, [pc, #52]	; (8004bfc <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	f003 0302 	and.w	r3, r3, #2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bd2:	2001      	movs	r0, #1
 8004bd4:	f000 fad8 	bl	8005188 <RCC_Delay>
 8004bd8:	e01c      	b.n	8004c14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bda:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be0:	f7fd ff90 	bl	8002b04 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be6:	e00f      	b.n	8004c08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be8:	f7fd ff8c 	bl	8002b04 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d908      	bls.n	8004c08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e146      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	42420000 	.word	0x42420000
 8004c04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c08:	4b92      	ldr	r3, [pc, #584]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e9      	bne.n	8004be8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80a6 	beq.w	8004d6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c22:	2300      	movs	r3, #0
 8004c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c26:	4b8b      	ldr	r3, [pc, #556]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004c28:	69db      	ldr	r3, [r3, #28]
 8004c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10d      	bne.n	8004c4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c32:	4b88      	ldr	r3, [pc, #544]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	4a87      	ldr	r2, [pc, #540]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	61d3      	str	r3, [r2, #28]
 8004c3e:	4b85      	ldr	r3, [pc, #532]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4e:	4b82      	ldr	r3, [pc, #520]	; (8004e58 <HAL_RCC_OscConfig+0x4c8>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d118      	bne.n	8004c8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c5a:	4b7f      	ldr	r3, [pc, #508]	; (8004e58 <HAL_RCC_OscConfig+0x4c8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a7e      	ldr	r2, [pc, #504]	; (8004e58 <HAL_RCC_OscConfig+0x4c8>)
 8004c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c66:	f7fd ff4d 	bl	8002b04 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c6e:	f7fd ff49 	bl	8002b04 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b64      	cmp	r3, #100	; 0x64
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e103      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c80:	4b75      	ldr	r3, [pc, #468]	; (8004e58 <HAL_RCC_OscConfig+0x4c8>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d106      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x312>
 8004c94:	4b6f      	ldr	r3, [pc, #444]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	4a6e      	ldr	r2, [pc, #440]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	6213      	str	r3, [r2, #32]
 8004ca0:	e02d      	b.n	8004cfe <HAL_RCC_OscConfig+0x36e>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x334>
 8004caa:	4b6a      	ldr	r3, [pc, #424]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	4a69      	ldr	r2, [pc, #420]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	6213      	str	r3, [r2, #32]
 8004cb6:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	4a66      	ldr	r2, [pc, #408]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cbc:	f023 0304 	bic.w	r3, r3, #4
 8004cc0:	6213      	str	r3, [r2, #32]
 8004cc2:	e01c      	b.n	8004cfe <HAL_RCC_OscConfig+0x36e>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	2b05      	cmp	r3, #5
 8004cca:	d10c      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x356>
 8004ccc:	4b61      	ldr	r3, [pc, #388]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	4a60      	ldr	r2, [pc, #384]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cd2:	f043 0304 	orr.w	r3, r3, #4
 8004cd6:	6213      	str	r3, [r2, #32]
 8004cd8:	4b5e      	ldr	r3, [pc, #376]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	4a5d      	ldr	r2, [pc, #372]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	6213      	str	r3, [r2, #32]
 8004ce4:	e00b      	b.n	8004cfe <HAL_RCC_OscConfig+0x36e>
 8004ce6:	4b5b      	ldr	r3, [pc, #364]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	4a5a      	ldr	r2, [pc, #360]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	6213      	str	r3, [r2, #32]
 8004cf2:	4b58      	ldr	r3, [pc, #352]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	4a57      	ldr	r2, [pc, #348]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	f023 0304 	bic.w	r3, r3, #4
 8004cfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d015      	beq.n	8004d32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d06:	f7fd fefd 	bl	8002b04 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0e:	f7fd fef9 	bl	8002b04 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e0b1      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d24:	4b4b      	ldr	r3, [pc, #300]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ee      	beq.n	8004d0e <HAL_RCC_OscConfig+0x37e>
 8004d30:	e014      	b.n	8004d5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d32:	f7fd fee7 	bl	8002b04 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d38:	e00a      	b.n	8004d50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3a:	f7fd fee3 	bl	8002b04 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e09b      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d50:	4b40      	ldr	r3, [pc, #256]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ee      	bne.n	8004d3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d5c:	7dfb      	ldrb	r3, [r7, #23]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d105      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d62:	4b3c      	ldr	r3, [pc, #240]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	4a3b      	ldr	r2, [pc, #236]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8087 	beq.w	8004e86 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d78:	4b36      	ldr	r3, [pc, #216]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d061      	beq.n	8004e48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d146      	bne.n	8004e1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8c:	4b33      	ldr	r3, [pc, #204]	; (8004e5c <HAL_RCC_OscConfig+0x4cc>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d92:	f7fd feb7 	bl	8002b04 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9a:	f7fd feb3 	bl	8002b04 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e06d      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dac:	4b29      	ldr	r3, [pc, #164]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1f0      	bne.n	8004d9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d108      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	4921      	ldr	r1, [pc, #132]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a19      	ldr	r1, [r3, #32]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	430b      	orrs	r3, r1
 8004de6:	491b      	ldr	r1, [pc, #108]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_RCC_OscConfig+0x4cc>)
 8004dee:	2201      	movs	r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df2:	f7fd fe87 	bl	8002b04 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfa:	f7fd fe83 	bl	8002b04 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e03d      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e0c:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d0f0      	beq.n	8004dfa <HAL_RCC_OscConfig+0x46a>
 8004e18:	e035      	b.n	8004e86 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	4b10      	ldr	r3, [pc, #64]	; (8004e5c <HAL_RCC_OscConfig+0x4cc>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fd fe70 	bl	8002b04 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fd fe6c 	bl	8002b04 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e026      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e3a:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x498>
 8004e46:	e01e      	b.n	8004e86 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d107      	bne.n	8004e60 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e019      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_OscConfig+0x500>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d106      	bne.n	8004e82 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d001      	beq.n	8004e86 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40021000 	.word	0x40021000

08004e94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0d0      	b.n	800504a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b6a      	ldr	r3, [pc, #424]	; (8005054 <HAL_RCC_ClockConfig+0x1c0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d910      	bls.n	8004ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b67      	ldr	r3, [pc, #412]	; (8005054 <HAL_RCC_ClockConfig+0x1c0>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f023 0207 	bic.w	r2, r3, #7
 8004ebe:	4965      	ldr	r1, [pc, #404]	; (8005054 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b63      	ldr	r3, [pc, #396]	; (8005054 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0b8      	b.n	800504a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d020      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef0:	4b59      	ldr	r3, [pc, #356]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a58      	ldr	r2, [pc, #352]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004efa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f08:	4b53      	ldr	r3, [pc, #332]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a52      	ldr	r2, [pc, #328]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004f12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f14:	4b50      	ldr	r3, [pc, #320]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	494d      	ldr	r1, [pc, #308]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d040      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	4b47      	ldr	r3, [pc, #284]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d115      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e07f      	b.n	800504a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d107      	bne.n	8004f62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f52:	4b41      	ldr	r3, [pc, #260]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e073      	b.n	800504a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f62:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e06b      	b.n	800504a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f72:	4b39      	ldr	r3, [pc, #228]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f023 0203 	bic.w	r2, r3, #3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	4936      	ldr	r1, [pc, #216]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f84:	f7fd fdbe 	bl	8002b04 <HAL_GetTick>
 8004f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f8c:	f7fd fdba 	bl	8002b04 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e053      	b.n	800504a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa2:	4b2d      	ldr	r3, [pc, #180]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 020c 	and.w	r2, r3, #12
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d1eb      	bne.n	8004f8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b27      	ldr	r3, [pc, #156]	; (8005054 <HAL_RCC_ClockConfig+0x1c0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d210      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b24      	ldr	r3, [pc, #144]	; (8005054 <HAL_RCC_ClockConfig+0x1c0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 0207 	bic.w	r2, r3, #7
 8004fca:	4922      	ldr	r1, [pc, #136]	; (8005054 <HAL_RCC_ClockConfig+0x1c0>)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b20      	ldr	r3, [pc, #128]	; (8005054 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e032      	b.n	800504a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4916      	ldr	r1, [pc, #88]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800500e:	4b12      	ldr	r3, [pc, #72]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	490e      	ldr	r1, [pc, #56]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005022:	f000 f821 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8005026:	4602      	mov	r2, r0
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_RCC_ClockConfig+0x1c4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	490a      	ldr	r1, [pc, #40]	; (800505c <HAL_RCC_ClockConfig+0x1c8>)
 8005034:	5ccb      	ldrb	r3, [r1, r3]
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	4a09      	ldr	r2, [pc, #36]	; (8005060 <HAL_RCC_ClockConfig+0x1cc>)
 800503c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800503e:	4b09      	ldr	r3, [pc, #36]	; (8005064 <HAL_RCC_ClockConfig+0x1d0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fd fd1c 	bl	8002a80 <HAL_InitTick>

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40022000 	.word	0x40022000
 8005058:	40021000 	.word	0x40021000
 800505c:	08008604 	.word	0x08008604
 8005060:	20000008 	.word	0x20000008
 8005064:	2000000c 	.word	0x2000000c

08005068 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005068:	b490      	push	{r4, r7}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <HAL_RCC_GetSysClockFreq+0xac>)
 8005070:	1d3c      	adds	r4, r7, #4
 8005072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005074:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005078:	f240 2301 	movw	r3, #513	; 0x201
 800507c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	2300      	movs	r3, #0
 8005088:	627b      	str	r3, [r7, #36]	; 0x24
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005092:	4b21      	ldr	r3, [pc, #132]	; (8005118 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d002      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x40>
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d003      	beq.n	80050ae <HAL_RCC_GetSysClockFreq+0x46>
 80050a6:	e02b      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050a8:	4b1c      	ldr	r3, [pc, #112]	; (800511c <HAL_RCC_GetSysClockFreq+0xb4>)
 80050aa:	623b      	str	r3, [r7, #32]
      break;
 80050ac:	e02b      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	0c9b      	lsrs	r3, r3, #18
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	3328      	adds	r3, #40	; 0x28
 80050b8:	443b      	add	r3, r7
 80050ba:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80050be:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d012      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050ca:	4b13      	ldr	r3, [pc, #76]	; (8005118 <HAL_RCC_GetSysClockFreq+0xb0>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	0c5b      	lsrs	r3, r3, #17
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	3328      	adds	r3, #40	; 0x28
 80050d6:	443b      	add	r3, r7
 80050d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	4a0e      	ldr	r2, [pc, #56]	; (800511c <HAL_RCC_GetSysClockFreq+0xb4>)
 80050e2:	fb03 f202 	mul.w	r2, r3, r2
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
 80050ee:	e004      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	4a0b      	ldr	r2, [pc, #44]	; (8005120 <HAL_RCC_GetSysClockFreq+0xb8>)
 80050f4:	fb02 f303 	mul.w	r3, r2, r3
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	623b      	str	r3, [r7, #32]
      break;
 80050fe:	e002      	b.n	8005106 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005100:	4b06      	ldr	r3, [pc, #24]	; (800511c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005102:	623b      	str	r3, [r7, #32]
      break;
 8005104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005106:	6a3b      	ldr	r3, [r7, #32]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3728      	adds	r7, #40	; 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bc90      	pop	{r4, r7}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	080085e4 	.word	0x080085e4
 8005118:	40021000 	.word	0x40021000
 800511c:	007a1200 	.word	0x007a1200
 8005120:	003d0900 	.word	0x003d0900

08005124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005128:	4b02      	ldr	r3, [pc, #8]	; (8005134 <HAL_RCC_GetHCLKFreq+0x10>)
 800512a:	681b      	ldr	r3, [r3, #0]
}
 800512c:	4618      	mov	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr
 8005134:	20000008 	.word	0x20000008

08005138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800513c:	f7ff fff2 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005140:	4602      	mov	r2, r0
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	0a1b      	lsrs	r3, r3, #8
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4903      	ldr	r1, [pc, #12]	; (800515c <HAL_RCC_GetPCLK1Freq+0x24>)
 800514e:	5ccb      	ldrb	r3, [r1, r3]
 8005150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40021000 	.word	0x40021000
 800515c:	08008614 	.word	0x08008614

08005160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005164:	f7ff ffde 	bl	8005124 <HAL_RCC_GetHCLKFreq>
 8005168:	4602      	mov	r2, r0
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	0adb      	lsrs	r3, r3, #11
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4903      	ldr	r1, [pc, #12]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005176:	5ccb      	ldrb	r3, [r1, r3]
 8005178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40021000 	.word	0x40021000
 8005184:	08008614 	.word	0x08008614

08005188 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <RCC_Delay+0x34>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <RCC_Delay+0x38>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	0a5b      	lsrs	r3, r3, #9
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80051a4:	bf00      	nop
  }
  while (Delay --);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1e5a      	subs	r2, r3, #1
 80051aa:	60fa      	str	r2, [r7, #12]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f9      	bne.n	80051a4 <RCC_Delay+0x1c>
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	20000008 	.word	0x20000008
 80051c0:	10624dd3 	.word	0x10624dd3

080051c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d07d      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80051e0:	2300      	movs	r3, #0
 80051e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e4:	4b4f      	ldr	r3, [pc, #316]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10d      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051f0:	4b4c      	ldr	r3, [pc, #304]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	4a4b      	ldr	r2, [pc, #300]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051fa:	61d3      	str	r3, [r2, #28]
 80051fc:	4b49      	ldr	r3, [pc, #292]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005208:	2301      	movs	r3, #1
 800520a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800520c:	4b46      	ldr	r3, [pc, #280]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005214:	2b00      	cmp	r3, #0
 8005216:	d118      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005218:	4b43      	ldr	r3, [pc, #268]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a42      	ldr	r2, [pc, #264]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800521e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005222:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005224:	f7fd fc6e 	bl	8002b04 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800522a:	e008      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800522c:	f7fd fc6a 	bl	8002b04 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b64      	cmp	r3, #100	; 0x64
 8005238:	d901      	bls.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e06d      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523e:	4b3a      	ldr	r3, [pc, #232]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005252:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d02e      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	429a      	cmp	r2, r3
 8005266:	d027      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005268:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005270:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005272:	4b2e      	ldr	r3, [pc, #184]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005274:	2201      	movs	r2, #1
 8005276:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005278:	4b2c      	ldr	r3, [pc, #176]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800527e:	4a29      	ldr	r2, [pc, #164]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d014      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7fd fc39 	bl	8002b04 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005294:	e00a      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005296:	f7fd fc35 	bl	8002b04 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d901      	bls.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e036      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ac:	4b1d      	ldr	r3, [pc, #116]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ee      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4917      	ldr	r1, [pc, #92]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80052ca:	7dfb      	ldrb	r3, [r7, #23]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d105      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	4a13      	ldr	r2, [pc, #76]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052e8:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	490b      	ldr	r1, [pc, #44]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005306:	4b07      	ldr	r3, [pc, #28]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	4904      	ldr	r1, [pc, #16]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005314:	4313      	orrs	r3, r2
 8005316:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40021000 	.word	0x40021000
 8005328:	40007000 	.word	0x40007000
 800532c:	42420440 	.word	0x42420440

08005330 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005330:	b590      	push	{r4, r7, lr}
 8005332:	b08d      	sub	sp, #52	; 0x34
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005338:	4b58      	ldr	r3, [pc, #352]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800533a:	f107 040c 	add.w	r4, r7, #12
 800533e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005344:	f240 2301 	movw	r3, #513	; 0x201
 8005348:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
 800534e:	2300      	movs	r3, #0
 8005350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005352:	2300      	movs	r3, #0
 8005354:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005356:	2300      	movs	r3, #0
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	2300      	movs	r3, #0
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b10      	cmp	r3, #16
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b10      	cmp	r3, #16
 8005368:	f200 808e 	bhi.w	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d049      	beq.n	8005406 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d079      	beq.n	800546c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005378:	e086      	b.n	8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800537a:	4b49      	ldr	r3, [pc, #292]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005380:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d07f      	beq.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	0c9b      	lsrs	r3, r3, #18
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	3330      	adds	r3, #48	; 0x30
 8005396:	443b      	add	r3, r7
 8005398:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800539c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d017      	beq.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053a8:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	0c5b      	lsrs	r3, r3, #17
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	3330      	adds	r3, #48	; 0x30
 80053b4:	443b      	add	r3, r7
 80053b6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80053ba:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80053c6:	4a37      	ldr	r2, [pc, #220]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80053c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d6:	e004      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	4a33      	ldr	r2, [pc, #204]	; (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80053dc:	fb02 f303 	mul.w	r3, r2, r3
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80053e2:	4b2f      	ldr	r3, [pc, #188]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053ee:	d102      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80053f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80053f4:	e04a      	b.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005404:	e042      	b.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8005406:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005416:	d108      	bne.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8005422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005426:	62bb      	str	r3, [r7, #40]	; 0x28
 8005428:	e01f      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005434:	d109      	bne.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8005442:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005446:	62bb      	str	r3, [r7, #40]	; 0x28
 8005448:	e00f      	b.n	800546a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005454:	d11c      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d016      	beq.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8005462:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005468:	e012      	b.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800546a:	e011      	b.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800546c:	f7ff fe78 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	0b9b      	lsrs	r3, r3, #14
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	3301      	adds	r3, #1
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	fbb2 f3f3 	udiv	r3, r2, r3
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005486:	e004      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005488:	bf00      	nop
 800548a:	e002      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800548c:	bf00      	nop
 800548e:	e000      	b.n	8005492 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005490:	bf00      	nop
    }
  }
  return (frequency);
 8005492:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005494:	4618      	mov	r0, r3
 8005496:	3734      	adds	r7, #52	; 0x34
 8005498:	46bd      	mov	sp, r7
 800549a:	bd90      	pop	{r4, r7, pc}
 800549c:	080085f4 	.word	0x080085f4
 80054a0:	40021000 	.word	0x40021000
 80054a4:	007a1200 	.word	0x007a1200
 80054a8:	003d0900 	.word	0x003d0900
 80054ac:	aaaaaaab 	.word	0xaaaaaaab

080054b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e03f      	b.n	8005542 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fd fa58 	bl	800298c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2224      	movs	r2, #36	; 0x24
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f905 	bl	8005704 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b08a      	sub	sp, #40	; 0x28
 800554e:	af02      	add	r7, sp, #8
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b20      	cmp	r3, #32
 8005568:	d17c      	bne.n	8005664 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_UART_Transmit+0x2c>
 8005570:	88fb      	ldrh	r3, [r7, #6]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e075      	b.n	8005666 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_UART_Transmit+0x3e>
 8005584:	2302      	movs	r3, #2
 8005586:	e06e      	b.n	8005666 <HAL_UART_Transmit+0x11c>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2221      	movs	r2, #33	; 0x21
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559e:	f7fd fab1 	bl	8002b04 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b8:	d108      	bne.n	80055cc <HAL_UART_Transmit+0x82>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e003      	b.n	80055d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80055dc:	e02a      	b.n	8005634 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2180      	movs	r1, #128	; 0x80
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f840 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e036      	b.n	8005666 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800560c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	3302      	adds	r3, #2
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	e007      	b.n	8005626 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1cf      	bne.n	80055de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	2140      	movs	r1, #64	; 0x40
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f810 	bl	800566e <UART_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e006      	b.n	8005666 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2220      	movs	r2, #32
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	e000      	b.n	8005666 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005664:	2302      	movs	r3, #2
  }
}
 8005666:	4618      	mov	r0, r3
 8005668:	3720      	adds	r7, #32
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b084      	sub	sp, #16
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800567e:	e02c      	b.n	80056da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005686:	d028      	beq.n	80056da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <UART_WaitOnFlagUntilTimeout+0x30>
 800568e:	f7fd fa39 	bl	8002b04 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	429a      	cmp	r2, r3
 800569c:	d21d      	bcs.n	80056da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695a      	ldr	r2, [r3, #20]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 0201 	bic.w	r2, r2, #1
 80056bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2220      	movs	r2, #32
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e00f      	b.n	80056fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d0c3      	beq.n	8005680 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800573e:	f023 030c 	bic.w	r3, r3, #12
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6812      	ldr	r2, [r2, #0]
 8005746:	68b9      	ldr	r1, [r7, #8]
 8005748:	430b      	orrs	r3, r1
 800574a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a2c      	ldr	r2, [pc, #176]	; (8005818 <UART_SetConfig+0x114>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d103      	bne.n	8005774 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800576c:	f7ff fcf8 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8005770:	60f8      	str	r0, [r7, #12]
 8005772:	e002      	b.n	800577a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005774:	f7ff fce0 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 8005778:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	009a      	lsls	r2, r3, #2
 8005784:	441a      	add	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005790:	4a22      	ldr	r2, [pc, #136]	; (800581c <UART_SetConfig+0x118>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	0119      	lsls	r1, r3, #4
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	4613      	mov	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	009a      	lsls	r2, r3, #2
 80057a4:	441a      	add	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80057b0:	4b1a      	ldr	r3, [pc, #104]	; (800581c <UART_SetConfig+0x118>)
 80057b2:	fba3 0302 	umull	r0, r3, r3, r2
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	2064      	movs	r0, #100	; 0x64
 80057ba:	fb00 f303 	mul.w	r3, r0, r3
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	3332      	adds	r3, #50	; 0x32
 80057c4:	4a15      	ldr	r2, [pc, #84]	; (800581c <UART_SetConfig+0x118>)
 80057c6:	fba2 2303 	umull	r2, r3, r2, r3
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057d0:	4419      	add	r1, r3
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4613      	mov	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	009a      	lsls	r2, r3, #2
 80057dc:	441a      	add	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e8:	4b0c      	ldr	r3, [pc, #48]	; (800581c <UART_SetConfig+0x118>)
 80057ea:	fba3 0302 	umull	r0, r3, r3, r2
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	2064      	movs	r0, #100	; 0x64
 80057f2:	fb00 f303 	mul.w	r3, r0, r3
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	3332      	adds	r3, #50	; 0x32
 80057fc:	4a07      	ldr	r2, [pc, #28]	; (800581c <UART_SetConfig+0x118>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	f003 020f 	and.w	r2, r3, #15
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	440a      	add	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	40013800 	.word	0x40013800
 800581c:	51eb851f 	.word	0x51eb851f

08005820 <__errno>:
 8005820:	4b01      	ldr	r3, [pc, #4]	; (8005828 <__errno+0x8>)
 8005822:	6818      	ldr	r0, [r3, #0]
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000014 	.word	0x20000014

0800582c <__libc_init_array>:
 800582c:	b570      	push	{r4, r5, r6, lr}
 800582e:	2600      	movs	r6, #0
 8005830:	4d0c      	ldr	r5, [pc, #48]	; (8005864 <__libc_init_array+0x38>)
 8005832:	4c0d      	ldr	r4, [pc, #52]	; (8005868 <__libc_init_array+0x3c>)
 8005834:	1b64      	subs	r4, r4, r5
 8005836:	10a4      	asrs	r4, r4, #2
 8005838:	42a6      	cmp	r6, r4
 800583a:	d109      	bne.n	8005850 <__libc_init_array+0x24>
 800583c:	f002 fe8e 	bl	800855c <_init>
 8005840:	2600      	movs	r6, #0
 8005842:	4d0a      	ldr	r5, [pc, #40]	; (800586c <__libc_init_array+0x40>)
 8005844:	4c0a      	ldr	r4, [pc, #40]	; (8005870 <__libc_init_array+0x44>)
 8005846:	1b64      	subs	r4, r4, r5
 8005848:	10a4      	asrs	r4, r4, #2
 800584a:	42a6      	cmp	r6, r4
 800584c:	d105      	bne.n	800585a <__libc_init_array+0x2e>
 800584e:	bd70      	pop	{r4, r5, r6, pc}
 8005850:	f855 3b04 	ldr.w	r3, [r5], #4
 8005854:	4798      	blx	r3
 8005856:	3601      	adds	r6, #1
 8005858:	e7ee      	b.n	8005838 <__libc_init_array+0xc>
 800585a:	f855 3b04 	ldr.w	r3, [r5], #4
 800585e:	4798      	blx	r3
 8005860:	3601      	adds	r6, #1
 8005862:	e7f2      	b.n	800584a <__libc_init_array+0x1e>
 8005864:	080089fc 	.word	0x080089fc
 8005868:	080089fc 	.word	0x080089fc
 800586c:	080089fc 	.word	0x080089fc
 8005870:	08008a00 	.word	0x08008a00

08005874 <malloc>:
 8005874:	4b02      	ldr	r3, [pc, #8]	; (8005880 <malloc+0xc>)
 8005876:	4601      	mov	r1, r0
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f000 b873 	b.w	8005964 <_malloc_r>
 800587e:	bf00      	nop
 8005880:	20000014 	.word	0x20000014

08005884 <memset>:
 8005884:	4603      	mov	r3, r0
 8005886:	4402      	add	r2, r0
 8005888:	4293      	cmp	r3, r2
 800588a:	d100      	bne.n	800588e <memset+0xa>
 800588c:	4770      	bx	lr
 800588e:	f803 1b01 	strb.w	r1, [r3], #1
 8005892:	e7f9      	b.n	8005888 <memset+0x4>

08005894 <_free_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4605      	mov	r5, r0
 8005898:	2900      	cmp	r1, #0
 800589a:	d040      	beq.n	800591e <_free_r+0x8a>
 800589c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a0:	1f0c      	subs	r4, r1, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bfb8      	it	lt
 80058a6:	18e4      	addlt	r4, r4, r3
 80058a8:	f001 ff44 	bl	8007734 <__malloc_lock>
 80058ac:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <_free_r+0x8c>)
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	b933      	cbnz	r3, 80058c0 <_free_r+0x2c>
 80058b2:	6063      	str	r3, [r4, #4]
 80058b4:	6014      	str	r4, [r2, #0]
 80058b6:	4628      	mov	r0, r5
 80058b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058bc:	f001 bf40 	b.w	8007740 <__malloc_unlock>
 80058c0:	42a3      	cmp	r3, r4
 80058c2:	d908      	bls.n	80058d6 <_free_r+0x42>
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	1821      	adds	r1, r4, r0
 80058c8:	428b      	cmp	r3, r1
 80058ca:	bf01      	itttt	eq
 80058cc:	6819      	ldreq	r1, [r3, #0]
 80058ce:	685b      	ldreq	r3, [r3, #4]
 80058d0:	1809      	addeq	r1, r1, r0
 80058d2:	6021      	streq	r1, [r4, #0]
 80058d4:	e7ed      	b.n	80058b2 <_free_r+0x1e>
 80058d6:	461a      	mov	r2, r3
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	b10b      	cbz	r3, 80058e0 <_free_r+0x4c>
 80058dc:	42a3      	cmp	r3, r4
 80058de:	d9fa      	bls.n	80058d6 <_free_r+0x42>
 80058e0:	6811      	ldr	r1, [r2, #0]
 80058e2:	1850      	adds	r0, r2, r1
 80058e4:	42a0      	cmp	r0, r4
 80058e6:	d10b      	bne.n	8005900 <_free_r+0x6c>
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	4401      	add	r1, r0
 80058ec:	1850      	adds	r0, r2, r1
 80058ee:	4283      	cmp	r3, r0
 80058f0:	6011      	str	r1, [r2, #0]
 80058f2:	d1e0      	bne.n	80058b6 <_free_r+0x22>
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	4401      	add	r1, r0
 80058fa:	6011      	str	r1, [r2, #0]
 80058fc:	6053      	str	r3, [r2, #4]
 80058fe:	e7da      	b.n	80058b6 <_free_r+0x22>
 8005900:	d902      	bls.n	8005908 <_free_r+0x74>
 8005902:	230c      	movs	r3, #12
 8005904:	602b      	str	r3, [r5, #0]
 8005906:	e7d6      	b.n	80058b6 <_free_r+0x22>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	1821      	adds	r1, r4, r0
 800590c:	428b      	cmp	r3, r1
 800590e:	bf01      	itttt	eq
 8005910:	6819      	ldreq	r1, [r3, #0]
 8005912:	685b      	ldreq	r3, [r3, #4]
 8005914:	1809      	addeq	r1, r1, r0
 8005916:	6021      	streq	r1, [r4, #0]
 8005918:	6063      	str	r3, [r4, #4]
 800591a:	6054      	str	r4, [r2, #4]
 800591c:	e7cb      	b.n	80058b6 <_free_r+0x22>
 800591e:	bd38      	pop	{r3, r4, r5, pc}
 8005920:	200007a0 	.word	0x200007a0

08005924 <sbrk_aligned>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4e0e      	ldr	r6, [pc, #56]	; (8005960 <sbrk_aligned+0x3c>)
 8005928:	460c      	mov	r4, r1
 800592a:	6831      	ldr	r1, [r6, #0]
 800592c:	4605      	mov	r5, r0
 800592e:	b911      	cbnz	r1, 8005936 <sbrk_aligned+0x12>
 8005930:	f000 fd7a 	bl	8006428 <_sbrk_r>
 8005934:	6030      	str	r0, [r6, #0]
 8005936:	4621      	mov	r1, r4
 8005938:	4628      	mov	r0, r5
 800593a:	f000 fd75 	bl	8006428 <_sbrk_r>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	d00a      	beq.n	8005958 <sbrk_aligned+0x34>
 8005942:	1cc4      	adds	r4, r0, #3
 8005944:	f024 0403 	bic.w	r4, r4, #3
 8005948:	42a0      	cmp	r0, r4
 800594a:	d007      	beq.n	800595c <sbrk_aligned+0x38>
 800594c:	1a21      	subs	r1, r4, r0
 800594e:	4628      	mov	r0, r5
 8005950:	f000 fd6a 	bl	8006428 <_sbrk_r>
 8005954:	3001      	adds	r0, #1
 8005956:	d101      	bne.n	800595c <sbrk_aligned+0x38>
 8005958:	f04f 34ff 	mov.w	r4, #4294967295
 800595c:	4620      	mov	r0, r4
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	200007a4 	.word	0x200007a4

08005964 <_malloc_r>:
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	1ccd      	adds	r5, r1, #3
 800596a:	f025 0503 	bic.w	r5, r5, #3
 800596e:	3508      	adds	r5, #8
 8005970:	2d0c      	cmp	r5, #12
 8005972:	bf38      	it	cc
 8005974:	250c      	movcc	r5, #12
 8005976:	2d00      	cmp	r5, #0
 8005978:	4607      	mov	r7, r0
 800597a:	db01      	blt.n	8005980 <_malloc_r+0x1c>
 800597c:	42a9      	cmp	r1, r5
 800597e:	d905      	bls.n	800598c <_malloc_r+0x28>
 8005980:	230c      	movs	r3, #12
 8005982:	2600      	movs	r6, #0
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4630      	mov	r0, r6
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598c:	4e2e      	ldr	r6, [pc, #184]	; (8005a48 <_malloc_r+0xe4>)
 800598e:	f001 fed1 	bl	8007734 <__malloc_lock>
 8005992:	6833      	ldr	r3, [r6, #0]
 8005994:	461c      	mov	r4, r3
 8005996:	bb34      	cbnz	r4, 80059e6 <_malloc_r+0x82>
 8005998:	4629      	mov	r1, r5
 800599a:	4638      	mov	r0, r7
 800599c:	f7ff ffc2 	bl	8005924 <sbrk_aligned>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	4604      	mov	r4, r0
 80059a4:	d14d      	bne.n	8005a42 <_malloc_r+0xde>
 80059a6:	6834      	ldr	r4, [r6, #0]
 80059a8:	4626      	mov	r6, r4
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	d140      	bne.n	8005a30 <_malloc_r+0xcc>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	4631      	mov	r1, r6
 80059b2:	4638      	mov	r0, r7
 80059b4:	eb04 0803 	add.w	r8, r4, r3
 80059b8:	f000 fd36 	bl	8006428 <_sbrk_r>
 80059bc:	4580      	cmp	r8, r0
 80059be:	d13a      	bne.n	8005a36 <_malloc_r+0xd2>
 80059c0:	6821      	ldr	r1, [r4, #0]
 80059c2:	3503      	adds	r5, #3
 80059c4:	1a6d      	subs	r5, r5, r1
 80059c6:	f025 0503 	bic.w	r5, r5, #3
 80059ca:	3508      	adds	r5, #8
 80059cc:	2d0c      	cmp	r5, #12
 80059ce:	bf38      	it	cc
 80059d0:	250c      	movcc	r5, #12
 80059d2:	4638      	mov	r0, r7
 80059d4:	4629      	mov	r1, r5
 80059d6:	f7ff ffa5 	bl	8005924 <sbrk_aligned>
 80059da:	3001      	adds	r0, #1
 80059dc:	d02b      	beq.n	8005a36 <_malloc_r+0xd2>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	442b      	add	r3, r5
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	e00e      	b.n	8005a04 <_malloc_r+0xa0>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	1b52      	subs	r2, r2, r5
 80059ea:	d41e      	bmi.n	8005a2a <_malloc_r+0xc6>
 80059ec:	2a0b      	cmp	r2, #11
 80059ee:	d916      	bls.n	8005a1e <_malloc_r+0xba>
 80059f0:	1961      	adds	r1, r4, r5
 80059f2:	42a3      	cmp	r3, r4
 80059f4:	6025      	str	r5, [r4, #0]
 80059f6:	bf18      	it	ne
 80059f8:	6059      	strne	r1, [r3, #4]
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	bf08      	it	eq
 80059fe:	6031      	streq	r1, [r6, #0]
 8005a00:	5162      	str	r2, [r4, r5]
 8005a02:	604b      	str	r3, [r1, #4]
 8005a04:	4638      	mov	r0, r7
 8005a06:	f104 060b 	add.w	r6, r4, #11
 8005a0a:	f001 fe99 	bl	8007740 <__malloc_unlock>
 8005a0e:	f026 0607 	bic.w	r6, r6, #7
 8005a12:	1d23      	adds	r3, r4, #4
 8005a14:	1af2      	subs	r2, r6, r3
 8005a16:	d0b6      	beq.n	8005986 <_malloc_r+0x22>
 8005a18:	1b9b      	subs	r3, r3, r6
 8005a1a:	50a3      	str	r3, [r4, r2]
 8005a1c:	e7b3      	b.n	8005986 <_malloc_r+0x22>
 8005a1e:	6862      	ldr	r2, [r4, #4]
 8005a20:	42a3      	cmp	r3, r4
 8005a22:	bf0c      	ite	eq
 8005a24:	6032      	streq	r2, [r6, #0]
 8005a26:	605a      	strne	r2, [r3, #4]
 8005a28:	e7ec      	b.n	8005a04 <_malloc_r+0xa0>
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	6864      	ldr	r4, [r4, #4]
 8005a2e:	e7b2      	b.n	8005996 <_malloc_r+0x32>
 8005a30:	4634      	mov	r4, r6
 8005a32:	6876      	ldr	r6, [r6, #4]
 8005a34:	e7b9      	b.n	80059aa <_malloc_r+0x46>
 8005a36:	230c      	movs	r3, #12
 8005a38:	4638      	mov	r0, r7
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	f001 fe80 	bl	8007740 <__malloc_unlock>
 8005a40:	e7a1      	b.n	8005986 <_malloc_r+0x22>
 8005a42:	6025      	str	r5, [r4, #0]
 8005a44:	e7de      	b.n	8005a04 <_malloc_r+0xa0>
 8005a46:	bf00      	nop
 8005a48:	200007a0 	.word	0x200007a0

08005a4c <__cvt>:
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a52:	461f      	mov	r7, r3
 8005a54:	bfbb      	ittet	lt
 8005a56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a5a:	461f      	movlt	r7, r3
 8005a5c:	2300      	movge	r3, #0
 8005a5e:	232d      	movlt	r3, #45	; 0x2d
 8005a60:	b088      	sub	sp, #32
 8005a62:	4614      	mov	r4, r2
 8005a64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005a68:	7013      	strb	r3, [r2, #0]
 8005a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005a70:	f023 0820 	bic.w	r8, r3, #32
 8005a74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a78:	d005      	beq.n	8005a86 <__cvt+0x3a>
 8005a7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a7e:	d100      	bne.n	8005a82 <__cvt+0x36>
 8005a80:	3501      	adds	r5, #1
 8005a82:	2302      	movs	r3, #2
 8005a84:	e000      	b.n	8005a88 <__cvt+0x3c>
 8005a86:	2303      	movs	r3, #3
 8005a88:	aa07      	add	r2, sp, #28
 8005a8a:	9204      	str	r2, [sp, #16]
 8005a8c:	aa06      	add	r2, sp, #24
 8005a8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005a92:	e9cd 3500 	strd	r3, r5, [sp]
 8005a96:	4622      	mov	r2, r4
 8005a98:	463b      	mov	r3, r7
 8005a9a:	f000 fe21 	bl	80066e0 <_dtoa_r>
 8005a9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005aa2:	4606      	mov	r6, r0
 8005aa4:	d102      	bne.n	8005aac <__cvt+0x60>
 8005aa6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005aa8:	07db      	lsls	r3, r3, #31
 8005aaa:	d522      	bpl.n	8005af2 <__cvt+0xa6>
 8005aac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005ab0:	eb06 0905 	add.w	r9, r6, r5
 8005ab4:	d110      	bne.n	8005ad8 <__cvt+0x8c>
 8005ab6:	7833      	ldrb	r3, [r6, #0]
 8005ab8:	2b30      	cmp	r3, #48	; 0x30
 8005aba:	d10a      	bne.n	8005ad2 <__cvt+0x86>
 8005abc:	2200      	movs	r2, #0
 8005abe:	2300      	movs	r3, #0
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8005ac8:	b918      	cbnz	r0, 8005ad2 <__cvt+0x86>
 8005aca:	f1c5 0501 	rsb	r5, r5, #1
 8005ace:	f8ca 5000 	str.w	r5, [sl]
 8005ad2:	f8da 3000 	ldr.w	r3, [sl]
 8005ad6:	4499      	add	r9, r3
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2300      	movs	r3, #0
 8005adc:	4620      	mov	r0, r4
 8005ade:	4639      	mov	r1, r7
 8005ae0:	f7fa ff62 	bl	80009a8 <__aeabi_dcmpeq>
 8005ae4:	b108      	cbz	r0, 8005aea <__cvt+0x9e>
 8005ae6:	f8cd 901c 	str.w	r9, [sp, #28]
 8005aea:	2230      	movs	r2, #48	; 0x30
 8005aec:	9b07      	ldr	r3, [sp, #28]
 8005aee:	454b      	cmp	r3, r9
 8005af0:	d307      	bcc.n	8005b02 <__cvt+0xb6>
 8005af2:	4630      	mov	r0, r6
 8005af4:	9b07      	ldr	r3, [sp, #28]
 8005af6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005af8:	1b9b      	subs	r3, r3, r6
 8005afa:	6013      	str	r3, [r2, #0]
 8005afc:	b008      	add	sp, #32
 8005afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b02:	1c59      	adds	r1, r3, #1
 8005b04:	9107      	str	r1, [sp, #28]
 8005b06:	701a      	strb	r2, [r3, #0]
 8005b08:	e7f0      	b.n	8005aec <__cvt+0xa0>

08005b0a <__exponent>:
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b0e:	2900      	cmp	r1, #0
 8005b10:	f803 2b02 	strb.w	r2, [r3], #2
 8005b14:	bfb6      	itet	lt
 8005b16:	222d      	movlt	r2, #45	; 0x2d
 8005b18:	222b      	movge	r2, #43	; 0x2b
 8005b1a:	4249      	neglt	r1, r1
 8005b1c:	2909      	cmp	r1, #9
 8005b1e:	7042      	strb	r2, [r0, #1]
 8005b20:	dd2b      	ble.n	8005b7a <__exponent+0x70>
 8005b22:	f10d 0407 	add.w	r4, sp, #7
 8005b26:	46a4      	mov	ip, r4
 8005b28:	270a      	movs	r7, #10
 8005b2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b2e:	460a      	mov	r2, r1
 8005b30:	46a6      	mov	lr, r4
 8005b32:	fb07 1516 	mls	r5, r7, r6, r1
 8005b36:	2a63      	cmp	r2, #99	; 0x63
 8005b38:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b46:	dcf0      	bgt.n	8005b2a <__exponent+0x20>
 8005b48:	3130      	adds	r1, #48	; 0x30
 8005b4a:	f1ae 0502 	sub.w	r5, lr, #2
 8005b4e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b52:	4629      	mov	r1, r5
 8005b54:	1c44      	adds	r4, r0, #1
 8005b56:	4561      	cmp	r1, ip
 8005b58:	d30a      	bcc.n	8005b70 <__exponent+0x66>
 8005b5a:	f10d 0209 	add.w	r2, sp, #9
 8005b5e:	eba2 020e 	sub.w	r2, r2, lr
 8005b62:	4565      	cmp	r5, ip
 8005b64:	bf88      	it	hi
 8005b66:	2200      	movhi	r2, #0
 8005b68:	4413      	add	r3, r2
 8005b6a:	1a18      	subs	r0, r3, r0
 8005b6c:	b003      	add	sp, #12
 8005b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b74:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b78:	e7ed      	b.n	8005b56 <__exponent+0x4c>
 8005b7a:	2330      	movs	r3, #48	; 0x30
 8005b7c:	3130      	adds	r1, #48	; 0x30
 8005b7e:	7083      	strb	r3, [r0, #2]
 8005b80:	70c1      	strb	r1, [r0, #3]
 8005b82:	1d03      	adds	r3, r0, #4
 8005b84:	e7f1      	b.n	8005b6a <__exponent+0x60>
	...

08005b88 <_printf_float>:
 8005b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b8c:	b091      	sub	sp, #68	; 0x44
 8005b8e:	460c      	mov	r4, r1
 8005b90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005b94:	4616      	mov	r6, r2
 8005b96:	461f      	mov	r7, r3
 8005b98:	4605      	mov	r5, r0
 8005b9a:	f001 fd43 	bl	8007624 <_localeconv_r>
 8005b9e:	6803      	ldr	r3, [r0, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba4:	f7fa fad4 	bl	8000150 <strlen>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	930e      	str	r3, [sp, #56]	; 0x38
 8005bac:	f8d8 3000 	ldr.w	r3, [r8]
 8005bb0:	900a      	str	r0, [sp, #40]	; 0x28
 8005bb2:	3307      	adds	r3, #7
 8005bb4:	f023 0307 	bic.w	r3, r3, #7
 8005bb8:	f103 0208 	add.w	r2, r3, #8
 8005bbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005bc0:	f8d4 b000 	ldr.w	fp, [r4]
 8005bc4:	f8c8 2000 	str.w	r2, [r8]
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005bd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005bd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005bd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	4640      	mov	r0, r8
 8005be0:	4b9c      	ldr	r3, [pc, #624]	; (8005e54 <_printf_float+0x2cc>)
 8005be2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005be4:	f7fa ff12 	bl	8000a0c <__aeabi_dcmpun>
 8005be8:	bb70      	cbnz	r0, 8005c48 <_printf_float+0xc0>
 8005bea:	f04f 32ff 	mov.w	r2, #4294967295
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4b98      	ldr	r3, [pc, #608]	; (8005e54 <_printf_float+0x2cc>)
 8005bf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bf4:	f7fa feec 	bl	80009d0 <__aeabi_dcmple>
 8005bf8:	bb30      	cbnz	r0, 8005c48 <_printf_float+0xc0>
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4640      	mov	r0, r8
 8005c00:	4651      	mov	r1, sl
 8005c02:	f7fa fedb 	bl	80009bc <__aeabi_dcmplt>
 8005c06:	b110      	cbz	r0, 8005c0e <_printf_float+0x86>
 8005c08:	232d      	movs	r3, #45	; 0x2d
 8005c0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c0e:	4b92      	ldr	r3, [pc, #584]	; (8005e58 <_printf_float+0x2d0>)
 8005c10:	4892      	ldr	r0, [pc, #584]	; (8005e5c <_printf_float+0x2d4>)
 8005c12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005c16:	bf94      	ite	ls
 8005c18:	4698      	movls	r8, r3
 8005c1a:	4680      	movhi	r8, r0
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	f04f 0a00 	mov.w	sl, #0
 8005c22:	6123      	str	r3, [r4, #16]
 8005c24:	f02b 0304 	bic.w	r3, fp, #4
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	4633      	mov	r3, r6
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4628      	mov	r0, r5
 8005c30:	9700      	str	r7, [sp, #0]
 8005c32:	aa0f      	add	r2, sp, #60	; 0x3c
 8005c34:	f000 f9d4 	bl	8005fe0 <_printf_common>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f040 8090 	bne.w	8005d5e <_printf_float+0x1d6>
 8005c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c42:	b011      	add	sp, #68	; 0x44
 8005c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c48:	4642      	mov	r2, r8
 8005c4a:	4653      	mov	r3, sl
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	4651      	mov	r1, sl
 8005c50:	f7fa fedc 	bl	8000a0c <__aeabi_dcmpun>
 8005c54:	b148      	cbz	r0, 8005c6a <_printf_float+0xe2>
 8005c56:	f1ba 0f00 	cmp.w	sl, #0
 8005c5a:	bfb8      	it	lt
 8005c5c:	232d      	movlt	r3, #45	; 0x2d
 8005c5e:	4880      	ldr	r0, [pc, #512]	; (8005e60 <_printf_float+0x2d8>)
 8005c60:	bfb8      	it	lt
 8005c62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c66:	4b7f      	ldr	r3, [pc, #508]	; (8005e64 <_printf_float+0x2dc>)
 8005c68:	e7d3      	b.n	8005c12 <_printf_float+0x8a>
 8005c6a:	6863      	ldr	r3, [r4, #4]
 8005c6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005c70:	1c5a      	adds	r2, r3, #1
 8005c72:	d142      	bne.n	8005cfa <_printf_float+0x172>
 8005c74:	2306      	movs	r3, #6
 8005c76:	6063      	str	r3, [r4, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	9206      	str	r2, [sp, #24]
 8005c7c:	aa0e      	add	r2, sp, #56	; 0x38
 8005c7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005c82:	aa0d      	add	r2, sp, #52	; 0x34
 8005c84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005c88:	9203      	str	r2, [sp, #12]
 8005c8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005c8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	6863      	ldr	r3, [r4, #4]
 8005c96:	4642      	mov	r2, r8
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	4653      	mov	r3, sl
 8005c9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ca0:	f7ff fed4 	bl	8005a4c <__cvt>
 8005ca4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	2947      	cmp	r1, #71	; 0x47
 8005caa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005cac:	d108      	bne.n	8005cc0 <_printf_float+0x138>
 8005cae:	1cc8      	adds	r0, r1, #3
 8005cb0:	db02      	blt.n	8005cb8 <_printf_float+0x130>
 8005cb2:	6863      	ldr	r3, [r4, #4]
 8005cb4:	4299      	cmp	r1, r3
 8005cb6:	dd40      	ble.n	8005d3a <_printf_float+0x1b2>
 8005cb8:	f1a9 0902 	sub.w	r9, r9, #2
 8005cbc:	fa5f f989 	uxtb.w	r9, r9
 8005cc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005cc4:	d81f      	bhi.n	8005d06 <_printf_float+0x17e>
 8005cc6:	464a      	mov	r2, r9
 8005cc8:	3901      	subs	r1, #1
 8005cca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cce:	910d      	str	r1, [sp, #52]	; 0x34
 8005cd0:	f7ff ff1b 	bl	8005b0a <__exponent>
 8005cd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cd6:	4682      	mov	sl, r0
 8005cd8:	1813      	adds	r3, r2, r0
 8005cda:	2a01      	cmp	r2, #1
 8005cdc:	6123      	str	r3, [r4, #16]
 8005cde:	dc02      	bgt.n	8005ce6 <_printf_float+0x15e>
 8005ce0:	6822      	ldr	r2, [r4, #0]
 8005ce2:	07d2      	lsls	r2, r2, #31
 8005ce4:	d501      	bpl.n	8005cea <_printf_float+0x162>
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d09b      	beq.n	8005c2a <_printf_float+0xa2>
 8005cf2:	232d      	movs	r3, #45	; 0x2d
 8005cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cf8:	e797      	b.n	8005c2a <_printf_float+0xa2>
 8005cfa:	2947      	cmp	r1, #71	; 0x47
 8005cfc:	d1bc      	bne.n	8005c78 <_printf_float+0xf0>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1ba      	bne.n	8005c78 <_printf_float+0xf0>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e7b7      	b.n	8005c76 <_printf_float+0xee>
 8005d06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005d0a:	d118      	bne.n	8005d3e <_printf_float+0x1b6>
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	6863      	ldr	r3, [r4, #4]
 8005d10:	dd0b      	ble.n	8005d2a <_printf_float+0x1a2>
 8005d12:	6121      	str	r1, [r4, #16]
 8005d14:	b913      	cbnz	r3, 8005d1c <_printf_float+0x194>
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	07d0      	lsls	r0, r2, #31
 8005d1a:	d502      	bpl.n	8005d22 <_printf_float+0x19a>
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	440b      	add	r3, r1
 8005d20:	6123      	str	r3, [r4, #16]
 8005d22:	f04f 0a00 	mov.w	sl, #0
 8005d26:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d28:	e7df      	b.n	8005cea <_printf_float+0x162>
 8005d2a:	b913      	cbnz	r3, 8005d32 <_printf_float+0x1aa>
 8005d2c:	6822      	ldr	r2, [r4, #0]
 8005d2e:	07d2      	lsls	r2, r2, #31
 8005d30:	d501      	bpl.n	8005d36 <_printf_float+0x1ae>
 8005d32:	3302      	adds	r3, #2
 8005d34:	e7f4      	b.n	8005d20 <_printf_float+0x198>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e7f2      	b.n	8005d20 <_printf_float+0x198>
 8005d3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d40:	4299      	cmp	r1, r3
 8005d42:	db05      	blt.n	8005d50 <_printf_float+0x1c8>
 8005d44:	6823      	ldr	r3, [r4, #0]
 8005d46:	6121      	str	r1, [r4, #16]
 8005d48:	07d8      	lsls	r0, r3, #31
 8005d4a:	d5ea      	bpl.n	8005d22 <_printf_float+0x19a>
 8005d4c:	1c4b      	adds	r3, r1, #1
 8005d4e:	e7e7      	b.n	8005d20 <_printf_float+0x198>
 8005d50:	2900      	cmp	r1, #0
 8005d52:	bfcc      	ite	gt
 8005d54:	2201      	movgt	r2, #1
 8005d56:	f1c1 0202 	rsble	r2, r1, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	e7e0      	b.n	8005d20 <_printf_float+0x198>
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	055a      	lsls	r2, r3, #21
 8005d62:	d407      	bmi.n	8005d74 <_printf_float+0x1ec>
 8005d64:	6923      	ldr	r3, [r4, #16]
 8005d66:	4642      	mov	r2, r8
 8005d68:	4631      	mov	r1, r6
 8005d6a:	4628      	mov	r0, r5
 8005d6c:	47b8      	blx	r7
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d12b      	bne.n	8005dca <_printf_float+0x242>
 8005d72:	e764      	b.n	8005c3e <_printf_float+0xb6>
 8005d74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005d78:	f240 80dd 	bls.w	8005f36 <_printf_float+0x3ae>
 8005d7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d80:	2200      	movs	r2, #0
 8005d82:	2300      	movs	r3, #0
 8005d84:	f7fa fe10 	bl	80009a8 <__aeabi_dcmpeq>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d033      	beq.n	8005df4 <_printf_float+0x26c>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4628      	mov	r0, r5
 8005d92:	4a35      	ldr	r2, [pc, #212]	; (8005e68 <_printf_float+0x2e0>)
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f af51 	beq.w	8005c3e <_printf_float+0xb6>
 8005d9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005da0:	429a      	cmp	r2, r3
 8005da2:	db02      	blt.n	8005daa <_printf_float+0x222>
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	07d8      	lsls	r0, r3, #31
 8005da8:	d50f      	bpl.n	8005dca <_printf_float+0x242>
 8005daa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	47b8      	blx	r7
 8005db4:	3001      	adds	r0, #1
 8005db6:	f43f af42 	beq.w	8005c3e <_printf_float+0xb6>
 8005dba:	f04f 0800 	mov.w	r8, #0
 8005dbe:	f104 091a 	add.w	r9, r4, #26
 8005dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	4543      	cmp	r3, r8
 8005dc8:	dc09      	bgt.n	8005dde <_printf_float+0x256>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	079b      	lsls	r3, r3, #30
 8005dce:	f100 8102 	bmi.w	8005fd6 <_printf_float+0x44e>
 8005dd2:	68e0      	ldr	r0, [r4, #12]
 8005dd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005dd6:	4298      	cmp	r0, r3
 8005dd8:	bfb8      	it	lt
 8005dda:	4618      	movlt	r0, r3
 8005ddc:	e731      	b.n	8005c42 <_printf_float+0xba>
 8005dde:	2301      	movs	r3, #1
 8005de0:	464a      	mov	r2, r9
 8005de2:	4631      	mov	r1, r6
 8005de4:	4628      	mov	r0, r5
 8005de6:	47b8      	blx	r7
 8005de8:	3001      	adds	r0, #1
 8005dea:	f43f af28 	beq.w	8005c3e <_printf_float+0xb6>
 8005dee:	f108 0801 	add.w	r8, r8, #1
 8005df2:	e7e6      	b.n	8005dc2 <_printf_float+0x23a>
 8005df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	dc38      	bgt.n	8005e6c <_printf_float+0x2e4>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4628      	mov	r0, r5
 8005e00:	4a19      	ldr	r2, [pc, #100]	; (8005e68 <_printf_float+0x2e0>)
 8005e02:	47b8      	blx	r7
 8005e04:	3001      	adds	r0, #1
 8005e06:	f43f af1a 	beq.w	8005c3e <_printf_float+0xb6>
 8005e0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	d102      	bne.n	8005e18 <_printf_float+0x290>
 8005e12:	6823      	ldr	r3, [r4, #0]
 8005e14:	07d9      	lsls	r1, r3, #31
 8005e16:	d5d8      	bpl.n	8005dca <_printf_float+0x242>
 8005e18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e1c:	4631      	mov	r1, r6
 8005e1e:	4628      	mov	r0, r5
 8005e20:	47b8      	blx	r7
 8005e22:	3001      	adds	r0, #1
 8005e24:	f43f af0b 	beq.w	8005c3e <_printf_float+0xb6>
 8005e28:	f04f 0900 	mov.w	r9, #0
 8005e2c:	f104 0a1a 	add.w	sl, r4, #26
 8005e30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e32:	425b      	negs	r3, r3
 8005e34:	454b      	cmp	r3, r9
 8005e36:	dc01      	bgt.n	8005e3c <_printf_float+0x2b4>
 8005e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e3a:	e794      	b.n	8005d66 <_printf_float+0x1de>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	4652      	mov	r2, sl
 8005e40:	4631      	mov	r1, r6
 8005e42:	4628      	mov	r0, r5
 8005e44:	47b8      	blx	r7
 8005e46:	3001      	adds	r0, #1
 8005e48:	f43f aef9 	beq.w	8005c3e <_printf_float+0xb6>
 8005e4c:	f109 0901 	add.w	r9, r9, #1
 8005e50:	e7ee      	b.n	8005e30 <_printf_float+0x2a8>
 8005e52:	bf00      	nop
 8005e54:	7fefffff 	.word	0x7fefffff
 8005e58:	08008620 	.word	0x08008620
 8005e5c:	08008624 	.word	0x08008624
 8005e60:	0800862c 	.word	0x0800862c
 8005e64:	08008628 	.word	0x08008628
 8005e68:	08008630 	.word	0x08008630
 8005e6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e70:	429a      	cmp	r2, r3
 8005e72:	bfa8      	it	ge
 8005e74:	461a      	movge	r2, r3
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	4691      	mov	r9, r2
 8005e7a:	dc37      	bgt.n	8005eec <_printf_float+0x364>
 8005e7c:	f04f 0b00 	mov.w	fp, #0
 8005e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e84:	f104 021a 	add.w	r2, r4, #26
 8005e88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005e8c:	ebaa 0309 	sub.w	r3, sl, r9
 8005e90:	455b      	cmp	r3, fp
 8005e92:	dc33      	bgt.n	8005efc <_printf_float+0x374>
 8005e94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	db3b      	blt.n	8005f14 <_printf_float+0x38c>
 8005e9c:	6823      	ldr	r3, [r4, #0]
 8005e9e:	07da      	lsls	r2, r3, #31
 8005ea0:	d438      	bmi.n	8005f14 <_printf_float+0x38c>
 8005ea2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ea4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005ea6:	eba3 020a 	sub.w	r2, r3, sl
 8005eaa:	eba3 0901 	sub.w	r9, r3, r1
 8005eae:	4591      	cmp	r9, r2
 8005eb0:	bfa8      	it	ge
 8005eb2:	4691      	movge	r9, r2
 8005eb4:	f1b9 0f00 	cmp.w	r9, #0
 8005eb8:	dc34      	bgt.n	8005f24 <_printf_float+0x39c>
 8005eba:	f04f 0800 	mov.w	r8, #0
 8005ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ec2:	f104 0a1a 	add.w	sl, r4, #26
 8005ec6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	eba3 0309 	sub.w	r3, r3, r9
 8005ed0:	4543      	cmp	r3, r8
 8005ed2:	f77f af7a 	ble.w	8005dca <_printf_float+0x242>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4652      	mov	r2, sl
 8005eda:	4631      	mov	r1, r6
 8005edc:	4628      	mov	r0, r5
 8005ede:	47b8      	blx	r7
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	f43f aeac 	beq.w	8005c3e <_printf_float+0xb6>
 8005ee6:	f108 0801 	add.w	r8, r8, #1
 8005eea:	e7ec      	b.n	8005ec6 <_printf_float+0x33e>
 8005eec:	4613      	mov	r3, r2
 8005eee:	4631      	mov	r1, r6
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	47b8      	blx	r7
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d1c0      	bne.n	8005e7c <_printf_float+0x2f4>
 8005efa:	e6a0      	b.n	8005c3e <_printf_float+0xb6>
 8005efc:	2301      	movs	r3, #1
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	f43f ae99 	beq.w	8005c3e <_printf_float+0xb6>
 8005f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005f0e:	f10b 0b01 	add.w	fp, fp, #1
 8005f12:	e7b9      	b.n	8005e88 <_printf_float+0x300>
 8005f14:	4631      	mov	r1, r6
 8005f16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f1a:	4628      	mov	r0, r5
 8005f1c:	47b8      	blx	r7
 8005f1e:	3001      	adds	r0, #1
 8005f20:	d1bf      	bne.n	8005ea2 <_printf_float+0x31a>
 8005f22:	e68c      	b.n	8005c3e <_printf_float+0xb6>
 8005f24:	464b      	mov	r3, r9
 8005f26:	4631      	mov	r1, r6
 8005f28:	4628      	mov	r0, r5
 8005f2a:	eb08 020a 	add.w	r2, r8, sl
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	d1c2      	bne.n	8005eba <_printf_float+0x332>
 8005f34:	e683      	b.n	8005c3e <_printf_float+0xb6>
 8005f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f38:	2a01      	cmp	r2, #1
 8005f3a:	dc01      	bgt.n	8005f40 <_printf_float+0x3b8>
 8005f3c:	07db      	lsls	r3, r3, #31
 8005f3e:	d537      	bpl.n	8005fb0 <_printf_float+0x428>
 8005f40:	2301      	movs	r3, #1
 8005f42:	4642      	mov	r2, r8
 8005f44:	4631      	mov	r1, r6
 8005f46:	4628      	mov	r0, r5
 8005f48:	47b8      	blx	r7
 8005f4a:	3001      	adds	r0, #1
 8005f4c:	f43f ae77 	beq.w	8005c3e <_printf_float+0xb6>
 8005f50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f54:	4631      	mov	r1, r6
 8005f56:	4628      	mov	r0, r5
 8005f58:	47b8      	blx	r7
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	f43f ae6f 	beq.w	8005c3e <_printf_float+0xb6>
 8005f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f64:	2200      	movs	r2, #0
 8005f66:	2300      	movs	r3, #0
 8005f68:	f7fa fd1e 	bl	80009a8 <__aeabi_dcmpeq>
 8005f6c:	b9d8      	cbnz	r0, 8005fa6 <_printf_float+0x41e>
 8005f6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f70:	f108 0201 	add.w	r2, r8, #1
 8005f74:	3b01      	subs	r3, #1
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	d10e      	bne.n	8005f9e <_printf_float+0x416>
 8005f80:	e65d      	b.n	8005c3e <_printf_float+0xb6>
 8005f82:	2301      	movs	r3, #1
 8005f84:	464a      	mov	r2, r9
 8005f86:	4631      	mov	r1, r6
 8005f88:	4628      	mov	r0, r5
 8005f8a:	47b8      	blx	r7
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	f43f ae56 	beq.w	8005c3e <_printf_float+0xb6>
 8005f92:	f108 0801 	add.w	r8, r8, #1
 8005f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	4543      	cmp	r3, r8
 8005f9c:	dcf1      	bgt.n	8005f82 <_printf_float+0x3fa>
 8005f9e:	4653      	mov	r3, sl
 8005fa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005fa4:	e6e0      	b.n	8005d68 <_printf_float+0x1e0>
 8005fa6:	f04f 0800 	mov.w	r8, #0
 8005faa:	f104 091a 	add.w	r9, r4, #26
 8005fae:	e7f2      	b.n	8005f96 <_printf_float+0x40e>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4642      	mov	r2, r8
 8005fb4:	e7df      	b.n	8005f76 <_printf_float+0x3ee>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	464a      	mov	r2, r9
 8005fba:	4631      	mov	r1, r6
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	47b8      	blx	r7
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	f43f ae3c 	beq.w	8005c3e <_printf_float+0xb6>
 8005fc6:	f108 0801 	add.w	r8, r8, #1
 8005fca:	68e3      	ldr	r3, [r4, #12]
 8005fcc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005fce:	1a5b      	subs	r3, r3, r1
 8005fd0:	4543      	cmp	r3, r8
 8005fd2:	dcf0      	bgt.n	8005fb6 <_printf_float+0x42e>
 8005fd4:	e6fd      	b.n	8005dd2 <_printf_float+0x24a>
 8005fd6:	f04f 0800 	mov.w	r8, #0
 8005fda:	f104 0919 	add.w	r9, r4, #25
 8005fde:	e7f4      	b.n	8005fca <_printf_float+0x442>

08005fe0 <_printf_common>:
 8005fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe4:	4616      	mov	r6, r2
 8005fe6:	4699      	mov	r9, r3
 8005fe8:	688a      	ldr	r2, [r1, #8]
 8005fea:	690b      	ldr	r3, [r1, #16]
 8005fec:	4607      	mov	r7, r0
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	bfb8      	it	lt
 8005ff2:	4613      	movlt	r3, r2
 8005ff4:	6033      	str	r3, [r6, #0]
 8005ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006000:	b10a      	cbz	r2, 8006006 <_printf_common+0x26>
 8006002:	3301      	adds	r3, #1
 8006004:	6033      	str	r3, [r6, #0]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	0699      	lsls	r1, r3, #26
 800600a:	bf42      	ittt	mi
 800600c:	6833      	ldrmi	r3, [r6, #0]
 800600e:	3302      	addmi	r3, #2
 8006010:	6033      	strmi	r3, [r6, #0]
 8006012:	6825      	ldr	r5, [r4, #0]
 8006014:	f015 0506 	ands.w	r5, r5, #6
 8006018:	d106      	bne.n	8006028 <_printf_common+0x48>
 800601a:	f104 0a19 	add.w	sl, r4, #25
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	6832      	ldr	r2, [r6, #0]
 8006022:	1a9b      	subs	r3, r3, r2
 8006024:	42ab      	cmp	r3, r5
 8006026:	dc28      	bgt.n	800607a <_printf_common+0x9a>
 8006028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800602c:	1e13      	subs	r3, r2, #0
 800602e:	6822      	ldr	r2, [r4, #0]
 8006030:	bf18      	it	ne
 8006032:	2301      	movne	r3, #1
 8006034:	0692      	lsls	r2, r2, #26
 8006036:	d42d      	bmi.n	8006094 <_printf_common+0xb4>
 8006038:	4649      	mov	r1, r9
 800603a:	4638      	mov	r0, r7
 800603c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006040:	47c0      	blx	r8
 8006042:	3001      	adds	r0, #1
 8006044:	d020      	beq.n	8006088 <_printf_common+0xa8>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	68e5      	ldr	r5, [r4, #12]
 800604a:	f003 0306 	and.w	r3, r3, #6
 800604e:	2b04      	cmp	r3, #4
 8006050:	bf18      	it	ne
 8006052:	2500      	movne	r5, #0
 8006054:	6832      	ldr	r2, [r6, #0]
 8006056:	f04f 0600 	mov.w	r6, #0
 800605a:	68a3      	ldr	r3, [r4, #8]
 800605c:	bf08      	it	eq
 800605e:	1aad      	subeq	r5, r5, r2
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	bf08      	it	eq
 8006064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006068:	4293      	cmp	r3, r2
 800606a:	bfc4      	itt	gt
 800606c:	1a9b      	subgt	r3, r3, r2
 800606e:	18ed      	addgt	r5, r5, r3
 8006070:	341a      	adds	r4, #26
 8006072:	42b5      	cmp	r5, r6
 8006074:	d11a      	bne.n	80060ac <_printf_common+0xcc>
 8006076:	2000      	movs	r0, #0
 8006078:	e008      	b.n	800608c <_printf_common+0xac>
 800607a:	2301      	movs	r3, #1
 800607c:	4652      	mov	r2, sl
 800607e:	4649      	mov	r1, r9
 8006080:	4638      	mov	r0, r7
 8006082:	47c0      	blx	r8
 8006084:	3001      	adds	r0, #1
 8006086:	d103      	bne.n	8006090 <_printf_common+0xb0>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006090:	3501      	adds	r5, #1
 8006092:	e7c4      	b.n	800601e <_printf_common+0x3e>
 8006094:	2030      	movs	r0, #48	; 0x30
 8006096:	18e1      	adds	r1, r4, r3
 8006098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060a2:	4422      	add	r2, r4
 80060a4:	3302      	adds	r3, #2
 80060a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060aa:	e7c5      	b.n	8006038 <_printf_common+0x58>
 80060ac:	2301      	movs	r3, #1
 80060ae:	4622      	mov	r2, r4
 80060b0:	4649      	mov	r1, r9
 80060b2:	4638      	mov	r0, r7
 80060b4:	47c0      	blx	r8
 80060b6:	3001      	adds	r0, #1
 80060b8:	d0e6      	beq.n	8006088 <_printf_common+0xa8>
 80060ba:	3601      	adds	r6, #1
 80060bc:	e7d9      	b.n	8006072 <_printf_common+0x92>
	...

080060c0 <_printf_i>:
 80060c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c4:	7e0f      	ldrb	r7, [r1, #24]
 80060c6:	4691      	mov	r9, r2
 80060c8:	2f78      	cmp	r7, #120	; 0x78
 80060ca:	4680      	mov	r8, r0
 80060cc:	460c      	mov	r4, r1
 80060ce:	469a      	mov	sl, r3
 80060d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060d6:	d807      	bhi.n	80060e8 <_printf_i+0x28>
 80060d8:	2f62      	cmp	r7, #98	; 0x62
 80060da:	d80a      	bhi.n	80060f2 <_printf_i+0x32>
 80060dc:	2f00      	cmp	r7, #0
 80060de:	f000 80d9 	beq.w	8006294 <_printf_i+0x1d4>
 80060e2:	2f58      	cmp	r7, #88	; 0x58
 80060e4:	f000 80a4 	beq.w	8006230 <_printf_i+0x170>
 80060e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060f0:	e03a      	b.n	8006168 <_printf_i+0xa8>
 80060f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060f6:	2b15      	cmp	r3, #21
 80060f8:	d8f6      	bhi.n	80060e8 <_printf_i+0x28>
 80060fa:	a101      	add	r1, pc, #4	; (adr r1, 8006100 <_printf_i+0x40>)
 80060fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006100:	08006159 	.word	0x08006159
 8006104:	0800616d 	.word	0x0800616d
 8006108:	080060e9 	.word	0x080060e9
 800610c:	080060e9 	.word	0x080060e9
 8006110:	080060e9 	.word	0x080060e9
 8006114:	080060e9 	.word	0x080060e9
 8006118:	0800616d 	.word	0x0800616d
 800611c:	080060e9 	.word	0x080060e9
 8006120:	080060e9 	.word	0x080060e9
 8006124:	080060e9 	.word	0x080060e9
 8006128:	080060e9 	.word	0x080060e9
 800612c:	0800627b 	.word	0x0800627b
 8006130:	0800619d 	.word	0x0800619d
 8006134:	0800625d 	.word	0x0800625d
 8006138:	080060e9 	.word	0x080060e9
 800613c:	080060e9 	.word	0x080060e9
 8006140:	0800629d 	.word	0x0800629d
 8006144:	080060e9 	.word	0x080060e9
 8006148:	0800619d 	.word	0x0800619d
 800614c:	080060e9 	.word	0x080060e9
 8006150:	080060e9 	.word	0x080060e9
 8006154:	08006265 	.word	0x08006265
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	1d1a      	adds	r2, r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	602a      	str	r2, [r5, #0]
 8006160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006168:	2301      	movs	r3, #1
 800616a:	e0a4      	b.n	80062b6 <_printf_i+0x1f6>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	6829      	ldr	r1, [r5, #0]
 8006170:	0606      	lsls	r6, r0, #24
 8006172:	f101 0304 	add.w	r3, r1, #4
 8006176:	d50a      	bpl.n	800618e <_printf_i+0xce>
 8006178:	680e      	ldr	r6, [r1, #0]
 800617a:	602b      	str	r3, [r5, #0]
 800617c:	2e00      	cmp	r6, #0
 800617e:	da03      	bge.n	8006188 <_printf_i+0xc8>
 8006180:	232d      	movs	r3, #45	; 0x2d
 8006182:	4276      	negs	r6, r6
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006188:	230a      	movs	r3, #10
 800618a:	485e      	ldr	r0, [pc, #376]	; (8006304 <_printf_i+0x244>)
 800618c:	e019      	b.n	80061c2 <_printf_i+0x102>
 800618e:	680e      	ldr	r6, [r1, #0]
 8006190:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006194:	602b      	str	r3, [r5, #0]
 8006196:	bf18      	it	ne
 8006198:	b236      	sxthne	r6, r6
 800619a:	e7ef      	b.n	800617c <_printf_i+0xbc>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	6820      	ldr	r0, [r4, #0]
 80061a0:	1d19      	adds	r1, r3, #4
 80061a2:	6029      	str	r1, [r5, #0]
 80061a4:	0601      	lsls	r1, r0, #24
 80061a6:	d501      	bpl.n	80061ac <_printf_i+0xec>
 80061a8:	681e      	ldr	r6, [r3, #0]
 80061aa:	e002      	b.n	80061b2 <_printf_i+0xf2>
 80061ac:	0646      	lsls	r6, r0, #25
 80061ae:	d5fb      	bpl.n	80061a8 <_printf_i+0xe8>
 80061b0:	881e      	ldrh	r6, [r3, #0]
 80061b2:	2f6f      	cmp	r7, #111	; 0x6f
 80061b4:	bf0c      	ite	eq
 80061b6:	2308      	moveq	r3, #8
 80061b8:	230a      	movne	r3, #10
 80061ba:	4852      	ldr	r0, [pc, #328]	; (8006304 <_printf_i+0x244>)
 80061bc:	2100      	movs	r1, #0
 80061be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061c2:	6865      	ldr	r5, [r4, #4]
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	bfa8      	it	ge
 80061c8:	6821      	ldrge	r1, [r4, #0]
 80061ca:	60a5      	str	r5, [r4, #8]
 80061cc:	bfa4      	itt	ge
 80061ce:	f021 0104 	bicge.w	r1, r1, #4
 80061d2:	6021      	strge	r1, [r4, #0]
 80061d4:	b90e      	cbnz	r6, 80061da <_printf_i+0x11a>
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	d04d      	beq.n	8006276 <_printf_i+0x1b6>
 80061da:	4615      	mov	r5, r2
 80061dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80061e0:	fb03 6711 	mls	r7, r3, r1, r6
 80061e4:	5dc7      	ldrb	r7, [r0, r7]
 80061e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061ea:	4637      	mov	r7, r6
 80061ec:	42bb      	cmp	r3, r7
 80061ee:	460e      	mov	r6, r1
 80061f0:	d9f4      	bls.n	80061dc <_printf_i+0x11c>
 80061f2:	2b08      	cmp	r3, #8
 80061f4:	d10b      	bne.n	800620e <_printf_i+0x14e>
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	07de      	lsls	r6, r3, #31
 80061fa:	d508      	bpl.n	800620e <_printf_i+0x14e>
 80061fc:	6923      	ldr	r3, [r4, #16]
 80061fe:	6861      	ldr	r1, [r4, #4]
 8006200:	4299      	cmp	r1, r3
 8006202:	bfde      	ittt	le
 8006204:	2330      	movle	r3, #48	; 0x30
 8006206:	f805 3c01 	strble.w	r3, [r5, #-1]
 800620a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800620e:	1b52      	subs	r2, r2, r5
 8006210:	6122      	str	r2, [r4, #16]
 8006212:	464b      	mov	r3, r9
 8006214:	4621      	mov	r1, r4
 8006216:	4640      	mov	r0, r8
 8006218:	f8cd a000 	str.w	sl, [sp]
 800621c:	aa03      	add	r2, sp, #12
 800621e:	f7ff fedf 	bl	8005fe0 <_printf_common>
 8006222:	3001      	adds	r0, #1
 8006224:	d14c      	bne.n	80062c0 <_printf_i+0x200>
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	b004      	add	sp, #16
 800622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006230:	4834      	ldr	r0, [pc, #208]	; (8006304 <_printf_i+0x244>)
 8006232:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006236:	6829      	ldr	r1, [r5, #0]
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	f851 6b04 	ldr.w	r6, [r1], #4
 800623e:	6029      	str	r1, [r5, #0]
 8006240:	061d      	lsls	r5, r3, #24
 8006242:	d514      	bpl.n	800626e <_printf_i+0x1ae>
 8006244:	07df      	lsls	r7, r3, #31
 8006246:	bf44      	itt	mi
 8006248:	f043 0320 	orrmi.w	r3, r3, #32
 800624c:	6023      	strmi	r3, [r4, #0]
 800624e:	b91e      	cbnz	r6, 8006258 <_printf_i+0x198>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	f023 0320 	bic.w	r3, r3, #32
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	2310      	movs	r3, #16
 800625a:	e7af      	b.n	80061bc <_printf_i+0xfc>
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	f043 0320 	orr.w	r3, r3, #32
 8006262:	6023      	str	r3, [r4, #0]
 8006264:	2378      	movs	r3, #120	; 0x78
 8006266:	4828      	ldr	r0, [pc, #160]	; (8006308 <_printf_i+0x248>)
 8006268:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800626c:	e7e3      	b.n	8006236 <_printf_i+0x176>
 800626e:	0659      	lsls	r1, r3, #25
 8006270:	bf48      	it	mi
 8006272:	b2b6      	uxthmi	r6, r6
 8006274:	e7e6      	b.n	8006244 <_printf_i+0x184>
 8006276:	4615      	mov	r5, r2
 8006278:	e7bb      	b.n	80061f2 <_printf_i+0x132>
 800627a:	682b      	ldr	r3, [r5, #0]
 800627c:	6826      	ldr	r6, [r4, #0]
 800627e:	1d18      	adds	r0, r3, #4
 8006280:	6961      	ldr	r1, [r4, #20]
 8006282:	6028      	str	r0, [r5, #0]
 8006284:	0635      	lsls	r5, r6, #24
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	d501      	bpl.n	800628e <_printf_i+0x1ce>
 800628a:	6019      	str	r1, [r3, #0]
 800628c:	e002      	b.n	8006294 <_printf_i+0x1d4>
 800628e:	0670      	lsls	r0, r6, #25
 8006290:	d5fb      	bpl.n	800628a <_printf_i+0x1ca>
 8006292:	8019      	strh	r1, [r3, #0]
 8006294:	2300      	movs	r3, #0
 8006296:	4615      	mov	r5, r2
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	e7ba      	b.n	8006212 <_printf_i+0x152>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	2100      	movs	r1, #0
 80062a0:	1d1a      	adds	r2, r3, #4
 80062a2:	602a      	str	r2, [r5, #0]
 80062a4:	681d      	ldr	r5, [r3, #0]
 80062a6:	6862      	ldr	r2, [r4, #4]
 80062a8:	4628      	mov	r0, r5
 80062aa:	f001 fa27 	bl	80076fc <memchr>
 80062ae:	b108      	cbz	r0, 80062b4 <_printf_i+0x1f4>
 80062b0:	1b40      	subs	r0, r0, r5
 80062b2:	6060      	str	r0, [r4, #4]
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	6123      	str	r3, [r4, #16]
 80062b8:	2300      	movs	r3, #0
 80062ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062be:	e7a8      	b.n	8006212 <_printf_i+0x152>
 80062c0:	462a      	mov	r2, r5
 80062c2:	4649      	mov	r1, r9
 80062c4:	4640      	mov	r0, r8
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	47d0      	blx	sl
 80062ca:	3001      	adds	r0, #1
 80062cc:	d0ab      	beq.n	8006226 <_printf_i+0x166>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	079b      	lsls	r3, r3, #30
 80062d2:	d413      	bmi.n	80062fc <_printf_i+0x23c>
 80062d4:	68e0      	ldr	r0, [r4, #12]
 80062d6:	9b03      	ldr	r3, [sp, #12]
 80062d8:	4298      	cmp	r0, r3
 80062da:	bfb8      	it	lt
 80062dc:	4618      	movlt	r0, r3
 80062de:	e7a4      	b.n	800622a <_printf_i+0x16a>
 80062e0:	2301      	movs	r3, #1
 80062e2:	4632      	mov	r2, r6
 80062e4:	4649      	mov	r1, r9
 80062e6:	4640      	mov	r0, r8
 80062e8:	47d0      	blx	sl
 80062ea:	3001      	adds	r0, #1
 80062ec:	d09b      	beq.n	8006226 <_printf_i+0x166>
 80062ee:	3501      	adds	r5, #1
 80062f0:	68e3      	ldr	r3, [r4, #12]
 80062f2:	9903      	ldr	r1, [sp, #12]
 80062f4:	1a5b      	subs	r3, r3, r1
 80062f6:	42ab      	cmp	r3, r5
 80062f8:	dcf2      	bgt.n	80062e0 <_printf_i+0x220>
 80062fa:	e7eb      	b.n	80062d4 <_printf_i+0x214>
 80062fc:	2500      	movs	r5, #0
 80062fe:	f104 0619 	add.w	r6, r4, #25
 8006302:	e7f5      	b.n	80062f0 <_printf_i+0x230>
 8006304:	08008632 	.word	0x08008632
 8006308:	08008643 	.word	0x08008643

0800630c <iprintf>:
 800630c:	b40f      	push	{r0, r1, r2, r3}
 800630e:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <iprintf+0x2c>)
 8006310:	b513      	push	{r0, r1, r4, lr}
 8006312:	681c      	ldr	r4, [r3, #0]
 8006314:	b124      	cbz	r4, 8006320 <iprintf+0x14>
 8006316:	69a3      	ldr	r3, [r4, #24]
 8006318:	b913      	cbnz	r3, 8006320 <iprintf+0x14>
 800631a:	4620      	mov	r0, r4
 800631c:	f001 f8e4 	bl	80074e8 <__sinit>
 8006320:	ab05      	add	r3, sp, #20
 8006322:	4620      	mov	r0, r4
 8006324:	9a04      	ldr	r2, [sp, #16]
 8006326:	68a1      	ldr	r1, [r4, #8]
 8006328:	9301      	str	r3, [sp, #4]
 800632a:	f001 fdcd 	bl	8007ec8 <_vfiprintf_r>
 800632e:	b002      	add	sp, #8
 8006330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006334:	b004      	add	sp, #16
 8006336:	4770      	bx	lr
 8006338:	20000014 	.word	0x20000014

0800633c <_puts_r>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	460e      	mov	r6, r1
 8006340:	4605      	mov	r5, r0
 8006342:	b118      	cbz	r0, 800634c <_puts_r+0x10>
 8006344:	6983      	ldr	r3, [r0, #24]
 8006346:	b90b      	cbnz	r3, 800634c <_puts_r+0x10>
 8006348:	f001 f8ce 	bl	80074e8 <__sinit>
 800634c:	69ab      	ldr	r3, [r5, #24]
 800634e:	68ac      	ldr	r4, [r5, #8]
 8006350:	b913      	cbnz	r3, 8006358 <_puts_r+0x1c>
 8006352:	4628      	mov	r0, r5
 8006354:	f001 f8c8 	bl	80074e8 <__sinit>
 8006358:	4b2c      	ldr	r3, [pc, #176]	; (800640c <_puts_r+0xd0>)
 800635a:	429c      	cmp	r4, r3
 800635c:	d120      	bne.n	80063a0 <_puts_r+0x64>
 800635e:	686c      	ldr	r4, [r5, #4]
 8006360:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006362:	07db      	lsls	r3, r3, #31
 8006364:	d405      	bmi.n	8006372 <_puts_r+0x36>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	0598      	lsls	r0, r3, #22
 800636a:	d402      	bmi.n	8006372 <_puts_r+0x36>
 800636c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800636e:	f001 f95e 	bl	800762e <__retarget_lock_acquire_recursive>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	0719      	lsls	r1, r3, #28
 8006376:	d51d      	bpl.n	80063b4 <_puts_r+0x78>
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	b1db      	cbz	r3, 80063b4 <_puts_r+0x78>
 800637c:	3e01      	subs	r6, #1
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006384:	3b01      	subs	r3, #1
 8006386:	60a3      	str	r3, [r4, #8]
 8006388:	bb39      	cbnz	r1, 80063da <_puts_r+0x9e>
 800638a:	2b00      	cmp	r3, #0
 800638c:	da38      	bge.n	8006400 <_puts_r+0xc4>
 800638e:	4622      	mov	r2, r4
 8006390:	210a      	movs	r1, #10
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f858 	bl	8006448 <__swbuf_r>
 8006398:	3001      	adds	r0, #1
 800639a:	d011      	beq.n	80063c0 <_puts_r+0x84>
 800639c:	250a      	movs	r5, #10
 800639e:	e011      	b.n	80063c4 <_puts_r+0x88>
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <_puts_r+0xd4>)
 80063a2:	429c      	cmp	r4, r3
 80063a4:	d101      	bne.n	80063aa <_puts_r+0x6e>
 80063a6:	68ac      	ldr	r4, [r5, #8]
 80063a8:	e7da      	b.n	8006360 <_puts_r+0x24>
 80063aa:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <_puts_r+0xd8>)
 80063ac:	429c      	cmp	r4, r3
 80063ae:	bf08      	it	eq
 80063b0:	68ec      	ldreq	r4, [r5, #12]
 80063b2:	e7d5      	b.n	8006360 <_puts_r+0x24>
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f898 	bl	80064ec <__swsetup_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d0dd      	beq.n	800637c <_puts_r+0x40>
 80063c0:	f04f 35ff 	mov.w	r5, #4294967295
 80063c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063c6:	07da      	lsls	r2, r3, #31
 80063c8:	d405      	bmi.n	80063d6 <_puts_r+0x9a>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	059b      	lsls	r3, r3, #22
 80063ce:	d402      	bmi.n	80063d6 <_puts_r+0x9a>
 80063d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063d2:	f001 f92d 	bl	8007630 <__retarget_lock_release_recursive>
 80063d6:	4628      	mov	r0, r5
 80063d8:	bd70      	pop	{r4, r5, r6, pc}
 80063da:	2b00      	cmp	r3, #0
 80063dc:	da04      	bge.n	80063e8 <_puts_r+0xac>
 80063de:	69a2      	ldr	r2, [r4, #24]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	dc06      	bgt.n	80063f2 <_puts_r+0xb6>
 80063e4:	290a      	cmp	r1, #10
 80063e6:	d004      	beq.n	80063f2 <_puts_r+0xb6>
 80063e8:	6823      	ldr	r3, [r4, #0]
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	6022      	str	r2, [r4, #0]
 80063ee:	7019      	strb	r1, [r3, #0]
 80063f0:	e7c5      	b.n	800637e <_puts_r+0x42>
 80063f2:	4622      	mov	r2, r4
 80063f4:	4628      	mov	r0, r5
 80063f6:	f000 f827 	bl	8006448 <__swbuf_r>
 80063fa:	3001      	adds	r0, #1
 80063fc:	d1bf      	bne.n	800637e <_puts_r+0x42>
 80063fe:	e7df      	b.n	80063c0 <_puts_r+0x84>
 8006400:	250a      	movs	r5, #10
 8006402:	6823      	ldr	r3, [r4, #0]
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	6022      	str	r2, [r4, #0]
 8006408:	701d      	strb	r5, [r3, #0]
 800640a:	e7db      	b.n	80063c4 <_puts_r+0x88>
 800640c:	08008704 	.word	0x08008704
 8006410:	08008724 	.word	0x08008724
 8006414:	080086e4 	.word	0x080086e4

08006418 <puts>:
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <puts+0xc>)
 800641a:	4601      	mov	r1, r0
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	f7ff bf8d 	b.w	800633c <_puts_r>
 8006422:	bf00      	nop
 8006424:	20000014 	.word	0x20000014

08006428 <_sbrk_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	2300      	movs	r3, #0
 800642c:	4d05      	ldr	r5, [pc, #20]	; (8006444 <_sbrk_r+0x1c>)
 800642e:	4604      	mov	r4, r0
 8006430:	4608      	mov	r0, r1
 8006432:	602b      	str	r3, [r5, #0]
 8006434:	f7fc fa44 	bl	80028c0 <_sbrk>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_sbrk_r+0x1a>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	b103      	cbz	r3, 8006442 <_sbrk_r+0x1a>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200007ac 	.word	0x200007ac

08006448 <__swbuf_r>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	460e      	mov	r6, r1
 800644c:	4614      	mov	r4, r2
 800644e:	4605      	mov	r5, r0
 8006450:	b118      	cbz	r0, 800645a <__swbuf_r+0x12>
 8006452:	6983      	ldr	r3, [r0, #24]
 8006454:	b90b      	cbnz	r3, 800645a <__swbuf_r+0x12>
 8006456:	f001 f847 	bl	80074e8 <__sinit>
 800645a:	4b21      	ldr	r3, [pc, #132]	; (80064e0 <__swbuf_r+0x98>)
 800645c:	429c      	cmp	r4, r3
 800645e:	d12b      	bne.n	80064b8 <__swbuf_r+0x70>
 8006460:	686c      	ldr	r4, [r5, #4]
 8006462:	69a3      	ldr	r3, [r4, #24]
 8006464:	60a3      	str	r3, [r4, #8]
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	071a      	lsls	r2, r3, #28
 800646a:	d52f      	bpl.n	80064cc <__swbuf_r+0x84>
 800646c:	6923      	ldr	r3, [r4, #16]
 800646e:	b36b      	cbz	r3, 80064cc <__swbuf_r+0x84>
 8006470:	6923      	ldr	r3, [r4, #16]
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	b2f6      	uxtb	r6, r6
 8006476:	1ac0      	subs	r0, r0, r3
 8006478:	6963      	ldr	r3, [r4, #20]
 800647a:	4637      	mov	r7, r6
 800647c:	4283      	cmp	r3, r0
 800647e:	dc04      	bgt.n	800648a <__swbuf_r+0x42>
 8006480:	4621      	mov	r1, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f000 ff9c 	bl	80073c0 <_fflush_r>
 8006488:	bb30      	cbnz	r0, 80064d8 <__swbuf_r+0x90>
 800648a:	68a3      	ldr	r3, [r4, #8]
 800648c:	3001      	adds	r0, #1
 800648e:	3b01      	subs	r3, #1
 8006490:	60a3      	str	r3, [r4, #8]
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	6022      	str	r2, [r4, #0]
 8006498:	701e      	strb	r6, [r3, #0]
 800649a:	6963      	ldr	r3, [r4, #20]
 800649c:	4283      	cmp	r3, r0
 800649e:	d004      	beq.n	80064aa <__swbuf_r+0x62>
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	07db      	lsls	r3, r3, #31
 80064a4:	d506      	bpl.n	80064b4 <__swbuf_r+0x6c>
 80064a6:	2e0a      	cmp	r6, #10
 80064a8:	d104      	bne.n	80064b4 <__swbuf_r+0x6c>
 80064aa:	4621      	mov	r1, r4
 80064ac:	4628      	mov	r0, r5
 80064ae:	f000 ff87 	bl	80073c0 <_fflush_r>
 80064b2:	b988      	cbnz	r0, 80064d8 <__swbuf_r+0x90>
 80064b4:	4638      	mov	r0, r7
 80064b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b8:	4b0a      	ldr	r3, [pc, #40]	; (80064e4 <__swbuf_r+0x9c>)
 80064ba:	429c      	cmp	r4, r3
 80064bc:	d101      	bne.n	80064c2 <__swbuf_r+0x7a>
 80064be:	68ac      	ldr	r4, [r5, #8]
 80064c0:	e7cf      	b.n	8006462 <__swbuf_r+0x1a>
 80064c2:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <__swbuf_r+0xa0>)
 80064c4:	429c      	cmp	r4, r3
 80064c6:	bf08      	it	eq
 80064c8:	68ec      	ldreq	r4, [r5, #12]
 80064ca:	e7ca      	b.n	8006462 <__swbuf_r+0x1a>
 80064cc:	4621      	mov	r1, r4
 80064ce:	4628      	mov	r0, r5
 80064d0:	f000 f80c 	bl	80064ec <__swsetup_r>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d0cb      	beq.n	8006470 <__swbuf_r+0x28>
 80064d8:	f04f 37ff 	mov.w	r7, #4294967295
 80064dc:	e7ea      	b.n	80064b4 <__swbuf_r+0x6c>
 80064de:	bf00      	nop
 80064e0:	08008704 	.word	0x08008704
 80064e4:	08008724 	.word	0x08008724
 80064e8:	080086e4 	.word	0x080086e4

080064ec <__swsetup_r>:
 80064ec:	4b32      	ldr	r3, [pc, #200]	; (80065b8 <__swsetup_r+0xcc>)
 80064ee:	b570      	push	{r4, r5, r6, lr}
 80064f0:	681d      	ldr	r5, [r3, #0]
 80064f2:	4606      	mov	r6, r0
 80064f4:	460c      	mov	r4, r1
 80064f6:	b125      	cbz	r5, 8006502 <__swsetup_r+0x16>
 80064f8:	69ab      	ldr	r3, [r5, #24]
 80064fa:	b913      	cbnz	r3, 8006502 <__swsetup_r+0x16>
 80064fc:	4628      	mov	r0, r5
 80064fe:	f000 fff3 	bl	80074e8 <__sinit>
 8006502:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <__swsetup_r+0xd0>)
 8006504:	429c      	cmp	r4, r3
 8006506:	d10f      	bne.n	8006528 <__swsetup_r+0x3c>
 8006508:	686c      	ldr	r4, [r5, #4]
 800650a:	89a3      	ldrh	r3, [r4, #12]
 800650c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006510:	0719      	lsls	r1, r3, #28
 8006512:	d42c      	bmi.n	800656e <__swsetup_r+0x82>
 8006514:	06dd      	lsls	r5, r3, #27
 8006516:	d411      	bmi.n	800653c <__swsetup_r+0x50>
 8006518:	2309      	movs	r3, #9
 800651a:	6033      	str	r3, [r6, #0]
 800651c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	81a3      	strh	r3, [r4, #12]
 8006526:	e03e      	b.n	80065a6 <__swsetup_r+0xba>
 8006528:	4b25      	ldr	r3, [pc, #148]	; (80065c0 <__swsetup_r+0xd4>)
 800652a:	429c      	cmp	r4, r3
 800652c:	d101      	bne.n	8006532 <__swsetup_r+0x46>
 800652e:	68ac      	ldr	r4, [r5, #8]
 8006530:	e7eb      	b.n	800650a <__swsetup_r+0x1e>
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <__swsetup_r+0xd8>)
 8006534:	429c      	cmp	r4, r3
 8006536:	bf08      	it	eq
 8006538:	68ec      	ldreq	r4, [r5, #12]
 800653a:	e7e6      	b.n	800650a <__swsetup_r+0x1e>
 800653c:	0758      	lsls	r0, r3, #29
 800653e:	d512      	bpl.n	8006566 <__swsetup_r+0x7a>
 8006540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006542:	b141      	cbz	r1, 8006556 <__swsetup_r+0x6a>
 8006544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006548:	4299      	cmp	r1, r3
 800654a:	d002      	beq.n	8006552 <__swsetup_r+0x66>
 800654c:	4630      	mov	r0, r6
 800654e:	f7ff f9a1 	bl	8005894 <_free_r>
 8006552:	2300      	movs	r3, #0
 8006554:	6363      	str	r3, [r4, #52]	; 0x34
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	2300      	movs	r3, #0
 8006560:	6063      	str	r3, [r4, #4]
 8006562:	6923      	ldr	r3, [r4, #16]
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	f043 0308 	orr.w	r3, r3, #8
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	6923      	ldr	r3, [r4, #16]
 8006570:	b94b      	cbnz	r3, 8006586 <__swsetup_r+0x9a>
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657c:	d003      	beq.n	8006586 <__swsetup_r+0x9a>
 800657e:	4621      	mov	r1, r4
 8006580:	4630      	mov	r0, r6
 8006582:	f001 f87b 	bl	800767c <__smakebuf_r>
 8006586:	89a0      	ldrh	r0, [r4, #12]
 8006588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800658c:	f010 0301 	ands.w	r3, r0, #1
 8006590:	d00a      	beq.n	80065a8 <__swsetup_r+0xbc>
 8006592:	2300      	movs	r3, #0
 8006594:	60a3      	str	r3, [r4, #8]
 8006596:	6963      	ldr	r3, [r4, #20]
 8006598:	425b      	negs	r3, r3
 800659a:	61a3      	str	r3, [r4, #24]
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	b943      	cbnz	r3, 80065b2 <__swsetup_r+0xc6>
 80065a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065a4:	d1ba      	bne.n	800651c <__swsetup_r+0x30>
 80065a6:	bd70      	pop	{r4, r5, r6, pc}
 80065a8:	0781      	lsls	r1, r0, #30
 80065aa:	bf58      	it	pl
 80065ac:	6963      	ldrpl	r3, [r4, #20]
 80065ae:	60a3      	str	r3, [r4, #8]
 80065b0:	e7f4      	b.n	800659c <__swsetup_r+0xb0>
 80065b2:	2000      	movs	r0, #0
 80065b4:	e7f7      	b.n	80065a6 <__swsetup_r+0xba>
 80065b6:	bf00      	nop
 80065b8:	20000014 	.word	0x20000014
 80065bc:	08008704 	.word	0x08008704
 80065c0:	08008724 	.word	0x08008724
 80065c4:	080086e4 	.word	0x080086e4

080065c8 <quorem>:
 80065c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	6903      	ldr	r3, [r0, #16]
 80065ce:	690c      	ldr	r4, [r1, #16]
 80065d0:	4607      	mov	r7, r0
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	f2c0 8082 	blt.w	80066dc <quorem+0x114>
 80065d8:	3c01      	subs	r4, #1
 80065da:	f100 0514 	add.w	r5, r0, #20
 80065de:	f101 0814 	add.w	r8, r1, #20
 80065e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065e6:	9301      	str	r3, [sp, #4]
 80065e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80065ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065f0:	3301      	adds	r3, #1
 80065f2:	429a      	cmp	r2, r3
 80065f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80065f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80065fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006600:	d331      	bcc.n	8006666 <quorem+0x9e>
 8006602:	f04f 0e00 	mov.w	lr, #0
 8006606:	4640      	mov	r0, r8
 8006608:	46ac      	mov	ip, r5
 800660a:	46f2      	mov	sl, lr
 800660c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006610:	b293      	uxth	r3, r2
 8006612:	fb06 e303 	mla	r3, r6, r3, lr
 8006616:	0c12      	lsrs	r2, r2, #16
 8006618:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800661c:	b29b      	uxth	r3, r3
 800661e:	fb06 e202 	mla	r2, r6, r2, lr
 8006622:	ebaa 0303 	sub.w	r3, sl, r3
 8006626:	f8dc a000 	ldr.w	sl, [ip]
 800662a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800662e:	fa1f fa8a 	uxth.w	sl, sl
 8006632:	4453      	add	r3, sl
 8006634:	f8dc a000 	ldr.w	sl, [ip]
 8006638:	b292      	uxth	r2, r2
 800663a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800663e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006642:	b29b      	uxth	r3, r3
 8006644:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006648:	4581      	cmp	r9, r0
 800664a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800664e:	f84c 3b04 	str.w	r3, [ip], #4
 8006652:	d2db      	bcs.n	800660c <quorem+0x44>
 8006654:	f855 300b 	ldr.w	r3, [r5, fp]
 8006658:	b92b      	cbnz	r3, 8006666 <quorem+0x9e>
 800665a:	9b01      	ldr	r3, [sp, #4]
 800665c:	3b04      	subs	r3, #4
 800665e:	429d      	cmp	r5, r3
 8006660:	461a      	mov	r2, r3
 8006662:	d32f      	bcc.n	80066c4 <quorem+0xfc>
 8006664:	613c      	str	r4, [r7, #16]
 8006666:	4638      	mov	r0, r7
 8006668:	f001 faee 	bl	8007c48 <__mcmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	db25      	blt.n	80066bc <quorem+0xf4>
 8006670:	4628      	mov	r0, r5
 8006672:	f04f 0c00 	mov.w	ip, #0
 8006676:	3601      	adds	r6, #1
 8006678:	f858 1b04 	ldr.w	r1, [r8], #4
 800667c:	f8d0 e000 	ldr.w	lr, [r0]
 8006680:	b28b      	uxth	r3, r1
 8006682:	ebac 0303 	sub.w	r3, ip, r3
 8006686:	fa1f f28e 	uxth.w	r2, lr
 800668a:	4413      	add	r3, r2
 800668c:	0c0a      	lsrs	r2, r1, #16
 800668e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006692:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006696:	b29b      	uxth	r3, r3
 8006698:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800669c:	45c1      	cmp	r9, r8
 800669e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80066a2:	f840 3b04 	str.w	r3, [r0], #4
 80066a6:	d2e7      	bcs.n	8006678 <quorem+0xb0>
 80066a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066b0:	b922      	cbnz	r2, 80066bc <quorem+0xf4>
 80066b2:	3b04      	subs	r3, #4
 80066b4:	429d      	cmp	r5, r3
 80066b6:	461a      	mov	r2, r3
 80066b8:	d30a      	bcc.n	80066d0 <quorem+0x108>
 80066ba:	613c      	str	r4, [r7, #16]
 80066bc:	4630      	mov	r0, r6
 80066be:	b003      	add	sp, #12
 80066c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c4:	6812      	ldr	r2, [r2, #0]
 80066c6:	3b04      	subs	r3, #4
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	d1cb      	bne.n	8006664 <quorem+0x9c>
 80066cc:	3c01      	subs	r4, #1
 80066ce:	e7c6      	b.n	800665e <quorem+0x96>
 80066d0:	6812      	ldr	r2, [r2, #0]
 80066d2:	3b04      	subs	r3, #4
 80066d4:	2a00      	cmp	r2, #0
 80066d6:	d1f0      	bne.n	80066ba <quorem+0xf2>
 80066d8:	3c01      	subs	r4, #1
 80066da:	e7eb      	b.n	80066b4 <quorem+0xec>
 80066dc:	2000      	movs	r0, #0
 80066de:	e7ee      	b.n	80066be <quorem+0xf6>

080066e0 <_dtoa_r>:
 80066e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e4:	4616      	mov	r6, r2
 80066e6:	461f      	mov	r7, r3
 80066e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80066ea:	b099      	sub	sp, #100	; 0x64
 80066ec:	4605      	mov	r5, r0
 80066ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80066f2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80066f6:	b974      	cbnz	r4, 8006716 <_dtoa_r+0x36>
 80066f8:	2010      	movs	r0, #16
 80066fa:	f7ff f8bb 	bl	8005874 <malloc>
 80066fe:	4602      	mov	r2, r0
 8006700:	6268      	str	r0, [r5, #36]	; 0x24
 8006702:	b920      	cbnz	r0, 800670e <_dtoa_r+0x2e>
 8006704:	21ea      	movs	r1, #234	; 0xea
 8006706:	4ba8      	ldr	r3, [pc, #672]	; (80069a8 <_dtoa_r+0x2c8>)
 8006708:	48a8      	ldr	r0, [pc, #672]	; (80069ac <_dtoa_r+0x2cc>)
 800670a:	f001 fd63 	bl	80081d4 <__assert_func>
 800670e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006712:	6004      	str	r4, [r0, #0]
 8006714:	60c4      	str	r4, [r0, #12]
 8006716:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006718:	6819      	ldr	r1, [r3, #0]
 800671a:	b151      	cbz	r1, 8006732 <_dtoa_r+0x52>
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	2301      	movs	r3, #1
 8006720:	4093      	lsls	r3, r2
 8006722:	604a      	str	r2, [r1, #4]
 8006724:	608b      	str	r3, [r1, #8]
 8006726:	4628      	mov	r0, r5
 8006728:	f001 f850 	bl	80077cc <_Bfree>
 800672c:	2200      	movs	r2, #0
 800672e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	1e3b      	subs	r3, r7, #0
 8006734:	bfaf      	iteee	ge
 8006736:	2300      	movge	r3, #0
 8006738:	2201      	movlt	r2, #1
 800673a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800673e:	9305      	strlt	r3, [sp, #20]
 8006740:	bfa8      	it	ge
 8006742:	f8c8 3000 	strge.w	r3, [r8]
 8006746:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800674a:	4b99      	ldr	r3, [pc, #612]	; (80069b0 <_dtoa_r+0x2d0>)
 800674c:	bfb8      	it	lt
 800674e:	f8c8 2000 	strlt.w	r2, [r8]
 8006752:	ea33 0309 	bics.w	r3, r3, r9
 8006756:	d119      	bne.n	800678c <_dtoa_r+0xac>
 8006758:	f242 730f 	movw	r3, #9999	; 0x270f
 800675c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006764:	4333      	orrs	r3, r6
 8006766:	f000 857f 	beq.w	8007268 <_dtoa_r+0xb88>
 800676a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800676c:	b953      	cbnz	r3, 8006784 <_dtoa_r+0xa4>
 800676e:	4b91      	ldr	r3, [pc, #580]	; (80069b4 <_dtoa_r+0x2d4>)
 8006770:	e022      	b.n	80067b8 <_dtoa_r+0xd8>
 8006772:	4b91      	ldr	r3, [pc, #580]	; (80069b8 <_dtoa_r+0x2d8>)
 8006774:	9303      	str	r3, [sp, #12]
 8006776:	3308      	adds	r3, #8
 8006778:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	9803      	ldr	r0, [sp, #12]
 800677e:	b019      	add	sp, #100	; 0x64
 8006780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006784:	4b8b      	ldr	r3, [pc, #556]	; (80069b4 <_dtoa_r+0x2d4>)
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	3303      	adds	r3, #3
 800678a:	e7f5      	b.n	8006778 <_dtoa_r+0x98>
 800678c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006790:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006794:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006798:	2200      	movs	r2, #0
 800679a:	2300      	movs	r3, #0
 800679c:	f7fa f904 	bl	80009a8 <__aeabi_dcmpeq>
 80067a0:	4680      	mov	r8, r0
 80067a2:	b158      	cbz	r0, 80067bc <_dtoa_r+0xdc>
 80067a4:	2301      	movs	r3, #1
 80067a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 8558 	beq.w	8007262 <_dtoa_r+0xb82>
 80067b2:	4882      	ldr	r0, [pc, #520]	; (80069bc <_dtoa_r+0x2dc>)
 80067b4:	6018      	str	r0, [r3, #0]
 80067b6:	1e43      	subs	r3, r0, #1
 80067b8:	9303      	str	r3, [sp, #12]
 80067ba:	e7df      	b.n	800677c <_dtoa_r+0x9c>
 80067bc:	ab16      	add	r3, sp, #88	; 0x58
 80067be:	9301      	str	r3, [sp, #4]
 80067c0:	ab17      	add	r3, sp, #92	; 0x5c
 80067c2:	9300      	str	r3, [sp, #0]
 80067c4:	4628      	mov	r0, r5
 80067c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80067ca:	f001 fae5 	bl	8007d98 <__d2b>
 80067ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80067d2:	4683      	mov	fp, r0
 80067d4:	2c00      	cmp	r4, #0
 80067d6:	d07f      	beq.n	80068d8 <_dtoa_r+0x1f8>
 80067d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067de:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80067e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80067ea:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80067ee:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80067f2:	2200      	movs	r2, #0
 80067f4:	4b72      	ldr	r3, [pc, #456]	; (80069c0 <_dtoa_r+0x2e0>)
 80067f6:	f7f9 fcb7 	bl	8000168 <__aeabi_dsub>
 80067fa:	a365      	add	r3, pc, #404	; (adr r3, 8006990 <_dtoa_r+0x2b0>)
 80067fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006800:	f7f9 fe6a 	bl	80004d8 <__aeabi_dmul>
 8006804:	a364      	add	r3, pc, #400	; (adr r3, 8006998 <_dtoa_r+0x2b8>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f7f9 fcaf 	bl	800016c <__adddf3>
 800680e:	4606      	mov	r6, r0
 8006810:	4620      	mov	r0, r4
 8006812:	460f      	mov	r7, r1
 8006814:	f7f9 fdf6 	bl	8000404 <__aeabi_i2d>
 8006818:	a361      	add	r3, pc, #388	; (adr r3, 80069a0 <_dtoa_r+0x2c0>)
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f7f9 fe5b 	bl	80004d8 <__aeabi_dmul>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4630      	mov	r0, r6
 8006828:	4639      	mov	r1, r7
 800682a:	f7f9 fc9f 	bl	800016c <__adddf3>
 800682e:	4606      	mov	r6, r0
 8006830:	460f      	mov	r7, r1
 8006832:	f7fa f901 	bl	8000a38 <__aeabi_d2iz>
 8006836:	2200      	movs	r2, #0
 8006838:	4682      	mov	sl, r0
 800683a:	2300      	movs	r3, #0
 800683c:	4630      	mov	r0, r6
 800683e:	4639      	mov	r1, r7
 8006840:	f7fa f8bc 	bl	80009bc <__aeabi_dcmplt>
 8006844:	b148      	cbz	r0, 800685a <_dtoa_r+0x17a>
 8006846:	4650      	mov	r0, sl
 8006848:	f7f9 fddc 	bl	8000404 <__aeabi_i2d>
 800684c:	4632      	mov	r2, r6
 800684e:	463b      	mov	r3, r7
 8006850:	f7fa f8aa 	bl	80009a8 <__aeabi_dcmpeq>
 8006854:	b908      	cbnz	r0, 800685a <_dtoa_r+0x17a>
 8006856:	f10a 3aff 	add.w	sl, sl, #4294967295
 800685a:	f1ba 0f16 	cmp.w	sl, #22
 800685e:	d858      	bhi.n	8006912 <_dtoa_r+0x232>
 8006860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006864:	4b57      	ldr	r3, [pc, #348]	; (80069c4 <_dtoa_r+0x2e4>)
 8006866:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800686a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686e:	f7fa f8a5 	bl	80009bc <__aeabi_dcmplt>
 8006872:	2800      	cmp	r0, #0
 8006874:	d04f      	beq.n	8006916 <_dtoa_r+0x236>
 8006876:	2300      	movs	r3, #0
 8006878:	f10a 3aff 	add.w	sl, sl, #4294967295
 800687c:	930f      	str	r3, [sp, #60]	; 0x3c
 800687e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006880:	1b1c      	subs	r4, r3, r4
 8006882:	1e63      	subs	r3, r4, #1
 8006884:	9309      	str	r3, [sp, #36]	; 0x24
 8006886:	bf49      	itett	mi
 8006888:	f1c4 0301 	rsbmi	r3, r4, #1
 800688c:	2300      	movpl	r3, #0
 800688e:	9306      	strmi	r3, [sp, #24]
 8006890:	2300      	movmi	r3, #0
 8006892:	bf54      	ite	pl
 8006894:	9306      	strpl	r3, [sp, #24]
 8006896:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006898:	f1ba 0f00 	cmp.w	sl, #0
 800689c:	db3d      	blt.n	800691a <_dtoa_r+0x23a>
 800689e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80068a4:	4453      	add	r3, sl
 80068a6:	9309      	str	r3, [sp, #36]	; 0x24
 80068a8:	2300      	movs	r3, #0
 80068aa:	930a      	str	r3, [sp, #40]	; 0x28
 80068ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	f200 808c 	bhi.w	80069cc <_dtoa_r+0x2ec>
 80068b4:	2b05      	cmp	r3, #5
 80068b6:	bfc4      	itt	gt
 80068b8:	3b04      	subgt	r3, #4
 80068ba:	9322      	strgt	r3, [sp, #136]	; 0x88
 80068bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068be:	bfc8      	it	gt
 80068c0:	2400      	movgt	r4, #0
 80068c2:	f1a3 0302 	sub.w	r3, r3, #2
 80068c6:	bfd8      	it	le
 80068c8:	2401      	movle	r4, #1
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	f200 808a 	bhi.w	80069e4 <_dtoa_r+0x304>
 80068d0:	e8df f003 	tbb	[pc, r3]
 80068d4:	5b4d4f2d 	.word	0x5b4d4f2d
 80068d8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80068dc:	441c      	add	r4, r3
 80068de:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	bfc3      	ittte	gt
 80068e6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80068ea:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80068ee:	fa09 f303 	lslgt.w	r3, r9, r3
 80068f2:	f1c3 0320 	rsble	r3, r3, #32
 80068f6:	bfc6      	itte	gt
 80068f8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80068fc:	4318      	orrgt	r0, r3
 80068fe:	fa06 f003 	lslle.w	r0, r6, r3
 8006902:	f7f9 fd6f 	bl	80003e4 <__aeabi_ui2d>
 8006906:	2301      	movs	r3, #1
 8006908:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800690c:	3c01      	subs	r4, #1
 800690e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006910:	e76f      	b.n	80067f2 <_dtoa_r+0x112>
 8006912:	2301      	movs	r3, #1
 8006914:	e7b2      	b.n	800687c <_dtoa_r+0x19c>
 8006916:	900f      	str	r0, [sp, #60]	; 0x3c
 8006918:	e7b1      	b.n	800687e <_dtoa_r+0x19e>
 800691a:	9b06      	ldr	r3, [sp, #24]
 800691c:	eba3 030a 	sub.w	r3, r3, sl
 8006920:	9306      	str	r3, [sp, #24]
 8006922:	f1ca 0300 	rsb	r3, sl, #0
 8006926:	930a      	str	r3, [sp, #40]	; 0x28
 8006928:	2300      	movs	r3, #0
 800692a:	930e      	str	r3, [sp, #56]	; 0x38
 800692c:	e7be      	b.n	80068ac <_dtoa_r+0x1cc>
 800692e:	2300      	movs	r3, #0
 8006930:	930b      	str	r3, [sp, #44]	; 0x2c
 8006932:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006934:	2b00      	cmp	r3, #0
 8006936:	dc58      	bgt.n	80069ea <_dtoa_r+0x30a>
 8006938:	f04f 0901 	mov.w	r9, #1
 800693c:	464b      	mov	r3, r9
 800693e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006942:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006946:	2200      	movs	r2, #0
 8006948:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800694a:	6042      	str	r2, [r0, #4]
 800694c:	2204      	movs	r2, #4
 800694e:	f102 0614 	add.w	r6, r2, #20
 8006952:	429e      	cmp	r6, r3
 8006954:	6841      	ldr	r1, [r0, #4]
 8006956:	d94e      	bls.n	80069f6 <_dtoa_r+0x316>
 8006958:	4628      	mov	r0, r5
 800695a:	f000 fef7 	bl	800774c <_Balloc>
 800695e:	9003      	str	r0, [sp, #12]
 8006960:	2800      	cmp	r0, #0
 8006962:	d14c      	bne.n	80069fe <_dtoa_r+0x31e>
 8006964:	4602      	mov	r2, r0
 8006966:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800696a:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <_dtoa_r+0x2e8>)
 800696c:	e6cc      	b.n	8006708 <_dtoa_r+0x28>
 800696e:	2301      	movs	r3, #1
 8006970:	e7de      	b.n	8006930 <_dtoa_r+0x250>
 8006972:	2300      	movs	r3, #0
 8006974:	930b      	str	r3, [sp, #44]	; 0x2c
 8006976:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006978:	eb0a 0903 	add.w	r9, sl, r3
 800697c:	f109 0301 	add.w	r3, r9, #1
 8006980:	2b01      	cmp	r3, #1
 8006982:	9308      	str	r3, [sp, #32]
 8006984:	bfb8      	it	lt
 8006986:	2301      	movlt	r3, #1
 8006988:	e7dd      	b.n	8006946 <_dtoa_r+0x266>
 800698a:	2301      	movs	r3, #1
 800698c:	e7f2      	b.n	8006974 <_dtoa_r+0x294>
 800698e:	bf00      	nop
 8006990:	636f4361 	.word	0x636f4361
 8006994:	3fd287a7 	.word	0x3fd287a7
 8006998:	8b60c8b3 	.word	0x8b60c8b3
 800699c:	3fc68a28 	.word	0x3fc68a28
 80069a0:	509f79fb 	.word	0x509f79fb
 80069a4:	3fd34413 	.word	0x3fd34413
 80069a8:	08008661 	.word	0x08008661
 80069ac:	08008678 	.word	0x08008678
 80069b0:	7ff00000 	.word	0x7ff00000
 80069b4:	0800865d 	.word	0x0800865d
 80069b8:	08008654 	.word	0x08008654
 80069bc:	08008631 	.word	0x08008631
 80069c0:	3ff80000 	.word	0x3ff80000
 80069c4:	080087c8 	.word	0x080087c8
 80069c8:	080086d3 	.word	0x080086d3
 80069cc:	2401      	movs	r4, #1
 80069ce:	2300      	movs	r3, #0
 80069d0:	940b      	str	r4, [sp, #44]	; 0x2c
 80069d2:	9322      	str	r3, [sp, #136]	; 0x88
 80069d4:	f04f 39ff 	mov.w	r9, #4294967295
 80069d8:	2200      	movs	r2, #0
 80069da:	2312      	movs	r3, #18
 80069dc:	f8cd 9020 	str.w	r9, [sp, #32]
 80069e0:	9223      	str	r2, [sp, #140]	; 0x8c
 80069e2:	e7b0      	b.n	8006946 <_dtoa_r+0x266>
 80069e4:	2301      	movs	r3, #1
 80069e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80069e8:	e7f4      	b.n	80069d4 <_dtoa_r+0x2f4>
 80069ea:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80069ee:	464b      	mov	r3, r9
 80069f0:	f8cd 9020 	str.w	r9, [sp, #32]
 80069f4:	e7a7      	b.n	8006946 <_dtoa_r+0x266>
 80069f6:	3101      	adds	r1, #1
 80069f8:	6041      	str	r1, [r0, #4]
 80069fa:	0052      	lsls	r2, r2, #1
 80069fc:	e7a7      	b.n	800694e <_dtoa_r+0x26e>
 80069fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a00:	9a03      	ldr	r2, [sp, #12]
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	9b08      	ldr	r3, [sp, #32]
 8006a06:	2b0e      	cmp	r3, #14
 8006a08:	f200 80a8 	bhi.w	8006b5c <_dtoa_r+0x47c>
 8006a0c:	2c00      	cmp	r4, #0
 8006a0e:	f000 80a5 	beq.w	8006b5c <_dtoa_r+0x47c>
 8006a12:	f1ba 0f00 	cmp.w	sl, #0
 8006a16:	dd34      	ble.n	8006a82 <_dtoa_r+0x3a2>
 8006a18:	4a9a      	ldr	r2, [pc, #616]	; (8006c84 <_dtoa_r+0x5a4>)
 8006a1a:	f00a 030f 	and.w	r3, sl, #15
 8006a1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006a22:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006a26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006a2e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006a32:	d016      	beq.n	8006a62 <_dtoa_r+0x382>
 8006a34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a38:	4b93      	ldr	r3, [pc, #588]	; (8006c88 <_dtoa_r+0x5a8>)
 8006a3a:	2703      	movs	r7, #3
 8006a3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006a40:	f7f9 fe74 	bl	800072c <__aeabi_ddiv>
 8006a44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a48:	f004 040f 	and.w	r4, r4, #15
 8006a4c:	4e8e      	ldr	r6, [pc, #568]	; (8006c88 <_dtoa_r+0x5a8>)
 8006a4e:	b954      	cbnz	r4, 8006a66 <_dtoa_r+0x386>
 8006a50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a58:	f7f9 fe68 	bl	800072c <__aeabi_ddiv>
 8006a5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a60:	e029      	b.n	8006ab6 <_dtoa_r+0x3d6>
 8006a62:	2702      	movs	r7, #2
 8006a64:	e7f2      	b.n	8006a4c <_dtoa_r+0x36c>
 8006a66:	07e1      	lsls	r1, r4, #31
 8006a68:	d508      	bpl.n	8006a7c <_dtoa_r+0x39c>
 8006a6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a6e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a72:	f7f9 fd31 	bl	80004d8 <__aeabi_dmul>
 8006a76:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a7a:	3701      	adds	r7, #1
 8006a7c:	1064      	asrs	r4, r4, #1
 8006a7e:	3608      	adds	r6, #8
 8006a80:	e7e5      	b.n	8006a4e <_dtoa_r+0x36e>
 8006a82:	f000 80a5 	beq.w	8006bd0 <_dtoa_r+0x4f0>
 8006a86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006a8a:	f1ca 0400 	rsb	r4, sl, #0
 8006a8e:	4b7d      	ldr	r3, [pc, #500]	; (8006c84 <_dtoa_r+0x5a4>)
 8006a90:	f004 020f 	and.w	r2, r4, #15
 8006a94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	f7f9 fd1c 	bl	80004d8 <__aeabi_dmul>
 8006aa0:	2702      	movs	r7, #2
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aa8:	4e77      	ldr	r6, [pc, #476]	; (8006c88 <_dtoa_r+0x5a8>)
 8006aaa:	1124      	asrs	r4, r4, #4
 8006aac:	2c00      	cmp	r4, #0
 8006aae:	f040 8084 	bne.w	8006bba <_dtoa_r+0x4da>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1d2      	bne.n	8006a5c <_dtoa_r+0x37c>
 8006ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 808b 	beq.w	8006bd4 <_dtoa_r+0x4f4>
 8006abe:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006ac2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ac6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006aca:	2200      	movs	r2, #0
 8006acc:	4b6f      	ldr	r3, [pc, #444]	; (8006c8c <_dtoa_r+0x5ac>)
 8006ace:	f7f9 ff75 	bl	80009bc <__aeabi_dcmplt>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	d07e      	beq.n	8006bd4 <_dtoa_r+0x4f4>
 8006ad6:	9b08      	ldr	r3, [sp, #32]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d07b      	beq.n	8006bd4 <_dtoa_r+0x4f4>
 8006adc:	f1b9 0f00 	cmp.w	r9, #0
 8006ae0:	dd38      	ble.n	8006b54 <_dtoa_r+0x474>
 8006ae2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	4b69      	ldr	r3, [pc, #420]	; (8006c90 <_dtoa_r+0x5b0>)
 8006aea:	f7f9 fcf5 	bl	80004d8 <__aeabi_dmul>
 8006aee:	464c      	mov	r4, r9
 8006af0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006af4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006af8:	3701      	adds	r7, #1
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7f9 fc82 	bl	8000404 <__aeabi_i2d>
 8006b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b04:	f7f9 fce8 	bl	80004d8 <__aeabi_dmul>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4b62      	ldr	r3, [pc, #392]	; (8006c94 <_dtoa_r+0x5b4>)
 8006b0c:	f7f9 fb2e 	bl	800016c <__adddf3>
 8006b10:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006b14:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b18:	9611      	str	r6, [sp, #68]	; 0x44
 8006b1a:	2c00      	cmp	r4, #0
 8006b1c:	d15d      	bne.n	8006bda <_dtoa_r+0x4fa>
 8006b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b22:	2200      	movs	r2, #0
 8006b24:	4b5c      	ldr	r3, [pc, #368]	; (8006c98 <_dtoa_r+0x5b8>)
 8006b26:	f7f9 fb1f 	bl	8000168 <__aeabi_dsub>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b32:	4633      	mov	r3, r6
 8006b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b36:	f7f9 ff5f 	bl	80009f8 <__aeabi_dcmpgt>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f040 829c 	bne.w	8007078 <_dtoa_r+0x998>
 8006b40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006b46:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006b4a:	f7f9 ff37 	bl	80009bc <__aeabi_dcmplt>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	f040 8290 	bne.w	8007074 <_dtoa_r+0x994>
 8006b54:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006b58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006b5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f2c0 8152 	blt.w	8006e08 <_dtoa_r+0x728>
 8006b64:	f1ba 0f0e 	cmp.w	sl, #14
 8006b68:	f300 814e 	bgt.w	8006e08 <_dtoa_r+0x728>
 8006b6c:	4b45      	ldr	r3, [pc, #276]	; (8006c84 <_dtoa_r+0x5a4>)
 8006b6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006b72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b76:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006b7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f280 80db 	bge.w	8006d38 <_dtoa_r+0x658>
 8006b82:	9b08      	ldr	r3, [sp, #32]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f300 80d7 	bgt.w	8006d38 <_dtoa_r+0x658>
 8006b8a:	f040 8272 	bne.w	8007072 <_dtoa_r+0x992>
 8006b8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b92:	2200      	movs	r2, #0
 8006b94:	4b40      	ldr	r3, [pc, #256]	; (8006c98 <_dtoa_r+0x5b8>)
 8006b96:	f7f9 fc9f 	bl	80004d8 <__aeabi_dmul>
 8006b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b9e:	f7f9 ff21 	bl	80009e4 <__aeabi_dcmpge>
 8006ba2:	9c08      	ldr	r4, [sp, #32]
 8006ba4:	4626      	mov	r6, r4
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f040 8248 	bne.w	800703c <_dtoa_r+0x95c>
 8006bac:	2331      	movs	r3, #49	; 0x31
 8006bae:	9f03      	ldr	r7, [sp, #12]
 8006bb0:	f10a 0a01 	add.w	sl, sl, #1
 8006bb4:	f807 3b01 	strb.w	r3, [r7], #1
 8006bb8:	e244      	b.n	8007044 <_dtoa_r+0x964>
 8006bba:	07e2      	lsls	r2, r4, #31
 8006bbc:	d505      	bpl.n	8006bca <_dtoa_r+0x4ea>
 8006bbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006bc2:	f7f9 fc89 	bl	80004d8 <__aeabi_dmul>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	3701      	adds	r7, #1
 8006bca:	1064      	asrs	r4, r4, #1
 8006bcc:	3608      	adds	r6, #8
 8006bce:	e76d      	b.n	8006aac <_dtoa_r+0x3cc>
 8006bd0:	2702      	movs	r7, #2
 8006bd2:	e770      	b.n	8006ab6 <_dtoa_r+0x3d6>
 8006bd4:	46d0      	mov	r8, sl
 8006bd6:	9c08      	ldr	r4, [sp, #32]
 8006bd8:	e78f      	b.n	8006afa <_dtoa_r+0x41a>
 8006bda:	9903      	ldr	r1, [sp, #12]
 8006bdc:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <_dtoa_r+0x5a4>)
 8006bde:	4421      	add	r1, r4
 8006be0:	9112      	str	r1, [sp, #72]	; 0x48
 8006be2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006be4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006be8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006bec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006bf0:	2900      	cmp	r1, #0
 8006bf2:	d055      	beq.n	8006ca0 <_dtoa_r+0x5c0>
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	4929      	ldr	r1, [pc, #164]	; (8006c9c <_dtoa_r+0x5bc>)
 8006bf8:	f7f9 fd98 	bl	800072c <__aeabi_ddiv>
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	4632      	mov	r2, r6
 8006c00:	f7f9 fab2 	bl	8000168 <__aeabi_dsub>
 8006c04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c08:	9f03      	ldr	r7, [sp, #12]
 8006c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c0e:	f7f9 ff13 	bl	8000a38 <__aeabi_d2iz>
 8006c12:	4604      	mov	r4, r0
 8006c14:	f7f9 fbf6 	bl	8000404 <__aeabi_i2d>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c20:	f7f9 faa2 	bl	8000168 <__aeabi_dsub>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	3430      	adds	r4, #48	; 0x30
 8006c2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c32:	f807 4b01 	strb.w	r4, [r7], #1
 8006c36:	f7f9 fec1 	bl	80009bc <__aeabi_dcmplt>
 8006c3a:	2800      	cmp	r0, #0
 8006c3c:	d174      	bne.n	8006d28 <_dtoa_r+0x648>
 8006c3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c42:	2000      	movs	r0, #0
 8006c44:	4911      	ldr	r1, [pc, #68]	; (8006c8c <_dtoa_r+0x5ac>)
 8006c46:	f7f9 fa8f 	bl	8000168 <__aeabi_dsub>
 8006c4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006c4e:	f7f9 feb5 	bl	80009bc <__aeabi_dcmplt>
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f040 80b7 	bne.w	8006dc6 <_dtoa_r+0x6e6>
 8006c58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c5a:	429f      	cmp	r7, r3
 8006c5c:	f43f af7a 	beq.w	8006b54 <_dtoa_r+0x474>
 8006c60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c64:	2200      	movs	r2, #0
 8006c66:	4b0a      	ldr	r3, [pc, #40]	; (8006c90 <_dtoa_r+0x5b0>)
 8006c68:	f7f9 fc36 	bl	80004d8 <__aeabi_dmul>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c76:	4b06      	ldr	r3, [pc, #24]	; (8006c90 <_dtoa_r+0x5b0>)
 8006c78:	f7f9 fc2e 	bl	80004d8 <__aeabi_dmul>
 8006c7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c80:	e7c3      	b.n	8006c0a <_dtoa_r+0x52a>
 8006c82:	bf00      	nop
 8006c84:	080087c8 	.word	0x080087c8
 8006c88:	080087a0 	.word	0x080087a0
 8006c8c:	3ff00000 	.word	0x3ff00000
 8006c90:	40240000 	.word	0x40240000
 8006c94:	401c0000 	.word	0x401c0000
 8006c98:	40140000 	.word	0x40140000
 8006c9c:	3fe00000 	.word	0x3fe00000
 8006ca0:	4630      	mov	r0, r6
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	f7f9 fc18 	bl	80004d8 <__aeabi_dmul>
 8006ca8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006caa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006cae:	9c03      	ldr	r4, [sp, #12]
 8006cb0:	9314      	str	r3, [sp, #80]	; 0x50
 8006cb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cb6:	f7f9 febf 	bl	8000a38 <__aeabi_d2iz>
 8006cba:	9015      	str	r0, [sp, #84]	; 0x54
 8006cbc:	f7f9 fba2 	bl	8000404 <__aeabi_i2d>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cc8:	f7f9 fa4e 	bl	8000168 <__aeabi_dsub>
 8006ccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cce:	4606      	mov	r6, r0
 8006cd0:	3330      	adds	r3, #48	; 0x30
 8006cd2:	f804 3b01 	strb.w	r3, [r4], #1
 8006cd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cd8:	460f      	mov	r7, r1
 8006cda:	429c      	cmp	r4, r3
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	d124      	bne.n	8006d2c <_dtoa_r+0x64c>
 8006ce2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006ce6:	4bb0      	ldr	r3, [pc, #704]	; (8006fa8 <_dtoa_r+0x8c8>)
 8006ce8:	f7f9 fa40 	bl	800016c <__adddf3>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	f7f9 fe80 	bl	80009f8 <__aeabi_dcmpgt>
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d163      	bne.n	8006dc4 <_dtoa_r+0x6e4>
 8006cfc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d00:	2000      	movs	r0, #0
 8006d02:	49a9      	ldr	r1, [pc, #676]	; (8006fa8 <_dtoa_r+0x8c8>)
 8006d04:	f7f9 fa30 	bl	8000168 <__aeabi_dsub>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fe54 	bl	80009bc <__aeabi_dcmplt>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	f43f af1d 	beq.w	8006b54 <_dtoa_r+0x474>
 8006d1a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006d1c:	1e7b      	subs	r3, r7, #1
 8006d1e:	9314      	str	r3, [sp, #80]	; 0x50
 8006d20:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006d24:	2b30      	cmp	r3, #48	; 0x30
 8006d26:	d0f8      	beq.n	8006d1a <_dtoa_r+0x63a>
 8006d28:	46c2      	mov	sl, r8
 8006d2a:	e03b      	b.n	8006da4 <_dtoa_r+0x6c4>
 8006d2c:	4b9f      	ldr	r3, [pc, #636]	; (8006fac <_dtoa_r+0x8cc>)
 8006d2e:	f7f9 fbd3 	bl	80004d8 <__aeabi_dmul>
 8006d32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d36:	e7bc      	b.n	8006cb2 <_dtoa_r+0x5d2>
 8006d38:	9f03      	ldr	r7, [sp, #12]
 8006d3a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006d3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d42:	4640      	mov	r0, r8
 8006d44:	4649      	mov	r1, r9
 8006d46:	f7f9 fcf1 	bl	800072c <__aeabi_ddiv>
 8006d4a:	f7f9 fe75 	bl	8000a38 <__aeabi_d2iz>
 8006d4e:	4604      	mov	r4, r0
 8006d50:	f7f9 fb58 	bl	8000404 <__aeabi_i2d>
 8006d54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d58:	f7f9 fbbe 	bl	80004d8 <__aeabi_dmul>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4640      	mov	r0, r8
 8006d62:	4649      	mov	r1, r9
 8006d64:	f7f9 fa00 	bl	8000168 <__aeabi_dsub>
 8006d68:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006d6c:	f807 6b01 	strb.w	r6, [r7], #1
 8006d70:	9e03      	ldr	r6, [sp, #12]
 8006d72:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006d76:	1bbe      	subs	r6, r7, r6
 8006d78:	45b4      	cmp	ip, r6
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	d136      	bne.n	8006dee <_dtoa_r+0x70e>
 8006d80:	f7f9 f9f4 	bl	800016c <__adddf3>
 8006d84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d88:	4680      	mov	r8, r0
 8006d8a:	4689      	mov	r9, r1
 8006d8c:	f7f9 fe34 	bl	80009f8 <__aeabi_dcmpgt>
 8006d90:	bb58      	cbnz	r0, 8006dea <_dtoa_r+0x70a>
 8006d92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006d96:	4640      	mov	r0, r8
 8006d98:	4649      	mov	r1, r9
 8006d9a:	f7f9 fe05 	bl	80009a8 <__aeabi_dcmpeq>
 8006d9e:	b108      	cbz	r0, 8006da4 <_dtoa_r+0x6c4>
 8006da0:	07e1      	lsls	r1, r4, #31
 8006da2:	d422      	bmi.n	8006dea <_dtoa_r+0x70a>
 8006da4:	4628      	mov	r0, r5
 8006da6:	4659      	mov	r1, fp
 8006da8:	f000 fd10 	bl	80077cc <_Bfree>
 8006dac:	2300      	movs	r3, #0
 8006dae:	703b      	strb	r3, [r7, #0]
 8006db0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006db2:	f10a 0001 	add.w	r0, sl, #1
 8006db6:	6018      	str	r0, [r3, #0]
 8006db8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f43f acde 	beq.w	800677c <_dtoa_r+0x9c>
 8006dc0:	601f      	str	r7, [r3, #0]
 8006dc2:	e4db      	b.n	800677c <_dtoa_r+0x9c>
 8006dc4:	4627      	mov	r7, r4
 8006dc6:	463b      	mov	r3, r7
 8006dc8:	461f      	mov	r7, r3
 8006dca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006dce:	2a39      	cmp	r2, #57	; 0x39
 8006dd0:	d107      	bne.n	8006de2 <_dtoa_r+0x702>
 8006dd2:	9a03      	ldr	r2, [sp, #12]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d1f7      	bne.n	8006dc8 <_dtoa_r+0x6e8>
 8006dd8:	2230      	movs	r2, #48	; 0x30
 8006dda:	9903      	ldr	r1, [sp, #12]
 8006ddc:	f108 0801 	add.w	r8, r8, #1
 8006de0:	700a      	strb	r2, [r1, #0]
 8006de2:	781a      	ldrb	r2, [r3, #0]
 8006de4:	3201      	adds	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	e79e      	b.n	8006d28 <_dtoa_r+0x648>
 8006dea:	46d0      	mov	r8, sl
 8006dec:	e7eb      	b.n	8006dc6 <_dtoa_r+0x6e6>
 8006dee:	2200      	movs	r2, #0
 8006df0:	4b6e      	ldr	r3, [pc, #440]	; (8006fac <_dtoa_r+0x8cc>)
 8006df2:	f7f9 fb71 	bl	80004d8 <__aeabi_dmul>
 8006df6:	2200      	movs	r2, #0
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	4689      	mov	r9, r1
 8006dfe:	f7f9 fdd3 	bl	80009a8 <__aeabi_dcmpeq>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d09b      	beq.n	8006d3e <_dtoa_r+0x65e>
 8006e06:	e7cd      	b.n	8006da4 <_dtoa_r+0x6c4>
 8006e08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e0a:	2a00      	cmp	r2, #0
 8006e0c:	f000 80d0 	beq.w	8006fb0 <_dtoa_r+0x8d0>
 8006e10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006e12:	2a01      	cmp	r2, #1
 8006e14:	f300 80ae 	bgt.w	8006f74 <_dtoa_r+0x894>
 8006e18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006e1a:	2a00      	cmp	r2, #0
 8006e1c:	f000 80a6 	beq.w	8006f6c <_dtoa_r+0x88c>
 8006e20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006e24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e26:	9f06      	ldr	r7, [sp, #24]
 8006e28:	9a06      	ldr	r2, [sp, #24]
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	441a      	add	r2, r3
 8006e2e:	9206      	str	r2, [sp, #24]
 8006e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e32:	4628      	mov	r0, r5
 8006e34:	441a      	add	r2, r3
 8006e36:	9209      	str	r2, [sp, #36]	; 0x24
 8006e38:	f000 fd7e 	bl	8007938 <__i2b>
 8006e3c:	4606      	mov	r6, r0
 8006e3e:	2f00      	cmp	r7, #0
 8006e40:	dd0c      	ble.n	8006e5c <_dtoa_r+0x77c>
 8006e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dd09      	ble.n	8006e5c <_dtoa_r+0x77c>
 8006e48:	42bb      	cmp	r3, r7
 8006e4a:	bfa8      	it	ge
 8006e4c:	463b      	movge	r3, r7
 8006e4e:	9a06      	ldr	r2, [sp, #24]
 8006e50:	1aff      	subs	r7, r7, r3
 8006e52:	1ad2      	subs	r2, r2, r3
 8006e54:	9206      	str	r2, [sp, #24]
 8006e56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e5e:	b1f3      	cbz	r3, 8006e9e <_dtoa_r+0x7be>
 8006e60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 80a8 	beq.w	8006fb8 <_dtoa_r+0x8d8>
 8006e68:	2c00      	cmp	r4, #0
 8006e6a:	dd10      	ble.n	8006e8e <_dtoa_r+0x7ae>
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4628      	mov	r0, r5
 8006e72:	f000 fe1f 	bl	8007ab4 <__pow5mult>
 8006e76:	465a      	mov	r2, fp
 8006e78:	4601      	mov	r1, r0
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	f000 fd71 	bl	8007964 <__multiply>
 8006e82:	4680      	mov	r8, r0
 8006e84:	4659      	mov	r1, fp
 8006e86:	4628      	mov	r0, r5
 8006e88:	f000 fca0 	bl	80077cc <_Bfree>
 8006e8c:	46c3      	mov	fp, r8
 8006e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e90:	1b1a      	subs	r2, r3, r4
 8006e92:	d004      	beq.n	8006e9e <_dtoa_r+0x7be>
 8006e94:	4659      	mov	r1, fp
 8006e96:	4628      	mov	r0, r5
 8006e98:	f000 fe0c 	bl	8007ab4 <__pow5mult>
 8006e9c:	4683      	mov	fp, r0
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	f000 fd49 	bl	8007938 <__i2b>
 8006ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	f340 8086 	ble.w	8006fbc <_dtoa_r+0x8dc>
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	4628      	mov	r0, r5
 8006eb6:	f000 fdfd 	bl	8007ab4 <__pow5mult>
 8006eba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	dd7f      	ble.n	8006fc2 <_dtoa_r+0x8e2>
 8006ec2:	f04f 0800 	mov.w	r8, #0
 8006ec6:	6923      	ldr	r3, [r4, #16]
 8006ec8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ecc:	6918      	ldr	r0, [r3, #16]
 8006ece:	f000 fce5 	bl	800789c <__hi0bits>
 8006ed2:	f1c0 0020 	rsb	r0, r0, #32
 8006ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed8:	4418      	add	r0, r3
 8006eda:	f010 001f 	ands.w	r0, r0, #31
 8006ede:	f000 8092 	beq.w	8007006 <_dtoa_r+0x926>
 8006ee2:	f1c0 0320 	rsb	r3, r0, #32
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	f340 808a 	ble.w	8007000 <_dtoa_r+0x920>
 8006eec:	f1c0 001c 	rsb	r0, r0, #28
 8006ef0:	9b06      	ldr	r3, [sp, #24]
 8006ef2:	4407      	add	r7, r0
 8006ef4:	4403      	add	r3, r0
 8006ef6:	9306      	str	r3, [sp, #24]
 8006ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efa:	4403      	add	r3, r0
 8006efc:	9309      	str	r3, [sp, #36]	; 0x24
 8006efe:	9b06      	ldr	r3, [sp, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	dd05      	ble.n	8006f10 <_dtoa_r+0x830>
 8006f04:	4659      	mov	r1, fp
 8006f06:	461a      	mov	r2, r3
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f000 fe2d 	bl	8007b68 <__lshift>
 8006f0e:	4683      	mov	fp, r0
 8006f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	dd05      	ble.n	8006f22 <_dtoa_r+0x842>
 8006f16:	4621      	mov	r1, r4
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 fe24 	bl	8007b68 <__lshift>
 8006f20:	4604      	mov	r4, r0
 8006f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d070      	beq.n	800700a <_dtoa_r+0x92a>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4658      	mov	r0, fp
 8006f2c:	f000 fe8c 	bl	8007c48 <__mcmp>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	da6a      	bge.n	800700a <_dtoa_r+0x92a>
 8006f34:	2300      	movs	r3, #0
 8006f36:	4659      	mov	r1, fp
 8006f38:	220a      	movs	r2, #10
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	f000 fc68 	bl	8007810 <__multadd>
 8006f40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f42:	4683      	mov	fp, r0
 8006f44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 8194 	beq.w	8007276 <_dtoa_r+0xb96>
 8006f4e:	4631      	mov	r1, r6
 8006f50:	2300      	movs	r3, #0
 8006f52:	220a      	movs	r2, #10
 8006f54:	4628      	mov	r0, r5
 8006f56:	f000 fc5b 	bl	8007810 <__multadd>
 8006f5a:	f1b9 0f00 	cmp.w	r9, #0
 8006f5e:	4606      	mov	r6, r0
 8006f60:	f300 8093 	bgt.w	800708a <_dtoa_r+0x9aa>
 8006f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	dc57      	bgt.n	800701a <_dtoa_r+0x93a>
 8006f6a:	e08e      	b.n	800708a <_dtoa_r+0x9aa>
 8006f6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006f72:	e757      	b.n	8006e24 <_dtoa_r+0x744>
 8006f74:	9b08      	ldr	r3, [sp, #32]
 8006f76:	1e5c      	subs	r4, r3, #1
 8006f78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f7a:	42a3      	cmp	r3, r4
 8006f7c:	bfb7      	itett	lt
 8006f7e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f80:	1b1c      	subge	r4, r3, r4
 8006f82:	1ae2      	sublt	r2, r4, r3
 8006f84:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006f86:	bfbe      	ittt	lt
 8006f88:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006f8a:	189b      	addlt	r3, r3, r2
 8006f8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006f8e:	9b08      	ldr	r3, [sp, #32]
 8006f90:	bfb8      	it	lt
 8006f92:	2400      	movlt	r4, #0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bfbb      	ittet	lt
 8006f98:	9b06      	ldrlt	r3, [sp, #24]
 8006f9a:	9a08      	ldrlt	r2, [sp, #32]
 8006f9c:	9f06      	ldrge	r7, [sp, #24]
 8006f9e:	1a9f      	sublt	r7, r3, r2
 8006fa0:	bfac      	ite	ge
 8006fa2:	9b08      	ldrge	r3, [sp, #32]
 8006fa4:	2300      	movlt	r3, #0
 8006fa6:	e73f      	b.n	8006e28 <_dtoa_r+0x748>
 8006fa8:	3fe00000 	.word	0x3fe00000
 8006fac:	40240000 	.word	0x40240000
 8006fb0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006fb2:	9f06      	ldr	r7, [sp, #24]
 8006fb4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006fb6:	e742      	b.n	8006e3e <_dtoa_r+0x75e>
 8006fb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fba:	e76b      	b.n	8006e94 <_dtoa_r+0x7b4>
 8006fbc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	dc19      	bgt.n	8006ff6 <_dtoa_r+0x916>
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	b9bb      	cbnz	r3, 8006ff6 <_dtoa_r+0x916>
 8006fc6:	9b05      	ldr	r3, [sp, #20]
 8006fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fcc:	b99b      	cbnz	r3, 8006ff6 <_dtoa_r+0x916>
 8006fce:	9b05      	ldr	r3, [sp, #20]
 8006fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fd4:	0d1b      	lsrs	r3, r3, #20
 8006fd6:	051b      	lsls	r3, r3, #20
 8006fd8:	b183      	cbz	r3, 8006ffc <_dtoa_r+0x91c>
 8006fda:	f04f 0801 	mov.w	r8, #1
 8006fde:	9b06      	ldr	r3, [sp, #24]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	9306      	str	r3, [sp, #24]
 8006fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f47f af6a 	bne.w	8006ec6 <_dtoa_r+0x7e6>
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	e76f      	b.n	8006ed6 <_dtoa_r+0x7f6>
 8006ff6:	f04f 0800 	mov.w	r8, #0
 8006ffa:	e7f6      	b.n	8006fea <_dtoa_r+0x90a>
 8006ffc:	4698      	mov	r8, r3
 8006ffe:	e7f4      	b.n	8006fea <_dtoa_r+0x90a>
 8007000:	f43f af7d 	beq.w	8006efe <_dtoa_r+0x81e>
 8007004:	4618      	mov	r0, r3
 8007006:	301c      	adds	r0, #28
 8007008:	e772      	b.n	8006ef0 <_dtoa_r+0x810>
 800700a:	9b08      	ldr	r3, [sp, #32]
 800700c:	2b00      	cmp	r3, #0
 800700e:	dc36      	bgt.n	800707e <_dtoa_r+0x99e>
 8007010:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007012:	2b02      	cmp	r3, #2
 8007014:	dd33      	ble.n	800707e <_dtoa_r+0x99e>
 8007016:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800701a:	f1b9 0f00 	cmp.w	r9, #0
 800701e:	d10d      	bne.n	800703c <_dtoa_r+0x95c>
 8007020:	4621      	mov	r1, r4
 8007022:	464b      	mov	r3, r9
 8007024:	2205      	movs	r2, #5
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fbf2 	bl	8007810 <__multadd>
 800702c:	4601      	mov	r1, r0
 800702e:	4604      	mov	r4, r0
 8007030:	4658      	mov	r0, fp
 8007032:	f000 fe09 	bl	8007c48 <__mcmp>
 8007036:	2800      	cmp	r0, #0
 8007038:	f73f adb8 	bgt.w	8006bac <_dtoa_r+0x4cc>
 800703c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800703e:	9f03      	ldr	r7, [sp, #12]
 8007040:	ea6f 0a03 	mvn.w	sl, r3
 8007044:	f04f 0800 	mov.w	r8, #0
 8007048:	4621      	mov	r1, r4
 800704a:	4628      	mov	r0, r5
 800704c:	f000 fbbe 	bl	80077cc <_Bfree>
 8007050:	2e00      	cmp	r6, #0
 8007052:	f43f aea7 	beq.w	8006da4 <_dtoa_r+0x6c4>
 8007056:	f1b8 0f00 	cmp.w	r8, #0
 800705a:	d005      	beq.n	8007068 <_dtoa_r+0x988>
 800705c:	45b0      	cmp	r8, r6
 800705e:	d003      	beq.n	8007068 <_dtoa_r+0x988>
 8007060:	4641      	mov	r1, r8
 8007062:	4628      	mov	r0, r5
 8007064:	f000 fbb2 	bl	80077cc <_Bfree>
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	f000 fbae 	bl	80077cc <_Bfree>
 8007070:	e698      	b.n	8006da4 <_dtoa_r+0x6c4>
 8007072:	2400      	movs	r4, #0
 8007074:	4626      	mov	r6, r4
 8007076:	e7e1      	b.n	800703c <_dtoa_r+0x95c>
 8007078:	46c2      	mov	sl, r8
 800707a:	4626      	mov	r6, r4
 800707c:	e596      	b.n	8006bac <_dtoa_r+0x4cc>
 800707e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007080:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80fd 	beq.w	8007284 <_dtoa_r+0xba4>
 800708a:	2f00      	cmp	r7, #0
 800708c:	dd05      	ble.n	800709a <_dtoa_r+0x9ba>
 800708e:	4631      	mov	r1, r6
 8007090:	463a      	mov	r2, r7
 8007092:	4628      	mov	r0, r5
 8007094:	f000 fd68 	bl	8007b68 <__lshift>
 8007098:	4606      	mov	r6, r0
 800709a:	f1b8 0f00 	cmp.w	r8, #0
 800709e:	d05c      	beq.n	800715a <_dtoa_r+0xa7a>
 80070a0:	4628      	mov	r0, r5
 80070a2:	6871      	ldr	r1, [r6, #4]
 80070a4:	f000 fb52 	bl	800774c <_Balloc>
 80070a8:	4607      	mov	r7, r0
 80070aa:	b928      	cbnz	r0, 80070b8 <_dtoa_r+0x9d8>
 80070ac:	4602      	mov	r2, r0
 80070ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80070b2:	4b7f      	ldr	r3, [pc, #508]	; (80072b0 <_dtoa_r+0xbd0>)
 80070b4:	f7ff bb28 	b.w	8006708 <_dtoa_r+0x28>
 80070b8:	6932      	ldr	r2, [r6, #16]
 80070ba:	f106 010c 	add.w	r1, r6, #12
 80070be:	3202      	adds	r2, #2
 80070c0:	0092      	lsls	r2, r2, #2
 80070c2:	300c      	adds	r0, #12
 80070c4:	f000 fb28 	bl	8007718 <memcpy>
 80070c8:	2201      	movs	r2, #1
 80070ca:	4639      	mov	r1, r7
 80070cc:	4628      	mov	r0, r5
 80070ce:	f000 fd4b 	bl	8007b68 <__lshift>
 80070d2:	46b0      	mov	r8, r6
 80070d4:	4606      	mov	r6, r0
 80070d6:	9b03      	ldr	r3, [sp, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	9308      	str	r3, [sp, #32]
 80070dc:	9b03      	ldr	r3, [sp, #12]
 80070de:	444b      	add	r3, r9
 80070e0:	930a      	str	r3, [sp, #40]	; 0x28
 80070e2:	9b04      	ldr	r3, [sp, #16]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	9309      	str	r3, [sp, #36]	; 0x24
 80070ea:	9b08      	ldr	r3, [sp, #32]
 80070ec:	4621      	mov	r1, r4
 80070ee:	3b01      	subs	r3, #1
 80070f0:	4658      	mov	r0, fp
 80070f2:	9304      	str	r3, [sp, #16]
 80070f4:	f7ff fa68 	bl	80065c8 <quorem>
 80070f8:	4603      	mov	r3, r0
 80070fa:	4641      	mov	r1, r8
 80070fc:	3330      	adds	r3, #48	; 0x30
 80070fe:	9006      	str	r0, [sp, #24]
 8007100:	4658      	mov	r0, fp
 8007102:	930b      	str	r3, [sp, #44]	; 0x2c
 8007104:	f000 fda0 	bl	8007c48 <__mcmp>
 8007108:	4632      	mov	r2, r6
 800710a:	4681      	mov	r9, r0
 800710c:	4621      	mov	r1, r4
 800710e:	4628      	mov	r0, r5
 8007110:	f000 fdb6 	bl	8007c80 <__mdiff>
 8007114:	68c2      	ldr	r2, [r0, #12]
 8007116:	4607      	mov	r7, r0
 8007118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800711a:	bb02      	cbnz	r2, 800715e <_dtoa_r+0xa7e>
 800711c:	4601      	mov	r1, r0
 800711e:	4658      	mov	r0, fp
 8007120:	f000 fd92 	bl	8007c48 <__mcmp>
 8007124:	4602      	mov	r2, r0
 8007126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007128:	4639      	mov	r1, r7
 800712a:	4628      	mov	r0, r5
 800712c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007130:	f000 fb4c 	bl	80077cc <_Bfree>
 8007134:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007138:	9f08      	ldr	r7, [sp, #32]
 800713a:	ea43 0102 	orr.w	r1, r3, r2
 800713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007140:	430b      	orrs	r3, r1
 8007142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007144:	d10d      	bne.n	8007162 <_dtoa_r+0xa82>
 8007146:	2b39      	cmp	r3, #57	; 0x39
 8007148:	d029      	beq.n	800719e <_dtoa_r+0xabe>
 800714a:	f1b9 0f00 	cmp.w	r9, #0
 800714e:	dd01      	ble.n	8007154 <_dtoa_r+0xa74>
 8007150:	9b06      	ldr	r3, [sp, #24]
 8007152:	3331      	adds	r3, #49	; 0x31
 8007154:	9a04      	ldr	r2, [sp, #16]
 8007156:	7013      	strb	r3, [r2, #0]
 8007158:	e776      	b.n	8007048 <_dtoa_r+0x968>
 800715a:	4630      	mov	r0, r6
 800715c:	e7b9      	b.n	80070d2 <_dtoa_r+0x9f2>
 800715e:	2201      	movs	r2, #1
 8007160:	e7e2      	b.n	8007128 <_dtoa_r+0xa48>
 8007162:	f1b9 0f00 	cmp.w	r9, #0
 8007166:	db06      	blt.n	8007176 <_dtoa_r+0xa96>
 8007168:	9922      	ldr	r1, [sp, #136]	; 0x88
 800716a:	ea41 0909 	orr.w	r9, r1, r9
 800716e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007170:	ea59 0101 	orrs.w	r1, r9, r1
 8007174:	d120      	bne.n	80071b8 <_dtoa_r+0xad8>
 8007176:	2a00      	cmp	r2, #0
 8007178:	ddec      	ble.n	8007154 <_dtoa_r+0xa74>
 800717a:	4659      	mov	r1, fp
 800717c:	2201      	movs	r2, #1
 800717e:	4628      	mov	r0, r5
 8007180:	9308      	str	r3, [sp, #32]
 8007182:	f000 fcf1 	bl	8007b68 <__lshift>
 8007186:	4621      	mov	r1, r4
 8007188:	4683      	mov	fp, r0
 800718a:	f000 fd5d 	bl	8007c48 <__mcmp>
 800718e:	2800      	cmp	r0, #0
 8007190:	9b08      	ldr	r3, [sp, #32]
 8007192:	dc02      	bgt.n	800719a <_dtoa_r+0xaba>
 8007194:	d1de      	bne.n	8007154 <_dtoa_r+0xa74>
 8007196:	07da      	lsls	r2, r3, #31
 8007198:	d5dc      	bpl.n	8007154 <_dtoa_r+0xa74>
 800719a:	2b39      	cmp	r3, #57	; 0x39
 800719c:	d1d8      	bne.n	8007150 <_dtoa_r+0xa70>
 800719e:	2339      	movs	r3, #57	; 0x39
 80071a0:	9a04      	ldr	r2, [sp, #16]
 80071a2:	7013      	strb	r3, [r2, #0]
 80071a4:	463b      	mov	r3, r7
 80071a6:	461f      	mov	r7, r3
 80071a8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80071ac:	3b01      	subs	r3, #1
 80071ae:	2a39      	cmp	r2, #57	; 0x39
 80071b0:	d050      	beq.n	8007254 <_dtoa_r+0xb74>
 80071b2:	3201      	adds	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]
 80071b6:	e747      	b.n	8007048 <_dtoa_r+0x968>
 80071b8:	2a00      	cmp	r2, #0
 80071ba:	dd03      	ble.n	80071c4 <_dtoa_r+0xae4>
 80071bc:	2b39      	cmp	r3, #57	; 0x39
 80071be:	d0ee      	beq.n	800719e <_dtoa_r+0xabe>
 80071c0:	3301      	adds	r3, #1
 80071c2:	e7c7      	b.n	8007154 <_dtoa_r+0xa74>
 80071c4:	9a08      	ldr	r2, [sp, #32]
 80071c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80071c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80071cc:	428a      	cmp	r2, r1
 80071ce:	d02a      	beq.n	8007226 <_dtoa_r+0xb46>
 80071d0:	4659      	mov	r1, fp
 80071d2:	2300      	movs	r3, #0
 80071d4:	220a      	movs	r2, #10
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 fb1a 	bl	8007810 <__multadd>
 80071dc:	45b0      	cmp	r8, r6
 80071de:	4683      	mov	fp, r0
 80071e0:	f04f 0300 	mov.w	r3, #0
 80071e4:	f04f 020a 	mov.w	r2, #10
 80071e8:	4641      	mov	r1, r8
 80071ea:	4628      	mov	r0, r5
 80071ec:	d107      	bne.n	80071fe <_dtoa_r+0xb1e>
 80071ee:	f000 fb0f 	bl	8007810 <__multadd>
 80071f2:	4680      	mov	r8, r0
 80071f4:	4606      	mov	r6, r0
 80071f6:	9b08      	ldr	r3, [sp, #32]
 80071f8:	3301      	adds	r3, #1
 80071fa:	9308      	str	r3, [sp, #32]
 80071fc:	e775      	b.n	80070ea <_dtoa_r+0xa0a>
 80071fe:	f000 fb07 	bl	8007810 <__multadd>
 8007202:	4631      	mov	r1, r6
 8007204:	4680      	mov	r8, r0
 8007206:	2300      	movs	r3, #0
 8007208:	220a      	movs	r2, #10
 800720a:	4628      	mov	r0, r5
 800720c:	f000 fb00 	bl	8007810 <__multadd>
 8007210:	4606      	mov	r6, r0
 8007212:	e7f0      	b.n	80071f6 <_dtoa_r+0xb16>
 8007214:	f1b9 0f00 	cmp.w	r9, #0
 8007218:	bfcc      	ite	gt
 800721a:	464f      	movgt	r7, r9
 800721c:	2701      	movle	r7, #1
 800721e:	f04f 0800 	mov.w	r8, #0
 8007222:	9a03      	ldr	r2, [sp, #12]
 8007224:	4417      	add	r7, r2
 8007226:	4659      	mov	r1, fp
 8007228:	2201      	movs	r2, #1
 800722a:	4628      	mov	r0, r5
 800722c:	9308      	str	r3, [sp, #32]
 800722e:	f000 fc9b 	bl	8007b68 <__lshift>
 8007232:	4621      	mov	r1, r4
 8007234:	4683      	mov	fp, r0
 8007236:	f000 fd07 	bl	8007c48 <__mcmp>
 800723a:	2800      	cmp	r0, #0
 800723c:	dcb2      	bgt.n	80071a4 <_dtoa_r+0xac4>
 800723e:	d102      	bne.n	8007246 <_dtoa_r+0xb66>
 8007240:	9b08      	ldr	r3, [sp, #32]
 8007242:	07db      	lsls	r3, r3, #31
 8007244:	d4ae      	bmi.n	80071a4 <_dtoa_r+0xac4>
 8007246:	463b      	mov	r3, r7
 8007248:	461f      	mov	r7, r3
 800724a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800724e:	2a30      	cmp	r2, #48	; 0x30
 8007250:	d0fa      	beq.n	8007248 <_dtoa_r+0xb68>
 8007252:	e6f9      	b.n	8007048 <_dtoa_r+0x968>
 8007254:	9a03      	ldr	r2, [sp, #12]
 8007256:	429a      	cmp	r2, r3
 8007258:	d1a5      	bne.n	80071a6 <_dtoa_r+0xac6>
 800725a:	2331      	movs	r3, #49	; 0x31
 800725c:	f10a 0a01 	add.w	sl, sl, #1
 8007260:	e779      	b.n	8007156 <_dtoa_r+0xa76>
 8007262:	4b14      	ldr	r3, [pc, #80]	; (80072b4 <_dtoa_r+0xbd4>)
 8007264:	f7ff baa8 	b.w	80067b8 <_dtoa_r+0xd8>
 8007268:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800726a:	2b00      	cmp	r3, #0
 800726c:	f47f aa81 	bne.w	8006772 <_dtoa_r+0x92>
 8007270:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <_dtoa_r+0xbd8>)
 8007272:	f7ff baa1 	b.w	80067b8 <_dtoa_r+0xd8>
 8007276:	f1b9 0f00 	cmp.w	r9, #0
 800727a:	dc03      	bgt.n	8007284 <_dtoa_r+0xba4>
 800727c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800727e:	2b02      	cmp	r3, #2
 8007280:	f73f aecb 	bgt.w	800701a <_dtoa_r+0x93a>
 8007284:	9f03      	ldr	r7, [sp, #12]
 8007286:	4621      	mov	r1, r4
 8007288:	4658      	mov	r0, fp
 800728a:	f7ff f99d 	bl	80065c8 <quorem>
 800728e:	9a03      	ldr	r2, [sp, #12]
 8007290:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007294:	f807 3b01 	strb.w	r3, [r7], #1
 8007298:	1aba      	subs	r2, r7, r2
 800729a:	4591      	cmp	r9, r2
 800729c:	ddba      	ble.n	8007214 <_dtoa_r+0xb34>
 800729e:	4659      	mov	r1, fp
 80072a0:	2300      	movs	r3, #0
 80072a2:	220a      	movs	r2, #10
 80072a4:	4628      	mov	r0, r5
 80072a6:	f000 fab3 	bl	8007810 <__multadd>
 80072aa:	4683      	mov	fp, r0
 80072ac:	e7eb      	b.n	8007286 <_dtoa_r+0xba6>
 80072ae:	bf00      	nop
 80072b0:	080086d3 	.word	0x080086d3
 80072b4:	08008630 	.word	0x08008630
 80072b8:	08008654 	.word	0x08008654

080072bc <__sflush_r>:
 80072bc:	898a      	ldrh	r2, [r1, #12]
 80072be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c0:	4605      	mov	r5, r0
 80072c2:	0710      	lsls	r0, r2, #28
 80072c4:	460c      	mov	r4, r1
 80072c6:	d457      	bmi.n	8007378 <__sflush_r+0xbc>
 80072c8:	684b      	ldr	r3, [r1, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	dc04      	bgt.n	80072d8 <__sflush_r+0x1c>
 80072ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	dc01      	bgt.n	80072d8 <__sflush_r+0x1c>
 80072d4:	2000      	movs	r0, #0
 80072d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072da:	2e00      	cmp	r6, #0
 80072dc:	d0fa      	beq.n	80072d4 <__sflush_r+0x18>
 80072de:	2300      	movs	r3, #0
 80072e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072e4:	682f      	ldr	r7, [r5, #0]
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	d032      	beq.n	8007350 <__sflush_r+0x94>
 80072ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072ec:	89a3      	ldrh	r3, [r4, #12]
 80072ee:	075a      	lsls	r2, r3, #29
 80072f0:	d505      	bpl.n	80072fe <__sflush_r+0x42>
 80072f2:	6863      	ldr	r3, [r4, #4]
 80072f4:	1ac0      	subs	r0, r0, r3
 80072f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072f8:	b10b      	cbz	r3, 80072fe <__sflush_r+0x42>
 80072fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072fc:	1ac0      	subs	r0, r0, r3
 80072fe:	2300      	movs	r3, #0
 8007300:	4602      	mov	r2, r0
 8007302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007304:	4628      	mov	r0, r5
 8007306:	6a21      	ldr	r1, [r4, #32]
 8007308:	47b0      	blx	r6
 800730a:	1c43      	adds	r3, r0, #1
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	d106      	bne.n	800731e <__sflush_r+0x62>
 8007310:	6829      	ldr	r1, [r5, #0]
 8007312:	291d      	cmp	r1, #29
 8007314:	d82c      	bhi.n	8007370 <__sflush_r+0xb4>
 8007316:	4a29      	ldr	r2, [pc, #164]	; (80073bc <__sflush_r+0x100>)
 8007318:	40ca      	lsrs	r2, r1
 800731a:	07d6      	lsls	r6, r2, #31
 800731c:	d528      	bpl.n	8007370 <__sflush_r+0xb4>
 800731e:	2200      	movs	r2, #0
 8007320:	6062      	str	r2, [r4, #4]
 8007322:	6922      	ldr	r2, [r4, #16]
 8007324:	04d9      	lsls	r1, r3, #19
 8007326:	6022      	str	r2, [r4, #0]
 8007328:	d504      	bpl.n	8007334 <__sflush_r+0x78>
 800732a:	1c42      	adds	r2, r0, #1
 800732c:	d101      	bne.n	8007332 <__sflush_r+0x76>
 800732e:	682b      	ldr	r3, [r5, #0]
 8007330:	b903      	cbnz	r3, 8007334 <__sflush_r+0x78>
 8007332:	6560      	str	r0, [r4, #84]	; 0x54
 8007334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007336:	602f      	str	r7, [r5, #0]
 8007338:	2900      	cmp	r1, #0
 800733a:	d0cb      	beq.n	80072d4 <__sflush_r+0x18>
 800733c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007340:	4299      	cmp	r1, r3
 8007342:	d002      	beq.n	800734a <__sflush_r+0x8e>
 8007344:	4628      	mov	r0, r5
 8007346:	f7fe faa5 	bl	8005894 <_free_r>
 800734a:	2000      	movs	r0, #0
 800734c:	6360      	str	r0, [r4, #52]	; 0x34
 800734e:	e7c2      	b.n	80072d6 <__sflush_r+0x1a>
 8007350:	6a21      	ldr	r1, [r4, #32]
 8007352:	2301      	movs	r3, #1
 8007354:	4628      	mov	r0, r5
 8007356:	47b0      	blx	r6
 8007358:	1c41      	adds	r1, r0, #1
 800735a:	d1c7      	bne.n	80072ec <__sflush_r+0x30>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0c4      	beq.n	80072ec <__sflush_r+0x30>
 8007362:	2b1d      	cmp	r3, #29
 8007364:	d001      	beq.n	800736a <__sflush_r+0xae>
 8007366:	2b16      	cmp	r3, #22
 8007368:	d101      	bne.n	800736e <__sflush_r+0xb2>
 800736a:	602f      	str	r7, [r5, #0]
 800736c:	e7b2      	b.n	80072d4 <__sflush_r+0x18>
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	e7ae      	b.n	80072d6 <__sflush_r+0x1a>
 8007378:	690f      	ldr	r7, [r1, #16]
 800737a:	2f00      	cmp	r7, #0
 800737c:	d0aa      	beq.n	80072d4 <__sflush_r+0x18>
 800737e:	0793      	lsls	r3, r2, #30
 8007380:	bf18      	it	ne
 8007382:	2300      	movne	r3, #0
 8007384:	680e      	ldr	r6, [r1, #0]
 8007386:	bf08      	it	eq
 8007388:	694b      	ldreq	r3, [r1, #20]
 800738a:	1bf6      	subs	r6, r6, r7
 800738c:	600f      	str	r7, [r1, #0]
 800738e:	608b      	str	r3, [r1, #8]
 8007390:	2e00      	cmp	r6, #0
 8007392:	dd9f      	ble.n	80072d4 <__sflush_r+0x18>
 8007394:	4633      	mov	r3, r6
 8007396:	463a      	mov	r2, r7
 8007398:	4628      	mov	r0, r5
 800739a:	6a21      	ldr	r1, [r4, #32]
 800739c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80073a0:	47e0      	blx	ip
 80073a2:	2800      	cmp	r0, #0
 80073a4:	dc06      	bgt.n	80073b4 <__sflush_r+0xf8>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	e790      	b.n	80072d6 <__sflush_r+0x1a>
 80073b4:	4407      	add	r7, r0
 80073b6:	1a36      	subs	r6, r6, r0
 80073b8:	e7ea      	b.n	8007390 <__sflush_r+0xd4>
 80073ba:	bf00      	nop
 80073bc:	20400001 	.word	0x20400001

080073c0 <_fflush_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	690b      	ldr	r3, [r1, #16]
 80073c4:	4605      	mov	r5, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	b913      	cbnz	r3, 80073d0 <_fflush_r+0x10>
 80073ca:	2500      	movs	r5, #0
 80073cc:	4628      	mov	r0, r5
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	b118      	cbz	r0, 80073da <_fflush_r+0x1a>
 80073d2:	6983      	ldr	r3, [r0, #24]
 80073d4:	b90b      	cbnz	r3, 80073da <_fflush_r+0x1a>
 80073d6:	f000 f887 	bl	80074e8 <__sinit>
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <_fflush_r+0x6c>)
 80073dc:	429c      	cmp	r4, r3
 80073de:	d11b      	bne.n	8007418 <_fflush_r+0x58>
 80073e0:	686c      	ldr	r4, [r5, #4]
 80073e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0ef      	beq.n	80073ca <_fflush_r+0xa>
 80073ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073ec:	07d0      	lsls	r0, r2, #31
 80073ee:	d404      	bmi.n	80073fa <_fflush_r+0x3a>
 80073f0:	0599      	lsls	r1, r3, #22
 80073f2:	d402      	bmi.n	80073fa <_fflush_r+0x3a>
 80073f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073f6:	f000 f91a 	bl	800762e <__retarget_lock_acquire_recursive>
 80073fa:	4628      	mov	r0, r5
 80073fc:	4621      	mov	r1, r4
 80073fe:	f7ff ff5d 	bl	80072bc <__sflush_r>
 8007402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007404:	4605      	mov	r5, r0
 8007406:	07da      	lsls	r2, r3, #31
 8007408:	d4e0      	bmi.n	80073cc <_fflush_r+0xc>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	059b      	lsls	r3, r3, #22
 800740e:	d4dd      	bmi.n	80073cc <_fflush_r+0xc>
 8007410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007412:	f000 f90d 	bl	8007630 <__retarget_lock_release_recursive>
 8007416:	e7d9      	b.n	80073cc <_fflush_r+0xc>
 8007418:	4b05      	ldr	r3, [pc, #20]	; (8007430 <_fflush_r+0x70>)
 800741a:	429c      	cmp	r4, r3
 800741c:	d101      	bne.n	8007422 <_fflush_r+0x62>
 800741e:	68ac      	ldr	r4, [r5, #8]
 8007420:	e7df      	b.n	80073e2 <_fflush_r+0x22>
 8007422:	4b04      	ldr	r3, [pc, #16]	; (8007434 <_fflush_r+0x74>)
 8007424:	429c      	cmp	r4, r3
 8007426:	bf08      	it	eq
 8007428:	68ec      	ldreq	r4, [r5, #12]
 800742a:	e7da      	b.n	80073e2 <_fflush_r+0x22>
 800742c:	08008704 	.word	0x08008704
 8007430:	08008724 	.word	0x08008724
 8007434:	080086e4 	.word	0x080086e4

08007438 <std>:
 8007438:	2300      	movs	r3, #0
 800743a:	b510      	push	{r4, lr}
 800743c:	4604      	mov	r4, r0
 800743e:	e9c0 3300 	strd	r3, r3, [r0]
 8007442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007446:	6083      	str	r3, [r0, #8]
 8007448:	8181      	strh	r1, [r0, #12]
 800744a:	6643      	str	r3, [r0, #100]	; 0x64
 800744c:	81c2      	strh	r2, [r0, #14]
 800744e:	6183      	str	r3, [r0, #24]
 8007450:	4619      	mov	r1, r3
 8007452:	2208      	movs	r2, #8
 8007454:	305c      	adds	r0, #92	; 0x5c
 8007456:	f7fe fa15 	bl	8005884 <memset>
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <std+0x38>)
 800745c:	6224      	str	r4, [r4, #32]
 800745e:	6263      	str	r3, [r4, #36]	; 0x24
 8007460:	4b04      	ldr	r3, [pc, #16]	; (8007474 <std+0x3c>)
 8007462:	62a3      	str	r3, [r4, #40]	; 0x28
 8007464:	4b04      	ldr	r3, [pc, #16]	; (8007478 <std+0x40>)
 8007466:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <std+0x44>)
 800746a:	6323      	str	r3, [r4, #48]	; 0x30
 800746c:	bd10      	pop	{r4, pc}
 800746e:	bf00      	nop
 8007470:	08008129 	.word	0x08008129
 8007474:	0800814b 	.word	0x0800814b
 8007478:	08008183 	.word	0x08008183
 800747c:	080081a7 	.word	0x080081a7

08007480 <_cleanup_r>:
 8007480:	4901      	ldr	r1, [pc, #4]	; (8007488 <_cleanup_r+0x8>)
 8007482:	f000 b8af 	b.w	80075e4 <_fwalk_reent>
 8007486:	bf00      	nop
 8007488:	080073c1 	.word	0x080073c1

0800748c <__sfmoreglue>:
 800748c:	2268      	movs	r2, #104	; 0x68
 800748e:	b570      	push	{r4, r5, r6, lr}
 8007490:	1e4d      	subs	r5, r1, #1
 8007492:	4355      	muls	r5, r2
 8007494:	460e      	mov	r6, r1
 8007496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800749a:	f7fe fa63 	bl	8005964 <_malloc_r>
 800749e:	4604      	mov	r4, r0
 80074a0:	b140      	cbz	r0, 80074b4 <__sfmoreglue+0x28>
 80074a2:	2100      	movs	r1, #0
 80074a4:	e9c0 1600 	strd	r1, r6, [r0]
 80074a8:	300c      	adds	r0, #12
 80074aa:	60a0      	str	r0, [r4, #8]
 80074ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074b0:	f7fe f9e8 	bl	8005884 <memset>
 80074b4:	4620      	mov	r0, r4
 80074b6:	bd70      	pop	{r4, r5, r6, pc}

080074b8 <__sfp_lock_acquire>:
 80074b8:	4801      	ldr	r0, [pc, #4]	; (80074c0 <__sfp_lock_acquire+0x8>)
 80074ba:	f000 b8b8 	b.w	800762e <__retarget_lock_acquire_recursive>
 80074be:	bf00      	nop
 80074c0:	200007a9 	.word	0x200007a9

080074c4 <__sfp_lock_release>:
 80074c4:	4801      	ldr	r0, [pc, #4]	; (80074cc <__sfp_lock_release+0x8>)
 80074c6:	f000 b8b3 	b.w	8007630 <__retarget_lock_release_recursive>
 80074ca:	bf00      	nop
 80074cc:	200007a9 	.word	0x200007a9

080074d0 <__sinit_lock_acquire>:
 80074d0:	4801      	ldr	r0, [pc, #4]	; (80074d8 <__sinit_lock_acquire+0x8>)
 80074d2:	f000 b8ac 	b.w	800762e <__retarget_lock_acquire_recursive>
 80074d6:	bf00      	nop
 80074d8:	200007aa 	.word	0x200007aa

080074dc <__sinit_lock_release>:
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <__sinit_lock_release+0x8>)
 80074de:	f000 b8a7 	b.w	8007630 <__retarget_lock_release_recursive>
 80074e2:	bf00      	nop
 80074e4:	200007aa 	.word	0x200007aa

080074e8 <__sinit>:
 80074e8:	b510      	push	{r4, lr}
 80074ea:	4604      	mov	r4, r0
 80074ec:	f7ff fff0 	bl	80074d0 <__sinit_lock_acquire>
 80074f0:	69a3      	ldr	r3, [r4, #24]
 80074f2:	b11b      	cbz	r3, 80074fc <__sinit+0x14>
 80074f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074f8:	f7ff bff0 	b.w	80074dc <__sinit_lock_release>
 80074fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007500:	6523      	str	r3, [r4, #80]	; 0x50
 8007502:	4b13      	ldr	r3, [pc, #76]	; (8007550 <__sinit+0x68>)
 8007504:	4a13      	ldr	r2, [pc, #76]	; (8007554 <__sinit+0x6c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	62a2      	str	r2, [r4, #40]	; 0x28
 800750a:	42a3      	cmp	r3, r4
 800750c:	bf08      	it	eq
 800750e:	2301      	moveq	r3, #1
 8007510:	4620      	mov	r0, r4
 8007512:	bf08      	it	eq
 8007514:	61a3      	streq	r3, [r4, #24]
 8007516:	f000 f81f 	bl	8007558 <__sfp>
 800751a:	6060      	str	r0, [r4, #4]
 800751c:	4620      	mov	r0, r4
 800751e:	f000 f81b 	bl	8007558 <__sfp>
 8007522:	60a0      	str	r0, [r4, #8]
 8007524:	4620      	mov	r0, r4
 8007526:	f000 f817 	bl	8007558 <__sfp>
 800752a:	2200      	movs	r2, #0
 800752c:	2104      	movs	r1, #4
 800752e:	60e0      	str	r0, [r4, #12]
 8007530:	6860      	ldr	r0, [r4, #4]
 8007532:	f7ff ff81 	bl	8007438 <std>
 8007536:	2201      	movs	r2, #1
 8007538:	2109      	movs	r1, #9
 800753a:	68a0      	ldr	r0, [r4, #8]
 800753c:	f7ff ff7c 	bl	8007438 <std>
 8007540:	2202      	movs	r2, #2
 8007542:	2112      	movs	r1, #18
 8007544:	68e0      	ldr	r0, [r4, #12]
 8007546:	f7ff ff77 	bl	8007438 <std>
 800754a:	2301      	movs	r3, #1
 800754c:	61a3      	str	r3, [r4, #24]
 800754e:	e7d1      	b.n	80074f4 <__sinit+0xc>
 8007550:	0800861c 	.word	0x0800861c
 8007554:	08007481 	.word	0x08007481

08007558 <__sfp>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	4607      	mov	r7, r0
 800755c:	f7ff ffac 	bl	80074b8 <__sfp_lock_acquire>
 8007560:	4b1e      	ldr	r3, [pc, #120]	; (80075dc <__sfp+0x84>)
 8007562:	681e      	ldr	r6, [r3, #0]
 8007564:	69b3      	ldr	r3, [r6, #24]
 8007566:	b913      	cbnz	r3, 800756e <__sfp+0x16>
 8007568:	4630      	mov	r0, r6
 800756a:	f7ff ffbd 	bl	80074e8 <__sinit>
 800756e:	3648      	adds	r6, #72	; 0x48
 8007570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007574:	3b01      	subs	r3, #1
 8007576:	d503      	bpl.n	8007580 <__sfp+0x28>
 8007578:	6833      	ldr	r3, [r6, #0]
 800757a:	b30b      	cbz	r3, 80075c0 <__sfp+0x68>
 800757c:	6836      	ldr	r6, [r6, #0]
 800757e:	e7f7      	b.n	8007570 <__sfp+0x18>
 8007580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007584:	b9d5      	cbnz	r5, 80075bc <__sfp+0x64>
 8007586:	4b16      	ldr	r3, [pc, #88]	; (80075e0 <__sfp+0x88>)
 8007588:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800758c:	60e3      	str	r3, [r4, #12]
 800758e:	6665      	str	r5, [r4, #100]	; 0x64
 8007590:	f000 f84c 	bl	800762c <__retarget_lock_init_recursive>
 8007594:	f7ff ff96 	bl	80074c4 <__sfp_lock_release>
 8007598:	2208      	movs	r2, #8
 800759a:	4629      	mov	r1, r5
 800759c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075a4:	6025      	str	r5, [r4, #0]
 80075a6:	61a5      	str	r5, [r4, #24]
 80075a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075ac:	f7fe f96a 	bl	8005884 <memset>
 80075b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075b8:	4620      	mov	r0, r4
 80075ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075bc:	3468      	adds	r4, #104	; 0x68
 80075be:	e7d9      	b.n	8007574 <__sfp+0x1c>
 80075c0:	2104      	movs	r1, #4
 80075c2:	4638      	mov	r0, r7
 80075c4:	f7ff ff62 	bl	800748c <__sfmoreglue>
 80075c8:	4604      	mov	r4, r0
 80075ca:	6030      	str	r0, [r6, #0]
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d1d5      	bne.n	800757c <__sfp+0x24>
 80075d0:	f7ff ff78 	bl	80074c4 <__sfp_lock_release>
 80075d4:	230c      	movs	r3, #12
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	e7ee      	b.n	80075b8 <__sfp+0x60>
 80075da:	bf00      	nop
 80075dc:	0800861c 	.word	0x0800861c
 80075e0:	ffff0001 	.word	0xffff0001

080075e4 <_fwalk_reent>:
 80075e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075e8:	4606      	mov	r6, r0
 80075ea:	4688      	mov	r8, r1
 80075ec:	2700      	movs	r7, #0
 80075ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075f6:	f1b9 0901 	subs.w	r9, r9, #1
 80075fa:	d505      	bpl.n	8007608 <_fwalk_reent+0x24>
 80075fc:	6824      	ldr	r4, [r4, #0]
 80075fe:	2c00      	cmp	r4, #0
 8007600:	d1f7      	bne.n	80075f2 <_fwalk_reent+0xe>
 8007602:	4638      	mov	r0, r7
 8007604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007608:	89ab      	ldrh	r3, [r5, #12]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d907      	bls.n	800761e <_fwalk_reent+0x3a>
 800760e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007612:	3301      	adds	r3, #1
 8007614:	d003      	beq.n	800761e <_fwalk_reent+0x3a>
 8007616:	4629      	mov	r1, r5
 8007618:	4630      	mov	r0, r6
 800761a:	47c0      	blx	r8
 800761c:	4307      	orrs	r7, r0
 800761e:	3568      	adds	r5, #104	; 0x68
 8007620:	e7e9      	b.n	80075f6 <_fwalk_reent+0x12>
	...

08007624 <_localeconv_r>:
 8007624:	4800      	ldr	r0, [pc, #0]	; (8007628 <_localeconv_r+0x4>)
 8007626:	4770      	bx	lr
 8007628:	20000168 	.word	0x20000168

0800762c <__retarget_lock_init_recursive>:
 800762c:	4770      	bx	lr

0800762e <__retarget_lock_acquire_recursive>:
 800762e:	4770      	bx	lr

08007630 <__retarget_lock_release_recursive>:
 8007630:	4770      	bx	lr

08007632 <__swhatbuf_r>:
 8007632:	b570      	push	{r4, r5, r6, lr}
 8007634:	460e      	mov	r6, r1
 8007636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800763a:	4614      	mov	r4, r2
 800763c:	2900      	cmp	r1, #0
 800763e:	461d      	mov	r5, r3
 8007640:	b096      	sub	sp, #88	; 0x58
 8007642:	da08      	bge.n	8007656 <__swhatbuf_r+0x24>
 8007644:	2200      	movs	r2, #0
 8007646:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800764a:	602a      	str	r2, [r5, #0]
 800764c:	061a      	lsls	r2, r3, #24
 800764e:	d410      	bmi.n	8007672 <__swhatbuf_r+0x40>
 8007650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007654:	e00e      	b.n	8007674 <__swhatbuf_r+0x42>
 8007656:	466a      	mov	r2, sp
 8007658:	f000 fdfc 	bl	8008254 <_fstat_r>
 800765c:	2800      	cmp	r0, #0
 800765e:	dbf1      	blt.n	8007644 <__swhatbuf_r+0x12>
 8007660:	9a01      	ldr	r2, [sp, #4]
 8007662:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007666:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800766a:	425a      	negs	r2, r3
 800766c:	415a      	adcs	r2, r3
 800766e:	602a      	str	r2, [r5, #0]
 8007670:	e7ee      	b.n	8007650 <__swhatbuf_r+0x1e>
 8007672:	2340      	movs	r3, #64	; 0x40
 8007674:	2000      	movs	r0, #0
 8007676:	6023      	str	r3, [r4, #0]
 8007678:	b016      	add	sp, #88	; 0x58
 800767a:	bd70      	pop	{r4, r5, r6, pc}

0800767c <__smakebuf_r>:
 800767c:	898b      	ldrh	r3, [r1, #12]
 800767e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007680:	079d      	lsls	r5, r3, #30
 8007682:	4606      	mov	r6, r0
 8007684:	460c      	mov	r4, r1
 8007686:	d507      	bpl.n	8007698 <__smakebuf_r+0x1c>
 8007688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	6123      	str	r3, [r4, #16]
 8007690:	2301      	movs	r3, #1
 8007692:	6163      	str	r3, [r4, #20]
 8007694:	b002      	add	sp, #8
 8007696:	bd70      	pop	{r4, r5, r6, pc}
 8007698:	466a      	mov	r2, sp
 800769a:	ab01      	add	r3, sp, #4
 800769c:	f7ff ffc9 	bl	8007632 <__swhatbuf_r>
 80076a0:	9900      	ldr	r1, [sp, #0]
 80076a2:	4605      	mov	r5, r0
 80076a4:	4630      	mov	r0, r6
 80076a6:	f7fe f95d 	bl	8005964 <_malloc_r>
 80076aa:	b948      	cbnz	r0, 80076c0 <__smakebuf_r+0x44>
 80076ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b0:	059a      	lsls	r2, r3, #22
 80076b2:	d4ef      	bmi.n	8007694 <__smakebuf_r+0x18>
 80076b4:	f023 0303 	bic.w	r3, r3, #3
 80076b8:	f043 0302 	orr.w	r3, r3, #2
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e7e3      	b.n	8007688 <__smakebuf_r+0xc>
 80076c0:	4b0d      	ldr	r3, [pc, #52]	; (80076f8 <__smakebuf_r+0x7c>)
 80076c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	6020      	str	r0, [r4, #0]
 80076c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076cc:	81a3      	strh	r3, [r4, #12]
 80076ce:	9b00      	ldr	r3, [sp, #0]
 80076d0:	6120      	str	r0, [r4, #16]
 80076d2:	6163      	str	r3, [r4, #20]
 80076d4:	9b01      	ldr	r3, [sp, #4]
 80076d6:	b15b      	cbz	r3, 80076f0 <__smakebuf_r+0x74>
 80076d8:	4630      	mov	r0, r6
 80076da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076de:	f000 fdcb 	bl	8008278 <_isatty_r>
 80076e2:	b128      	cbz	r0, 80076f0 <__smakebuf_r+0x74>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	f043 0301 	orr.w	r3, r3, #1
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	89a0      	ldrh	r0, [r4, #12]
 80076f2:	4305      	orrs	r5, r0
 80076f4:	81a5      	strh	r5, [r4, #12]
 80076f6:	e7cd      	b.n	8007694 <__smakebuf_r+0x18>
 80076f8:	08007481 	.word	0x08007481

080076fc <memchr>:
 80076fc:	4603      	mov	r3, r0
 80076fe:	b510      	push	{r4, lr}
 8007700:	b2c9      	uxtb	r1, r1
 8007702:	4402      	add	r2, r0
 8007704:	4293      	cmp	r3, r2
 8007706:	4618      	mov	r0, r3
 8007708:	d101      	bne.n	800770e <memchr+0x12>
 800770a:	2000      	movs	r0, #0
 800770c:	e003      	b.n	8007716 <memchr+0x1a>
 800770e:	7804      	ldrb	r4, [r0, #0]
 8007710:	3301      	adds	r3, #1
 8007712:	428c      	cmp	r4, r1
 8007714:	d1f6      	bne.n	8007704 <memchr+0x8>
 8007716:	bd10      	pop	{r4, pc}

08007718 <memcpy>:
 8007718:	440a      	add	r2, r1
 800771a:	4291      	cmp	r1, r2
 800771c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007720:	d100      	bne.n	8007724 <memcpy+0xc>
 8007722:	4770      	bx	lr
 8007724:	b510      	push	{r4, lr}
 8007726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772a:	4291      	cmp	r1, r2
 800772c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007730:	d1f9      	bne.n	8007726 <memcpy+0xe>
 8007732:	bd10      	pop	{r4, pc}

08007734 <__malloc_lock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_lock+0x8>)
 8007736:	f7ff bf7a 	b.w	800762e <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	200007a8 	.word	0x200007a8

08007740 <__malloc_unlock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_unlock+0x8>)
 8007742:	f7ff bf75 	b.w	8007630 <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	200007a8 	.word	0x200007a8

0800774c <_Balloc>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007750:	4604      	mov	r4, r0
 8007752:	460d      	mov	r5, r1
 8007754:	b976      	cbnz	r6, 8007774 <_Balloc+0x28>
 8007756:	2010      	movs	r0, #16
 8007758:	f7fe f88c 	bl	8005874 <malloc>
 800775c:	4602      	mov	r2, r0
 800775e:	6260      	str	r0, [r4, #36]	; 0x24
 8007760:	b920      	cbnz	r0, 800776c <_Balloc+0x20>
 8007762:	2166      	movs	r1, #102	; 0x66
 8007764:	4b17      	ldr	r3, [pc, #92]	; (80077c4 <_Balloc+0x78>)
 8007766:	4818      	ldr	r0, [pc, #96]	; (80077c8 <_Balloc+0x7c>)
 8007768:	f000 fd34 	bl	80081d4 <__assert_func>
 800776c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007770:	6006      	str	r6, [r0, #0]
 8007772:	60c6      	str	r6, [r0, #12]
 8007774:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007776:	68f3      	ldr	r3, [r6, #12]
 8007778:	b183      	cbz	r3, 800779c <_Balloc+0x50>
 800777a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007782:	b9b8      	cbnz	r0, 80077b4 <_Balloc+0x68>
 8007784:	2101      	movs	r1, #1
 8007786:	fa01 f605 	lsl.w	r6, r1, r5
 800778a:	1d72      	adds	r2, r6, #5
 800778c:	4620      	mov	r0, r4
 800778e:	0092      	lsls	r2, r2, #2
 8007790:	f000 fb5e 	bl	8007e50 <_calloc_r>
 8007794:	b160      	cbz	r0, 80077b0 <_Balloc+0x64>
 8007796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800779a:	e00e      	b.n	80077ba <_Balloc+0x6e>
 800779c:	2221      	movs	r2, #33	; 0x21
 800779e:	2104      	movs	r1, #4
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 fb55 	bl	8007e50 <_calloc_r>
 80077a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077a8:	60f0      	str	r0, [r6, #12]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e4      	bne.n	800777a <_Balloc+0x2e>
 80077b0:	2000      	movs	r0, #0
 80077b2:	bd70      	pop	{r4, r5, r6, pc}
 80077b4:	6802      	ldr	r2, [r0, #0]
 80077b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077ba:	2300      	movs	r3, #0
 80077bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077c0:	e7f7      	b.n	80077b2 <_Balloc+0x66>
 80077c2:	bf00      	nop
 80077c4:	08008661 	.word	0x08008661
 80077c8:	08008744 	.word	0x08008744

080077cc <_Bfree>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077d0:	4605      	mov	r5, r0
 80077d2:	460c      	mov	r4, r1
 80077d4:	b976      	cbnz	r6, 80077f4 <_Bfree+0x28>
 80077d6:	2010      	movs	r0, #16
 80077d8:	f7fe f84c 	bl	8005874 <malloc>
 80077dc:	4602      	mov	r2, r0
 80077de:	6268      	str	r0, [r5, #36]	; 0x24
 80077e0:	b920      	cbnz	r0, 80077ec <_Bfree+0x20>
 80077e2:	218a      	movs	r1, #138	; 0x8a
 80077e4:	4b08      	ldr	r3, [pc, #32]	; (8007808 <_Bfree+0x3c>)
 80077e6:	4809      	ldr	r0, [pc, #36]	; (800780c <_Bfree+0x40>)
 80077e8:	f000 fcf4 	bl	80081d4 <__assert_func>
 80077ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077f0:	6006      	str	r6, [r0, #0]
 80077f2:	60c6      	str	r6, [r0, #12]
 80077f4:	b13c      	cbz	r4, 8007806 <_Bfree+0x3a>
 80077f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077f8:	6862      	ldr	r2, [r4, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007800:	6021      	str	r1, [r4, #0]
 8007802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	08008661 	.word	0x08008661
 800780c:	08008744 	.word	0x08008744

08007810 <__multadd>:
 8007810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	4607      	mov	r7, r0
 8007816:	460c      	mov	r4, r1
 8007818:	461e      	mov	r6, r3
 800781a:	2000      	movs	r0, #0
 800781c:	690d      	ldr	r5, [r1, #16]
 800781e:	f101 0c14 	add.w	ip, r1, #20
 8007822:	f8dc 3000 	ldr.w	r3, [ip]
 8007826:	3001      	adds	r0, #1
 8007828:	b299      	uxth	r1, r3
 800782a:	fb02 6101 	mla	r1, r2, r1, r6
 800782e:	0c1e      	lsrs	r6, r3, #16
 8007830:	0c0b      	lsrs	r3, r1, #16
 8007832:	fb02 3306 	mla	r3, r2, r6, r3
 8007836:	b289      	uxth	r1, r1
 8007838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800783c:	4285      	cmp	r5, r0
 800783e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007842:	f84c 1b04 	str.w	r1, [ip], #4
 8007846:	dcec      	bgt.n	8007822 <__multadd+0x12>
 8007848:	b30e      	cbz	r6, 800788e <__multadd+0x7e>
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	42ab      	cmp	r3, r5
 800784e:	dc19      	bgt.n	8007884 <__multadd+0x74>
 8007850:	6861      	ldr	r1, [r4, #4]
 8007852:	4638      	mov	r0, r7
 8007854:	3101      	adds	r1, #1
 8007856:	f7ff ff79 	bl	800774c <_Balloc>
 800785a:	4680      	mov	r8, r0
 800785c:	b928      	cbnz	r0, 800786a <__multadd+0x5a>
 800785e:	4602      	mov	r2, r0
 8007860:	21b5      	movs	r1, #181	; 0xb5
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <__multadd+0x84>)
 8007864:	480c      	ldr	r0, [pc, #48]	; (8007898 <__multadd+0x88>)
 8007866:	f000 fcb5 	bl	80081d4 <__assert_func>
 800786a:	6922      	ldr	r2, [r4, #16]
 800786c:	f104 010c 	add.w	r1, r4, #12
 8007870:	3202      	adds	r2, #2
 8007872:	0092      	lsls	r2, r2, #2
 8007874:	300c      	adds	r0, #12
 8007876:	f7ff ff4f 	bl	8007718 <memcpy>
 800787a:	4621      	mov	r1, r4
 800787c:	4638      	mov	r0, r7
 800787e:	f7ff ffa5 	bl	80077cc <_Bfree>
 8007882:	4644      	mov	r4, r8
 8007884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007888:	3501      	adds	r5, #1
 800788a:	615e      	str	r6, [r3, #20]
 800788c:	6125      	str	r5, [r4, #16]
 800788e:	4620      	mov	r0, r4
 8007890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007894:	080086d3 	.word	0x080086d3
 8007898:	08008744 	.word	0x08008744

0800789c <__hi0bits>:
 800789c:	0c02      	lsrs	r2, r0, #16
 800789e:	0412      	lsls	r2, r2, #16
 80078a0:	4603      	mov	r3, r0
 80078a2:	b9ca      	cbnz	r2, 80078d8 <__hi0bits+0x3c>
 80078a4:	0403      	lsls	r3, r0, #16
 80078a6:	2010      	movs	r0, #16
 80078a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80078ac:	bf04      	itt	eq
 80078ae:	021b      	lsleq	r3, r3, #8
 80078b0:	3008      	addeq	r0, #8
 80078b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80078b6:	bf04      	itt	eq
 80078b8:	011b      	lsleq	r3, r3, #4
 80078ba:	3004      	addeq	r0, #4
 80078bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80078c0:	bf04      	itt	eq
 80078c2:	009b      	lsleq	r3, r3, #2
 80078c4:	3002      	addeq	r0, #2
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	db05      	blt.n	80078d6 <__hi0bits+0x3a>
 80078ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80078ce:	f100 0001 	add.w	r0, r0, #1
 80078d2:	bf08      	it	eq
 80078d4:	2020      	moveq	r0, #32
 80078d6:	4770      	bx	lr
 80078d8:	2000      	movs	r0, #0
 80078da:	e7e5      	b.n	80078a8 <__hi0bits+0xc>

080078dc <__lo0bits>:
 80078dc:	6803      	ldr	r3, [r0, #0]
 80078de:	4602      	mov	r2, r0
 80078e0:	f013 0007 	ands.w	r0, r3, #7
 80078e4:	d00b      	beq.n	80078fe <__lo0bits+0x22>
 80078e6:	07d9      	lsls	r1, r3, #31
 80078e8:	d421      	bmi.n	800792e <__lo0bits+0x52>
 80078ea:	0798      	lsls	r0, r3, #30
 80078ec:	bf49      	itett	mi
 80078ee:	085b      	lsrmi	r3, r3, #1
 80078f0:	089b      	lsrpl	r3, r3, #2
 80078f2:	2001      	movmi	r0, #1
 80078f4:	6013      	strmi	r3, [r2, #0]
 80078f6:	bf5c      	itt	pl
 80078f8:	2002      	movpl	r0, #2
 80078fa:	6013      	strpl	r3, [r2, #0]
 80078fc:	4770      	bx	lr
 80078fe:	b299      	uxth	r1, r3
 8007900:	b909      	cbnz	r1, 8007906 <__lo0bits+0x2a>
 8007902:	2010      	movs	r0, #16
 8007904:	0c1b      	lsrs	r3, r3, #16
 8007906:	b2d9      	uxtb	r1, r3
 8007908:	b909      	cbnz	r1, 800790e <__lo0bits+0x32>
 800790a:	3008      	adds	r0, #8
 800790c:	0a1b      	lsrs	r3, r3, #8
 800790e:	0719      	lsls	r1, r3, #28
 8007910:	bf04      	itt	eq
 8007912:	091b      	lsreq	r3, r3, #4
 8007914:	3004      	addeq	r0, #4
 8007916:	0799      	lsls	r1, r3, #30
 8007918:	bf04      	itt	eq
 800791a:	089b      	lsreq	r3, r3, #2
 800791c:	3002      	addeq	r0, #2
 800791e:	07d9      	lsls	r1, r3, #31
 8007920:	d403      	bmi.n	800792a <__lo0bits+0x4e>
 8007922:	085b      	lsrs	r3, r3, #1
 8007924:	f100 0001 	add.w	r0, r0, #1
 8007928:	d003      	beq.n	8007932 <__lo0bits+0x56>
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	4770      	bx	lr
 800792e:	2000      	movs	r0, #0
 8007930:	4770      	bx	lr
 8007932:	2020      	movs	r0, #32
 8007934:	4770      	bx	lr
	...

08007938 <__i2b>:
 8007938:	b510      	push	{r4, lr}
 800793a:	460c      	mov	r4, r1
 800793c:	2101      	movs	r1, #1
 800793e:	f7ff ff05 	bl	800774c <_Balloc>
 8007942:	4602      	mov	r2, r0
 8007944:	b928      	cbnz	r0, 8007952 <__i2b+0x1a>
 8007946:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800794a:	4b04      	ldr	r3, [pc, #16]	; (800795c <__i2b+0x24>)
 800794c:	4804      	ldr	r0, [pc, #16]	; (8007960 <__i2b+0x28>)
 800794e:	f000 fc41 	bl	80081d4 <__assert_func>
 8007952:	2301      	movs	r3, #1
 8007954:	6144      	str	r4, [r0, #20]
 8007956:	6103      	str	r3, [r0, #16]
 8007958:	bd10      	pop	{r4, pc}
 800795a:	bf00      	nop
 800795c:	080086d3 	.word	0x080086d3
 8007960:	08008744 	.word	0x08008744

08007964 <__multiply>:
 8007964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007968:	4691      	mov	r9, r2
 800796a:	690a      	ldr	r2, [r1, #16]
 800796c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007970:	460c      	mov	r4, r1
 8007972:	429a      	cmp	r2, r3
 8007974:	bfbe      	ittt	lt
 8007976:	460b      	movlt	r3, r1
 8007978:	464c      	movlt	r4, r9
 800797a:	4699      	movlt	r9, r3
 800797c:	6927      	ldr	r7, [r4, #16]
 800797e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	6861      	ldr	r1, [r4, #4]
 8007986:	eb07 060a 	add.w	r6, r7, sl
 800798a:	42b3      	cmp	r3, r6
 800798c:	b085      	sub	sp, #20
 800798e:	bfb8      	it	lt
 8007990:	3101      	addlt	r1, #1
 8007992:	f7ff fedb 	bl	800774c <_Balloc>
 8007996:	b930      	cbnz	r0, 80079a6 <__multiply+0x42>
 8007998:	4602      	mov	r2, r0
 800799a:	f240 115d 	movw	r1, #349	; 0x15d
 800799e:	4b43      	ldr	r3, [pc, #268]	; (8007aac <__multiply+0x148>)
 80079a0:	4843      	ldr	r0, [pc, #268]	; (8007ab0 <__multiply+0x14c>)
 80079a2:	f000 fc17 	bl	80081d4 <__assert_func>
 80079a6:	f100 0514 	add.w	r5, r0, #20
 80079aa:	462b      	mov	r3, r5
 80079ac:	2200      	movs	r2, #0
 80079ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80079b2:	4543      	cmp	r3, r8
 80079b4:	d321      	bcc.n	80079fa <__multiply+0x96>
 80079b6:	f104 0314 	add.w	r3, r4, #20
 80079ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80079be:	f109 0314 	add.w	r3, r9, #20
 80079c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80079c6:	9202      	str	r2, [sp, #8]
 80079c8:	1b3a      	subs	r2, r7, r4
 80079ca:	3a15      	subs	r2, #21
 80079cc:	f022 0203 	bic.w	r2, r2, #3
 80079d0:	3204      	adds	r2, #4
 80079d2:	f104 0115 	add.w	r1, r4, #21
 80079d6:	428f      	cmp	r7, r1
 80079d8:	bf38      	it	cc
 80079da:	2204      	movcc	r2, #4
 80079dc:	9201      	str	r2, [sp, #4]
 80079de:	9a02      	ldr	r2, [sp, #8]
 80079e0:	9303      	str	r3, [sp, #12]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d80c      	bhi.n	8007a00 <__multiply+0x9c>
 80079e6:	2e00      	cmp	r6, #0
 80079e8:	dd03      	ble.n	80079f2 <__multiply+0x8e>
 80079ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d059      	beq.n	8007aa6 <__multiply+0x142>
 80079f2:	6106      	str	r6, [r0, #16]
 80079f4:	b005      	add	sp, #20
 80079f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079fa:	f843 2b04 	str.w	r2, [r3], #4
 80079fe:	e7d8      	b.n	80079b2 <__multiply+0x4e>
 8007a00:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a04:	f1ba 0f00 	cmp.w	sl, #0
 8007a08:	d023      	beq.n	8007a52 <__multiply+0xee>
 8007a0a:	46a9      	mov	r9, r5
 8007a0c:	f04f 0c00 	mov.w	ip, #0
 8007a10:	f104 0e14 	add.w	lr, r4, #20
 8007a14:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007a18:	f8d9 1000 	ldr.w	r1, [r9]
 8007a1c:	fa1f fb82 	uxth.w	fp, r2
 8007a20:	b289      	uxth	r1, r1
 8007a22:	fb0a 110b 	mla	r1, sl, fp, r1
 8007a26:	4461      	add	r1, ip
 8007a28:	f8d9 c000 	ldr.w	ip, [r9]
 8007a2c:	0c12      	lsrs	r2, r2, #16
 8007a2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007a32:	fb0a c202 	mla	r2, sl, r2, ip
 8007a36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007a3a:	b289      	uxth	r1, r1
 8007a3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007a40:	4577      	cmp	r7, lr
 8007a42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007a46:	f849 1b04 	str.w	r1, [r9], #4
 8007a4a:	d8e3      	bhi.n	8007a14 <__multiply+0xb0>
 8007a4c:	9a01      	ldr	r2, [sp, #4]
 8007a4e:	f845 c002 	str.w	ip, [r5, r2]
 8007a52:	9a03      	ldr	r2, [sp, #12]
 8007a54:	3304      	adds	r3, #4
 8007a56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a5a:	f1b9 0f00 	cmp.w	r9, #0
 8007a5e:	d020      	beq.n	8007aa2 <__multiply+0x13e>
 8007a60:	46ae      	mov	lr, r5
 8007a62:	f04f 0a00 	mov.w	sl, #0
 8007a66:	6829      	ldr	r1, [r5, #0]
 8007a68:	f104 0c14 	add.w	ip, r4, #20
 8007a6c:	f8bc b000 	ldrh.w	fp, [ip]
 8007a70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007a74:	b289      	uxth	r1, r1
 8007a76:	fb09 220b 	mla	r2, r9, fp, r2
 8007a7a:	4492      	add	sl, r2
 8007a7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007a80:	f84e 1b04 	str.w	r1, [lr], #4
 8007a84:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007a88:	f8be 1000 	ldrh.w	r1, [lr]
 8007a8c:	0c12      	lsrs	r2, r2, #16
 8007a8e:	fb09 1102 	mla	r1, r9, r2, r1
 8007a92:	4567      	cmp	r7, ip
 8007a94:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007a98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a9c:	d8e6      	bhi.n	8007a6c <__multiply+0x108>
 8007a9e:	9a01      	ldr	r2, [sp, #4]
 8007aa0:	50a9      	str	r1, [r5, r2]
 8007aa2:	3504      	adds	r5, #4
 8007aa4:	e79b      	b.n	80079de <__multiply+0x7a>
 8007aa6:	3e01      	subs	r6, #1
 8007aa8:	e79d      	b.n	80079e6 <__multiply+0x82>
 8007aaa:	bf00      	nop
 8007aac:	080086d3 	.word	0x080086d3
 8007ab0:	08008744 	.word	0x08008744

08007ab4 <__pow5mult>:
 8007ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab8:	4615      	mov	r5, r2
 8007aba:	f012 0203 	ands.w	r2, r2, #3
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460f      	mov	r7, r1
 8007ac2:	d007      	beq.n	8007ad4 <__pow5mult+0x20>
 8007ac4:	4c25      	ldr	r4, [pc, #148]	; (8007b5c <__pow5mult+0xa8>)
 8007ac6:	3a01      	subs	r2, #1
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ace:	f7ff fe9f 	bl	8007810 <__multadd>
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	10ad      	asrs	r5, r5, #2
 8007ad6:	d03d      	beq.n	8007b54 <__pow5mult+0xa0>
 8007ad8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ada:	b97c      	cbnz	r4, 8007afc <__pow5mult+0x48>
 8007adc:	2010      	movs	r0, #16
 8007ade:	f7fd fec9 	bl	8005874 <malloc>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	6270      	str	r0, [r6, #36]	; 0x24
 8007ae6:	b928      	cbnz	r0, 8007af4 <__pow5mult+0x40>
 8007ae8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007aec:	4b1c      	ldr	r3, [pc, #112]	; (8007b60 <__pow5mult+0xac>)
 8007aee:	481d      	ldr	r0, [pc, #116]	; (8007b64 <__pow5mult+0xb0>)
 8007af0:	f000 fb70 	bl	80081d4 <__assert_func>
 8007af4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007af8:	6004      	str	r4, [r0, #0]
 8007afa:	60c4      	str	r4, [r0, #12]
 8007afc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b04:	b94c      	cbnz	r4, 8007b1a <__pow5mult+0x66>
 8007b06:	f240 2171 	movw	r1, #625	; 0x271
 8007b0a:	4630      	mov	r0, r6
 8007b0c:	f7ff ff14 	bl	8007938 <__i2b>
 8007b10:	2300      	movs	r3, #0
 8007b12:	4604      	mov	r4, r0
 8007b14:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	f04f 0900 	mov.w	r9, #0
 8007b1e:	07eb      	lsls	r3, r5, #31
 8007b20:	d50a      	bpl.n	8007b38 <__pow5mult+0x84>
 8007b22:	4639      	mov	r1, r7
 8007b24:	4622      	mov	r2, r4
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ff1c 	bl	8007964 <__multiply>
 8007b2c:	4680      	mov	r8, r0
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4630      	mov	r0, r6
 8007b32:	f7ff fe4b 	bl	80077cc <_Bfree>
 8007b36:	4647      	mov	r7, r8
 8007b38:	106d      	asrs	r5, r5, #1
 8007b3a:	d00b      	beq.n	8007b54 <__pow5mult+0xa0>
 8007b3c:	6820      	ldr	r0, [r4, #0]
 8007b3e:	b938      	cbnz	r0, 8007b50 <__pow5mult+0x9c>
 8007b40:	4622      	mov	r2, r4
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	f7ff ff0d 	bl	8007964 <__multiply>
 8007b4a:	6020      	str	r0, [r4, #0]
 8007b4c:	f8c0 9000 	str.w	r9, [r0]
 8007b50:	4604      	mov	r4, r0
 8007b52:	e7e4      	b.n	8007b1e <__pow5mult+0x6a>
 8007b54:	4638      	mov	r0, r7
 8007b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b5a:	bf00      	nop
 8007b5c:	08008890 	.word	0x08008890
 8007b60:	08008661 	.word	0x08008661
 8007b64:	08008744 	.word	0x08008744

08007b68 <__lshift>:
 8007b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	4607      	mov	r7, r0
 8007b70:	4691      	mov	r9, r2
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	6849      	ldr	r1, [r1, #4]
 8007b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b7a:	68a3      	ldr	r3, [r4, #8]
 8007b7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b80:	f108 0601 	add.w	r6, r8, #1
 8007b84:	42b3      	cmp	r3, r6
 8007b86:	db0b      	blt.n	8007ba0 <__lshift+0x38>
 8007b88:	4638      	mov	r0, r7
 8007b8a:	f7ff fddf 	bl	800774c <_Balloc>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	b948      	cbnz	r0, 8007ba6 <__lshift+0x3e>
 8007b92:	4602      	mov	r2, r0
 8007b94:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b98:	4b29      	ldr	r3, [pc, #164]	; (8007c40 <__lshift+0xd8>)
 8007b9a:	482a      	ldr	r0, [pc, #168]	; (8007c44 <__lshift+0xdc>)
 8007b9c:	f000 fb1a 	bl	80081d4 <__assert_func>
 8007ba0:	3101      	adds	r1, #1
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	e7ee      	b.n	8007b84 <__lshift+0x1c>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	f100 0114 	add.w	r1, r0, #20
 8007bac:	f100 0210 	add.w	r2, r0, #16
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	4553      	cmp	r3, sl
 8007bb4:	db37      	blt.n	8007c26 <__lshift+0xbe>
 8007bb6:	6920      	ldr	r0, [r4, #16]
 8007bb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bbc:	f104 0314 	add.w	r3, r4, #20
 8007bc0:	f019 091f 	ands.w	r9, r9, #31
 8007bc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007bcc:	d02f      	beq.n	8007c2e <__lshift+0xc6>
 8007bce:	468a      	mov	sl, r1
 8007bd0:	f04f 0c00 	mov.w	ip, #0
 8007bd4:	f1c9 0e20 	rsb	lr, r9, #32
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	fa02 f209 	lsl.w	r2, r2, r9
 8007bde:	ea42 020c 	orr.w	r2, r2, ip
 8007be2:	f84a 2b04 	str.w	r2, [sl], #4
 8007be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bea:	4298      	cmp	r0, r3
 8007bec:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007bf0:	d8f2      	bhi.n	8007bd8 <__lshift+0x70>
 8007bf2:	1b03      	subs	r3, r0, r4
 8007bf4:	3b15      	subs	r3, #21
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	f104 0215 	add.w	r2, r4, #21
 8007c00:	4290      	cmp	r0, r2
 8007c02:	bf38      	it	cc
 8007c04:	2304      	movcc	r3, #4
 8007c06:	f841 c003 	str.w	ip, [r1, r3]
 8007c0a:	f1bc 0f00 	cmp.w	ip, #0
 8007c0e:	d001      	beq.n	8007c14 <__lshift+0xac>
 8007c10:	f108 0602 	add.w	r6, r8, #2
 8007c14:	3e01      	subs	r6, #1
 8007c16:	4638      	mov	r0, r7
 8007c18:	4621      	mov	r1, r4
 8007c1a:	612e      	str	r6, [r5, #16]
 8007c1c:	f7ff fdd6 	bl	80077cc <_Bfree>
 8007c20:	4628      	mov	r0, r5
 8007c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c26:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	e7c1      	b.n	8007bb2 <__lshift+0x4a>
 8007c2e:	3904      	subs	r1, #4
 8007c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c34:	4298      	cmp	r0, r3
 8007c36:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c3a:	d8f9      	bhi.n	8007c30 <__lshift+0xc8>
 8007c3c:	e7ea      	b.n	8007c14 <__lshift+0xac>
 8007c3e:	bf00      	nop
 8007c40:	080086d3 	.word	0x080086d3
 8007c44:	08008744 	.word	0x08008744

08007c48 <__mcmp>:
 8007c48:	4603      	mov	r3, r0
 8007c4a:	690a      	ldr	r2, [r1, #16]
 8007c4c:	6900      	ldr	r0, [r0, #16]
 8007c4e:	b530      	push	{r4, r5, lr}
 8007c50:	1a80      	subs	r0, r0, r2
 8007c52:	d10d      	bne.n	8007c70 <__mcmp+0x28>
 8007c54:	3314      	adds	r3, #20
 8007c56:	3114      	adds	r1, #20
 8007c58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007c5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007c60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007c64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007c68:	4295      	cmp	r5, r2
 8007c6a:	d002      	beq.n	8007c72 <__mcmp+0x2a>
 8007c6c:	d304      	bcc.n	8007c78 <__mcmp+0x30>
 8007c6e:	2001      	movs	r0, #1
 8007c70:	bd30      	pop	{r4, r5, pc}
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	d3f4      	bcc.n	8007c60 <__mcmp+0x18>
 8007c76:	e7fb      	b.n	8007c70 <__mcmp+0x28>
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295
 8007c7c:	e7f8      	b.n	8007c70 <__mcmp+0x28>
	...

08007c80 <__mdiff>:
 8007c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	460d      	mov	r5, r1
 8007c86:	4607      	mov	r7, r0
 8007c88:	4611      	mov	r1, r2
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	4614      	mov	r4, r2
 8007c8e:	f7ff ffdb 	bl	8007c48 <__mcmp>
 8007c92:	1e06      	subs	r6, r0, #0
 8007c94:	d111      	bne.n	8007cba <__mdiff+0x3a>
 8007c96:	4631      	mov	r1, r6
 8007c98:	4638      	mov	r0, r7
 8007c9a:	f7ff fd57 	bl	800774c <_Balloc>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	b928      	cbnz	r0, 8007cae <__mdiff+0x2e>
 8007ca2:	f240 2132 	movw	r1, #562	; 0x232
 8007ca6:	4b3a      	ldr	r3, [pc, #232]	; (8007d90 <__mdiff+0x110>)
 8007ca8:	483a      	ldr	r0, [pc, #232]	; (8007d94 <__mdiff+0x114>)
 8007caa:	f000 fa93 	bl	80081d4 <__assert_func>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cba:	bfa4      	itt	ge
 8007cbc:	4623      	movge	r3, r4
 8007cbe:	462c      	movge	r4, r5
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	6861      	ldr	r1, [r4, #4]
 8007cc4:	bfa6      	itte	ge
 8007cc6:	461d      	movge	r5, r3
 8007cc8:	2600      	movge	r6, #0
 8007cca:	2601      	movlt	r6, #1
 8007ccc:	f7ff fd3e 	bl	800774c <_Balloc>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	b918      	cbnz	r0, 8007cdc <__mdiff+0x5c>
 8007cd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cd8:	4b2d      	ldr	r3, [pc, #180]	; (8007d90 <__mdiff+0x110>)
 8007cda:	e7e5      	b.n	8007ca8 <__mdiff+0x28>
 8007cdc:	f102 0814 	add.w	r8, r2, #20
 8007ce0:	46c2      	mov	sl, r8
 8007ce2:	f04f 0c00 	mov.w	ip, #0
 8007ce6:	6927      	ldr	r7, [r4, #16]
 8007ce8:	60c6      	str	r6, [r0, #12]
 8007cea:	692e      	ldr	r6, [r5, #16]
 8007cec:	f104 0014 	add.w	r0, r4, #20
 8007cf0:	f105 0914 	add.w	r9, r5, #20
 8007cf4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007cf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007cfc:	3410      	adds	r4, #16
 8007cfe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007d02:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d06:	fa1f f18b 	uxth.w	r1, fp
 8007d0a:	448c      	add	ip, r1
 8007d0c:	b299      	uxth	r1, r3
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	ebac 0101 	sub.w	r1, ip, r1
 8007d14:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d18:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d1c:	b289      	uxth	r1, r1
 8007d1e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007d22:	454e      	cmp	r6, r9
 8007d24:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007d28:	f84a 3b04 	str.w	r3, [sl], #4
 8007d2c:	d8e7      	bhi.n	8007cfe <__mdiff+0x7e>
 8007d2e:	1b73      	subs	r3, r6, r5
 8007d30:	3b15      	subs	r3, #21
 8007d32:	f023 0303 	bic.w	r3, r3, #3
 8007d36:	3515      	adds	r5, #21
 8007d38:	3304      	adds	r3, #4
 8007d3a:	42ae      	cmp	r6, r5
 8007d3c:	bf38      	it	cc
 8007d3e:	2304      	movcc	r3, #4
 8007d40:	4418      	add	r0, r3
 8007d42:	4443      	add	r3, r8
 8007d44:	461e      	mov	r6, r3
 8007d46:	4605      	mov	r5, r0
 8007d48:	4575      	cmp	r5, lr
 8007d4a:	d30e      	bcc.n	8007d6a <__mdiff+0xea>
 8007d4c:	f10e 0103 	add.w	r1, lr, #3
 8007d50:	1a09      	subs	r1, r1, r0
 8007d52:	f021 0103 	bic.w	r1, r1, #3
 8007d56:	3803      	subs	r0, #3
 8007d58:	4586      	cmp	lr, r0
 8007d5a:	bf38      	it	cc
 8007d5c:	2100      	movcc	r1, #0
 8007d5e:	4419      	add	r1, r3
 8007d60:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007d64:	b18b      	cbz	r3, 8007d8a <__mdiff+0x10a>
 8007d66:	6117      	str	r7, [r2, #16]
 8007d68:	e7a4      	b.n	8007cb4 <__mdiff+0x34>
 8007d6a:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d6e:	fa1f f188 	uxth.w	r1, r8
 8007d72:	4461      	add	r1, ip
 8007d74:	140c      	asrs	r4, r1, #16
 8007d76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007d7a:	b289      	uxth	r1, r1
 8007d7c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007d80:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007d84:	f846 1b04 	str.w	r1, [r6], #4
 8007d88:	e7de      	b.n	8007d48 <__mdiff+0xc8>
 8007d8a:	3f01      	subs	r7, #1
 8007d8c:	e7e8      	b.n	8007d60 <__mdiff+0xe0>
 8007d8e:	bf00      	nop
 8007d90:	080086d3 	.word	0x080086d3
 8007d94:	08008744 	.word	0x08008744

08007d98 <__d2b>:
 8007d98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007da2:	4690      	mov	r8, r2
 8007da4:	461d      	mov	r5, r3
 8007da6:	f7ff fcd1 	bl	800774c <_Balloc>
 8007daa:	4604      	mov	r4, r0
 8007dac:	b930      	cbnz	r0, 8007dbc <__d2b+0x24>
 8007dae:	4602      	mov	r2, r0
 8007db0:	f240 310a 	movw	r1, #778	; 0x30a
 8007db4:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <__d2b+0xb0>)
 8007db6:	4825      	ldr	r0, [pc, #148]	; (8007e4c <__d2b+0xb4>)
 8007db8:	f000 fa0c 	bl	80081d4 <__assert_func>
 8007dbc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007dc0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007dc4:	bb2d      	cbnz	r5, 8007e12 <__d2b+0x7a>
 8007dc6:	9301      	str	r3, [sp, #4]
 8007dc8:	f1b8 0300 	subs.w	r3, r8, #0
 8007dcc:	d026      	beq.n	8007e1c <__d2b+0x84>
 8007dce:	4668      	mov	r0, sp
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	f7ff fd83 	bl	80078dc <__lo0bits>
 8007dd6:	9900      	ldr	r1, [sp, #0]
 8007dd8:	b1f0      	cbz	r0, 8007e18 <__d2b+0x80>
 8007dda:	9a01      	ldr	r2, [sp, #4]
 8007ddc:	f1c0 0320 	rsb	r3, r0, #32
 8007de0:	fa02 f303 	lsl.w	r3, r2, r3
 8007de4:	430b      	orrs	r3, r1
 8007de6:	40c2      	lsrs	r2, r0
 8007de8:	6163      	str	r3, [r4, #20]
 8007dea:	9201      	str	r2, [sp, #4]
 8007dec:	9b01      	ldr	r3, [sp, #4]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bf14      	ite	ne
 8007df2:	2102      	movne	r1, #2
 8007df4:	2101      	moveq	r1, #1
 8007df6:	61a3      	str	r3, [r4, #24]
 8007df8:	6121      	str	r1, [r4, #16]
 8007dfa:	b1c5      	cbz	r5, 8007e2e <__d2b+0x96>
 8007dfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007e00:	4405      	add	r5, r0
 8007e02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e06:	603d      	str	r5, [r7, #0]
 8007e08:	6030      	str	r0, [r6, #0]
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	b002      	add	sp, #8
 8007e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e16:	e7d6      	b.n	8007dc6 <__d2b+0x2e>
 8007e18:	6161      	str	r1, [r4, #20]
 8007e1a:	e7e7      	b.n	8007dec <__d2b+0x54>
 8007e1c:	a801      	add	r0, sp, #4
 8007e1e:	f7ff fd5d 	bl	80078dc <__lo0bits>
 8007e22:	2101      	movs	r1, #1
 8007e24:	9b01      	ldr	r3, [sp, #4]
 8007e26:	6121      	str	r1, [r4, #16]
 8007e28:	6163      	str	r3, [r4, #20]
 8007e2a:	3020      	adds	r0, #32
 8007e2c:	e7e5      	b.n	8007dfa <__d2b+0x62>
 8007e2e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007e32:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e36:	6038      	str	r0, [r7, #0]
 8007e38:	6918      	ldr	r0, [r3, #16]
 8007e3a:	f7ff fd2f 	bl	800789c <__hi0bits>
 8007e3e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007e42:	6031      	str	r1, [r6, #0]
 8007e44:	e7e1      	b.n	8007e0a <__d2b+0x72>
 8007e46:	bf00      	nop
 8007e48:	080086d3 	.word	0x080086d3
 8007e4c:	08008744 	.word	0x08008744

08007e50 <_calloc_r>:
 8007e50:	b570      	push	{r4, r5, r6, lr}
 8007e52:	fba1 5402 	umull	r5, r4, r1, r2
 8007e56:	b934      	cbnz	r4, 8007e66 <_calloc_r+0x16>
 8007e58:	4629      	mov	r1, r5
 8007e5a:	f7fd fd83 	bl	8005964 <_malloc_r>
 8007e5e:	4606      	mov	r6, r0
 8007e60:	b928      	cbnz	r0, 8007e6e <_calloc_r+0x1e>
 8007e62:	4630      	mov	r0, r6
 8007e64:	bd70      	pop	{r4, r5, r6, pc}
 8007e66:	220c      	movs	r2, #12
 8007e68:	2600      	movs	r6, #0
 8007e6a:	6002      	str	r2, [r0, #0]
 8007e6c:	e7f9      	b.n	8007e62 <_calloc_r+0x12>
 8007e6e:	462a      	mov	r2, r5
 8007e70:	4621      	mov	r1, r4
 8007e72:	f7fd fd07 	bl	8005884 <memset>
 8007e76:	e7f4      	b.n	8007e62 <_calloc_r+0x12>

08007e78 <__sfputc_r>:
 8007e78:	6893      	ldr	r3, [r2, #8]
 8007e7a:	b410      	push	{r4}
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	6093      	str	r3, [r2, #8]
 8007e82:	da07      	bge.n	8007e94 <__sfputc_r+0x1c>
 8007e84:	6994      	ldr	r4, [r2, #24]
 8007e86:	42a3      	cmp	r3, r4
 8007e88:	db01      	blt.n	8007e8e <__sfputc_r+0x16>
 8007e8a:	290a      	cmp	r1, #10
 8007e8c:	d102      	bne.n	8007e94 <__sfputc_r+0x1c>
 8007e8e:	bc10      	pop	{r4}
 8007e90:	f7fe bada 	b.w	8006448 <__swbuf_r>
 8007e94:	6813      	ldr	r3, [r2, #0]
 8007e96:	1c58      	adds	r0, r3, #1
 8007e98:	6010      	str	r0, [r2, #0]
 8007e9a:	7019      	strb	r1, [r3, #0]
 8007e9c:	4608      	mov	r0, r1
 8007e9e:	bc10      	pop	{r4}
 8007ea0:	4770      	bx	lr

08007ea2 <__sfputs_r>:
 8007ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	460f      	mov	r7, r1
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	18d5      	adds	r5, r2, r3
 8007eac:	42ac      	cmp	r4, r5
 8007eae:	d101      	bne.n	8007eb4 <__sfputs_r+0x12>
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	e007      	b.n	8007ec4 <__sfputs_r+0x22>
 8007eb4:	463a      	mov	r2, r7
 8007eb6:	4630      	mov	r0, r6
 8007eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ebc:	f7ff ffdc 	bl	8007e78 <__sfputc_r>
 8007ec0:	1c43      	adds	r3, r0, #1
 8007ec2:	d1f3      	bne.n	8007eac <__sfputs_r+0xa>
 8007ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ec8 <_vfiprintf_r>:
 8007ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ecc:	460d      	mov	r5, r1
 8007ece:	4614      	mov	r4, r2
 8007ed0:	4698      	mov	r8, r3
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	b09d      	sub	sp, #116	; 0x74
 8007ed6:	b118      	cbz	r0, 8007ee0 <_vfiprintf_r+0x18>
 8007ed8:	6983      	ldr	r3, [r0, #24]
 8007eda:	b90b      	cbnz	r3, 8007ee0 <_vfiprintf_r+0x18>
 8007edc:	f7ff fb04 	bl	80074e8 <__sinit>
 8007ee0:	4b89      	ldr	r3, [pc, #548]	; (8008108 <_vfiprintf_r+0x240>)
 8007ee2:	429d      	cmp	r5, r3
 8007ee4:	d11b      	bne.n	8007f1e <_vfiprintf_r+0x56>
 8007ee6:	6875      	ldr	r5, [r6, #4]
 8007ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eea:	07d9      	lsls	r1, r3, #31
 8007eec:	d405      	bmi.n	8007efa <_vfiprintf_r+0x32>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	059a      	lsls	r2, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_vfiprintf_r+0x32>
 8007ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ef6:	f7ff fb9a 	bl	800762e <__retarget_lock_acquire_recursive>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	071b      	lsls	r3, r3, #28
 8007efe:	d501      	bpl.n	8007f04 <_vfiprintf_r+0x3c>
 8007f00:	692b      	ldr	r3, [r5, #16]
 8007f02:	b9eb      	cbnz	r3, 8007f40 <_vfiprintf_r+0x78>
 8007f04:	4629      	mov	r1, r5
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7fe faf0 	bl	80064ec <__swsetup_r>
 8007f0c:	b1c0      	cbz	r0, 8007f40 <_vfiprintf_r+0x78>
 8007f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f10:	07dc      	lsls	r4, r3, #31
 8007f12:	d50e      	bpl.n	8007f32 <_vfiprintf_r+0x6a>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b01d      	add	sp, #116	; 0x74
 8007f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1e:	4b7b      	ldr	r3, [pc, #492]	; (800810c <_vfiprintf_r+0x244>)
 8007f20:	429d      	cmp	r5, r3
 8007f22:	d101      	bne.n	8007f28 <_vfiprintf_r+0x60>
 8007f24:	68b5      	ldr	r5, [r6, #8]
 8007f26:	e7df      	b.n	8007ee8 <_vfiprintf_r+0x20>
 8007f28:	4b79      	ldr	r3, [pc, #484]	; (8008110 <_vfiprintf_r+0x248>)
 8007f2a:	429d      	cmp	r5, r3
 8007f2c:	bf08      	it	eq
 8007f2e:	68f5      	ldreq	r5, [r6, #12]
 8007f30:	e7da      	b.n	8007ee8 <_vfiprintf_r+0x20>
 8007f32:	89ab      	ldrh	r3, [r5, #12]
 8007f34:	0598      	lsls	r0, r3, #22
 8007f36:	d4ed      	bmi.n	8007f14 <_vfiprintf_r+0x4c>
 8007f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f3a:	f7ff fb79 	bl	8007630 <__retarget_lock_release_recursive>
 8007f3e:	e7e9      	b.n	8007f14 <_vfiprintf_r+0x4c>
 8007f40:	2300      	movs	r3, #0
 8007f42:	9309      	str	r3, [sp, #36]	; 0x24
 8007f44:	2320      	movs	r3, #32
 8007f46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f4a:	2330      	movs	r3, #48	; 0x30
 8007f4c:	f04f 0901 	mov.w	r9, #1
 8007f50:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008114 <_vfiprintf_r+0x24c>
 8007f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f5c:	4623      	mov	r3, r4
 8007f5e:	469a      	mov	sl, r3
 8007f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f64:	b10a      	cbz	r2, 8007f6a <_vfiprintf_r+0xa2>
 8007f66:	2a25      	cmp	r2, #37	; 0x25
 8007f68:	d1f9      	bne.n	8007f5e <_vfiprintf_r+0x96>
 8007f6a:	ebba 0b04 	subs.w	fp, sl, r4
 8007f6e:	d00b      	beq.n	8007f88 <_vfiprintf_r+0xc0>
 8007f70:	465b      	mov	r3, fp
 8007f72:	4622      	mov	r2, r4
 8007f74:	4629      	mov	r1, r5
 8007f76:	4630      	mov	r0, r6
 8007f78:	f7ff ff93 	bl	8007ea2 <__sfputs_r>
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	f000 80aa 	beq.w	80080d6 <_vfiprintf_r+0x20e>
 8007f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f84:	445a      	add	r2, fp
 8007f86:	9209      	str	r2, [sp, #36]	; 0x24
 8007f88:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	f000 80a2 	beq.w	80080d6 <_vfiprintf_r+0x20e>
 8007f92:	2300      	movs	r3, #0
 8007f94:	f04f 32ff 	mov.w	r2, #4294967295
 8007f98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f9c:	f10a 0a01 	add.w	sl, sl, #1
 8007fa0:	9304      	str	r3, [sp, #16]
 8007fa2:	9307      	str	r3, [sp, #28]
 8007fa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fa8:	931a      	str	r3, [sp, #104]	; 0x68
 8007faa:	4654      	mov	r4, sl
 8007fac:	2205      	movs	r2, #5
 8007fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb2:	4858      	ldr	r0, [pc, #352]	; (8008114 <_vfiprintf_r+0x24c>)
 8007fb4:	f7ff fba2 	bl	80076fc <memchr>
 8007fb8:	9a04      	ldr	r2, [sp, #16]
 8007fba:	b9d8      	cbnz	r0, 8007ff4 <_vfiprintf_r+0x12c>
 8007fbc:	06d1      	lsls	r1, r2, #27
 8007fbe:	bf44      	itt	mi
 8007fc0:	2320      	movmi	r3, #32
 8007fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc6:	0713      	lsls	r3, r2, #28
 8007fc8:	bf44      	itt	mi
 8007fca:	232b      	movmi	r3, #43	; 0x2b
 8007fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd4:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd6:	d015      	beq.n	8008004 <_vfiprintf_r+0x13c>
 8007fd8:	4654      	mov	r4, sl
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f04f 0c0a 	mov.w	ip, #10
 8007fe0:	9a07      	ldr	r2, [sp, #28]
 8007fe2:	4621      	mov	r1, r4
 8007fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fe8:	3b30      	subs	r3, #48	; 0x30
 8007fea:	2b09      	cmp	r3, #9
 8007fec:	d94e      	bls.n	800808c <_vfiprintf_r+0x1c4>
 8007fee:	b1b0      	cbz	r0, 800801e <_vfiprintf_r+0x156>
 8007ff0:	9207      	str	r2, [sp, #28]
 8007ff2:	e014      	b.n	800801e <_vfiprintf_r+0x156>
 8007ff4:	eba0 0308 	sub.w	r3, r0, r8
 8007ff8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	46a2      	mov	sl, r4
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	e7d2      	b.n	8007faa <_vfiprintf_r+0xe2>
 8008004:	9b03      	ldr	r3, [sp, #12]
 8008006:	1d19      	adds	r1, r3, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	9103      	str	r1, [sp, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	bfbb      	ittet	lt
 8008010:	425b      	neglt	r3, r3
 8008012:	f042 0202 	orrlt.w	r2, r2, #2
 8008016:	9307      	strge	r3, [sp, #28]
 8008018:	9307      	strlt	r3, [sp, #28]
 800801a:	bfb8      	it	lt
 800801c:	9204      	strlt	r2, [sp, #16]
 800801e:	7823      	ldrb	r3, [r4, #0]
 8008020:	2b2e      	cmp	r3, #46	; 0x2e
 8008022:	d10c      	bne.n	800803e <_vfiprintf_r+0x176>
 8008024:	7863      	ldrb	r3, [r4, #1]
 8008026:	2b2a      	cmp	r3, #42	; 0x2a
 8008028:	d135      	bne.n	8008096 <_vfiprintf_r+0x1ce>
 800802a:	9b03      	ldr	r3, [sp, #12]
 800802c:	3402      	adds	r4, #2
 800802e:	1d1a      	adds	r2, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	9203      	str	r2, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfb8      	it	lt
 8008038:	f04f 33ff 	movlt.w	r3, #4294967295
 800803c:	9305      	str	r3, [sp, #20]
 800803e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008118 <_vfiprintf_r+0x250>
 8008042:	2203      	movs	r2, #3
 8008044:	4650      	mov	r0, sl
 8008046:	7821      	ldrb	r1, [r4, #0]
 8008048:	f7ff fb58 	bl	80076fc <memchr>
 800804c:	b140      	cbz	r0, 8008060 <_vfiprintf_r+0x198>
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	eba0 000a 	sub.w	r0, r0, sl
 8008054:	fa03 f000 	lsl.w	r0, r3, r0
 8008058:	9b04      	ldr	r3, [sp, #16]
 800805a:	3401      	adds	r4, #1
 800805c:	4303      	orrs	r3, r0
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008064:	2206      	movs	r2, #6
 8008066:	482d      	ldr	r0, [pc, #180]	; (800811c <_vfiprintf_r+0x254>)
 8008068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800806c:	f7ff fb46 	bl	80076fc <memchr>
 8008070:	2800      	cmp	r0, #0
 8008072:	d03f      	beq.n	80080f4 <_vfiprintf_r+0x22c>
 8008074:	4b2a      	ldr	r3, [pc, #168]	; (8008120 <_vfiprintf_r+0x258>)
 8008076:	bb1b      	cbnz	r3, 80080c0 <_vfiprintf_r+0x1f8>
 8008078:	9b03      	ldr	r3, [sp, #12]
 800807a:	3307      	adds	r3, #7
 800807c:	f023 0307 	bic.w	r3, r3, #7
 8008080:	3308      	adds	r3, #8
 8008082:	9303      	str	r3, [sp, #12]
 8008084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008086:	443b      	add	r3, r7
 8008088:	9309      	str	r3, [sp, #36]	; 0x24
 800808a:	e767      	b.n	8007f5c <_vfiprintf_r+0x94>
 800808c:	460c      	mov	r4, r1
 800808e:	2001      	movs	r0, #1
 8008090:	fb0c 3202 	mla	r2, ip, r2, r3
 8008094:	e7a5      	b.n	8007fe2 <_vfiprintf_r+0x11a>
 8008096:	2300      	movs	r3, #0
 8008098:	f04f 0c0a 	mov.w	ip, #10
 800809c:	4619      	mov	r1, r3
 800809e:	3401      	adds	r4, #1
 80080a0:	9305      	str	r3, [sp, #20]
 80080a2:	4620      	mov	r0, r4
 80080a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a8:	3a30      	subs	r2, #48	; 0x30
 80080aa:	2a09      	cmp	r2, #9
 80080ac:	d903      	bls.n	80080b6 <_vfiprintf_r+0x1ee>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0c5      	beq.n	800803e <_vfiprintf_r+0x176>
 80080b2:	9105      	str	r1, [sp, #20]
 80080b4:	e7c3      	b.n	800803e <_vfiprintf_r+0x176>
 80080b6:	4604      	mov	r4, r0
 80080b8:	2301      	movs	r3, #1
 80080ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80080be:	e7f0      	b.n	80080a2 <_vfiprintf_r+0x1da>
 80080c0:	ab03      	add	r3, sp, #12
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	462a      	mov	r2, r5
 80080c6:	4630      	mov	r0, r6
 80080c8:	4b16      	ldr	r3, [pc, #88]	; (8008124 <_vfiprintf_r+0x25c>)
 80080ca:	a904      	add	r1, sp, #16
 80080cc:	f7fd fd5c 	bl	8005b88 <_printf_float>
 80080d0:	4607      	mov	r7, r0
 80080d2:	1c78      	adds	r0, r7, #1
 80080d4:	d1d6      	bne.n	8008084 <_vfiprintf_r+0x1bc>
 80080d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080d8:	07d9      	lsls	r1, r3, #31
 80080da:	d405      	bmi.n	80080e8 <_vfiprintf_r+0x220>
 80080dc:	89ab      	ldrh	r3, [r5, #12]
 80080de:	059a      	lsls	r2, r3, #22
 80080e0:	d402      	bmi.n	80080e8 <_vfiprintf_r+0x220>
 80080e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080e4:	f7ff faa4 	bl	8007630 <__retarget_lock_release_recursive>
 80080e8:	89ab      	ldrh	r3, [r5, #12]
 80080ea:	065b      	lsls	r3, r3, #25
 80080ec:	f53f af12 	bmi.w	8007f14 <_vfiprintf_r+0x4c>
 80080f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080f2:	e711      	b.n	8007f18 <_vfiprintf_r+0x50>
 80080f4:	ab03      	add	r3, sp, #12
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	462a      	mov	r2, r5
 80080fa:	4630      	mov	r0, r6
 80080fc:	4b09      	ldr	r3, [pc, #36]	; (8008124 <_vfiprintf_r+0x25c>)
 80080fe:	a904      	add	r1, sp, #16
 8008100:	f7fd ffde 	bl	80060c0 <_printf_i>
 8008104:	e7e4      	b.n	80080d0 <_vfiprintf_r+0x208>
 8008106:	bf00      	nop
 8008108:	08008704 	.word	0x08008704
 800810c:	08008724 	.word	0x08008724
 8008110:	080086e4 	.word	0x080086e4
 8008114:	0800889c 	.word	0x0800889c
 8008118:	080088a2 	.word	0x080088a2
 800811c:	080088a6 	.word	0x080088a6
 8008120:	08005b89 	.word	0x08005b89
 8008124:	08007ea3 	.word	0x08007ea3

08008128 <__sread>:
 8008128:	b510      	push	{r4, lr}
 800812a:	460c      	mov	r4, r1
 800812c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008130:	f000 f8d6 	bl	80082e0 <_read_r>
 8008134:	2800      	cmp	r0, #0
 8008136:	bfab      	itete	ge
 8008138:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800813a:	89a3      	ldrhlt	r3, [r4, #12]
 800813c:	181b      	addge	r3, r3, r0
 800813e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008142:	bfac      	ite	ge
 8008144:	6563      	strge	r3, [r4, #84]	; 0x54
 8008146:	81a3      	strhlt	r3, [r4, #12]
 8008148:	bd10      	pop	{r4, pc}

0800814a <__swrite>:
 800814a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800814e:	461f      	mov	r7, r3
 8008150:	898b      	ldrh	r3, [r1, #12]
 8008152:	4605      	mov	r5, r0
 8008154:	05db      	lsls	r3, r3, #23
 8008156:	460c      	mov	r4, r1
 8008158:	4616      	mov	r6, r2
 800815a:	d505      	bpl.n	8008168 <__swrite+0x1e>
 800815c:	2302      	movs	r3, #2
 800815e:	2200      	movs	r2, #0
 8008160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008164:	f000 f898 	bl	8008298 <_lseek_r>
 8008168:	89a3      	ldrh	r3, [r4, #12]
 800816a:	4632      	mov	r2, r6
 800816c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008170:	81a3      	strh	r3, [r4, #12]
 8008172:	4628      	mov	r0, r5
 8008174:	463b      	mov	r3, r7
 8008176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800817a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800817e:	f000 b817 	b.w	80081b0 <_write_r>

08008182 <__sseek>:
 8008182:	b510      	push	{r4, lr}
 8008184:	460c      	mov	r4, r1
 8008186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818a:	f000 f885 	bl	8008298 <_lseek_r>
 800818e:	1c43      	adds	r3, r0, #1
 8008190:	89a3      	ldrh	r3, [r4, #12]
 8008192:	bf15      	itete	ne
 8008194:	6560      	strne	r0, [r4, #84]	; 0x54
 8008196:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800819a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800819e:	81a3      	strheq	r3, [r4, #12]
 80081a0:	bf18      	it	ne
 80081a2:	81a3      	strhne	r3, [r4, #12]
 80081a4:	bd10      	pop	{r4, pc}

080081a6 <__sclose>:
 80081a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081aa:	f000 b831 	b.w	8008210 <_close_r>
	...

080081b0 <_write_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4604      	mov	r4, r0
 80081b4:	4608      	mov	r0, r1
 80081b6:	4611      	mov	r1, r2
 80081b8:	2200      	movs	r2, #0
 80081ba:	4d05      	ldr	r5, [pc, #20]	; (80081d0 <_write_r+0x20>)
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7fa fb32 	bl	8002828 <_write>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_write_r+0x1e>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_write_r+0x1e>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	200007ac 	.word	0x200007ac

080081d4 <__assert_func>:
 80081d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081d6:	4614      	mov	r4, r2
 80081d8:	461a      	mov	r2, r3
 80081da:	4b09      	ldr	r3, [pc, #36]	; (8008200 <__assert_func+0x2c>)
 80081dc:	4605      	mov	r5, r0
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68d8      	ldr	r0, [r3, #12]
 80081e2:	b14c      	cbz	r4, 80081f8 <__assert_func+0x24>
 80081e4:	4b07      	ldr	r3, [pc, #28]	; (8008204 <__assert_func+0x30>)
 80081e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081ea:	9100      	str	r1, [sp, #0]
 80081ec:	462b      	mov	r3, r5
 80081ee:	4906      	ldr	r1, [pc, #24]	; (8008208 <__assert_func+0x34>)
 80081f0:	f000 f81e 	bl	8008230 <fiprintf>
 80081f4:	f000 f893 	bl	800831e <abort>
 80081f8:	4b04      	ldr	r3, [pc, #16]	; (800820c <__assert_func+0x38>)
 80081fa:	461c      	mov	r4, r3
 80081fc:	e7f3      	b.n	80081e6 <__assert_func+0x12>
 80081fe:	bf00      	nop
 8008200:	20000014 	.word	0x20000014
 8008204:	080088ad 	.word	0x080088ad
 8008208:	080088ba 	.word	0x080088ba
 800820c:	080088e8 	.word	0x080088e8

08008210 <_close_r>:
 8008210:	b538      	push	{r3, r4, r5, lr}
 8008212:	2300      	movs	r3, #0
 8008214:	4d05      	ldr	r5, [pc, #20]	; (800822c <_close_r+0x1c>)
 8008216:	4604      	mov	r4, r0
 8008218:	4608      	mov	r0, r1
 800821a:	602b      	str	r3, [r5, #0]
 800821c:	f7fa fb20 	bl	8002860 <_close>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	d102      	bne.n	800822a <_close_r+0x1a>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	b103      	cbz	r3, 800822a <_close_r+0x1a>
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	200007ac 	.word	0x200007ac

08008230 <fiprintf>:
 8008230:	b40e      	push	{r1, r2, r3}
 8008232:	b503      	push	{r0, r1, lr}
 8008234:	4601      	mov	r1, r0
 8008236:	ab03      	add	r3, sp, #12
 8008238:	4805      	ldr	r0, [pc, #20]	; (8008250 <fiprintf+0x20>)
 800823a:	f853 2b04 	ldr.w	r2, [r3], #4
 800823e:	6800      	ldr	r0, [r0, #0]
 8008240:	9301      	str	r3, [sp, #4]
 8008242:	f7ff fe41 	bl	8007ec8 <_vfiprintf_r>
 8008246:	b002      	add	sp, #8
 8008248:	f85d eb04 	ldr.w	lr, [sp], #4
 800824c:	b003      	add	sp, #12
 800824e:	4770      	bx	lr
 8008250:	20000014 	.word	0x20000014

08008254 <_fstat_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	2300      	movs	r3, #0
 8008258:	4d06      	ldr	r5, [pc, #24]	; (8008274 <_fstat_r+0x20>)
 800825a:	4604      	mov	r4, r0
 800825c:	4608      	mov	r0, r1
 800825e:	4611      	mov	r1, r2
 8008260:	602b      	str	r3, [r5, #0]
 8008262:	f7fa fb08 	bl	8002876 <_fstat>
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	d102      	bne.n	8008270 <_fstat_r+0x1c>
 800826a:	682b      	ldr	r3, [r5, #0]
 800826c:	b103      	cbz	r3, 8008270 <_fstat_r+0x1c>
 800826e:	6023      	str	r3, [r4, #0]
 8008270:	bd38      	pop	{r3, r4, r5, pc}
 8008272:	bf00      	nop
 8008274:	200007ac 	.word	0x200007ac

08008278 <_isatty_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	2300      	movs	r3, #0
 800827c:	4d05      	ldr	r5, [pc, #20]	; (8008294 <_isatty_r+0x1c>)
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	602b      	str	r3, [r5, #0]
 8008284:	f7fa fb06 	bl	8002894 <_isatty>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_isatty_r+0x1a>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_isatty_r+0x1a>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	200007ac 	.word	0x200007ac

08008298 <_lseek_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4604      	mov	r4, r0
 800829c:	4608      	mov	r0, r1
 800829e:	4611      	mov	r1, r2
 80082a0:	2200      	movs	r2, #0
 80082a2:	4d05      	ldr	r5, [pc, #20]	; (80082b8 <_lseek_r+0x20>)
 80082a4:	602a      	str	r2, [r5, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	f7fa fafe 	bl	80028a8 <_lseek>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_lseek_r+0x1e>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_lseek_r+0x1e>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	200007ac 	.word	0x200007ac

080082bc <__ascii_mbtowc>:
 80082bc:	b082      	sub	sp, #8
 80082be:	b901      	cbnz	r1, 80082c2 <__ascii_mbtowc+0x6>
 80082c0:	a901      	add	r1, sp, #4
 80082c2:	b142      	cbz	r2, 80082d6 <__ascii_mbtowc+0x1a>
 80082c4:	b14b      	cbz	r3, 80082da <__ascii_mbtowc+0x1e>
 80082c6:	7813      	ldrb	r3, [r2, #0]
 80082c8:	600b      	str	r3, [r1, #0]
 80082ca:	7812      	ldrb	r2, [r2, #0]
 80082cc:	1e10      	subs	r0, r2, #0
 80082ce:	bf18      	it	ne
 80082d0:	2001      	movne	r0, #1
 80082d2:	b002      	add	sp, #8
 80082d4:	4770      	bx	lr
 80082d6:	4610      	mov	r0, r2
 80082d8:	e7fb      	b.n	80082d2 <__ascii_mbtowc+0x16>
 80082da:	f06f 0001 	mvn.w	r0, #1
 80082de:	e7f8      	b.n	80082d2 <__ascii_mbtowc+0x16>

080082e0 <_read_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4604      	mov	r4, r0
 80082e4:	4608      	mov	r0, r1
 80082e6:	4611      	mov	r1, r2
 80082e8:	2200      	movs	r2, #0
 80082ea:	4d05      	ldr	r5, [pc, #20]	; (8008300 <_read_r+0x20>)
 80082ec:	602a      	str	r2, [r5, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f7fa fa7d 	bl	80027ee <_read>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_read_r+0x1e>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_read_r+0x1e>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	200007ac 	.word	0x200007ac

08008304 <__ascii_wctomb>:
 8008304:	4603      	mov	r3, r0
 8008306:	4608      	mov	r0, r1
 8008308:	b141      	cbz	r1, 800831c <__ascii_wctomb+0x18>
 800830a:	2aff      	cmp	r2, #255	; 0xff
 800830c:	d904      	bls.n	8008318 <__ascii_wctomb+0x14>
 800830e:	228a      	movs	r2, #138	; 0x8a
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	4770      	bx	lr
 8008318:	2001      	movs	r0, #1
 800831a:	700a      	strb	r2, [r1, #0]
 800831c:	4770      	bx	lr

0800831e <abort>:
 800831e:	2006      	movs	r0, #6
 8008320:	b508      	push	{r3, lr}
 8008322:	f000 f82b 	bl	800837c <raise>
 8008326:	2001      	movs	r0, #1
 8008328:	f7fa fa57 	bl	80027da <_exit>

0800832c <_raise_r>:
 800832c:	291f      	cmp	r1, #31
 800832e:	b538      	push	{r3, r4, r5, lr}
 8008330:	4604      	mov	r4, r0
 8008332:	460d      	mov	r5, r1
 8008334:	d904      	bls.n	8008340 <_raise_r+0x14>
 8008336:	2316      	movs	r3, #22
 8008338:	6003      	str	r3, [r0, #0]
 800833a:	f04f 30ff 	mov.w	r0, #4294967295
 800833e:	bd38      	pop	{r3, r4, r5, pc}
 8008340:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008342:	b112      	cbz	r2, 800834a <_raise_r+0x1e>
 8008344:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008348:	b94b      	cbnz	r3, 800835e <_raise_r+0x32>
 800834a:	4620      	mov	r0, r4
 800834c:	f000 f830 	bl	80083b0 <_getpid_r>
 8008350:	462a      	mov	r2, r5
 8008352:	4601      	mov	r1, r0
 8008354:	4620      	mov	r0, r4
 8008356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800835a:	f000 b817 	b.w	800838c <_kill_r>
 800835e:	2b01      	cmp	r3, #1
 8008360:	d00a      	beq.n	8008378 <_raise_r+0x4c>
 8008362:	1c59      	adds	r1, r3, #1
 8008364:	d103      	bne.n	800836e <_raise_r+0x42>
 8008366:	2316      	movs	r3, #22
 8008368:	6003      	str	r3, [r0, #0]
 800836a:	2001      	movs	r0, #1
 800836c:	e7e7      	b.n	800833e <_raise_r+0x12>
 800836e:	2400      	movs	r4, #0
 8008370:	4628      	mov	r0, r5
 8008372:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008376:	4798      	blx	r3
 8008378:	2000      	movs	r0, #0
 800837a:	e7e0      	b.n	800833e <_raise_r+0x12>

0800837c <raise>:
 800837c:	4b02      	ldr	r3, [pc, #8]	; (8008388 <raise+0xc>)
 800837e:	4601      	mov	r1, r0
 8008380:	6818      	ldr	r0, [r3, #0]
 8008382:	f7ff bfd3 	b.w	800832c <_raise_r>
 8008386:	bf00      	nop
 8008388:	20000014 	.word	0x20000014

0800838c <_kill_r>:
 800838c:	b538      	push	{r3, r4, r5, lr}
 800838e:	2300      	movs	r3, #0
 8008390:	4d06      	ldr	r5, [pc, #24]	; (80083ac <_kill_r+0x20>)
 8008392:	4604      	mov	r4, r0
 8008394:	4608      	mov	r0, r1
 8008396:	4611      	mov	r1, r2
 8008398:	602b      	str	r3, [r5, #0]
 800839a:	f7fa fa0e 	bl	80027ba <_kill>
 800839e:	1c43      	adds	r3, r0, #1
 80083a0:	d102      	bne.n	80083a8 <_kill_r+0x1c>
 80083a2:	682b      	ldr	r3, [r5, #0]
 80083a4:	b103      	cbz	r3, 80083a8 <_kill_r+0x1c>
 80083a6:	6023      	str	r3, [r4, #0]
 80083a8:	bd38      	pop	{r3, r4, r5, pc}
 80083aa:	bf00      	nop
 80083ac:	200007ac 	.word	0x200007ac

080083b0 <_getpid_r>:
 80083b0:	f7fa b9fc 	b.w	80027ac <_getpid>

080083b4 <sqrt>:
 80083b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b6:	4606      	mov	r6, r0
 80083b8:	460f      	mov	r7, r1
 80083ba:	f000 f81f 	bl	80083fc <__ieee754_sqrt>
 80083be:	4632      	mov	r2, r6
 80083c0:	4604      	mov	r4, r0
 80083c2:	460d      	mov	r5, r1
 80083c4:	463b      	mov	r3, r7
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f8 fb1f 	bl	8000a0c <__aeabi_dcmpun>
 80083ce:	b990      	cbnz	r0, 80083f6 <sqrt+0x42>
 80083d0:	2200      	movs	r2, #0
 80083d2:	2300      	movs	r3, #0
 80083d4:	4630      	mov	r0, r6
 80083d6:	4639      	mov	r1, r7
 80083d8:	f7f8 faf0 	bl	80009bc <__aeabi_dcmplt>
 80083dc:	b158      	cbz	r0, 80083f6 <sqrt+0x42>
 80083de:	f7fd fa1f 	bl	8005820 <__errno>
 80083e2:	2321      	movs	r3, #33	; 0x21
 80083e4:	2200      	movs	r2, #0
 80083e6:	6003      	str	r3, [r0, #0]
 80083e8:	2300      	movs	r3, #0
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	f7f8 f99d 	bl	800072c <__aeabi_ddiv>
 80083f2:	4604      	mov	r4, r0
 80083f4:	460d      	mov	r5, r1
 80083f6:	4620      	mov	r0, r4
 80083f8:	4629      	mov	r1, r5
 80083fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083fc <__ieee754_sqrt>:
 80083fc:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008558 <__ieee754_sqrt+0x15c>
 8008400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008404:	ea3c 0c01 	bics.w	ip, ip, r1
 8008408:	4606      	mov	r6, r0
 800840a:	460d      	mov	r5, r1
 800840c:	460c      	mov	r4, r1
 800840e:	460a      	mov	r2, r1
 8008410:	4607      	mov	r7, r0
 8008412:	4603      	mov	r3, r0
 8008414:	d10f      	bne.n	8008436 <__ieee754_sqrt+0x3a>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	f7f8 f85d 	bl	80004d8 <__aeabi_dmul>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	4630      	mov	r0, r6
 8008424:	4629      	mov	r1, r5
 8008426:	f7f7 fea1 	bl	800016c <__adddf3>
 800842a:	4606      	mov	r6, r0
 800842c:	460d      	mov	r5, r1
 800842e:	4630      	mov	r0, r6
 8008430:	4629      	mov	r1, r5
 8008432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008436:	2900      	cmp	r1, #0
 8008438:	dc0e      	bgt.n	8008458 <__ieee754_sqrt+0x5c>
 800843a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800843e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008442:	d0f4      	beq.n	800842e <__ieee754_sqrt+0x32>
 8008444:	b141      	cbz	r1, 8008458 <__ieee754_sqrt+0x5c>
 8008446:	4602      	mov	r2, r0
 8008448:	460b      	mov	r3, r1
 800844a:	f7f7 fe8d 	bl	8000168 <__aeabi_dsub>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	f7f8 f96b 	bl	800072c <__aeabi_ddiv>
 8008456:	e7e8      	b.n	800842a <__ieee754_sqrt+0x2e>
 8008458:	1521      	asrs	r1, r4, #20
 800845a:	d075      	beq.n	8008548 <__ieee754_sqrt+0x14c>
 800845c:	07cc      	lsls	r4, r1, #31
 800845e:	f04f 0400 	mov.w	r4, #0
 8008462:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008466:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800846a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800846e:	bf5e      	ittt	pl
 8008470:	0fd9      	lsrpl	r1, r3, #31
 8008472:	005b      	lslpl	r3, r3, #1
 8008474:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008478:	0fd9      	lsrs	r1, r3, #31
 800847a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800847e:	2516      	movs	r5, #22
 8008480:	4620      	mov	r0, r4
 8008482:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008486:	107f      	asrs	r7, r7, #1
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	1846      	adds	r6, r0, r1
 800848c:	4296      	cmp	r6, r2
 800848e:	bfde      	ittt	le
 8008490:	1b92      	suble	r2, r2, r6
 8008492:	1870      	addle	r0, r6, r1
 8008494:	1864      	addle	r4, r4, r1
 8008496:	0052      	lsls	r2, r2, #1
 8008498:	3d01      	subs	r5, #1
 800849a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800849e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80084a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084a6:	d1f0      	bne.n	800848a <__ieee754_sqrt+0x8e>
 80084a8:	4629      	mov	r1, r5
 80084aa:	f04f 0e20 	mov.w	lr, #32
 80084ae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80084b2:	4282      	cmp	r2, r0
 80084b4:	eb06 0c05 	add.w	ip, r6, r5
 80084b8:	dc02      	bgt.n	80084c0 <__ieee754_sqrt+0xc4>
 80084ba:	d113      	bne.n	80084e4 <__ieee754_sqrt+0xe8>
 80084bc:	459c      	cmp	ip, r3
 80084be:	d811      	bhi.n	80084e4 <__ieee754_sqrt+0xe8>
 80084c0:	f1bc 0f00 	cmp.w	ip, #0
 80084c4:	eb0c 0506 	add.w	r5, ip, r6
 80084c8:	da43      	bge.n	8008552 <__ieee754_sqrt+0x156>
 80084ca:	2d00      	cmp	r5, #0
 80084cc:	db41      	blt.n	8008552 <__ieee754_sqrt+0x156>
 80084ce:	f100 0801 	add.w	r8, r0, #1
 80084d2:	1a12      	subs	r2, r2, r0
 80084d4:	4640      	mov	r0, r8
 80084d6:	459c      	cmp	ip, r3
 80084d8:	bf88      	it	hi
 80084da:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80084de:	eba3 030c 	sub.w	r3, r3, ip
 80084e2:	4431      	add	r1, r6
 80084e4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80084e8:	f1be 0e01 	subs.w	lr, lr, #1
 80084ec:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80084f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80084f4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80084f8:	d1db      	bne.n	80084b2 <__ieee754_sqrt+0xb6>
 80084fa:	4313      	orrs	r3, r2
 80084fc:	d006      	beq.n	800850c <__ieee754_sqrt+0x110>
 80084fe:	1c48      	adds	r0, r1, #1
 8008500:	bf0b      	itete	eq
 8008502:	4671      	moveq	r1, lr
 8008504:	3101      	addne	r1, #1
 8008506:	3401      	addeq	r4, #1
 8008508:	f021 0101 	bicne.w	r1, r1, #1
 800850c:	1063      	asrs	r3, r4, #1
 800850e:	0849      	lsrs	r1, r1, #1
 8008510:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008514:	07e2      	lsls	r2, r4, #31
 8008516:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800851a:	bf48      	it	mi
 800851c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008520:	460e      	mov	r6, r1
 8008522:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008526:	e782      	b.n	800842e <__ieee754_sqrt+0x32>
 8008528:	0ada      	lsrs	r2, r3, #11
 800852a:	3815      	subs	r0, #21
 800852c:	055b      	lsls	r3, r3, #21
 800852e:	2a00      	cmp	r2, #0
 8008530:	d0fa      	beq.n	8008528 <__ieee754_sqrt+0x12c>
 8008532:	02d5      	lsls	r5, r2, #11
 8008534:	d50a      	bpl.n	800854c <__ieee754_sqrt+0x150>
 8008536:	f1c1 0420 	rsb	r4, r1, #32
 800853a:	fa23 f404 	lsr.w	r4, r3, r4
 800853e:	1e4d      	subs	r5, r1, #1
 8008540:	408b      	lsls	r3, r1
 8008542:	4322      	orrs	r2, r4
 8008544:	1b41      	subs	r1, r0, r5
 8008546:	e789      	b.n	800845c <__ieee754_sqrt+0x60>
 8008548:	4608      	mov	r0, r1
 800854a:	e7f0      	b.n	800852e <__ieee754_sqrt+0x132>
 800854c:	0052      	lsls	r2, r2, #1
 800854e:	3101      	adds	r1, #1
 8008550:	e7ef      	b.n	8008532 <__ieee754_sqrt+0x136>
 8008552:	4680      	mov	r8, r0
 8008554:	e7bd      	b.n	80084d2 <__ieee754_sqrt+0xd6>
 8008556:	bf00      	nop
 8008558:	7ff00000 	.word	0x7ff00000

0800855c <_init>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr

08008568 <_fini>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr

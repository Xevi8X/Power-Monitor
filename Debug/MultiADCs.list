
MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f54  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  08007068  08007068  00017068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074fc  080074fc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080074fc  080074fc  000174fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007504  08007504  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007504  08007504  00017504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007508  08007508  00017508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800750c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  200001e0  080076ec  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001358  080076ec  00021358  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009636  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230e  00000000  00000000  0002983f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002bb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002c500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ca2  00000000  00000000  0002cda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c196  00000000  00000000  00045a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893bb  00000000  00000000  00051be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000daf9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000365c  00000000  00000000  000dafec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800704c 	.word	0x0800704c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800704c 	.word	0x0800704c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_uldivmod>:
 8000a88:	b953      	cbnz	r3, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8a:	b94a      	cbnz	r2, 8000aa0 <__aeabi_uldivmod+0x18>
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	bf08      	it	eq
 8000a90:	2800      	cmpeq	r0, #0
 8000a92:	bf1c      	itt	ne
 8000a94:	f04f 31ff 	movne.w	r1, #4294967295
 8000a98:	f04f 30ff 	movne.w	r0, #4294967295
 8000a9c:	f000 b976 	b.w	8000d8c <__aeabi_idiv0>
 8000aa0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa8:	f000 f806 	bl	8000ab8 <__udivmoddi4>
 8000aac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab4:	b004      	add	sp, #16
 8000ab6:	4770      	bx	lr

08000ab8 <__udivmoddi4>:
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	9e08      	ldr	r6, [sp, #32]
 8000abe:	460d      	mov	r5, r1
 8000ac0:	4604      	mov	r4, r0
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14d      	bne.n	8000b64 <__udivmoddi4+0xac>
 8000ac8:	428a      	cmp	r2, r1
 8000aca:	4694      	mov	ip, r2
 8000acc:	d968      	bls.n	8000ba0 <__udivmoddi4+0xe8>
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	b152      	cbz	r2, 8000aea <__udivmoddi4+0x32>
 8000ad4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ad8:	f1c2 0120 	rsb	r1, r2, #32
 8000adc:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	ea41 0803 	orr.w	r8, r1, r3
 8000ae8:	4094      	lsls	r4, r2
 8000aea:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000aee:	fbb8 f7f1 	udiv	r7, r8, r1
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	fb01 8817 	mls	r8, r1, r7, r8
 8000afa:	fb07 f00e 	mul.w	r0, r7, lr
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b04:	4298      	cmp	r0, r3
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x66>
 8000b08:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0c:	f107 35ff 	add.w	r5, r7, #4294967295
 8000b10:	f080 811e 	bcs.w	8000d50 <__udivmoddi4+0x298>
 8000b14:	4298      	cmp	r0, r3
 8000b16:	f240 811b 	bls.w	8000d50 <__udivmoddi4+0x298>
 8000b1a:	3f02      	subs	r7, #2
 8000b1c:	4463      	add	r3, ip
 8000b1e:	1a1b      	subs	r3, r3, r0
 8000b20:	fbb3 f0f1 	udiv	r0, r3, r1
 8000b24:	fb01 3310 	mls	r3, r1, r0, r3
 8000b28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b2c:	b2a4      	uxth	r4, r4
 8000b2e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b32:	45a6      	cmp	lr, r4
 8000b34:	d90a      	bls.n	8000b4c <__udivmoddi4+0x94>
 8000b36:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b3e:	f080 8109 	bcs.w	8000d54 <__udivmoddi4+0x29c>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f240 8106 	bls.w	8000d54 <__udivmoddi4+0x29c>
 8000b48:	4464      	add	r4, ip
 8000b4a:	3802      	subs	r0, #2
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	eba4 040e 	sub.w	r4, r4, lr
 8000b52:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b56:	b11e      	cbz	r6, 8000b60 <__udivmoddi4+0xa8>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	40d4      	lsrs	r4, r2
 8000b5c:	e9c6 4300 	strd	r4, r3, [r6]
 8000b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b64:	428b      	cmp	r3, r1
 8000b66:	d908      	bls.n	8000b7a <__udivmoddi4+0xc2>
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	f000 80ee 	beq.w	8000d4a <__udivmoddi4+0x292>
 8000b6e:	2100      	movs	r1, #0
 8000b70:	e9c6 0500 	strd	r0, r5, [r6]
 8000b74:	4608      	mov	r0, r1
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d14a      	bne.n	8000c18 <__udivmoddi4+0x160>
 8000b82:	42ab      	cmp	r3, r5
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xd4>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 80fc 	bhi.w	8000d84 <__udivmoddi4+0x2cc>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb65 0303 	sbc.w	r3, r5, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4698      	mov	r8, r3
 8000b96:	2e00      	cmp	r6, #0
 8000b98:	d0e2      	beq.n	8000b60 <__udivmoddi4+0xa8>
 8000b9a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b9e:	e7df      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000ba0:	b902      	cbnz	r2, 8000ba4 <__udivmoddi4+0xec>
 8000ba2:	deff      	udf	#255	; 0xff
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	2a00      	cmp	r2, #0
 8000baa:	f040 8091 	bne.w	8000cd0 <__udivmoddi4+0x218>
 8000bae:	eba1 000c 	sub.w	r0, r1, ip
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb8:	fa1f fe8c 	uxth.w	lr, ip
 8000bbc:	fbb0 f3f7 	udiv	r3, r0, r7
 8000bc0:	fb07 0013 	mls	r0, r7, r3, r0
 8000bc4:	0c25      	lsrs	r5, r4, #16
 8000bc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bca:	fb0e f003 	mul.w	r0, lr, r3
 8000bce:	42a8      	cmp	r0, r5
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x12c>
 8000bd2:	eb1c 0505 	adds.w	r5, ip, r5
 8000bd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x12a>
 8000bdc:	42a8      	cmp	r0, r5
 8000bde:	f200 80ce 	bhi.w	8000d7e <__udivmoddi4+0x2c6>
 8000be2:	4643      	mov	r3, r8
 8000be4:	1a2d      	subs	r5, r5, r0
 8000be6:	fbb5 f0f7 	udiv	r0, r5, r7
 8000bea:	fb07 5510 	mls	r5, r7, r0, r5
 8000bee:	fb0e fe00 	mul.w	lr, lr, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x156>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c04:	d202      	bcs.n	8000c0c <__udivmoddi4+0x154>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	f200 80b6 	bhi.w	8000d78 <__udivmoddi4+0x2c0>
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	eba4 040e 	sub.w	r4, r4, lr
 8000c12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c16:	e79e      	b.n	8000b56 <__udivmoddi4+0x9e>
 8000c18:	f1c1 0720 	rsb	r7, r1, #32
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c26:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c2a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c2e:	fbba f8f9 	udiv	r8, sl, r9
 8000c32:	fa20 f307 	lsr.w	r3, r0, r7
 8000c36:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c3a:	408d      	lsls	r5, r1
 8000c3c:	fa1f fe8c 	uxth.w	lr, ip
 8000c40:	431d      	orrs	r5, r3
 8000c42:	fa00 f301 	lsl.w	r3, r0, r1
 8000c46:	fb08 f00e 	mul.w	r0, r8, lr
 8000c4a:	0c2c      	lsrs	r4, r5, #16
 8000c4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c50:	42a0      	cmp	r0, r4
 8000c52:	fa02 f201 	lsl.w	r2, r2, r1
 8000c56:	d90b      	bls.n	8000c70 <__udivmoddi4+0x1b8>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c60:	f080 8088 	bcs.w	8000d74 <__udivmoddi4+0x2bc>
 8000c64:	42a0      	cmp	r0, r4
 8000c66:	f240 8085 	bls.w	8000d74 <__udivmoddi4+0x2bc>
 8000c6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c6e:	4464      	add	r4, ip
 8000c70:	1a24      	subs	r4, r4, r0
 8000c72:	fbb4 f0f9 	udiv	r0, r4, r9
 8000c76:	fb09 4410 	mls	r4, r9, r0, r4
 8000c7a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x1e2>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c90:	d26c      	bcs.n	8000d6c <__udivmoddi4+0x2b4>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	d96a      	bls.n	8000d6c <__udivmoddi4+0x2b4>
 8000c96:	3802      	subs	r0, #2
 8000c98:	4464      	add	r4, ip
 8000c9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c9e:	fba0 9502 	umull	r9, r5, r0, r2
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	42ac      	cmp	r4, r5
 8000ca8:	46c8      	mov	r8, r9
 8000caa:	46ae      	mov	lr, r5
 8000cac:	d356      	bcc.n	8000d5c <__udivmoddi4+0x2a4>
 8000cae:	d053      	beq.n	8000d58 <__udivmoddi4+0x2a0>
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d069      	beq.n	8000d88 <__udivmoddi4+0x2d0>
 8000cb4:	ebb3 0208 	subs.w	r2, r3, r8
 8000cb8:	eb64 040e 	sbc.w	r4, r4, lr
 8000cbc:	fa22 f301 	lsr.w	r3, r2, r1
 8000cc0:	fa04 f707 	lsl.w	r7, r4, r7
 8000cc4:	431f      	orrs	r7, r3
 8000cc6:	40cc      	lsrs	r4, r1
 8000cc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	e747      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000cd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd4:	f1c2 0120 	rsb	r1, r2, #32
 8000cd8:	fa25 f301 	lsr.w	r3, r5, r1
 8000cdc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce0:	fa20 f101 	lsr.w	r1, r0, r1
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	430d      	orrs	r5, r1
 8000ce8:	fbb3 f1f7 	udiv	r1, r3, r7
 8000cec:	fb07 3311 	mls	r3, r7, r1, r3
 8000cf0:	fa1f fe8c 	uxth.w	lr, ip
 8000cf4:	0c28      	lsrs	r0, r5, #16
 8000cf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cfa:	fb01 f30e 	mul.w	r3, r1, lr
 8000cfe:	4283      	cmp	r3, r0
 8000d00:	fa04 f402 	lsl.w	r4, r4, r2
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x260>
 8000d06:	eb1c 0000 	adds.w	r0, ip, r0
 8000d0a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d0e:	d22f      	bcs.n	8000d70 <__udivmoddi4+0x2b8>
 8000d10:	4283      	cmp	r3, r0
 8000d12:	d92d      	bls.n	8000d70 <__udivmoddi4+0x2b8>
 8000d14:	3902      	subs	r1, #2
 8000d16:	4460      	add	r0, ip
 8000d18:	1ac0      	subs	r0, r0, r3
 8000d1a:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d1e:	fb07 0013 	mls	r0, r7, r3, r0
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d28:	fb03 f00e 	mul.w	r0, r3, lr
 8000d2c:	42a8      	cmp	r0, r5
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x28a>
 8000d30:	eb1c 0505 	adds.w	r5, ip, r5
 8000d34:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d38:	d216      	bcs.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	d914      	bls.n	8000d68 <__udivmoddi4+0x2b0>
 8000d3e:	3b02      	subs	r3, #2
 8000d40:	4465      	add	r5, ip
 8000d42:	1a28      	subs	r0, r5, r0
 8000d44:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d48:	e738      	b.n	8000bbc <__udivmoddi4+0x104>
 8000d4a:	4631      	mov	r1, r6
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	e707      	b.n	8000b60 <__udivmoddi4+0xa8>
 8000d50:	462f      	mov	r7, r5
 8000d52:	e6e4      	b.n	8000b1e <__udivmoddi4+0x66>
 8000d54:	4618      	mov	r0, r3
 8000d56:	e6f9      	b.n	8000b4c <__udivmoddi4+0x94>
 8000d58:	454b      	cmp	r3, r9
 8000d5a:	d2a9      	bcs.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000d60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d64:	3801      	subs	r0, #1
 8000d66:	e7a3      	b.n	8000cb0 <__udivmoddi4+0x1f8>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	e7ea      	b.n	8000d42 <__udivmoddi4+0x28a>
 8000d6c:	4628      	mov	r0, r5
 8000d6e:	e794      	b.n	8000c9a <__udivmoddi4+0x1e2>
 8000d70:	4641      	mov	r1, r8
 8000d72:	e7d1      	b.n	8000d18 <__udivmoddi4+0x260>
 8000d74:	46d0      	mov	r8, sl
 8000d76:	e77b      	b.n	8000c70 <__udivmoddi4+0x1b8>
 8000d78:	4464      	add	r4, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	e747      	b.n	8000c0e <__udivmoddi4+0x156>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4465      	add	r5, ip
 8000d82:	e72f      	b.n	8000be4 <__udivmoddi4+0x12c>
 8000d84:	4608      	mov	r0, r1
 8000d86:	e706      	b.n	8000b96 <__udivmoddi4+0xde>
 8000d88:	4631      	mov	r1, r6
 8000d8a:	e6e9      	b.n	8000b60 <__udivmoddi4+0xa8>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000da6:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <MX_ADC1_Init+0xd4>)
 8000da8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000db0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000db2:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dbe:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000dc0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000dcc:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd2:	4823      	ldr	r0, [pc, #140]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000dd4:	f001 f854 	bl	8001e80 <HAL_ADC_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 8000dde:	f000 fdf6 	bl	80019ce <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000de2:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8000de6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000de8:	f107 030c 	add.w	r3, r7, #12
 8000dec:	4619      	mov	r1, r3
 8000dee:	481c      	ldr	r0, [pc, #112]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000df0:	f001 fe08 	bl	8002a04 <HAL_ADCEx_MultiModeConfigChannel>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000dfa:	f000 fde8 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e02:	2301      	movs	r3, #1
 8000e04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000e06:	2307      	movs	r3, #7
 8000e08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4814      	ldr	r0, [pc, #80]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000e10:	f001 fa92 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e1a:	f000 fdd8 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000e2c:	f001 fa84 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000e36:	f000 fdca 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e3a:	230b      	movs	r3, #11
 8000e3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e42:	463b      	mov	r3, r7
 8000e44:	4619      	mov	r1, r3
 8000e46:	4806      	ldr	r0, [pc, #24]	; (8000e60 <MX_ADC1_Init+0xd0>)
 8000e48:	f001 fa76 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000e52:	f000 fdbc 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001fc 	.word	0x200001fc
 8000e64:	40012400 	.word	0x40012400

08000e68 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <MX_ADC2_Init+0xb4>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e7e:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e84:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e86:	4b24      	ldr	r3, [pc, #144]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e92:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000e94:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e98:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ea6:	481c      	ldr	r0, [pc, #112]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000ea8:	f000 ffea 	bl	8001e80 <HAL_ADC_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8000eb2:	f000 fd8c 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4814      	ldr	r0, [pc, #80]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000ec8:	f001 fa36 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000ed2:	f000 fd7c 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480d      	ldr	r0, [pc, #52]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000ee4:	f001 fa28 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000eee:	f000 fd6e 	bl	80019ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <MX_ADC2_Init+0xb0>)
 8000f00:	f001 fa1a 	bl	8002338 <HAL_ADC_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8000f0a:	f000 fd60 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000022c 	.word	0x2000022c
 8000f1c:	40012800 	.word	0x40012800

08000f20 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08e      	sub	sp, #56	; 0x38
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <HAL_ADC_MspInit+0x1b0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d168      	bne.n	8001012 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f40:	4b64      	ldr	r3, [pc, #400]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	4a63      	ldr	r2, [pc, #396]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4a:	6193      	str	r3, [r2, #24]
 8000f4c:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
 8000f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f58:	4b5e      	ldr	r3, [pc, #376]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a5d      	ldr	r2, [pc, #372]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f5e:	f043 0310 	orr.w	r3, r3, #16
 8000f62:	6193      	str	r3, [r2, #24]
 8000f64:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	623b      	str	r3, [r7, #32]
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6193      	str	r3, [r2, #24]
 8000f7c:	4b55      	ldr	r3, [pc, #340]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f94:	4619      	mov	r1, r3
 8000f96:	4850      	ldr	r0, [pc, #320]	; (80010d8 <HAL_ADC_MspInit+0x1b8>)
 8000f98:	f002 f882 	bl	80030a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000f9c:	2311      	movs	r3, #17
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	484c      	ldr	r0, [pc, #304]	; (80010dc <HAL_ADC_MspInit+0x1bc>)
 8000fac:	f002 f878 	bl	80030a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fb0:	4b4b      	ldr	r3, [pc, #300]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fb2:	4a4c      	ldr	r2, [pc, #304]	; (80010e4 <HAL_ADC_MspInit+0x1c4>)
 8000fb4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb6:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b48      	ldr	r3, [pc, #288]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fc8:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fd6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd8:	4b41      	ldr	r3, [pc, #260]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fda:	2220      	movs	r2, #32
 8000fdc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fde:	4b40      	ldr	r3, [pc, #256]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fe4:	483e      	ldr	r0, [pc, #248]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000fe6:	f001 fe6d 	bl	8002cc4 <HAL_DMA_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000ff0:	f000 fced 	bl	80019ce <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a3a      	ldr	r2, [pc, #232]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000ff8:	621a      	str	r2, [r3, #32]
 8000ffa:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <HAL_ADC_MspInit+0x1c0>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2012      	movs	r0, #18
 8001006:	f001 fe26 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800100a:	2012      	movs	r0, #18
 800100c:	f001 fe3f 	bl	8002c8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001010:	e05a      	b.n	80010c8 <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a34      	ldr	r2, [pc, #208]	; (80010e8 <HAL_ADC_MspInit+0x1c8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d155      	bne.n	80010c8 <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a2c      	ldr	r2, [pc, #176]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b2a      	ldr	r3, [pc, #168]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a20      	ldr	r2, [pc, #128]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8001052:	f043 0304 	orr.w	r3, r3, #4
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b1e      	ldr	r3, [pc, #120]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_ADC_MspInit+0x1b4>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800107c:	2303      	movs	r3, #3
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001080:	2303      	movs	r3, #3
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001084:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001088:	4619      	mov	r1, r3
 800108a:	4813      	ldr	r0, [pc, #76]	; (80010d8 <HAL_ADC_MspInit+0x1b8>)
 800108c:	f002 f808 	bl	80030a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001090:	2302      	movs	r3, #2
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001094:	2303      	movs	r3, #3
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109c:	4619      	mov	r1, r3
 800109e:	480f      	ldr	r0, [pc, #60]	; (80010dc <HAL_ADC_MspInit+0x1bc>)
 80010a0:	f001 fffe 	bl	80030a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a8:	2303      	movs	r3, #3
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b0:	4619      	mov	r1, r3
 80010b2:	480e      	ldr	r0, [pc, #56]	; (80010ec <HAL_ADC_MspInit+0x1cc>)
 80010b4:	f001 fff4 	bl	80030a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	2012      	movs	r0, #18
 80010be:	f001 fdca 	bl	8002c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010c2:	2012      	movs	r0, #18
 80010c4:	f001 fde3 	bl	8002c8e <HAL_NVIC_EnableIRQ>
}
 80010c8:	bf00      	nop
 80010ca:	3738      	adds	r7, #56	; 0x38
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40012400 	.word	0x40012400
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40011000 	.word	0x40011000
 80010dc:	40010800 	.word	0x40010800
 80010e0:	2000025c 	.word	0x2000025c
 80010e4:	40020008 	.word	0x40020008
 80010e8:	40012800 	.word	0x40012800
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_DMA_Init+0x38>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <MX_DMA_Init+0x38>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_DMA_Init+0x38>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	200b      	movs	r0, #11
 8001114:	f001 fd9f 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001118:	200b      	movs	r0, #11
 800111a:	f001 fdb8 	bl	8002c8e <HAL_NVIC_EnableIRQ>

}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <MX_GPIO_Init+0xcc>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a2c      	ldr	r2, [pc, #176]	; (80011f8 <MX_GPIO_Init+0xcc>)
 8001146:	f043 0310 	orr.w	r3, r3, #16
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_GPIO_Init+0xcc>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_GPIO_Init+0xcc>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <MX_GPIO_Init+0xcc>)
 800115e:	f043 0320 	orr.w	r3, r3, #32
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_GPIO_Init+0xcc>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0320 	and.w	r3, r3, #32
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_GPIO_Init+0xcc>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <MX_GPIO_Init+0xcc>)
 8001176:	f043 0304 	orr.w	r3, r3, #4
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_GPIO_Init+0xcc>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0304 	and.w	r3, r3, #4
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_GPIO_Init+0xcc>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a1a      	ldr	r2, [pc, #104]	; (80011f8 <MX_GPIO_Init+0xcc>)
 800118e:	f043 0308 	orr.w	r3, r3, #8
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_GPIO_Init+0xcc>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2120      	movs	r1, #32
 80011a4:	4815      	ldr	r0, [pc, #84]	; (80011fc <MX_GPIO_Init+0xd0>)
 80011a6:	f002 f916 	bl	80033d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_GPIO_Init+0xd4>)
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0310 	add.w	r3, r7, #16
 80011bc:	4619      	mov	r1, r3
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <MX_GPIO_Init+0xd8>)
 80011c0:	f001 ff6e 	bl	80030a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011c4:	2320      	movs	r3, #32
 80011c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	4808      	ldr	r0, [pc, #32]	; (80011fc <MX_GPIO_Init+0xd0>)
 80011dc:	f001 ff60 	bl	80030a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2028      	movs	r0, #40	; 0x28
 80011e6:	f001 fd36 	bl	8002c56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011ea:	2028      	movs	r0, #40	; 0x28
 80011ec:	f001 fd4f 	bl	8002c8e <HAL_NVIC_EnableIRQ>

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40010800 	.word	0x40010800
 8001200:	10110000 	.word	0x10110000
 8001204:	40011000 	.word	0x40011000

08001208 <ADC_Start>:
/* USER CODE BEGIN 0 */



void ADC_Start(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 800120c:	bf00      	nop
 800120e:	480d      	ldr	r0, [pc, #52]	; (8001244 <ADC_Start+0x3c>)
 8001210:	f001 fa8c 	bl	800272c <HAL_ADCEx_Calibration_Start>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f9      	bne.n	800120e <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 800121a:	bf00      	nop
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <ADC_Start+0x40>)
 800121e:	f001 fa85 	bl	800272c <HAL_ADCEx_Calibration_Start>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1f9      	bne.n	800121c <ADC_Start+0x14>
	HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f000 fe05 	bl	8001e38 <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <ADC_Start+0x40>)
 8001230:	f000 fefe 	bl	8002030 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADC_Buffer, (uint32_t)2 * CHANNELS);
 8001234:	2206      	movs	r2, #6
 8001236:	4905      	ldr	r1, [pc, #20]	; (800124c <ADC_Start+0x44>)
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <ADC_Start+0x3c>)
 800123a:	f001 fb23 	bl	8002884 <HAL_ADCEx_MultiModeStart_DMA>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200001fc 	.word	0x200001fc
 8001248:	2000022c 	.word	0x2000022c
 800124c:	200002a0 	.word	0x200002a0

08001250 <CalibrateZero>:

void CalibrateZero()
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	af00      	add	r7, sp, #0

	printf("Starting calibration...\n");
 8001256:	4860      	ldr	r0, [pc, #384]	; (80013d8 <CalibrateZero+0x188>)
 8001258:	f003 fd70 	bl	8004d3c <puts>
	printf("Press button when voltage and current is equal to 0\n");
 800125c:	485f      	ldr	r0, [pc, #380]	; (80013dc <CalibrateZero+0x18c>)
 800125e:	f003 fd6d 	bl	8004d3c <puts>
	HAL_Delay(2000);
 8001262:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001266:	f000 fde7 	bl	8001e38 <HAL_Delay>

	while(indexCircBuffer!= 0);
 800126a:	bf00      	nop
 800126c:	4b5c      	ldr	r3, [pc, #368]	; (80013e0 <CalibrateZero+0x190>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1fb      	bne.n	800126c <CalibrateZero+0x1c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001274:	b672      	cpsid	i
}
 8001276:	bf00      	nop
	__disable_irq();
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET);
 8001278:	bf00      	nop
 800127a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127e:	4859      	ldr	r0, [pc, #356]	; (80013e4 <CalibrateZero+0x194>)
 8001280:	f002 f892 	bl	80033a8 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f7      	bne.n	800127a <CalibrateZero+0x2a>

	uint32_t sum[CHANNELS*2] = {0};
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]
	for(uint16_t i = 0; i < BUFFERSIZE;i++)
 800129a:	2300      	movs	r3, #0
 800129c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800129e:	e036      	b.n	800130e <CalibrateZero+0xbe>
	{
		for(uint8_t j = 0; j < CHANNELS*2;j++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80012a6:	e02b      	b.n	8001300 <CalibrateZero+0xb0>
		{
			sum[j] += data[i][j];
 80012a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	3328      	adds	r3, #40	; 0x28
 80012b0:	443b      	add	r3, r7
 80012b2:	f853 1c28 	ldr.w	r1, [r3, #-40]
 80012b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012b8:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80012bc:	4c4a      	ldr	r4, [pc, #296]	; (80013e8 <CalibrateZero+0x198>)
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4403      	add	r3, r0
 80012c8:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 80012cc:	461a      	mov	r2, r3
 80012ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012d2:	440a      	add	r2, r1
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	3328      	adds	r3, #40	; 0x28
 80012d8:	443b      	add	r3, r7
 80012da:	f843 2c28 	str.w	r2, [r3, #-40]
			data[i][j] = 0;
 80012de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80012e0:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80012e4:	4840      	ldr	r0, [pc, #256]	; (80013e8 <CalibrateZero+0x198>)
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	440b      	add	r3, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(uint8_t j = 0; j < CHANNELS*2;j++)
 80012f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80012fa:	3301      	adds	r3, #1
 80012fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001300:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001304:	2b05      	cmp	r3, #5
 8001306:	d9cf      	bls.n	80012a8 <CalibrateZero+0x58>
	for(uint16_t i = 0; i < BUFFERSIZE;i++)
 8001308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800130a:	3301      	adds	r3, #1
 800130c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800130e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001310:	2bff      	cmp	r3, #255	; 0xff
 8001312:	d9c5      	bls.n	80012a0 <CalibrateZero+0x50>
		}
	}
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 8001314:	2300      	movs	r3, #0
 8001316:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800131a:	e02a      	b.n	8001372 <CalibrateZero+0x122>
	{
		calibZeros[j] = (uint16_t) (sum[j]/BUFFERSIZE);
 800131c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	3328      	adds	r3, #40	; 0x28
 8001324:	443b      	add	r3, r7
 8001326:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800132a:	0a1a      	lsrs	r2, r3, #8
 800132c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001330:	b291      	uxth	r1, r2
 8001332:	4a2e      	ldr	r2, [pc, #184]	; (80013ec <CalibrateZero+0x19c>)
 8001334:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data[0][j] = -calibZeros[j];
 8001338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800133c:	4a2b      	ldr	r2, [pc, #172]	; (80013ec <CalibrateZero+0x19c>)
 800133e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001342:	425b      	negs	r3, r3
 8001344:	b29a      	uxth	r2, r3
 8001346:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800134a:	b211      	sxth	r1, r2
 800134c:	4a26      	ldr	r2, [pc, #152]	; (80013e8 <CalibrateZero+0x198>)
 800134e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RMS[j] = 0;
 8001352:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001356:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <CalibrateZero+0x1a0>)
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	18d1      	adds	r1, r2, r3
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 8001368:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800136c:	3301      	adds	r3, #1
 800136e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001372:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001376:	2b05      	cmp	r3, #5
 8001378:	d9d0      	bls.n	800131c <CalibrateZero+0xcc>
	}

	uint32_t timeOfBufforing = time[BUFFERSIZE-1]- time[0];
 800137a:	4b1e      	ldr	r3, [pc, #120]	; (80013f4 <CalibrateZero+0x1a4>)
 800137c:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8001380:	4b1c      	ldr	r3, [pc, #112]	; (80013f4 <CalibrateZero+0x1a4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	623b      	str	r3, [r7, #32]
	uint32_t halfPhase = 1000000/EXPECTEDFREQ/2;
 8001388:	f242 7310 	movw	r3, #10000	; 0x2710
 800138c:	61fb      	str	r3, [r7, #28]
	uint16_t halfPeriods = timeOfBufforing/halfPhase;
 800138e:	6a3a      	ldr	r2, [r7, #32]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	837b      	strh	r3, [r7, #26]

	while(time[BUFFERSIZE-1-correctionRMS] > time[0] + halfPhase*halfPeriods) correctionRMS++;
 8001398:	e005      	b.n	80013a6 <CalibrateZero+0x156>
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <CalibrateZero+0x1a8>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	3301      	adds	r3, #1
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <CalibrateZero+0x1a8>)
 80013a4:	701a      	strb	r2, [r3, #0]
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <CalibrateZero+0x1a8>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80013ae:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <CalibrateZero+0x1a4>)
 80013b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <CalibrateZero+0x1a4>)
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	8b7b      	ldrh	r3, [r7, #26]
 80013ba:	69f8      	ldr	r0, [r7, #28]
 80013bc:	fb00 f303 	mul.w	r3, r0, r3
 80013c0:	440b      	add	r3, r1
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d8e9      	bhi.n	800139a <CalibrateZero+0x14a>

	printf("Calibration completed\n");
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <CalibrateZero+0x1ac>)
 80013c8:	f003 fcb8 	bl	8004d3c <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 80013cc:	b662      	cpsie	i
}
 80013ce:	bf00      	nop
	__enable_irq();
}
 80013d0:	bf00      	nop
 80013d2:	372c      	adds	r7, #44	; 0x2c
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	08007068 	.word	0x08007068
 80013dc:	08007080 	.word	0x08007080
 80013e0:	200012b8 	.word	0x200012b8
 80013e4:	40011000 	.word	0x40011000
 80013e8:	200002b8 	.word	0x200002b8
 80013ec:	200012bc 	.word	0x200012bc
 80013f0:	200012c8 	.word	0x200012c8
 80013f4:	20000eb8 	.word	0x20000eb8
 80013f8:	200012f8 	.word	0x200012f8
 80013fc:	080070b4 	.word	0x080070b4

08001400 <takeData>:

void takeData(uint32_t* buffer)
{
 8001400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001404:	b087      	sub	sp, #28
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
	if(oversamplingIndex == OVERSAMPLING)
 800140a:	4b8a      	ldr	r3, [pc, #552]	; (8001634 <takeData+0x234>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b08      	cmp	r3, #8
 8001410:	f040 80ae 	bne.w	8001570 <takeData+0x170>
	{
		oversamplingIndex = 0;
 8001414:	4b87      	ldr	r3, [pc, #540]	; (8001634 <takeData+0x234>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
		time[indexCircBuffer] = getCurrentMicros();
 800141a:	4b87      	ldr	r3, [pc, #540]	; (8001638 <takeData+0x238>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	461c      	mov	r4, r3
 8001420:	f000 f964 	bl	80016ec <getCurrentMicros>
 8001424:	4603      	mov	r3, r0
 8001426:	4a85      	ldr	r2, [pc, #532]	; (800163c <takeData+0x23c>)
 8001428:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 800142c:	2300      	movs	r3, #0
 800142e:	75fb      	strb	r3, [r7, #23]
 8001430:	e032      	b.n	8001498 <takeData+0x98>
		{
			RMS[i] += data[indexCircBuffer][i]*data[indexCircBuffer][i];
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	4a82      	ldr	r2, [pc, #520]	; (8001640 <takeData+0x240>)
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800143e:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <takeData+0x238>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	469c      	mov	ip, r3
 8001444:	7dfa      	ldrb	r2, [r7, #23]
 8001446:	4c7f      	ldr	r4, [pc, #508]	; (8001644 <takeData+0x244>)
 8001448:	4663      	mov	r3, ip
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4463      	add	r3, ip
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8001456:	469c      	mov	ip, r3
 8001458:	4b77      	ldr	r3, [pc, #476]	; (8001638 <takeData+0x238>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	7dfc      	ldrb	r4, [r7, #23]
 8001460:	4b78      	ldr	r3, [pc, #480]	; (8001644 <takeData+0x244>)
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4423      	add	r3, r4
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001474:	fb03 f30c 	mul.w	r3, r3, ip
 8001478:	17da      	asrs	r2, r3, #31
 800147a:	469a      	mov	sl, r3
 800147c:	4693      	mov	fp, r2
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	eb10 050a 	adds.w	r5, r0, sl
 8001484:	eb41 060b 	adc.w	r6, r1, fp
 8001488:	4a6d      	ldr	r2, [pc, #436]	; (8001640 <takeData+0x240>)
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	4413      	add	r3, r2
 800148e:	e9c3 5600 	strd	r5, r6, [r3]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001492:	7dfb      	ldrb	r3, [r7, #23]
 8001494:	3301      	adds	r3, #1
 8001496:	75fb      	strb	r3, [r7, #23]
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	2b05      	cmp	r3, #5
 800149c:	d9c9      	bls.n	8001432 <takeData+0x32>
		}
		indexCircBuffer++;
 800149e:	4b66      	ldr	r3, [pc, #408]	; (8001638 <takeData+0x238>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b64      	ldr	r3, [pc, #400]	; (8001638 <takeData+0x238>)
 80014a8:	801a      	strh	r2, [r3, #0]
		if(indexCircBuffer == BUFFERSIZE)
 80014aa:	4b63      	ldr	r3, [pc, #396]	; (8001638 <takeData+0x238>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b2:	d106      	bne.n	80014c2 <takeData+0xc2>
		{
			indexCircBuffer = 0;
 80014b4:	4b60      	ldr	r3, [pc, #384]	; (8001638 <takeData+0x238>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80014ba:	2120      	movs	r1, #32
 80014bc:	4862      	ldr	r0, [pc, #392]	; (8001648 <takeData+0x248>)
 80014be:	f001 ffa2 	bl	8003406 <HAL_GPIO_TogglePin>
		}
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 80014c2:	2300      	movs	r3, #0
 80014c4:	75bb      	strb	r3, [r7, #22]
 80014c6:	e050      	b.n	800156a <takeData+0x16a>
		{
			RMS[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][i]*data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][i];
 80014c8:	7dbb      	ldrb	r3, [r7, #22]
 80014ca:	4a5d      	ldr	r2, [pc, #372]	; (8001640 <takeData+0x240>)
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d4:	4b58      	ldr	r3, [pc, #352]	; (8001638 <takeData+0x238>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b5c      	ldr	r3, [pc, #368]	; (800164c <takeData+0x24c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	7dbc      	ldrb	r4, [r7, #22]
 80014e4:	4d57      	ldr	r5, [pc, #348]	; (8001644 <takeData+0x244>)
 80014e6:	4613      	mov	r3, r2
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	4413      	add	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4423      	add	r3, r4
 80014f0:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80014f4:	461e      	mov	r6, r3
 80014f6:	4b50      	ldr	r3, [pc, #320]	; (8001638 <takeData+0x238>)
 80014f8:	881b      	ldrh	r3, [r3, #0]
 80014fa:	461a      	mov	r2, r3
 80014fc:	4b53      	ldr	r3, [pc, #332]	; (800164c <takeData+0x24c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4413      	add	r3, r2
 8001502:	b2da      	uxtb	r2, r3
 8001504:	7dbc      	ldrb	r4, [r7, #22]
 8001506:	4d4f      	ldr	r5, [pc, #316]	; (8001644 <takeData+0x244>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4423      	add	r3, r4
 8001512:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8001516:	fb06 f303 	mul.w	r3, r6, r3
 800151a:	17da      	asrs	r2, r3, #31
 800151c:	4698      	mov	r8, r3
 800151e:	4691      	mov	r9, r2
 8001520:	7dbb      	ldrb	r3, [r7, #22]
 8001522:	ebb0 0208 	subs.w	r2, r0, r8
 8001526:	603a      	str	r2, [r7, #0]
 8001528:	eb61 0209 	sbc.w	r2, r1, r9
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	4a44      	ldr	r2, [pc, #272]	; (8001640 <takeData+0x240>)
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4413      	add	r3, r2
 8001534:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001538:	e9c3 1200 	strd	r1, r2, [r3]
			data[indexCircBuffer][i] = -calibZeros[i];
 800153c:	7dbb      	ldrb	r3, [r7, #22]
 800153e:	4a44      	ldr	r2, [pc, #272]	; (8001650 <takeData+0x250>)
 8001540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001544:	425b      	negs	r3, r3
 8001546:	b299      	uxth	r1, r3
 8001548:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <takeData+0x238>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	7dba      	ldrb	r2, [r7, #22]
 8001550:	b20c      	sxth	r4, r1
 8001552:	493c      	ldr	r1, [pc, #240]	; (8001644 <takeData+0x244>)
 8001554:	4603      	mov	r3, r0
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4403      	add	r3, r0
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	4622      	mov	r2, r4
 8001560:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001564:	7dbb      	ldrb	r3, [r7, #22]
 8001566:	3301      	adds	r3, #1
 8001568:	75bb      	strb	r3, [r7, #22]
 800156a:	7dbb      	ldrb	r3, [r7, #22]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d9ab      	bls.n	80014c8 <takeData+0xc8>
		}
	}
	for(uint8_t i = 0; i < CHANNELS;i++)
 8001570:	2300      	movs	r3, #0
 8001572:	757b      	strb	r3, [r7, #21]
 8001574:	e04f      	b.n	8001616 <takeData+0x216>
	{
		data[indexCircBuffer][2*i] += (uint16_t) buffer[i];
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <takeData+0x238>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	4618      	mov	r0, r3
 800157c:	7d7b      	ldrb	r3, [r7, #21]
 800157e:	005a      	lsls	r2, r3, #1
 8001580:	4930      	ldr	r1, [pc, #192]	; (8001644 <takeData+0x244>)
 8001582:	4603      	mov	r3, r0
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4403      	add	r3, r0
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001590:	b29a      	uxth	r2, r3
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	68f9      	ldr	r1, [r7, #12]
 8001598:	440b      	add	r3, r1
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b29b      	uxth	r3, r3
 800159e:	4413      	add	r3, r2
 80015a0:	b299      	uxth	r1, r3
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <takeData+0x238>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	7d7b      	ldrb	r3, [r7, #21]
 80015aa:	005a      	lsls	r2, r3, #1
 80015ac:	b20c      	sxth	r4, r1
 80015ae:	4925      	ldr	r1, [pc, #148]	; (8001644 <takeData+0x244>)
 80015b0:	4603      	mov	r3, r0
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4403      	add	r3, r0
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	4622      	mov	r2, r4
 80015bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		data[indexCircBuffer][2*i+1] += (uint16_t) (buffer[i] >> 16);
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <takeData+0x238>)
 80015c2:	881b      	ldrh	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	7d7b      	ldrb	r3, [r7, #21]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	491d      	ldr	r1, [pc, #116]	; (8001644 <takeData+0x244>)
 80015ce:	4603      	mov	r3, r0
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	4403      	add	r3, r0
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80015dc:	b29a      	uxth	r2, r3
 80015de:	7d7b      	ldrb	r3, [r7, #21]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	440b      	add	r3, r1
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	0c1b      	lsrs	r3, r3, #16
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4413      	add	r3, r2
 80015ee:	b299      	uxth	r1, r3
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <takeData+0x238>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	7d7b      	ldrb	r3, [r7, #21]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	b20c      	sxth	r4, r1
 80015fe:	4911      	ldr	r1, [pc, #68]	; (8001644 <takeData+0x244>)
 8001600:	4603      	mov	r3, r0
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4403      	add	r3, r0
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	4622      	mov	r2, r4
 800160c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t i = 0; i < CHANNELS;i++)
 8001610:	7d7b      	ldrb	r3, [r7, #21]
 8001612:	3301      	adds	r3, #1
 8001614:	757b      	strb	r3, [r7, #21]
 8001616:	7d7b      	ldrb	r3, [r7, #21]
 8001618:	2b02      	cmp	r3, #2
 800161a:	d9ac      	bls.n	8001576 <takeData+0x176>
	}
	oversamplingIndex++;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <takeData+0x234>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <takeData+0x234>)
 8001626:	701a      	strb	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	371c      	adds	r7, #28
 800162c:	46bd      	mov	sp, r7
 800162e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001632:	bf00      	nop
 8001634:	200012ba 	.word	0x200012ba
 8001638:	200012b8 	.word	0x200012b8
 800163c:	20000eb8 	.word	0x20000eb8
 8001640:	200012c8 	.word	0x200012c8
 8001644:	200002b8 	.word	0x200002b8
 8001648:	40010800 	.word	0x40010800
 800164c:	200012f8 	.word	0x200012f8
 8001650:	200012bc 	.word	0x200012bc

08001654 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	if(hadc)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <HAL_ADC_ConvHalfCpltCallback+0x14>
	{
		takeData(ADC_Buffer);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001664:	f7ff fecc 	bl	8001400 <takeData>
	}
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200002a0 	.word	0x200002a0

08001674 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	if(hadc)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <HAL_ADC_ConvCpltCallback+0x18>
	{
		takeData(halfOfADC_Buffer);
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <HAL_ADC_ConvCpltCallback+0x20>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff feba 	bl	8001400 <takeData>
	}
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000000 	.word	0x20000000

08001698 <__io_putchar>:


int __io_putchar(int ch)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d102      	bne.n	80016ac <__io_putchar+0x14>
    __io_putchar('\r');
 80016a6:	200d      	movs	r0, #13
 80016a8:	f7ff fff6 	bl	8001698 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80016ac:	1d39      	adds	r1, r7, #4
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	2201      	movs	r2, #1
 80016b4:	4803      	ldr	r0, [pc, #12]	; (80016c4 <__io_putchar+0x2c>)
 80016b6:	f002 fcbe 	bl	8004036 <HAL_UART_Transmit>

  return 1;
 80016ba:	2301      	movs	r3, #1
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20001300 	.word	0x20001300

080016c8 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d8:	bf0c      	ite	eq
 80016da:	2301      	moveq	r3, #1
 80016dc:	2300      	movne	r3, #0
 80016de:	b2db      	uxtb	r3, r3
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	e000e010 	.word	0xe000e010

080016ec <getCurrentMicros>:

uint32_t getCurrentMicros(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 80016f2:	f7ff ffe9 	bl	80016c8 <LL_SYSTICK_IsActiveCounterFlag>
  uint32_t m = HAL_GetTick();
 80016f6:	f000 fb95 	bl	8001e24 <HAL_GetTick>
 80016fa:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <getCurrentMicros+0x60>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	3301      	adds	r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <getCurrentMicros+0x60>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 800170e:	f7ff ffdb 	bl	80016c8 <LL_SYSTICK_IsActiveCounterFlag>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <getCurrentMicros+0x3c>
    m = HAL_GetTick();
 8001718:	f000 fb84 	bl	8001e24 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <getCurrentMicros+0x60>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001738:	fb03 f101 	mul.w	r1, r3, r1
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001742:	4413      	add	r3, r2
}
 8001744:	4618      	mov	r0, r3
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	e000e010 	.word	0xe000e010

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001754:	b09a      	sub	sp, #104	; 0x68
 8001756:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001758:	f000 fb0c 	bl	8001d74 <HAL_Init>

  /* USER CODE BEGIN Init */
  indexCircBuffer = 0;
 800175c:	4a6b      	ldr	r2, [pc, #428]	; (800190c <main+0x1bc>)
 800175e:	2300      	movs	r3, #0
 8001760:	8013      	strh	r3, [r2, #0]
  oversamplingIndex = 0;
 8001762:	4a6b      	ldr	r2, [pc, #428]	; (8001910 <main+0x1c0>)
 8001764:	2300      	movs	r3, #0
 8001766:	7013      	strb	r3, [r2, #0]
  correctionRMS = 0;
 8001768:	4a6a      	ldr	r2, [pc, #424]	; (8001914 <main+0x1c4>)
 800176a:	2300      	movs	r3, #0
 800176c:	7013      	strb	r3, [r2, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176e:	f000 f8d7 	bl	8001920 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001772:	f7ff fcdb 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8001776:	f7ff fcbb 	bl	80010f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800177a:	f000 fa6d 	bl	8001c58 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800177e:	f7ff fb07 	bl	8000d90 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001782:	f7ff fb71 	bl	8000e68 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 8001786:	f7ff fd3f 	bl	8001208 <ADC_Start>
  CalibrateZero();
 800178a:	f7ff fd61 	bl	8001250 <CalibrateZero>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1000);
 800178e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001792:	f000 fb51 	bl	8001e38 <HAL_Delay>
	  printf("RMS: %lf %lf %lf %lf %lf %lf\n", sqrt(RMS[0]/(BUFFERSIZE-correctionRMS)),sqrt(RMS[1]/(BUFFERSIZE-correctionRMS)),sqrt(RMS[2]/(BUFFERSIZE-correctionRMS)),sqrt(RMS[3]/(BUFFERSIZE-correctionRMS)),sqrt(RMS[4]/(BUFFERSIZE-correctionRMS)),sqrt(RMS[5]/(BUFFERSIZE-correctionRMS)));
 8001796:	4b60      	ldr	r3, [pc, #384]	; (8001918 <main+0x1c8>)
 8001798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800179c:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <main+0x1c4>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017a4:	17da      	asrs	r2, r3, #31
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80017a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017ae:	f7ff f96b 	bl	8000a88 <__aeabi_uldivmod>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7fe fe57 	bl	800046c <__aeabi_ul2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f005 fb6d 	bl	8006ea4 <sqrt>
 80017ca:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017ce:	4b52      	ldr	r3, [pc, #328]	; (8001918 <main+0x1c8>)
 80017d0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80017d4:	4b4f      	ldr	r3, [pc, #316]	; (8001914 <main+0x1c4>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80017dc:	17da      	asrs	r2, r3, #31
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
 80017e0:	637a      	str	r2, [r7, #52]	; 0x34
 80017e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017e6:	f7ff f94f 	bl	8000a88 <__aeabi_uldivmod>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7fe fe3b 	bl	800046c <__aeabi_ul2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	f005 fb51 	bl	8006ea4 <sqrt>
 8001802:	e9c7 0100 	strd	r0, r1, [r7]
 8001806:	4b44      	ldr	r3, [pc, #272]	; (8001918 <main+0x1c8>)
 8001808:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800180c:	4b41      	ldr	r3, [pc, #260]	; (8001914 <main+0x1c4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001814:	17da      	asrs	r2, r3, #31
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
 8001818:	62fa      	str	r2, [r7, #44]	; 0x2c
 800181a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800181e:	f7ff f933 	bl	8000a88 <__aeabi_uldivmod>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	f7fe fe1f 	bl	800046c <__aeabi_ul2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4610      	mov	r0, r2
 8001834:	4619      	mov	r1, r3
 8001836:	f005 fb35 	bl	8006ea4 <sqrt>
 800183a:	4682      	mov	sl, r0
 800183c:	468b      	mov	fp, r1
 800183e:	4b36      	ldr	r3, [pc, #216]	; (8001918 <main+0x1c8>)
 8001840:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001844:	4b33      	ldr	r3, [pc, #204]	; (8001914 <main+0x1c4>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800184c:	17da      	asrs	r2, r3, #31
 800184e:	623b      	str	r3, [r7, #32]
 8001850:	627a      	str	r2, [r7, #36]	; 0x24
 8001852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001856:	f7ff f917 	bl	8000a88 <__aeabi_uldivmod>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	f7fe fe03 	bl	800046c <__aeabi_ul2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	f005 fb19 	bl	8006ea4 <sqrt>
 8001872:	4680      	mov	r8, r0
 8001874:	4689      	mov	r9, r1
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <main+0x1c8>)
 8001878:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800187c:	4b25      	ldr	r3, [pc, #148]	; (8001914 <main+0x1c4>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001884:	17da      	asrs	r2, r3, #31
 8001886:	61bb      	str	r3, [r7, #24]
 8001888:	61fa      	str	r2, [r7, #28]
 800188a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800188e:	f7ff f8fb 	bl	8000a88 <__aeabi_uldivmod>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	f7fe fde7 	bl	800046c <__aeabi_ul2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f005 fafd 	bl	8006ea4 <sqrt>
 80018aa:	4604      	mov	r4, r0
 80018ac:	460d      	mov	r5, r1
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <main+0x1c8>)
 80018b0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <main+0x1c4>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	617a      	str	r2, [r7, #20]
 80018c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018c6:	f7ff f8df 	bl	8000a88 <__aeabi_uldivmod>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7fe fdcb 	bl	800046c <__aeabi_ul2d>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	f005 fae1 	bl	8006ea4 <sqrt>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80018ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80018ee:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80018f2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80018f6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018fa:	e9cd 3400 	strd	r3, r4, [sp]
 80018fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <main+0x1cc>)
 8001904:	f003 f994 	bl	8004c30 <iprintf>
  {
 8001908:	e741      	b.n	800178e <main+0x3e>
 800190a:	bf00      	nop
 800190c:	200012b8 	.word	0x200012b8
 8001910:	200012ba 	.word	0x200012ba
 8001914:	200012f8 	.word	0x200012f8
 8001918:	200012c8 	.word	0x200012c8
 800191c:	080070cc 	.word	0x080070cc

08001920 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b094      	sub	sp, #80	; 0x50
 8001924:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192a:	2228      	movs	r2, #40	; 0x28
 800192c:	2100      	movs	r1, #0
 800192e:	4618      	mov	r0, r3
 8001930:	f002 fd16 	bl	8004360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001944:	1d3b      	adds	r3, r7, #4
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001950:	2302      	movs	r3, #2
 8001952:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001954:	2301      	movs	r3, #1
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001958:	2310      	movs	r3, #16
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195c:	2302      	movs	r3, #2
 800195e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001960:	2300      	movs	r3, #0
 8001962:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001964:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001968:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	4618      	mov	r0, r3
 8001970:	f001 fd84 	bl	800347c <HAL_RCC_OscConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800197a:	f000 f828 	bl	80019ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197e:	230f      	movs	r3, #15
 8001980:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001982:	2302      	movs	r3, #2
 8001984:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800198a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800198e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2102      	movs	r1, #2
 800199a:	4618      	mov	r0, r3
 800199c:	f001 fff0 	bl	8003980 <HAL_RCC_ClockConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80019a6:	f000 f812 	bl	80019ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019aa:	2302      	movs	r3, #2
 80019ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80019ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80019b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 f97a 	bl	8003cb0 <HAL_RCCEx_PeriphCLKConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80019c2:	f000 f804 	bl	80019ce <Error_Handler>
  }
}
 80019c6:	bf00      	nop
 80019c8:	3750      	adds	r7, #80	; 0x50
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i
}
 80019d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <Error_Handler+0x8>

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_MspInit+0x5c>)
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	4a14      	ldr	r2, [pc, #80]	; (8001a34 <HAL_MspInit+0x5c>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6193      	str	r3, [r2, #24]
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_MspInit+0x5c>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_MspInit+0x5c>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <HAL_MspInit+0x5c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	61d3      	str	r3, [r2, #28]
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_MspInit+0x5c>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_MspInit+0x60>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_MspInit+0x60>)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bc80      	pop	{r7}
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40010000 	.word	0x40010000

08001a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <NMI_Handler+0x4>

08001a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a42:	b480      	push	{r7}
 8001a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <HardFault_Handler+0x4>

08001a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <MemManage_Handler+0x4>

08001a4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a52:	e7fe      	b.n	8001a52 <BusFault_Handler+0x4>

08001a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <UsageFault_Handler+0x4>

08001a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a76:	bf00      	nop
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 f9bd 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <DMA1_Channel1_IRQHandler+0x10>)
 8001a92:	f001 f9d1 	bl	8002e38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000025c 	.word	0x2000025c

08001aa0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001aa4:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <ADC1_2_IRQHandler+0x14>)
 8001aa6:	f000 fb71 	bl	800218c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001aaa:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <ADC1_2_IRQHandler+0x18>)
 8001aac:	f000 fb6e 	bl	800218c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200001fc 	.word	0x200001fc
 8001ab8:	2000022c 	.word	0x2000022c

08001abc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ac0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ac4:	f001 fcb8 	bl	8003438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <_kill>:

int _kill(int pid, int sig)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ae4:	f002 fc12 	bl	800430c <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2216      	movs	r2, #22
 8001aec:	601a      	str	r2, [r3, #0]
	return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_exit>:

void _exit (int status)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b02:	f04f 31ff 	mov.w	r1, #4294967295
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffe7 	bl	8001ada <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b0c:	e7fe      	b.n	8001b0c <_exit+0x12>

08001b0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e00a      	b.n	8001b36 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b20:	f3af 8000 	nop.w
 8001b24:	4601      	mov	r1, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf0      	blt.n	8001b20 <_read+0x12>
	}

return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e009      	b.n	8001b6e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fd98 	bl	8001698 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbf1      	blt.n	8001b5a <_write+0x12>
	}
	return len;
 8001b76:	687b      	ldr	r3, [r7, #4]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_close>:

int _close(int file)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <_isatty>:

int _isatty(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f002 fb7c 	bl	800430c <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20005000 	.word	0x20005000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	200012fc 	.word	0x200012fc
 8001c48:	20001358 	.word	0x20001358

08001c4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <MX_USART2_UART_Init+0x50>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <MX_USART2_UART_Init+0x4c>)
 8001c90:	f002 f984 	bl	8003f9c <HAL_UART_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c9a:	f7ff fe98 	bl	80019ce <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20001300 	.word	0x20001300
 8001ca8:	40004400 	.word	0x40004400

08001cac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a15      	ldr	r2, [pc, #84]	; (8001d1c <HAL_UART_MspInit+0x70>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d123      	bne.n	8001d14 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_UART_MspInit+0x74>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	4a13      	ldr	r2, [pc, #76]	; (8001d20 <HAL_UART_MspInit+0x74>)
 8001cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd6:	61d3      	str	r3, [r2, #28]
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <HAL_UART_MspInit+0x74>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_UART_MspInit+0x74>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_UART_MspInit+0x74>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_UART_MspInit+0x74>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2302      	movs	r3, #2
 8001d06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_UART_MspInit+0x78>)
 8001d10:	f001 f9c6 	bl	80030a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40004400 	.word	0x40004400
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010800 	.word	0x40010800

08001d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d2a:	490d      	ldr	r1, [pc, #52]	; (8001d60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d2c:	4a0d      	ldr	r2, [pc, #52]	; (8001d64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d30:	e002      	b.n	8001d38 <LoopCopyDataInit>

08001d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d36:	3304      	adds	r3, #4

08001d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d3c:	d3f9      	bcc.n	8001d32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d40:	4c0a      	ldr	r4, [pc, #40]	; (8001d6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d44:	e001      	b.n	8001d4a <LoopFillZerobss>

08001d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d48:	3204      	adds	r2, #4

08001d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d4c:	d3fb      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d4e:	f7ff ff7d 	bl	8001c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d52:	f002 fae1 	bl	8004318 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d56:	f7ff fcfb 	bl	8001750 <main>
  bx lr
 8001d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d60:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d64:	0800750c 	.word	0x0800750c
  ldr r2, =_sbss
 8001d68:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d6c:	20001358 	.word	0x20001358

08001d70 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <CAN1_RX1_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_Init+0x28>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_Init+0x28>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 ff5b 	bl	8002c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f000 f808 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff fe22 	bl	80019d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_InitTick+0x54>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x58>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 ff73 	bl	8002caa <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 ff3b 	bl	8002c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <HAL_InitTick+0x5c>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000004 	.word	0x20000004
 8001df8:	2000000c 	.word	0x2000000c
 8001dfc:	20000008 	.word	0x20000008

08001e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_IncTick+0x1c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <HAL_IncTick+0x20>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a03      	ldr	r2, [pc, #12]	; (8001e20 <HAL_IncTick+0x20>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	20001344 	.word	0x20001344

08001e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <HAL_GetTick+0x10>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20001344 	.word	0x20001344

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff fff0 	bl	8001e24 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffe0 	bl	8001e24 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000000c 	.word	0x2000000c

08001e80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e0be      	b.n	8002020 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff f82e 	bl	8000f20 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fb89 	bl	80025dc <ADC_ConversionStop_Disable>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 8099 	bne.w	800200e <HAL_ADC_Init+0x18e>
 8001edc:	7dfb      	ldrb	r3, [r7, #23]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 8095 	bne.w	800200e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eec:	f023 0302 	bic.w	r3, r3, #2
 8001ef0:	f043 0202 	orr.w	r2, r3, #2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f00:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	7b1b      	ldrb	r3, [r3, #12]
 8001f06:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f08:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f18:	d003      	beq.n	8001f22 <HAL_ADC_Init+0xa2>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d102      	bne.n	8001f28 <HAL_ADC_Init+0xa8>
 8001f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f26:	e000      	b.n	8001f2a <HAL_ADC_Init+0xaa>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	7d1b      	ldrb	r3, [r3, #20]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d119      	bne.n	8001f6c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7b1b      	ldrb	r3, [r3, #12]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	035a      	lsls	r2, r3, #13
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	e00b      	b.n	8001f6c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	f043 0201 	orr.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_ADC_Init+0x1a8>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	68b9      	ldr	r1, [r7, #8]
 8001f90:	430b      	orrs	r3, r1
 8001f92:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f9c:	d003      	beq.n	8001fa6 <HAL_ADC_Init+0x126>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d104      	bne.n	8001fb0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	051b      	lsls	r3, r3, #20
 8001fae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_ADC_Init+0x1ac>)
 8001fcc:	4013      	ands	r3, r2
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d10b      	bne.n	8001fec <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fea:	e018      	b.n	800201e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	f023 0312 	bic.w	r3, r3, #18
 8001ff4:	f043 0210 	orr.w	r2, r3, #16
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f043 0201 	orr.w	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800200c:	e007      	b.n	800201e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	f043 0210 	orr.w	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	ffe1f7fd 	.word	0xffe1f7fd
 800202c:	ff1f0efe 	.word	0xff1f0efe

08002030 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_Start+0x1a>
 8002046:	2302      	movs	r3, #2
 8002048:	e098      	b.n	800217c <HAL_ADC_Start+0x14c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 fa68 	bl	8002528 <ADC_Enable>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 8087 	bne.w	8002172 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_ADC_Start+0x154>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d105      	bne.n	800208e <HAL_ADC_Start+0x5e>
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_ADC_Start+0x158>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d115      	bne.n	80020ba <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d026      	beq.n	80020f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020b8:	e01d      	b.n	80020f6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a2f      	ldr	r2, [pc, #188]	; (8002188 <HAL_ADC_Start+0x158>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d004      	beq.n	80020da <HAL_ADC_Start+0xaa>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_ADC_Start+0x154>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10d      	bne.n	80020f6 <HAL_ADC_Start+0xc6>
 80020da:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_ADC_Start+0x158>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f023 0206 	bic.w	r2, r3, #6
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	62da      	str	r2, [r3, #44]	; 0x2c
 800210e:	e002      	b.n	8002116 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f06f 0202 	mvn.w	r2, #2
 8002126:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002132:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002136:	d113      	bne.n	8002160 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_ADC_Start+0x154>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d105      	bne.n	800214e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_ADC_Start+0x158>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d108      	bne.n	8002160 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	e00c      	b.n	800217a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e003      	b.n	800217a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40012800 	.word	0x40012800
 8002188:	40012400 	.word	0x40012400

0800218c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f003 0320 	and.w	r3, r3, #32
 800219e:	2b20      	cmp	r3, #32
 80021a0:	d140      	bne.n	8002224 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d139      	bne.n	8002224 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b4:	f003 0310 	and.w	r3, r3, #16
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d105      	bne.n	80021c8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021d2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021d6:	d11d      	bne.n	8002214 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d119      	bne.n	8002214 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0220 	bic.w	r2, r2, #32
 80021ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fa2d 	bl	8001674 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f06f 0212 	mvn.w	r2, #18
 8002222:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	2b80      	cmp	r3, #128	; 0x80
 8002230:	d14f      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b04      	cmp	r3, #4
 800223e:	d148      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	2b00      	cmp	r3, #0
 800224a:	d105      	bne.n	8002258 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002250:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002262:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002266:	d012      	beq.n	800228e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002272:	2b00      	cmp	r3, #0
 8002274:	d125      	bne.n	80022c2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002280:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002284:	d11d      	bne.n	80022c2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800228a:	2b00      	cmp	r3, #0
 800228c:	d119      	bne.n	80022c2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d105      	bne.n	80022c2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 fb94 	bl	80029f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f06f 020c 	mvn.w	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d114      	bne.n	800230a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10d      	bne.n	800230a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 f809 	bl	8002312 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0201 	mvn.w	r2, #1
 8002308:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
	...

08002338 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002350:	2b01      	cmp	r3, #1
 8002352:	d101      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x20>
 8002354:	2302      	movs	r3, #2
 8002356:	e0dc      	b.n	8002512 <HAL_ADC_ConfigChannel+0x1da>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d81c      	bhi.n	80023a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	3b05      	subs	r3, #5
 800237a:	221f      	movs	r2, #31
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	4019      	ands	r1, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4413      	add	r3, r2
 8002392:	3b05      	subs	r3, #5
 8002394:	fa00 f203 	lsl.w	r2, r0, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	635a      	str	r2, [r3, #52]	; 0x34
 80023a0:	e03c      	b.n	800241c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d81c      	bhi.n	80023e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	3b23      	subs	r3, #35	; 0x23
 80023bc:	221f      	movs	r2, #31
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43db      	mvns	r3, r3
 80023c4:	4019      	ands	r1, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	3b23      	subs	r3, #35	; 0x23
 80023d6:	fa00 f203 	lsl.w	r2, r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	631a      	str	r2, [r3, #48]	; 0x30
 80023e2:	e01b      	b.n	800241c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	4413      	add	r3, r2
 80023f4:	3b41      	subs	r3, #65	; 0x41
 80023f6:	221f      	movs	r2, #31
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4019      	ands	r1, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b41      	subs	r3, #65	; 0x41
 8002410:	fa00 f203 	lsl.w	r2, r0, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d91c      	bls.n	800245e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68d9      	ldr	r1, [r3, #12]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	3b1e      	subs	r3, #30
 8002436:	2207      	movs	r2, #7
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	4019      	ands	r1, r3
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6898      	ldr	r0, [r3, #8]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	3b1e      	subs	r3, #30
 8002450:	fa00 f203 	lsl.w	r2, r0, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	e019      	b.n	8002492 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6919      	ldr	r1, [r3, #16]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6898      	ldr	r0, [r3, #8]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	fa00 f203 	lsl.w	r2, r0, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b10      	cmp	r3, #16
 8002498:	d003      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800249e:	2b11      	cmp	r3, #17
 80024a0:	d132      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_ADC_ConfigChannel+0x1e4>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d125      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d126      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d11a      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <HAL_ADC_ConfigChannel+0x1e8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a13      	ldr	r2, [pc, #76]	; (8002524 <HAL_ADC_ConfigChannel+0x1ec>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	0c9a      	lsrs	r2, r3, #18
 80024de:	4613      	mov	r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024e8:	e002      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f9      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x1b2>
 80024f6:	e007      	b.n	8002508 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	f043 0220 	orr.w	r2, r3, #32
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002510:	7bfb      	ldrb	r3, [r7, #15]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr
 800251c:	40012400 	.word	0x40012400
 8002520:	20000004 	.word	0x20000004
 8002524:	431bde83 	.word	0x431bde83

08002528 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b01      	cmp	r3, #1
 8002544:	d040      	beq.n	80025c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0201 	orr.w	r2, r2, #1
 8002554:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <ADC_Enable+0xac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <ADC_Enable+0xb0>)
 800255c:	fba2 2303 	umull	r2, r3, r2, r3
 8002560:	0c9b      	lsrs	r3, r3, #18
 8002562:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002564:	e002      	b.n	800256c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3b01      	subs	r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002572:	f7ff fc57 	bl	8001e24 <HAL_GetTick>
 8002576:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002578:	e01f      	b.n	80025ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800257a:	f7ff fc53 	bl	8001e24 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d918      	bls.n	80025ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b01      	cmp	r3, #1
 8002594:	d011      	beq.n	80025ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	f043 0210 	orr.w	r2, r3, #16
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f043 0201 	orr.w	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e007      	b.n	80025ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d1d8      	bne.n	800257a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000004 	.word	0x20000004
 80025d8:	431bde83 	.word	0x431bde83

080025dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d12e      	bne.n	8002654 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002606:	f7ff fc0d 	bl	8001e24 <HAL_GetTick>
 800260a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800260c:	e01b      	b.n	8002646 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800260e:	f7ff fc09 	bl	8001e24 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d914      	bls.n	8002646 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d10d      	bne.n	8002646 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	f043 0210 	orr.w	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f043 0201 	orr.w	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e007      	b.n	8002656 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d0dc      	beq.n	800260e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002674:	2b00      	cmp	r3, #0
 8002676:	d127      	bne.n	80026c8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800268e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002692:	d115      	bne.n	80026c0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002698:	2b00      	cmp	r3, #0
 800269a:	d111      	bne.n	80026c0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7fe ffd7 	bl	8001674 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80026c6:	e004      	b.n	80026d2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}

080026da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b084      	sub	sp, #16
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7fe ffb3 	bl	8001654 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	f043 0204 	orr.w	r2, r3, #4
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fe01 	bl	8002324 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADCEx_Calibration_Start+0x1e>
 8002746:	2302      	movs	r3, #2
 8002748:	e095      	b.n	8002876 <HAL_ADCEx_Calibration_Start+0x14a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ff42 	bl	80025dc <ADC_ConversionStop_Disable>
 8002758:	4603      	mov	r3, r0
 800275a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 8084 	bne.w	800286c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800276c:	f023 0302 	bic.w	r3, r3, #2
 8002770:	f043 0202 	orr.w	r2, r3, #2
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002778:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_ADCEx_Calibration_Start+0x154>)
 800277a:	681c      	ldr	r4, [r3, #0]
 800277c:	2002      	movs	r0, #2
 800277e:	f001 fb4d 	bl	8003e1c <HAL_RCCEx_GetPeriphCLKFreq>
 8002782:	4603      	mov	r3, r0
 8002784:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002788:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800278a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800278c:	e002      	b.n	8002794 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	3b01      	subs	r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f9      	bne.n	800278e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fec4 	bl	8002528 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689a      	ldr	r2, [r3, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80027b0:	f7ff fb38 	bl	8001e24 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80027b6:	e01b      	b.n	80027f0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80027b8:	f7ff fb34 	bl	8001e24 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b0a      	cmp	r3, #10
 80027c4:	d914      	bls.n	80027f0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0308 	and.w	r3, r3, #8
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00d      	beq.n	80027f0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	f023 0312 	bic.w	r3, r3, #18
 80027dc:	f043 0210 	orr.w	r2, r3, #16
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e042      	b.n	8002876 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1dc      	bne.n	80027b8 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0204 	orr.w	r2, r2, #4
 800280c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800280e:	f7ff fb09 	bl	8001e24 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002814:	e01b      	b.n	800284e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002816:	f7ff fb05 	bl	8001e24 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b0a      	cmp	r3, #10
 8002822:	d914      	bls.n	800284e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0304 	and.w	r3, r3, #4
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00d      	beq.n	800284e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f023 0312 	bic.w	r3, r3, #18
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e013      	b.n	8002876 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1dc      	bne.n	8002816 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	f023 0303 	bic.w	r3, r3, #3
 8002864:	f043 0201 	orr.w	r2, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002874:	7dfb      	ldrb	r3, [r7, #23]
}
 8002876:	4618      	mov	r0, r3
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd90      	pop	{r4, r7, pc}
 800287e:	bf00      	nop
 8002880:	20000004 	.word	0x20000004

08002884 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b092      	sub	sp, #72	; 0x48
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	2230      	movs	r2, #48	; 0x30
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fd5e 	bl	8004360 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e08f      	b.n	80029d2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028ba:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80028bc:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80028c6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028ca:	d00b      	beq.n	80028e4 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e076      	b.n	80029d2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fe1f 	bl	8002528 <ADC_Enable>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 80028f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d107      	bne.n	8002908 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fe13 	bl	8002528 <ADC_Enable>
 8002902:	4603      	mov	r3, r0
 8002904:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002908:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800290c:	2b00      	cmp	r3, #0
 800290e:	d15a      	bne.n	80029c6 <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002916:	4013      	ands	r3, r2
 8002918:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	2b00      	cmp	r3, #0
 800292c:	d007      	beq.n	800293e <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002932:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002936:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a24      	ldr	r2, [pc, #144]	; (80029e4 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800295a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	4a22      	ldr	r2, [pc, #136]	; (80029ec <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0202 	mvn.w	r2, #2
 800296c:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a18      	ldr	r0, [r3, #32]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	334c      	adds	r3, #76	; 0x4c
 8002988:	4619      	mov	r1, r3
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f000 f9f3 	bl	8002d78 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800299c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029a0:	d108      	bne.n	80029b4 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	e00c      	b.n	80029ce <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	e003      	b.n	80029ce <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3748      	adds	r7, #72	; 0x48
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40012800 	.word	0x40012800
 80029e0:	ffeffcfe 	.word	0xffeffcfe
 80029e4:	0800265f 	.word	0x0800265f
 80029e8:	080026db 	.word	0x080026db
 80029ec:	080026f7 	.word	0x080026f7

080029f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
	...

08002a04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b090      	sub	sp, #64	; 0x40
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	2230      	movs	r2, #48	; 0x30
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f001 fc9f 	bl	8004360 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	e032      	b.n	8002a96 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8002a3a:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d016      	beq.n	8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d010      	beq.n	8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002a5a:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d10b      	bne.n	8002a78 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
 8002a76:	e008      	b.n	8002a8a <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f043 0220 	orr.w	r2, r3, #32
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8002a96:	4618      	mov	r0, r3
 8002a98:	3740      	adds	r7, #64	; 0x40
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40012800 	.word	0x40012800
 8002aa4:	40012400 	.word	0x40012400

08002aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <__NVIC_SetPriorityGrouping+0x44>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ad0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ad4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ada:	4a04      	ldr	r2, [pc, #16]	; (8002aec <__NVIC_SetPriorityGrouping+0x44>)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	60d3      	str	r3, [r2, #12]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002af4:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <__NVIC_GetPriorityGrouping+0x18>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	f003 0307 	and.w	r3, r3, #7
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	db0b      	blt.n	8002b36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	f003 021f 	and.w	r2, r3, #31
 8002b24:	4906      	ldr	r1, [pc, #24]	; (8002b40 <__NVIC_EnableIRQ+0x34>)
 8002b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bc80      	pop	{r7}
 8002b3e:	4770      	bx	lr
 8002b40:	e000e100 	.word	0xe000e100

08002b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	6039      	str	r1, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	db0a      	blt.n	8002b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	490c      	ldr	r1, [pc, #48]	; (8002b90 <__NVIC_SetPriority+0x4c>)
 8002b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b62:	0112      	lsls	r2, r2, #4
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	440b      	add	r3, r1
 8002b68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b6c:	e00a      	b.n	8002b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	4908      	ldr	r1, [pc, #32]	; (8002b94 <__NVIC_SetPriority+0x50>)
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	3b04      	subs	r3, #4
 8002b7c:	0112      	lsls	r2, r2, #4
 8002b7e:	b2d2      	uxtb	r2, r2
 8002b80:	440b      	add	r3, r1
 8002b82:	761a      	strb	r2, [r3, #24]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	e000e100 	.word	0xe000e100
 8002b94:	e000ed00 	.word	0xe000ed00

08002b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f1c3 0307 	rsb	r3, r3, #7
 8002bb2:	2b04      	cmp	r3, #4
 8002bb4:	bf28      	it	cs
 8002bb6:	2304      	movcs	r3, #4
 8002bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3304      	adds	r3, #4
 8002bbe:	2b06      	cmp	r3, #6
 8002bc0:	d902      	bls.n	8002bc8 <NVIC_EncodePriority+0x30>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3b03      	subs	r3, #3
 8002bc6:	e000      	b.n	8002bca <NVIC_EncodePriority+0x32>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	401a      	ands	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be0:	f04f 31ff 	mov.w	r1, #4294967295
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	43d9      	mvns	r1, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf0:	4313      	orrs	r3, r2
         );
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c0c:	d301      	bcc.n	8002c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e00f      	b.n	8002c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c12:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <SysTick_Config+0x40>)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c20:	f7ff ff90 	bl	8002b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <SysTick_Config+0x40>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c2a:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <SysTick_Config+0x40>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	e000e010 	.word	0xe000e010

08002c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7ff ff2d 	bl	8002aa8 <__NVIC_SetPriorityGrouping>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c68:	f7ff ff42 	bl	8002af0 <__NVIC_GetPriorityGrouping>
 8002c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	6978      	ldr	r0, [r7, #20]
 8002c74:	f7ff ff90 	bl	8002b98 <NVIC_EncodePriority>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff5f 	bl	8002b44 <__NVIC_SetPriority>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff35 	bl	8002b0c <__NVIC_EnableIRQ>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff ffa2 	bl	8002bfc <SysTick_Config>
 8002cb8:	4603      	mov	r3, r0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e043      	b.n	8002d62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_DMA_Init+0xa8>)
 8002ce2:	4413      	add	r3, r2
 8002ce4:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <HAL_DMA_Init+0xac>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	009a      	lsls	r2, r3, #2
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <HAL_DMA_Init+0xb0>)
 8002cf6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002d0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002d12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69db      	ldr	r3, [r3, #28]
 8002d3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	bffdfff8 	.word	0xbffdfff8
 8002d70:	cccccccd 	.word	0xcccccccd
 8002d74:	40020000 	.word	0x40020000

08002d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_DMA_Start_IT+0x20>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e04a      	b.n	8002e2e <HAL_DMA_Start_IT+0xb6>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d13a      	bne.n	8002e20 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 f938 	bl	8003044 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 020e 	orr.w	r2, r2, #14
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e00f      	b.n	8002e0e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0204 	bic.w	r2, r2, #4
 8002dfc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f042 020a 	orr.w	r2, r2, #10
 8002e0c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e005      	b.n	8002e2c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2204      	movs	r2, #4
 8002e56:	409a      	lsls	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d04f      	beq.n	8002f00 <HAL_DMA_IRQHandler+0xc8>
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d04a      	beq.n	8002f00 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d107      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0204 	bic.w	r2, r2, #4
 8002e86:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a66      	ldr	r2, [pc, #408]	; (8003028 <HAL_DMA_IRQHandler+0x1f0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d029      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0xae>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a65      	ldr	r2, [pc, #404]	; (800302c <HAL_DMA_IRQHandler+0x1f4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d022      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0xaa>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a63      	ldr	r2, [pc, #396]	; (8003030 <HAL_DMA_IRQHandler+0x1f8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01a      	beq.n	8002edc <HAL_DMA_IRQHandler+0xa4>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a62      	ldr	r2, [pc, #392]	; (8003034 <HAL_DMA_IRQHandler+0x1fc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d012      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x9e>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a60      	ldr	r2, [pc, #384]	; (8003038 <HAL_DMA_IRQHandler+0x200>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00a      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x98>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5f      	ldr	r2, [pc, #380]	; (800303c <HAL_DMA_IRQHandler+0x204>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d102      	bne.n	8002eca <HAL_DMA_IRQHandler+0x92>
 8002ec4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ec8:	e00e      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xb0>
 8002eca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ece:	e00b      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xb0>
 8002ed0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ed4:	e008      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xb0>
 8002ed6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eda:	e005      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xb0>
 8002edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee0:	e002      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xb0>
 8002ee2:	2340      	movs	r3, #64	; 0x40
 8002ee4:	e000      	b.n	8002ee8 <HAL_DMA_IRQHandler+0xb0>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	4a55      	ldr	r2, [pc, #340]	; (8003040 <HAL_DMA_IRQHandler+0x208>)
 8002eea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8094 	beq.w	800301e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002efe:	e08e      	b.n	800301e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2202      	movs	r2, #2
 8002f06:	409a      	lsls	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d056      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x186>
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d051      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0320 	and.w	r3, r3, #32
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 020a 	bic.w	r2, r2, #10
 8002f36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a38      	ldr	r2, [pc, #224]	; (8003028 <HAL_DMA_IRQHandler+0x1f0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d029      	beq.n	8002f9e <HAL_DMA_IRQHandler+0x166>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a37      	ldr	r2, [pc, #220]	; (800302c <HAL_DMA_IRQHandler+0x1f4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d022      	beq.n	8002f9a <HAL_DMA_IRQHandler+0x162>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a35      	ldr	r2, [pc, #212]	; (8003030 <HAL_DMA_IRQHandler+0x1f8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01a      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x15c>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a34      	ldr	r2, [pc, #208]	; (8003034 <HAL_DMA_IRQHandler+0x1fc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d012      	beq.n	8002f8e <HAL_DMA_IRQHandler+0x156>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a32      	ldr	r2, [pc, #200]	; (8003038 <HAL_DMA_IRQHandler+0x200>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d00a      	beq.n	8002f88 <HAL_DMA_IRQHandler+0x150>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a31      	ldr	r2, [pc, #196]	; (800303c <HAL_DMA_IRQHandler+0x204>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d102      	bne.n	8002f82 <HAL_DMA_IRQHandler+0x14a>
 8002f7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f80:	e00e      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x168>
 8002f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f86:	e00b      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x168>
 8002f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f8c:	e008      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x168>
 8002f8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f92:	e005      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x168>
 8002f94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f98:	e002      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x168>
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e000      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x168>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	4a27      	ldr	r2, [pc, #156]	; (8003040 <HAL_DMA_IRQHandler+0x208>)
 8002fa2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d034      	beq.n	800301e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002fbc:	e02f      	b.n	800301e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d028      	beq.n	8003020 <HAL_DMA_IRQHandler+0x1e8>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d023      	beq.n	8003020 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 020e 	bic.w	r2, r2, #14
 8002fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
    }
  }
  return;
 800301e:	bf00      	nop
 8003020:	bf00      	nop
}
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40020008 	.word	0x40020008
 800302c:	4002001c 	.word	0x4002001c
 8003030:	40020030 	.word	0x40020030
 8003034:	40020044 	.word	0x40020044
 8003038:	40020058 	.word	0x40020058
 800303c:	4002006c 	.word	0x4002006c
 8003040:	40020000 	.word	0x40020000

08003044 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d108      	bne.n	8003084 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003082:	e007      	b.n	8003094 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
	...

080030a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b08b      	sub	sp, #44	; 0x2c
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030aa:	2300      	movs	r3, #0
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030ae:	2300      	movs	r3, #0
 80030b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b2:	e169      	b.n	8003388 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030b4:	2201      	movs	r2, #1
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69fa      	ldr	r2, [r7, #28]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	f040 8158 	bne.w	8003382 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	4a9a      	ldr	r2, [pc, #616]	; (8003340 <HAL_GPIO_Init+0x2a0>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d05e      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 80030dc:	4a98      	ldr	r2, [pc, #608]	; (8003340 <HAL_GPIO_Init+0x2a0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d875      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 80030e2:	4a98      	ldr	r2, [pc, #608]	; (8003344 <HAL_GPIO_Init+0x2a4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d058      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 80030e8:	4a96      	ldr	r2, [pc, #600]	; (8003344 <HAL_GPIO_Init+0x2a4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d86f      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 80030ee:	4a96      	ldr	r2, [pc, #600]	; (8003348 <HAL_GPIO_Init+0x2a8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d052      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 80030f4:	4a94      	ldr	r2, [pc, #592]	; (8003348 <HAL_GPIO_Init+0x2a8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d869      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 80030fa:	4a94      	ldr	r2, [pc, #592]	; (800334c <HAL_GPIO_Init+0x2ac>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d04c      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 8003100:	4a92      	ldr	r2, [pc, #584]	; (800334c <HAL_GPIO_Init+0x2ac>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d863      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 8003106:	4a92      	ldr	r2, [pc, #584]	; (8003350 <HAL_GPIO_Init+0x2b0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d046      	beq.n	800319a <HAL_GPIO_Init+0xfa>
 800310c:	4a90      	ldr	r2, [pc, #576]	; (8003350 <HAL_GPIO_Init+0x2b0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d85d      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 8003112:	2b12      	cmp	r3, #18
 8003114:	d82a      	bhi.n	800316c <HAL_GPIO_Init+0xcc>
 8003116:	2b12      	cmp	r3, #18
 8003118:	d859      	bhi.n	80031ce <HAL_GPIO_Init+0x12e>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <HAL_GPIO_Init+0x80>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	0800319b 	.word	0x0800319b
 8003124:	08003175 	.word	0x08003175
 8003128:	08003187 	.word	0x08003187
 800312c:	080031c9 	.word	0x080031c9
 8003130:	080031cf 	.word	0x080031cf
 8003134:	080031cf 	.word	0x080031cf
 8003138:	080031cf 	.word	0x080031cf
 800313c:	080031cf 	.word	0x080031cf
 8003140:	080031cf 	.word	0x080031cf
 8003144:	080031cf 	.word	0x080031cf
 8003148:	080031cf 	.word	0x080031cf
 800314c:	080031cf 	.word	0x080031cf
 8003150:	080031cf 	.word	0x080031cf
 8003154:	080031cf 	.word	0x080031cf
 8003158:	080031cf 	.word	0x080031cf
 800315c:	080031cf 	.word	0x080031cf
 8003160:	080031cf 	.word	0x080031cf
 8003164:	0800317d 	.word	0x0800317d
 8003168:	08003191 	.word	0x08003191
 800316c:	4a79      	ldr	r2, [pc, #484]	; (8003354 <HAL_GPIO_Init+0x2b4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d013      	beq.n	800319a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003172:	e02c      	b.n	80031ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	623b      	str	r3, [r7, #32]
          break;
 800317a:	e029      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	3304      	adds	r3, #4
 8003182:	623b      	str	r3, [r7, #32]
          break;
 8003184:	e024      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	3308      	adds	r3, #8
 800318c:	623b      	str	r3, [r7, #32]
          break;
 800318e:	e01f      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	330c      	adds	r3, #12
 8003196:	623b      	str	r3, [r7, #32]
          break;
 8003198:	e01a      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80031a2:	2304      	movs	r3, #4
 80031a4:	623b      	str	r3, [r7, #32]
          break;
 80031a6:	e013      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d105      	bne.n	80031bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031b0:	2308      	movs	r3, #8
 80031b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69fa      	ldr	r2, [r7, #28]
 80031b8:	611a      	str	r2, [r3, #16]
          break;
 80031ba:	e009      	b.n	80031d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80031bc:	2308      	movs	r3, #8
 80031be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	615a      	str	r2, [r3, #20]
          break;
 80031c6:	e003      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80031c8:	2300      	movs	r3, #0
 80031ca:	623b      	str	r3, [r7, #32]
          break;
 80031cc:	e000      	b.n	80031d0 <HAL_GPIO_Init+0x130>
          break;
 80031ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	2bff      	cmp	r3, #255	; 0xff
 80031d4:	d801      	bhi.n	80031da <HAL_GPIO_Init+0x13a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	e001      	b.n	80031de <HAL_GPIO_Init+0x13e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3304      	adds	r3, #4
 80031de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	2bff      	cmp	r3, #255	; 0xff
 80031e4:	d802      	bhi.n	80031ec <HAL_GPIO_Init+0x14c>
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	e002      	b.n	80031f2 <HAL_GPIO_Init+0x152>
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	3b08      	subs	r3, #8
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	210f      	movs	r1, #15
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	401a      	ands	r2, r3
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	fa01 f303 	lsl.w	r3, r1, r3
 800320c:	431a      	orrs	r2, r3
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 80b1 	beq.w	8003382 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003220:	4b4d      	ldr	r3, [pc, #308]	; (8003358 <HAL_GPIO_Init+0x2b8>)
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	4a4c      	ldr	r2, [pc, #304]	; (8003358 <HAL_GPIO_Init+0x2b8>)
 8003226:	f043 0301 	orr.w	r3, r3, #1
 800322a:	6193      	str	r3, [r2, #24]
 800322c:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_GPIO_Init+0x2b8>)
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
 8003236:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003238:	4a48      	ldr	r2, [pc, #288]	; (800335c <HAL_GPIO_Init+0x2bc>)
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	089b      	lsrs	r3, r3, #2
 800323e:	3302      	adds	r3, #2
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	f003 0303 	and.w	r3, r3, #3
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	4013      	ands	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a40      	ldr	r2, [pc, #256]	; (8003360 <HAL_GPIO_Init+0x2c0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <HAL_GPIO_Init+0x1ec>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a3f      	ldr	r2, [pc, #252]	; (8003364 <HAL_GPIO_Init+0x2c4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00d      	beq.n	8003288 <HAL_GPIO_Init+0x1e8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3e      	ldr	r2, [pc, #248]	; (8003368 <HAL_GPIO_Init+0x2c8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <HAL_GPIO_Init+0x1e4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3d      	ldr	r2, [pc, #244]	; (800336c <HAL_GPIO_Init+0x2cc>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_GPIO_Init+0x1e0>
 800327c:	2303      	movs	r3, #3
 800327e:	e006      	b.n	800328e <HAL_GPIO_Init+0x1ee>
 8003280:	2304      	movs	r3, #4
 8003282:	e004      	b.n	800328e <HAL_GPIO_Init+0x1ee>
 8003284:	2302      	movs	r3, #2
 8003286:	e002      	b.n	800328e <HAL_GPIO_Init+0x1ee>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_GPIO_Init+0x1ee>
 800328c:	2300      	movs	r3, #0
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	f002 0203 	and.w	r2, r2, #3
 8003294:	0092      	lsls	r2, r2, #2
 8003296:	4093      	lsls	r3, r2
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800329e:	492f      	ldr	r1, [pc, #188]	; (800335c <HAL_GPIO_Init+0x2bc>)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	089b      	lsrs	r3, r3, #2
 80032a4:	3302      	adds	r3, #2
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80032b8:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	492c      	ldr	r1, [pc, #176]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	600b      	str	r3, [r1, #0]
 80032c4:	e006      	b.n	80032d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032c6:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	4928      	ldr	r1, [pc, #160]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4922      	ldr	r1, [pc, #136]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	604b      	str	r3, [r1, #4]
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	491e      	ldr	r1, [pc, #120]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	4918      	ldr	r1, [pc, #96]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]
 8003314:	e006      	b.n	8003324 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003316:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	43db      	mvns	r3, r3
 800331e:	4914      	ldr	r1, [pc, #80]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 8003320:	4013      	ands	r3, r2
 8003322:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d021      	beq.n	8003374 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_GPIO_Init+0x2d0>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4313      	orrs	r3, r2
 800333a:	60cb      	str	r3, [r1, #12]
 800333c:	e021      	b.n	8003382 <HAL_GPIO_Init+0x2e2>
 800333e:	bf00      	nop
 8003340:	10320000 	.word	0x10320000
 8003344:	10310000 	.word	0x10310000
 8003348:	10220000 	.word	0x10220000
 800334c:	10210000 	.word	0x10210000
 8003350:	10120000 	.word	0x10120000
 8003354:	10110000 	.word	0x10110000
 8003358:	40021000 	.word	0x40021000
 800335c:	40010000 	.word	0x40010000
 8003360:	40010800 	.word	0x40010800
 8003364:	40010c00 	.word	0x40010c00
 8003368:	40011000 	.word	0x40011000
 800336c:	40011400 	.word	0x40011400
 8003370:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003374:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <HAL_GPIO_Init+0x304>)
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	43db      	mvns	r3, r3
 800337c:	4909      	ldr	r1, [pc, #36]	; (80033a4 <HAL_GPIO_Init+0x304>)
 800337e:	4013      	ands	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	3301      	adds	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	f47f ae8e 	bne.w	80030b4 <HAL_GPIO_Init+0x14>
  }
}
 8003398:	bf00      	nop
 800339a:	bf00      	nop
 800339c:	372c      	adds	r7, #44	; 0x2c
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	40010400 	.word	0x40010400

080033a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	4013      	ands	r3, r2
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
 80033c4:	e001      	b.n	80033ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bc80      	pop	{r7}
 80033d4:	4770      	bx	lr

080033d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	807b      	strh	r3, [r7, #2]
 80033e2:	4613      	mov	r3, r2
 80033e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033e6:	787b      	ldrb	r3, [r7, #1]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ec:	887a      	ldrh	r2, [r7, #2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033f2:	e003      	b.n	80033fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033f4:	887b      	ldrh	r3, [r7, #2]
 80033f6:	041a      	lsls	r2, r3, #16
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	611a      	str	r2, [r3, #16]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003418:	887a      	ldrh	r2, [r7, #2]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4013      	ands	r3, r2
 800341e:	041a      	lsls	r2, r3, #16
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	43d9      	mvns	r1, r3
 8003424:	887b      	ldrh	r3, [r7, #2]
 8003426:	400b      	ands	r3, r1
 8003428:	431a      	orrs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	611a      	str	r2, [r3, #16]
}
 800342e:	bf00      	nop
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	4618      	mov	r0, r3
 8003458:	f000 f806 	bl	8003468 <HAL_GPIO_EXTI_Callback>
  }
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40010400 	.word	0x40010400

08003468 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr

0800347c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e272      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 8087 	beq.w	80035aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800349c:	4b92      	ldr	r3, [pc, #584]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d00c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034a8:	4b8f      	ldr	r3, [pc, #572]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d112      	bne.n	80034da <HAL_RCC_OscConfig+0x5e>
 80034b4:	4b8c      	ldr	r3, [pc, #560]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d10b      	bne.n	80034da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c2:	4b89      	ldr	r3, [pc, #548]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d06c      	beq.n	80035a8 <HAL_RCC_OscConfig+0x12c>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d168      	bne.n	80035a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e24c      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x76>
 80034e4:	4b80      	ldr	r3, [pc, #512]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a7f      	ldr	r2, [pc, #508]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80034ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	e02e      	b.n	8003550 <HAL_RCC_OscConfig+0xd4>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0x98>
 80034fa:	4b7b      	ldr	r3, [pc, #492]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7a      	ldr	r2, [pc, #488]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b78      	ldr	r3, [pc, #480]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a77      	ldr	r2, [pc, #476]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800350c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e01d      	b.n	8003550 <HAL_RCC_OscConfig+0xd4>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800351c:	d10c      	bne.n	8003538 <HAL_RCC_OscConfig+0xbc>
 800351e:	4b72      	ldr	r3, [pc, #456]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a71      	ldr	r2, [pc, #452]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	4b6f      	ldr	r3, [pc, #444]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a6e      	ldr	r2, [pc, #440]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e00b      	b.n	8003550 <HAL_RCC_OscConfig+0xd4>
 8003538:	4b6b      	ldr	r3, [pc, #428]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800353e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a67      	ldr	r2, [pc, #412]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800354a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d013      	beq.n	8003580 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fc64 	bl	8001e24 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003560:	f7fe fc60 	bl	8001e24 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b64      	cmp	r3, #100	; 0x64
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e200      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b5d      	ldr	r3, [pc, #372]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0xe4>
 800357e:	e014      	b.n	80035aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fc50 	bl	8001e24 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fe fc4c 	bl	8001e24 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	; 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e1ec      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359a:	4b53      	ldr	r3, [pc, #332]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x10c>
 80035a6:	e000      	b.n	80035aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d063      	beq.n	800367e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035b6:	4b4c      	ldr	r3, [pc, #304]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035c2:	4b49      	ldr	r3, [pc, #292]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d11c      	bne.n	8003608 <HAL_RCC_OscConfig+0x18c>
 80035ce:	4b46      	ldr	r3, [pc, #280]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d116      	bne.n	8003608 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	4b43      	ldr	r3, [pc, #268]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d005      	beq.n	80035f2 <HAL_RCC_OscConfig+0x176>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e1c0      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f2:	4b3d      	ldr	r3, [pc, #244]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4939      	ldr	r1, [pc, #228]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003602:	4313      	orrs	r3, r2
 8003604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003606:	e03a      	b.n	800367e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d020      	beq.n	8003652 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003610:	4b36      	ldr	r3, [pc, #216]	; (80036ec <HAL_RCC_OscConfig+0x270>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fe fc05 	bl	8001e24 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361e:	f7fe fc01 	bl	8001e24 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1a1      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	4927      	ldr	r1, [pc, #156]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	600b      	str	r3, [r1, #0]
 8003650:	e015      	b.n	800367e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003652:	4b26      	ldr	r3, [pc, #152]	; (80036ec <HAL_RCC_OscConfig+0x270>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fe fbe4 	bl	8001e24 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003660:	f7fe fbe0 	bl	8001e24 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e180      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d03a      	beq.n	8003700 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d019      	beq.n	80036c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003692:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <HAL_RCC_OscConfig+0x274>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003698:	f7fe fbc4 	bl	8001e24 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a0:	f7fe fbc0 	bl	8001e24 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e160      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036be:	2001      	movs	r0, #1
 80036c0:	f000 fad8 	bl	8003c74 <RCC_Delay>
 80036c4:	e01c      	b.n	8003700 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_RCC_OscConfig+0x274>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe fbaa 	bl	8001e24 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d2:	e00f      	b.n	80036f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d4:	f7fe fba6 	bl	8001e24 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d908      	bls.n	80036f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e146      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	42420000 	.word	0x42420000
 80036f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f4:	4b92      	ldr	r3, [pc, #584]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e9      	bne.n	80036d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80a6 	beq.w	800385a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370e:	2300      	movs	r3, #0
 8003710:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003712:	4b8b      	ldr	r3, [pc, #556]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10d      	bne.n	800373a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800371e:	4b88      	ldr	r3, [pc, #544]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	4a87      	ldr	r2, [pc, #540]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003728:	61d3      	str	r3, [r2, #28]
 800372a:	4b85      	ldr	r3, [pc, #532]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	60bb      	str	r3, [r7, #8]
 8003734:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003736:	2301      	movs	r3, #1
 8003738:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800373a:	4b82      	ldr	r3, [pc, #520]	; (8003944 <HAL_RCC_OscConfig+0x4c8>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d118      	bne.n	8003778 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003746:	4b7f      	ldr	r3, [pc, #508]	; (8003944 <HAL_RCC_OscConfig+0x4c8>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a7e      	ldr	r2, [pc, #504]	; (8003944 <HAL_RCC_OscConfig+0x4c8>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003752:	f7fe fb67 	bl	8001e24 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375a:	f7fe fb63 	bl	8001e24 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b64      	cmp	r3, #100	; 0x64
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e103      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800376c:	4b75      	ldr	r3, [pc, #468]	; (8003944 <HAL_RCC_OscConfig+0x4c8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d106      	bne.n	800378e <HAL_RCC_OscConfig+0x312>
 8003780:	4b6f      	ldr	r3, [pc, #444]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4a6e      	ldr	r2, [pc, #440]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6213      	str	r3, [r2, #32]
 800378c:	e02d      	b.n	80037ea <HAL_RCC_OscConfig+0x36e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10c      	bne.n	80037b0 <HAL_RCC_OscConfig+0x334>
 8003796:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	4a69      	ldr	r2, [pc, #420]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6213      	str	r3, [r2, #32]
 80037a2:	4b67      	ldr	r3, [pc, #412]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	4a66      	ldr	r2, [pc, #408]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	6213      	str	r3, [r2, #32]
 80037ae:	e01c      	b.n	80037ea <HAL_RCC_OscConfig+0x36e>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d10c      	bne.n	80037d2 <HAL_RCC_OscConfig+0x356>
 80037b8:	4b61      	ldr	r3, [pc, #388]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4a60      	ldr	r2, [pc, #384]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	f043 0304 	orr.w	r3, r3, #4
 80037c2:	6213      	str	r3, [r2, #32]
 80037c4:	4b5e      	ldr	r3, [pc, #376]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	4a5d      	ldr	r2, [pc, #372]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	6213      	str	r3, [r2, #32]
 80037d0:	e00b      	b.n	80037ea <HAL_RCC_OscConfig+0x36e>
 80037d2:	4b5b      	ldr	r3, [pc, #364]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	4a5a      	ldr	r2, [pc, #360]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	6213      	str	r3, [r2, #32]
 80037de:	4b58      	ldr	r3, [pc, #352]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4a57      	ldr	r2, [pc, #348]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d015      	beq.n	800381e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f2:	f7fe fb17 	bl	8001e24 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f8:	e00a      	b.n	8003810 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fa:	f7fe fb13 	bl	8001e24 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	f241 3288 	movw	r2, #5000	; 0x1388
 8003808:	4293      	cmp	r3, r2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e0b1      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003810:	4b4b      	ldr	r3, [pc, #300]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ee      	beq.n	80037fa <HAL_RCC_OscConfig+0x37e>
 800381c:	e014      	b.n	8003848 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381e:	f7fe fb01 	bl	8001e24 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe fafd 	bl	8001e24 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e09b      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383c:	4b40      	ldr	r3, [pc, #256]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d1ee      	bne.n	8003826 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003848:	7dfb      	ldrb	r3, [r7, #23]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d105      	bne.n	800385a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800384e:	4b3c      	ldr	r3, [pc, #240]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	4a3b      	ldr	r2, [pc, #236]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003858:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f000 8087 	beq.w	8003972 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003864:	4b36      	ldr	r3, [pc, #216]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d061      	beq.n	8003934 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d146      	bne.n	8003906 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003878:	4b33      	ldr	r3, [pc, #204]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800387a:	2200      	movs	r2, #0
 800387c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fe fad1 	bl	8001e24 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003886:	f7fe facd 	bl	8001e24 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e06d      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003898:	4b29      	ldr	r3, [pc, #164]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f0      	bne.n	8003886 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d108      	bne.n	80038c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	4921      	ldr	r1, [pc, #132]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c0:	4b1f      	ldr	r3, [pc, #124]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a19      	ldr	r1, [r3, #32]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	430b      	orrs	r3, r1
 80038d2:	491b      	ldr	r1, [pc, #108]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d8:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038da:	2201      	movs	r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038de:	f7fe faa1 	bl	8001e24 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e6:	f7fe fa9d 	bl	8001e24 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e03d      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d0f0      	beq.n	80038e6 <HAL_RCC_OscConfig+0x46a>
 8003904:	e035      	b.n	8003972 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390c:	f7fe fa8a 	bl	8001e24 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003914:	f7fe fa86 	bl	8001e24 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e026      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003926:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x498>
 8003932:	e01e      	b.n	8003972 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d107      	bne.n	800394c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e019      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
 8003940:	40021000 	.word	0x40021000
 8003944:	40007000 	.word	0x40007000
 8003948:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x500>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	429a      	cmp	r2, r3
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d001      	beq.n	8003972 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40021000 	.word	0x40021000

08003980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0d0      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b6a      	ldr	r3, [pc, #424]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d910      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a2:	4b67      	ldr	r3, [pc, #412]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f023 0207 	bic.w	r2, r3, #7
 80039aa:	4965      	ldr	r1, [pc, #404]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b63      	ldr	r3, [pc, #396]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0b8      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d020      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a58      	ldr	r2, [pc, #352]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039f4:	4b53      	ldr	r3, [pc, #332]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a52      	ldr	r2, [pc, #328]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a00:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	494d      	ldr	r1, [pc, #308]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d040      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d115      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e07f      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	4b41      	ldr	r3, [pc, #260]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e073      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a4e:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06b      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a5e:	4b39      	ldr	r3, [pc, #228]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f023 0203 	bic.w	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4936      	ldr	r1, [pc, #216]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a70:	f7fe f9d8 	bl	8001e24 <HAL_GetTick>
 8003a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	e00a      	b.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fe f9d4 	bl	8001e24 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e053      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 020c 	and.w	r2, r3, #12
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d1eb      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d210      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aae:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0207 	bic.w	r2, r3, #7
 8003ab6:	4922      	ldr	r1, [pc, #136]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b20      	ldr	r3, [pc, #128]	; (8003b40 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e032      	b.n	8003b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4916      	ldr	r1, [pc, #88]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0308 	and.w	r3, r3, #8
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003afa:	4b12      	ldr	r3, [pc, #72]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	490e      	ldr	r1, [pc, #56]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b0e:	f000 f821 	bl	8003b54 <HAL_RCC_GetSysClockFreq>
 8003b12:	4602      	mov	r2, r0
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	490a      	ldr	r1, [pc, #40]	; (8003b48 <HAL_RCC_ClockConfig+0x1c8>)
 8003b20:	5ccb      	ldrb	r3, [r1, r3]
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	4a09      	ldr	r2, [pc, #36]	; (8003b4c <HAL_RCC_ClockConfig+0x1cc>)
 8003b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <HAL_RCC_ClockConfig+0x1d0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe f936 	bl	8001da0 <HAL_InitTick>

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	40022000 	.word	0x40022000
 8003b44:	40021000 	.word	0x40021000
 8003b48:	0800710c 	.word	0x0800710c
 8003b4c:	20000004 	.word	0x20000004
 8003b50:	20000008 	.word	0x20000008

08003b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b54:	b490      	push	{r4, r7}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b5a:	4b29      	ldr	r3, [pc, #164]	; (8003c00 <HAL_RCC_GetSysClockFreq+0xac>)
 8003b5c:	1d3c      	adds	r4, r7, #4
 8003b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b64:	f240 2301 	movw	r3, #513	; 0x201
 8003b68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b7e:	4b21      	ldr	r3, [pc, #132]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 030c 	and.w	r3, r3, #12
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d002      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x40>
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d003      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x46>
 8003b92:	e02b      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b96:	623b      	str	r3, [r7, #32]
      break;
 8003b98:	e02b      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	0c9b      	lsrs	r3, r3, #18
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	3328      	adds	r3, #40	; 0x28
 8003ba4:	443b      	add	r3, r7
 8003ba6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003baa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d012      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	0c5b      	lsrs	r3, r3, #17
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	3328      	adds	r3, #40	; 0x28
 8003bc2:	443b      	add	r3, r7
 8003bc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bce:	fb03 f202 	mul.w	r2, r3, r2
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bda:	e004      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	623b      	str	r3, [r7, #32]
      break;
 8003bea:	e002      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bee:	623b      	str	r3, [r7, #32]
      break;
 8003bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3728      	adds	r7, #40	; 0x28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc90      	pop	{r4, r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	080070ec 	.word	0x080070ec
 8003c04:	40021000 	.word	0x40021000
 8003c08:	007a1200 	.word	0x007a1200
 8003c0c:	003d0900 	.word	0x003d0900

08003c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c14:	4b02      	ldr	r3, [pc, #8]	; (8003c20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c16:	681b      	ldr	r3, [r3, #0]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bc80      	pop	{r7}
 8003c1e:	4770      	bx	lr
 8003c20:	20000004 	.word	0x20000004

08003c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c28:	f7ff fff2 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	4903      	ldr	r1, [pc, #12]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	0800711c 	.word	0x0800711c

08003c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c50:	f7ff ffde 	bl	8003c10 <HAL_RCC_GetHCLKFreq>
 8003c54:	4602      	mov	r2, r0
 8003c56:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	0adb      	lsrs	r3, r3, #11
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	4903      	ldr	r1, [pc, #12]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c62:	5ccb      	ldrb	r3, [r1, r3]
 8003c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	0800711c 	.word	0x0800711c

08003c74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <RCC_Delay+0x34>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a0a      	ldr	r2, [pc, #40]	; (8003cac <RCC_Delay+0x38>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	0a5b      	lsrs	r3, r3, #9
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	fb02 f303 	mul.w	r3, r2, r3
 8003c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c90:	bf00      	nop
  }
  while (Delay --);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	1e5a      	subs	r2, r3, #1
 8003c96:	60fa      	str	r2, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1f9      	bne.n	8003c90 <RCC_Delay+0x1c>
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr
 8003ca8:	20000004 	.word	0x20000004
 8003cac:	10624dd3 	.word	0x10624dd3

08003cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d07d      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cd0:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10d      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b4c      	ldr	r3, [pc, #304]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	4a4b      	ldr	r2, [pc, #300]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	61d3      	str	r3, [r2, #28]
 8003ce8:	4b49      	ldr	r3, [pc, #292]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	4b46      	ldr	r3, [pc, #280]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d118      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d04:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a42      	ldr	r2, [pc, #264]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d10:	f7fe f888 	bl	8001e24 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d16:	e008      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d18:	f7fe f884 	bl	8001e24 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e06d      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0f0      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d36:	4b36      	ldr	r3, [pc, #216]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d02e      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d027      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d54:	4b2e      	ldr	r3, [pc, #184]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d5e:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d64:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d6a:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d014      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7a:	f7fe f853 	bl	8001e24 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d80:	e00a      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d82:	f7fe f84f 	bl	8001e24 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e036      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d98:	4b1d      	ldr	r3, [pc, #116]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ee      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4917      	ldr	r1, [pc, #92]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d105      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dbc:	4b14      	ldr	r3, [pc, #80]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	4a13      	ldr	r2, [pc, #76]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dd4:	4b0e      	ldr	r3, [pc, #56]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	490b      	ldr	r1, [pc, #44]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d008      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003df2:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	4904      	ldr	r1, [pc, #16]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	42420440 	.word	0x42420440

08003e1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b08d      	sub	sp, #52	; 0x34
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e24:	4b58      	ldr	r3, [pc, #352]	; (8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003e26:	f107 040c 	add.w	r4, r7, #12
 8003e2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e30:	f240 2301 	movw	r3, #513	; 0x201
 8003e34:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e3e:	2300      	movs	r3, #0
 8003e40:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	61fb      	str	r3, [r7, #28]
 8003e46:	2300      	movs	r3, #0
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b10      	cmp	r3, #16
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b10      	cmp	r3, #16
 8003e54:	f200 808e 	bhi.w	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d049      	beq.n	8003ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d079      	beq.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e64:	e086      	b.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8003e66:	4b49      	ldr	r3, [pc, #292]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e6c:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d07f      	beq.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	0c9b      	lsrs	r3, r3, #18
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	3330      	adds	r3, #48	; 0x30
 8003e82:	443b      	add	r3, r7
 8003e84:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003e88:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d017      	beq.n	8003ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e94:	4b3d      	ldr	r3, [pc, #244]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	0c5b      	lsrs	r3, r3, #17
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	3330      	adds	r3, #48	; 0x30
 8003ea0:	443b      	add	r3, r7
 8003ea2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00d      	beq.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003eb2:	4a37      	ldr	r2, [pc, #220]	; (8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec2:	e004      	b.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	4a33      	ldr	r2, [pc, #204]	; (8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ec8:	fb02 f303 	mul.w	r3, r2, r3
 8003ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ece:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eda:	d102      	bne.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ee0:	e04a      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4a2c      	ldr	r2, [pc, #176]	; (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	085b      	lsrs	r3, r3, #1
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003ef0:	e042      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8003ef2:	4b26      	ldr	r3, [pc, #152]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f02:	d108      	bne.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8003f0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f14:	e01f      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f20:	d109      	bne.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8003f22:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8003f2e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f34:	e00f      	b.n	8003f56 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f40:	d11c      	bne.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003f42:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8003f4e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f52:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f54:	e012      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8003f56:	e011      	b.n	8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f58:	f7ff fe78 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	0b9b      	lsrs	r3, r3, #14
 8003f64:	f003 0303 	and.w	r3, r3, #3
 8003f68:	3301      	adds	r3, #1
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8003f7c:	bf00      	nop
    }
  }
  return (frequency);
 8003f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3734      	adds	r7, #52	; 0x34
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd90      	pop	{r4, r7, pc}
 8003f88:	080070fc 	.word	0x080070fc
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	007a1200 	.word	0x007a1200
 8003f94:	003d0900 	.word	0x003d0900
 8003f98:	aaaaaaab 	.word	0xaaaaaaab

08003f9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e03f      	b.n	800402e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fd fe72 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2224      	movs	r2, #36	; 0x24
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f905 	bl	80041f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695a      	ldr	r2, [r3, #20]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004004:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004014:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b08a      	sub	sp, #40	; 0x28
 800403a:	af02      	add	r7, sp, #8
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	4613      	mov	r3, r2
 8004044:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b20      	cmp	r3, #32
 8004054:	d17c      	bne.n	8004150 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d002      	beq.n	8004062 <HAL_UART_Transmit+0x2c>
 800405c:	88fb      	ldrh	r3, [r7, #6]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e075      	b.n	8004152 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d101      	bne.n	8004074 <HAL_UART_Transmit+0x3e>
 8004070:	2302      	movs	r3, #2
 8004072:	e06e      	b.n	8004152 <HAL_UART_Transmit+0x11c>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2221      	movs	r2, #33	; 0x21
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408a:	f7fd fecb 	bl	8001e24 <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	88fa      	ldrh	r2, [r7, #6]
 800409a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a4:	d108      	bne.n	80040b8 <HAL_UART_Transmit+0x82>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d104      	bne.n	80040b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	e003      	b.n	80040c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040c8:	e02a      	b.n	8004120 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2200      	movs	r2, #0
 80040d2:	2180      	movs	r1, #128	; 0x80
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f840 	bl	800415a <UART_WaitOnFlagUntilTimeout>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e036      	b.n	8004152 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3302      	adds	r3, #2
 80040fe:	61bb      	str	r3, [r7, #24]
 8004100:	e007      	b.n	8004112 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004124:	b29b      	uxth	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1cf      	bne.n	80040ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	2140      	movs	r1, #64	; 0x40
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f810 	bl	800415a <UART_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e006      	b.n	8004152 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2220      	movs	r2, #32
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3720      	adds	r7, #32
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4613      	mov	r3, r2
 8004168:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800416a:	e02c      	b.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d028      	beq.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <UART_WaitOnFlagUntilTimeout+0x30>
 800417a:	f7fd fe53 	bl	8001e24 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	429a      	cmp	r2, r3
 8004188:	d21d      	bcs.n	80041c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004198:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695a      	ldr	r2, [r3, #20]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0201 	bic.w	r2, r2, #1
 80041a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2220      	movs	r2, #32
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2220      	movs	r2, #32
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e00f      	b.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4013      	ands	r3, r2
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	bf0c      	ite	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	2300      	movne	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	461a      	mov	r2, r3
 80041de:	79fb      	ldrb	r3, [r7, #7]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0c3      	beq.n	800416c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800422a:	f023 030c 	bic.w	r3, r3, #12
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	68b9      	ldr	r1, [r7, #8]
 8004234:	430b      	orrs	r3, r1
 8004236:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <UART_SetConfig+0x114>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d103      	bne.n	8004260 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004258:	f7ff fcf8 	bl	8003c4c <HAL_RCC_GetPCLK2Freq>
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	e002      	b.n	8004266 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004260:	f7ff fce0 	bl	8003c24 <HAL_RCC_GetPCLK1Freq>
 8004264:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4613      	mov	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	009a      	lsls	r2, r3, #2
 8004270:	441a      	add	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	4a22      	ldr	r2, [pc, #136]	; (8004308 <UART_SetConfig+0x118>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	095b      	lsrs	r3, r3, #5
 8004284:	0119      	lsls	r1, r3, #4
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009a      	lsls	r2, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fbb2 f2f3 	udiv	r2, r2, r3
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <UART_SetConfig+0x118>)
 800429e:	fba3 0302 	umull	r0, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	2064      	movs	r0, #100	; 0x64
 80042a6:	fb00 f303 	mul.w	r3, r0, r3
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	3332      	adds	r3, #50	; 0x32
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <UART_SetConfig+0x118>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042bc:	4419      	add	r1, r3
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	009a      	lsls	r2, r3, #2
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80042d4:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <UART_SetConfig+0x118>)
 80042d6:	fba3 0302 	umull	r0, r3, r3, r2
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	2064      	movs	r0, #100	; 0x64
 80042de:	fb00 f303 	mul.w	r3, r0, r3
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	3332      	adds	r3, #50	; 0x32
 80042e8:	4a07      	ldr	r2, [pc, #28]	; (8004308 <UART_SetConfig+0x118>)
 80042ea:	fba2 2303 	umull	r2, r3, r2, r3
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	f003 020f 	and.w	r2, r3, #15
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	440a      	add	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40013800 	.word	0x40013800
 8004308:	51eb851f 	.word	0x51eb851f

0800430c <__errno>:
 800430c:	4b01      	ldr	r3, [pc, #4]	; (8004314 <__errno+0x8>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	20000010 	.word	0x20000010

08004318 <__libc_init_array>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	2600      	movs	r6, #0
 800431c:	4d0c      	ldr	r5, [pc, #48]	; (8004350 <__libc_init_array+0x38>)
 800431e:	4c0d      	ldr	r4, [pc, #52]	; (8004354 <__libc_init_array+0x3c>)
 8004320:	1b64      	subs	r4, r4, r5
 8004322:	10a4      	asrs	r4, r4, #2
 8004324:	42a6      	cmp	r6, r4
 8004326:	d109      	bne.n	800433c <__libc_init_array+0x24>
 8004328:	f002 fe90 	bl	800704c <_init>
 800432c:	2600      	movs	r6, #0
 800432e:	4d0a      	ldr	r5, [pc, #40]	; (8004358 <__libc_init_array+0x40>)
 8004330:	4c0a      	ldr	r4, [pc, #40]	; (800435c <__libc_init_array+0x44>)
 8004332:	1b64      	subs	r4, r4, r5
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	42a6      	cmp	r6, r4
 8004338:	d105      	bne.n	8004346 <__libc_init_array+0x2e>
 800433a:	bd70      	pop	{r4, r5, r6, pc}
 800433c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004340:	4798      	blx	r3
 8004342:	3601      	adds	r6, #1
 8004344:	e7ee      	b.n	8004324 <__libc_init_array+0xc>
 8004346:	f855 3b04 	ldr.w	r3, [r5], #4
 800434a:	4798      	blx	r3
 800434c:	3601      	adds	r6, #1
 800434e:	e7f2      	b.n	8004336 <__libc_init_array+0x1e>
 8004350:	08007504 	.word	0x08007504
 8004354:	08007504 	.word	0x08007504
 8004358:	08007504 	.word	0x08007504
 800435c:	08007508 	.word	0x08007508

08004360 <memset>:
 8004360:	4603      	mov	r3, r0
 8004362:	4402      	add	r2, r0
 8004364:	4293      	cmp	r3, r2
 8004366:	d100      	bne.n	800436a <memset+0xa>
 8004368:	4770      	bx	lr
 800436a:	f803 1b01 	strb.w	r1, [r3], #1
 800436e:	e7f9      	b.n	8004364 <memset+0x4>

08004370 <__cvt>:
 8004370:	2b00      	cmp	r3, #0
 8004372:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004376:	461f      	mov	r7, r3
 8004378:	bfbb      	ittet	lt
 800437a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800437e:	461f      	movlt	r7, r3
 8004380:	2300      	movge	r3, #0
 8004382:	232d      	movlt	r3, #45	; 0x2d
 8004384:	b088      	sub	sp, #32
 8004386:	4614      	mov	r4, r2
 8004388:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800438a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800438c:	7013      	strb	r3, [r2, #0]
 800438e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004390:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004394:	f023 0820 	bic.w	r8, r3, #32
 8004398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800439c:	d005      	beq.n	80043aa <__cvt+0x3a>
 800439e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80043a2:	d100      	bne.n	80043a6 <__cvt+0x36>
 80043a4:	3501      	adds	r5, #1
 80043a6:	2302      	movs	r3, #2
 80043a8:	e000      	b.n	80043ac <__cvt+0x3c>
 80043aa:	2303      	movs	r3, #3
 80043ac:	aa07      	add	r2, sp, #28
 80043ae:	9204      	str	r2, [sp, #16]
 80043b0:	aa06      	add	r2, sp, #24
 80043b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80043b6:	e9cd 3500 	strd	r3, r5, [sp]
 80043ba:	4622      	mov	r2, r4
 80043bc:	463b      	mov	r3, r7
 80043be:	f000 fe13 	bl	8004fe8 <_dtoa_r>
 80043c2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80043c6:	4606      	mov	r6, r0
 80043c8:	d102      	bne.n	80043d0 <__cvt+0x60>
 80043ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80043cc:	07db      	lsls	r3, r3, #31
 80043ce:	d522      	bpl.n	8004416 <__cvt+0xa6>
 80043d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80043d4:	eb06 0905 	add.w	r9, r6, r5
 80043d8:	d110      	bne.n	80043fc <__cvt+0x8c>
 80043da:	7833      	ldrb	r3, [r6, #0]
 80043dc:	2b30      	cmp	r3, #48	; 0x30
 80043de:	d10a      	bne.n	80043f6 <__cvt+0x86>
 80043e0:	2200      	movs	r2, #0
 80043e2:	2300      	movs	r3, #0
 80043e4:	4620      	mov	r0, r4
 80043e6:	4639      	mov	r1, r7
 80043e8:	f7fc fade 	bl	80009a8 <__aeabi_dcmpeq>
 80043ec:	b918      	cbnz	r0, 80043f6 <__cvt+0x86>
 80043ee:	f1c5 0501 	rsb	r5, r5, #1
 80043f2:	f8ca 5000 	str.w	r5, [sl]
 80043f6:	f8da 3000 	ldr.w	r3, [sl]
 80043fa:	4499      	add	r9, r3
 80043fc:	2200      	movs	r2, #0
 80043fe:	2300      	movs	r3, #0
 8004400:	4620      	mov	r0, r4
 8004402:	4639      	mov	r1, r7
 8004404:	f7fc fad0 	bl	80009a8 <__aeabi_dcmpeq>
 8004408:	b108      	cbz	r0, 800440e <__cvt+0x9e>
 800440a:	f8cd 901c 	str.w	r9, [sp, #28]
 800440e:	2230      	movs	r2, #48	; 0x30
 8004410:	9b07      	ldr	r3, [sp, #28]
 8004412:	454b      	cmp	r3, r9
 8004414:	d307      	bcc.n	8004426 <__cvt+0xb6>
 8004416:	4630      	mov	r0, r6
 8004418:	9b07      	ldr	r3, [sp, #28]
 800441a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800441c:	1b9b      	subs	r3, r3, r6
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	b008      	add	sp, #32
 8004422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004426:	1c59      	adds	r1, r3, #1
 8004428:	9107      	str	r1, [sp, #28]
 800442a:	701a      	strb	r2, [r3, #0]
 800442c:	e7f0      	b.n	8004410 <__cvt+0xa0>

0800442e <__exponent>:
 800442e:	4603      	mov	r3, r0
 8004430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004432:	2900      	cmp	r1, #0
 8004434:	f803 2b02 	strb.w	r2, [r3], #2
 8004438:	bfb6      	itet	lt
 800443a:	222d      	movlt	r2, #45	; 0x2d
 800443c:	222b      	movge	r2, #43	; 0x2b
 800443e:	4249      	neglt	r1, r1
 8004440:	2909      	cmp	r1, #9
 8004442:	7042      	strb	r2, [r0, #1]
 8004444:	dd2b      	ble.n	800449e <__exponent+0x70>
 8004446:	f10d 0407 	add.w	r4, sp, #7
 800444a:	46a4      	mov	ip, r4
 800444c:	270a      	movs	r7, #10
 800444e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004452:	460a      	mov	r2, r1
 8004454:	46a6      	mov	lr, r4
 8004456:	fb07 1516 	mls	r5, r7, r6, r1
 800445a:	2a63      	cmp	r2, #99	; 0x63
 800445c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004460:	4631      	mov	r1, r6
 8004462:	f104 34ff 	add.w	r4, r4, #4294967295
 8004466:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800446a:	dcf0      	bgt.n	800444e <__exponent+0x20>
 800446c:	3130      	adds	r1, #48	; 0x30
 800446e:	f1ae 0502 	sub.w	r5, lr, #2
 8004472:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004476:	4629      	mov	r1, r5
 8004478:	1c44      	adds	r4, r0, #1
 800447a:	4561      	cmp	r1, ip
 800447c:	d30a      	bcc.n	8004494 <__exponent+0x66>
 800447e:	f10d 0209 	add.w	r2, sp, #9
 8004482:	eba2 020e 	sub.w	r2, r2, lr
 8004486:	4565      	cmp	r5, ip
 8004488:	bf88      	it	hi
 800448a:	2200      	movhi	r2, #0
 800448c:	4413      	add	r3, r2
 800448e:	1a18      	subs	r0, r3, r0
 8004490:	b003      	add	sp, #12
 8004492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004494:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004498:	f804 2f01 	strb.w	r2, [r4, #1]!
 800449c:	e7ed      	b.n	800447a <__exponent+0x4c>
 800449e:	2330      	movs	r3, #48	; 0x30
 80044a0:	3130      	adds	r1, #48	; 0x30
 80044a2:	7083      	strb	r3, [r0, #2]
 80044a4:	70c1      	strb	r1, [r0, #3]
 80044a6:	1d03      	adds	r3, r0, #4
 80044a8:	e7f1      	b.n	800448e <__exponent+0x60>
	...

080044ac <_printf_float>:
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	b091      	sub	sp, #68	; 0x44
 80044b2:	460c      	mov	r4, r1
 80044b4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80044b8:	4616      	mov	r6, r2
 80044ba:	461f      	mov	r7, r3
 80044bc:	4605      	mov	r5, r0
 80044be:	f001 fd35 	bl	8005f2c <_localeconv_r>
 80044c2:	6803      	ldr	r3, [r0, #0]
 80044c4:	4618      	mov	r0, r3
 80044c6:	9309      	str	r3, [sp, #36]	; 0x24
 80044c8:	f7fb fe42 	bl	8000150 <strlen>
 80044cc:	2300      	movs	r3, #0
 80044ce:	930e      	str	r3, [sp, #56]	; 0x38
 80044d0:	f8d8 3000 	ldr.w	r3, [r8]
 80044d4:	900a      	str	r0, [sp, #40]	; 0x28
 80044d6:	3307      	adds	r3, #7
 80044d8:	f023 0307 	bic.w	r3, r3, #7
 80044dc:	f103 0208 	add.w	r2, r3, #8
 80044e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80044e4:	f8d4 b000 	ldr.w	fp, [r4]
 80044e8:	f8c8 2000 	str.w	r2, [r8]
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80044f4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80044f8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80044fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80044fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004502:	4640      	mov	r0, r8
 8004504:	4b9c      	ldr	r3, [pc, #624]	; (8004778 <_printf_float+0x2cc>)
 8004506:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004508:	f7fc fa80 	bl	8000a0c <__aeabi_dcmpun>
 800450c:	bb70      	cbnz	r0, 800456c <_printf_float+0xc0>
 800450e:	f04f 32ff 	mov.w	r2, #4294967295
 8004512:	4640      	mov	r0, r8
 8004514:	4b98      	ldr	r3, [pc, #608]	; (8004778 <_printf_float+0x2cc>)
 8004516:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004518:	f7fc fa5a 	bl	80009d0 <__aeabi_dcmple>
 800451c:	bb30      	cbnz	r0, 800456c <_printf_float+0xc0>
 800451e:	2200      	movs	r2, #0
 8004520:	2300      	movs	r3, #0
 8004522:	4640      	mov	r0, r8
 8004524:	4651      	mov	r1, sl
 8004526:	f7fc fa49 	bl	80009bc <__aeabi_dcmplt>
 800452a:	b110      	cbz	r0, 8004532 <_printf_float+0x86>
 800452c:	232d      	movs	r3, #45	; 0x2d
 800452e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004532:	4b92      	ldr	r3, [pc, #584]	; (800477c <_printf_float+0x2d0>)
 8004534:	4892      	ldr	r0, [pc, #584]	; (8004780 <_printf_float+0x2d4>)
 8004536:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800453a:	bf94      	ite	ls
 800453c:	4698      	movls	r8, r3
 800453e:	4680      	movhi	r8, r0
 8004540:	2303      	movs	r3, #3
 8004542:	f04f 0a00 	mov.w	sl, #0
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	f02b 0304 	bic.w	r3, fp, #4
 800454c:	6023      	str	r3, [r4, #0]
 800454e:	4633      	mov	r3, r6
 8004550:	4621      	mov	r1, r4
 8004552:	4628      	mov	r0, r5
 8004554:	9700      	str	r7, [sp, #0]
 8004556:	aa0f      	add	r2, sp, #60	; 0x3c
 8004558:	f000 f9d4 	bl	8004904 <_printf_common>
 800455c:	3001      	adds	r0, #1
 800455e:	f040 8090 	bne.w	8004682 <_printf_float+0x1d6>
 8004562:	f04f 30ff 	mov.w	r0, #4294967295
 8004566:	b011      	add	sp, #68	; 0x44
 8004568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800456c:	4642      	mov	r2, r8
 800456e:	4653      	mov	r3, sl
 8004570:	4640      	mov	r0, r8
 8004572:	4651      	mov	r1, sl
 8004574:	f7fc fa4a 	bl	8000a0c <__aeabi_dcmpun>
 8004578:	b148      	cbz	r0, 800458e <_printf_float+0xe2>
 800457a:	f1ba 0f00 	cmp.w	sl, #0
 800457e:	bfb8      	it	lt
 8004580:	232d      	movlt	r3, #45	; 0x2d
 8004582:	4880      	ldr	r0, [pc, #512]	; (8004784 <_printf_float+0x2d8>)
 8004584:	bfb8      	it	lt
 8004586:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800458a:	4b7f      	ldr	r3, [pc, #508]	; (8004788 <_printf_float+0x2dc>)
 800458c:	e7d3      	b.n	8004536 <_printf_float+0x8a>
 800458e:	6863      	ldr	r3, [r4, #4]
 8004590:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	d142      	bne.n	800461e <_printf_float+0x172>
 8004598:	2306      	movs	r3, #6
 800459a:	6063      	str	r3, [r4, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	9206      	str	r2, [sp, #24]
 80045a0:	aa0e      	add	r2, sp, #56	; 0x38
 80045a2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80045a6:	aa0d      	add	r2, sp, #52	; 0x34
 80045a8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80045ac:	9203      	str	r2, [sp, #12]
 80045ae:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80045b2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	6863      	ldr	r3, [r4, #4]
 80045ba:	4642      	mov	r2, r8
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	4628      	mov	r0, r5
 80045c0:	4653      	mov	r3, sl
 80045c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80045c4:	f7ff fed4 	bl	8004370 <__cvt>
 80045c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045ca:	4680      	mov	r8, r0
 80045cc:	2947      	cmp	r1, #71	; 0x47
 80045ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 80045d0:	d108      	bne.n	80045e4 <_printf_float+0x138>
 80045d2:	1cc8      	adds	r0, r1, #3
 80045d4:	db02      	blt.n	80045dc <_printf_float+0x130>
 80045d6:	6863      	ldr	r3, [r4, #4]
 80045d8:	4299      	cmp	r1, r3
 80045da:	dd40      	ble.n	800465e <_printf_float+0x1b2>
 80045dc:	f1a9 0902 	sub.w	r9, r9, #2
 80045e0:	fa5f f989 	uxtb.w	r9, r9
 80045e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045e8:	d81f      	bhi.n	800462a <_printf_float+0x17e>
 80045ea:	464a      	mov	r2, r9
 80045ec:	3901      	subs	r1, #1
 80045ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80045f2:	910d      	str	r1, [sp, #52]	; 0x34
 80045f4:	f7ff ff1b 	bl	800442e <__exponent>
 80045f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045fa:	4682      	mov	sl, r0
 80045fc:	1813      	adds	r3, r2, r0
 80045fe:	2a01      	cmp	r2, #1
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	dc02      	bgt.n	800460a <_printf_float+0x15e>
 8004604:	6822      	ldr	r2, [r4, #0]
 8004606:	07d2      	lsls	r2, r2, #31
 8004608:	d501      	bpl.n	800460e <_printf_float+0x162>
 800460a:	3301      	adds	r3, #1
 800460c:	6123      	str	r3, [r4, #16]
 800460e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004612:	2b00      	cmp	r3, #0
 8004614:	d09b      	beq.n	800454e <_printf_float+0xa2>
 8004616:	232d      	movs	r3, #45	; 0x2d
 8004618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800461c:	e797      	b.n	800454e <_printf_float+0xa2>
 800461e:	2947      	cmp	r1, #71	; 0x47
 8004620:	d1bc      	bne.n	800459c <_printf_float+0xf0>
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ba      	bne.n	800459c <_printf_float+0xf0>
 8004626:	2301      	movs	r3, #1
 8004628:	e7b7      	b.n	800459a <_printf_float+0xee>
 800462a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800462e:	d118      	bne.n	8004662 <_printf_float+0x1b6>
 8004630:	2900      	cmp	r1, #0
 8004632:	6863      	ldr	r3, [r4, #4]
 8004634:	dd0b      	ble.n	800464e <_printf_float+0x1a2>
 8004636:	6121      	str	r1, [r4, #16]
 8004638:	b913      	cbnz	r3, 8004640 <_printf_float+0x194>
 800463a:	6822      	ldr	r2, [r4, #0]
 800463c:	07d0      	lsls	r0, r2, #31
 800463e:	d502      	bpl.n	8004646 <_printf_float+0x19a>
 8004640:	3301      	adds	r3, #1
 8004642:	440b      	add	r3, r1
 8004644:	6123      	str	r3, [r4, #16]
 8004646:	f04f 0a00 	mov.w	sl, #0
 800464a:	65a1      	str	r1, [r4, #88]	; 0x58
 800464c:	e7df      	b.n	800460e <_printf_float+0x162>
 800464e:	b913      	cbnz	r3, 8004656 <_printf_float+0x1aa>
 8004650:	6822      	ldr	r2, [r4, #0]
 8004652:	07d2      	lsls	r2, r2, #31
 8004654:	d501      	bpl.n	800465a <_printf_float+0x1ae>
 8004656:	3302      	adds	r3, #2
 8004658:	e7f4      	b.n	8004644 <_printf_float+0x198>
 800465a:	2301      	movs	r3, #1
 800465c:	e7f2      	b.n	8004644 <_printf_float+0x198>
 800465e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004664:	4299      	cmp	r1, r3
 8004666:	db05      	blt.n	8004674 <_printf_float+0x1c8>
 8004668:	6823      	ldr	r3, [r4, #0]
 800466a:	6121      	str	r1, [r4, #16]
 800466c:	07d8      	lsls	r0, r3, #31
 800466e:	d5ea      	bpl.n	8004646 <_printf_float+0x19a>
 8004670:	1c4b      	adds	r3, r1, #1
 8004672:	e7e7      	b.n	8004644 <_printf_float+0x198>
 8004674:	2900      	cmp	r1, #0
 8004676:	bfcc      	ite	gt
 8004678:	2201      	movgt	r2, #1
 800467a:	f1c1 0202 	rsble	r2, r1, #2
 800467e:	4413      	add	r3, r2
 8004680:	e7e0      	b.n	8004644 <_printf_float+0x198>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	055a      	lsls	r2, r3, #21
 8004686:	d407      	bmi.n	8004698 <_printf_float+0x1ec>
 8004688:	6923      	ldr	r3, [r4, #16]
 800468a:	4642      	mov	r2, r8
 800468c:	4631      	mov	r1, r6
 800468e:	4628      	mov	r0, r5
 8004690:	47b8      	blx	r7
 8004692:	3001      	adds	r0, #1
 8004694:	d12b      	bne.n	80046ee <_printf_float+0x242>
 8004696:	e764      	b.n	8004562 <_printf_float+0xb6>
 8004698:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800469c:	f240 80dd 	bls.w	800485a <_printf_float+0x3ae>
 80046a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046a4:	2200      	movs	r2, #0
 80046a6:	2300      	movs	r3, #0
 80046a8:	f7fc f97e 	bl	80009a8 <__aeabi_dcmpeq>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	d033      	beq.n	8004718 <_printf_float+0x26c>
 80046b0:	2301      	movs	r3, #1
 80046b2:	4631      	mov	r1, r6
 80046b4:	4628      	mov	r0, r5
 80046b6:	4a35      	ldr	r2, [pc, #212]	; (800478c <_printf_float+0x2e0>)
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	f43f af51 	beq.w	8004562 <_printf_float+0xb6>
 80046c0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046c4:	429a      	cmp	r2, r3
 80046c6:	db02      	blt.n	80046ce <_printf_float+0x222>
 80046c8:	6823      	ldr	r3, [r4, #0]
 80046ca:	07d8      	lsls	r0, r3, #31
 80046cc:	d50f      	bpl.n	80046ee <_printf_float+0x242>
 80046ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d2:	4631      	mov	r1, r6
 80046d4:	4628      	mov	r0, r5
 80046d6:	47b8      	blx	r7
 80046d8:	3001      	adds	r0, #1
 80046da:	f43f af42 	beq.w	8004562 <_printf_float+0xb6>
 80046de:	f04f 0800 	mov.w	r8, #0
 80046e2:	f104 091a 	add.w	r9, r4, #26
 80046e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046e8:	3b01      	subs	r3, #1
 80046ea:	4543      	cmp	r3, r8
 80046ec:	dc09      	bgt.n	8004702 <_printf_float+0x256>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	079b      	lsls	r3, r3, #30
 80046f2:	f100 8102 	bmi.w	80048fa <_printf_float+0x44e>
 80046f6:	68e0      	ldr	r0, [r4, #12]
 80046f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046fa:	4298      	cmp	r0, r3
 80046fc:	bfb8      	it	lt
 80046fe:	4618      	movlt	r0, r3
 8004700:	e731      	b.n	8004566 <_printf_float+0xba>
 8004702:	2301      	movs	r3, #1
 8004704:	464a      	mov	r2, r9
 8004706:	4631      	mov	r1, r6
 8004708:	4628      	mov	r0, r5
 800470a:	47b8      	blx	r7
 800470c:	3001      	adds	r0, #1
 800470e:	f43f af28 	beq.w	8004562 <_printf_float+0xb6>
 8004712:	f108 0801 	add.w	r8, r8, #1
 8004716:	e7e6      	b.n	80046e6 <_printf_float+0x23a>
 8004718:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800471a:	2b00      	cmp	r3, #0
 800471c:	dc38      	bgt.n	8004790 <_printf_float+0x2e4>
 800471e:	2301      	movs	r3, #1
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <_printf_float+0x2e0>)
 8004726:	47b8      	blx	r7
 8004728:	3001      	adds	r0, #1
 800472a:	f43f af1a 	beq.w	8004562 <_printf_float+0xb6>
 800472e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004732:	4313      	orrs	r3, r2
 8004734:	d102      	bne.n	800473c <_printf_float+0x290>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	07d9      	lsls	r1, r3, #31
 800473a:	d5d8      	bpl.n	80046ee <_printf_float+0x242>
 800473c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004740:	4631      	mov	r1, r6
 8004742:	4628      	mov	r0, r5
 8004744:	47b8      	blx	r7
 8004746:	3001      	adds	r0, #1
 8004748:	f43f af0b 	beq.w	8004562 <_printf_float+0xb6>
 800474c:	f04f 0900 	mov.w	r9, #0
 8004750:	f104 0a1a 	add.w	sl, r4, #26
 8004754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004756:	425b      	negs	r3, r3
 8004758:	454b      	cmp	r3, r9
 800475a:	dc01      	bgt.n	8004760 <_printf_float+0x2b4>
 800475c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800475e:	e794      	b.n	800468a <_printf_float+0x1de>
 8004760:	2301      	movs	r3, #1
 8004762:	4652      	mov	r2, sl
 8004764:	4631      	mov	r1, r6
 8004766:	4628      	mov	r0, r5
 8004768:	47b8      	blx	r7
 800476a:	3001      	adds	r0, #1
 800476c:	f43f aef9 	beq.w	8004562 <_printf_float+0xb6>
 8004770:	f109 0901 	add.w	r9, r9, #1
 8004774:	e7ee      	b.n	8004754 <_printf_float+0x2a8>
 8004776:	bf00      	nop
 8004778:	7fefffff 	.word	0x7fefffff
 800477c:	08007128 	.word	0x08007128
 8004780:	0800712c 	.word	0x0800712c
 8004784:	08007134 	.word	0x08007134
 8004788:	08007130 	.word	0x08007130
 800478c:	08007138 	.word	0x08007138
 8004790:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004794:	429a      	cmp	r2, r3
 8004796:	bfa8      	it	ge
 8004798:	461a      	movge	r2, r3
 800479a:	2a00      	cmp	r2, #0
 800479c:	4691      	mov	r9, r2
 800479e:	dc37      	bgt.n	8004810 <_printf_float+0x364>
 80047a0:	f04f 0b00 	mov.w	fp, #0
 80047a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047a8:	f104 021a 	add.w	r2, r4, #26
 80047ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80047b0:	ebaa 0309 	sub.w	r3, sl, r9
 80047b4:	455b      	cmp	r3, fp
 80047b6:	dc33      	bgt.n	8004820 <_printf_float+0x374>
 80047b8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047bc:	429a      	cmp	r2, r3
 80047be:	db3b      	blt.n	8004838 <_printf_float+0x38c>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	07da      	lsls	r2, r3, #31
 80047c4:	d438      	bmi.n	8004838 <_printf_float+0x38c>
 80047c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047ca:	eba3 020a 	sub.w	r2, r3, sl
 80047ce:	eba3 0901 	sub.w	r9, r3, r1
 80047d2:	4591      	cmp	r9, r2
 80047d4:	bfa8      	it	ge
 80047d6:	4691      	movge	r9, r2
 80047d8:	f1b9 0f00 	cmp.w	r9, #0
 80047dc:	dc34      	bgt.n	8004848 <_printf_float+0x39c>
 80047de:	f04f 0800 	mov.w	r8, #0
 80047e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80047e6:	f104 0a1a 	add.w	sl, r4, #26
 80047ea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	eba3 0309 	sub.w	r3, r3, r9
 80047f4:	4543      	cmp	r3, r8
 80047f6:	f77f af7a 	ble.w	80046ee <_printf_float+0x242>
 80047fa:	2301      	movs	r3, #1
 80047fc:	4652      	mov	r2, sl
 80047fe:	4631      	mov	r1, r6
 8004800:	4628      	mov	r0, r5
 8004802:	47b8      	blx	r7
 8004804:	3001      	adds	r0, #1
 8004806:	f43f aeac 	beq.w	8004562 <_printf_float+0xb6>
 800480a:	f108 0801 	add.w	r8, r8, #1
 800480e:	e7ec      	b.n	80047ea <_printf_float+0x33e>
 8004810:	4613      	mov	r3, r2
 8004812:	4631      	mov	r1, r6
 8004814:	4642      	mov	r2, r8
 8004816:	4628      	mov	r0, r5
 8004818:	47b8      	blx	r7
 800481a:	3001      	adds	r0, #1
 800481c:	d1c0      	bne.n	80047a0 <_printf_float+0x2f4>
 800481e:	e6a0      	b.n	8004562 <_printf_float+0xb6>
 8004820:	2301      	movs	r3, #1
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	920b      	str	r2, [sp, #44]	; 0x2c
 8004828:	47b8      	blx	r7
 800482a:	3001      	adds	r0, #1
 800482c:	f43f ae99 	beq.w	8004562 <_printf_float+0xb6>
 8004830:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004832:	f10b 0b01 	add.w	fp, fp, #1
 8004836:	e7b9      	b.n	80047ac <_printf_float+0x300>
 8004838:	4631      	mov	r1, r6
 800483a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800483e:	4628      	mov	r0, r5
 8004840:	47b8      	blx	r7
 8004842:	3001      	adds	r0, #1
 8004844:	d1bf      	bne.n	80047c6 <_printf_float+0x31a>
 8004846:	e68c      	b.n	8004562 <_printf_float+0xb6>
 8004848:	464b      	mov	r3, r9
 800484a:	4631      	mov	r1, r6
 800484c:	4628      	mov	r0, r5
 800484e:	eb08 020a 	add.w	r2, r8, sl
 8004852:	47b8      	blx	r7
 8004854:	3001      	adds	r0, #1
 8004856:	d1c2      	bne.n	80047de <_printf_float+0x332>
 8004858:	e683      	b.n	8004562 <_printf_float+0xb6>
 800485a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800485c:	2a01      	cmp	r2, #1
 800485e:	dc01      	bgt.n	8004864 <_printf_float+0x3b8>
 8004860:	07db      	lsls	r3, r3, #31
 8004862:	d537      	bpl.n	80048d4 <_printf_float+0x428>
 8004864:	2301      	movs	r3, #1
 8004866:	4642      	mov	r2, r8
 8004868:	4631      	mov	r1, r6
 800486a:	4628      	mov	r0, r5
 800486c:	47b8      	blx	r7
 800486e:	3001      	adds	r0, #1
 8004870:	f43f ae77 	beq.w	8004562 <_printf_float+0xb6>
 8004874:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	f43f ae6f 	beq.w	8004562 <_printf_float+0xb6>
 8004884:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004888:	2200      	movs	r2, #0
 800488a:	2300      	movs	r3, #0
 800488c:	f7fc f88c 	bl	80009a8 <__aeabi_dcmpeq>
 8004890:	b9d8      	cbnz	r0, 80048ca <_printf_float+0x41e>
 8004892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004894:	f108 0201 	add.w	r2, r8, #1
 8004898:	3b01      	subs	r3, #1
 800489a:	4631      	mov	r1, r6
 800489c:	4628      	mov	r0, r5
 800489e:	47b8      	blx	r7
 80048a0:	3001      	adds	r0, #1
 80048a2:	d10e      	bne.n	80048c2 <_printf_float+0x416>
 80048a4:	e65d      	b.n	8004562 <_printf_float+0xb6>
 80048a6:	2301      	movs	r3, #1
 80048a8:	464a      	mov	r2, r9
 80048aa:	4631      	mov	r1, r6
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b8      	blx	r7
 80048b0:	3001      	adds	r0, #1
 80048b2:	f43f ae56 	beq.w	8004562 <_printf_float+0xb6>
 80048b6:	f108 0801 	add.w	r8, r8, #1
 80048ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048bc:	3b01      	subs	r3, #1
 80048be:	4543      	cmp	r3, r8
 80048c0:	dcf1      	bgt.n	80048a6 <_printf_float+0x3fa>
 80048c2:	4653      	mov	r3, sl
 80048c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80048c8:	e6e0      	b.n	800468c <_printf_float+0x1e0>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	f104 091a 	add.w	r9, r4, #26
 80048d2:	e7f2      	b.n	80048ba <_printf_float+0x40e>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4642      	mov	r2, r8
 80048d8:	e7df      	b.n	800489a <_printf_float+0x3ee>
 80048da:	2301      	movs	r3, #1
 80048dc:	464a      	mov	r2, r9
 80048de:	4631      	mov	r1, r6
 80048e0:	4628      	mov	r0, r5
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	f43f ae3c 	beq.w	8004562 <_printf_float+0xb6>
 80048ea:	f108 0801 	add.w	r8, r8, #1
 80048ee:	68e3      	ldr	r3, [r4, #12]
 80048f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80048f2:	1a5b      	subs	r3, r3, r1
 80048f4:	4543      	cmp	r3, r8
 80048f6:	dcf0      	bgt.n	80048da <_printf_float+0x42e>
 80048f8:	e6fd      	b.n	80046f6 <_printf_float+0x24a>
 80048fa:	f04f 0800 	mov.w	r8, #0
 80048fe:	f104 0919 	add.w	r9, r4, #25
 8004902:	e7f4      	b.n	80048ee <_printf_float+0x442>

08004904 <_printf_common>:
 8004904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004908:	4616      	mov	r6, r2
 800490a:	4699      	mov	r9, r3
 800490c:	688a      	ldr	r2, [r1, #8]
 800490e:	690b      	ldr	r3, [r1, #16]
 8004910:	4607      	mov	r7, r0
 8004912:	4293      	cmp	r3, r2
 8004914:	bfb8      	it	lt
 8004916:	4613      	movlt	r3, r2
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800491e:	460c      	mov	r4, r1
 8004920:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004924:	b10a      	cbz	r2, 800492a <_printf_common+0x26>
 8004926:	3301      	adds	r3, #1
 8004928:	6033      	str	r3, [r6, #0]
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	0699      	lsls	r1, r3, #26
 800492e:	bf42      	ittt	mi
 8004930:	6833      	ldrmi	r3, [r6, #0]
 8004932:	3302      	addmi	r3, #2
 8004934:	6033      	strmi	r3, [r6, #0]
 8004936:	6825      	ldr	r5, [r4, #0]
 8004938:	f015 0506 	ands.w	r5, r5, #6
 800493c:	d106      	bne.n	800494c <_printf_common+0x48>
 800493e:	f104 0a19 	add.w	sl, r4, #25
 8004942:	68e3      	ldr	r3, [r4, #12]
 8004944:	6832      	ldr	r2, [r6, #0]
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	42ab      	cmp	r3, r5
 800494a:	dc28      	bgt.n	800499e <_printf_common+0x9a>
 800494c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004950:	1e13      	subs	r3, r2, #0
 8004952:	6822      	ldr	r2, [r4, #0]
 8004954:	bf18      	it	ne
 8004956:	2301      	movne	r3, #1
 8004958:	0692      	lsls	r2, r2, #26
 800495a:	d42d      	bmi.n	80049b8 <_printf_common+0xb4>
 800495c:	4649      	mov	r1, r9
 800495e:	4638      	mov	r0, r7
 8004960:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004964:	47c0      	blx	r8
 8004966:	3001      	adds	r0, #1
 8004968:	d020      	beq.n	80049ac <_printf_common+0xa8>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	68e5      	ldr	r5, [r4, #12]
 800496e:	f003 0306 	and.w	r3, r3, #6
 8004972:	2b04      	cmp	r3, #4
 8004974:	bf18      	it	ne
 8004976:	2500      	movne	r5, #0
 8004978:	6832      	ldr	r2, [r6, #0]
 800497a:	f04f 0600 	mov.w	r6, #0
 800497e:	68a3      	ldr	r3, [r4, #8]
 8004980:	bf08      	it	eq
 8004982:	1aad      	subeq	r5, r5, r2
 8004984:	6922      	ldr	r2, [r4, #16]
 8004986:	bf08      	it	eq
 8004988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800498c:	4293      	cmp	r3, r2
 800498e:	bfc4      	itt	gt
 8004990:	1a9b      	subgt	r3, r3, r2
 8004992:	18ed      	addgt	r5, r5, r3
 8004994:	341a      	adds	r4, #26
 8004996:	42b5      	cmp	r5, r6
 8004998:	d11a      	bne.n	80049d0 <_printf_common+0xcc>
 800499a:	2000      	movs	r0, #0
 800499c:	e008      	b.n	80049b0 <_printf_common+0xac>
 800499e:	2301      	movs	r3, #1
 80049a0:	4652      	mov	r2, sl
 80049a2:	4649      	mov	r1, r9
 80049a4:	4638      	mov	r0, r7
 80049a6:	47c0      	blx	r8
 80049a8:	3001      	adds	r0, #1
 80049aa:	d103      	bne.n	80049b4 <_printf_common+0xb0>
 80049ac:	f04f 30ff 	mov.w	r0, #4294967295
 80049b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049b4:	3501      	adds	r5, #1
 80049b6:	e7c4      	b.n	8004942 <_printf_common+0x3e>
 80049b8:	2030      	movs	r0, #48	; 0x30
 80049ba:	18e1      	adds	r1, r4, r3
 80049bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049c6:	4422      	add	r2, r4
 80049c8:	3302      	adds	r3, #2
 80049ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ce:	e7c5      	b.n	800495c <_printf_common+0x58>
 80049d0:	2301      	movs	r3, #1
 80049d2:	4622      	mov	r2, r4
 80049d4:	4649      	mov	r1, r9
 80049d6:	4638      	mov	r0, r7
 80049d8:	47c0      	blx	r8
 80049da:	3001      	adds	r0, #1
 80049dc:	d0e6      	beq.n	80049ac <_printf_common+0xa8>
 80049de:	3601      	adds	r6, #1
 80049e0:	e7d9      	b.n	8004996 <_printf_common+0x92>
	...

080049e4 <_printf_i>:
 80049e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049e8:	7e0f      	ldrb	r7, [r1, #24]
 80049ea:	4691      	mov	r9, r2
 80049ec:	2f78      	cmp	r7, #120	; 0x78
 80049ee:	4680      	mov	r8, r0
 80049f0:	460c      	mov	r4, r1
 80049f2:	469a      	mov	sl, r3
 80049f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049fa:	d807      	bhi.n	8004a0c <_printf_i+0x28>
 80049fc:	2f62      	cmp	r7, #98	; 0x62
 80049fe:	d80a      	bhi.n	8004a16 <_printf_i+0x32>
 8004a00:	2f00      	cmp	r7, #0
 8004a02:	f000 80d9 	beq.w	8004bb8 <_printf_i+0x1d4>
 8004a06:	2f58      	cmp	r7, #88	; 0x58
 8004a08:	f000 80a4 	beq.w	8004b54 <_printf_i+0x170>
 8004a0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a14:	e03a      	b.n	8004a8c <_printf_i+0xa8>
 8004a16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a1a:	2b15      	cmp	r3, #21
 8004a1c:	d8f6      	bhi.n	8004a0c <_printf_i+0x28>
 8004a1e:	a101      	add	r1, pc, #4	; (adr r1, 8004a24 <_printf_i+0x40>)
 8004a20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a24:	08004a7d 	.word	0x08004a7d
 8004a28:	08004a91 	.word	0x08004a91
 8004a2c:	08004a0d 	.word	0x08004a0d
 8004a30:	08004a0d 	.word	0x08004a0d
 8004a34:	08004a0d 	.word	0x08004a0d
 8004a38:	08004a0d 	.word	0x08004a0d
 8004a3c:	08004a91 	.word	0x08004a91
 8004a40:	08004a0d 	.word	0x08004a0d
 8004a44:	08004a0d 	.word	0x08004a0d
 8004a48:	08004a0d 	.word	0x08004a0d
 8004a4c:	08004a0d 	.word	0x08004a0d
 8004a50:	08004b9f 	.word	0x08004b9f
 8004a54:	08004ac1 	.word	0x08004ac1
 8004a58:	08004b81 	.word	0x08004b81
 8004a5c:	08004a0d 	.word	0x08004a0d
 8004a60:	08004a0d 	.word	0x08004a0d
 8004a64:	08004bc1 	.word	0x08004bc1
 8004a68:	08004a0d 	.word	0x08004a0d
 8004a6c:	08004ac1 	.word	0x08004ac1
 8004a70:	08004a0d 	.word	0x08004a0d
 8004a74:	08004a0d 	.word	0x08004a0d
 8004a78:	08004b89 	.word	0x08004b89
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	602a      	str	r2, [r5, #0]
 8004a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a4      	b.n	8004bda <_printf_i+0x1f6>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	6829      	ldr	r1, [r5, #0]
 8004a94:	0606      	lsls	r6, r0, #24
 8004a96:	f101 0304 	add.w	r3, r1, #4
 8004a9a:	d50a      	bpl.n	8004ab2 <_printf_i+0xce>
 8004a9c:	680e      	ldr	r6, [r1, #0]
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	2e00      	cmp	r6, #0
 8004aa2:	da03      	bge.n	8004aac <_printf_i+0xc8>
 8004aa4:	232d      	movs	r3, #45	; 0x2d
 8004aa6:	4276      	negs	r6, r6
 8004aa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aac:	230a      	movs	r3, #10
 8004aae:	485e      	ldr	r0, [pc, #376]	; (8004c28 <_printf_i+0x244>)
 8004ab0:	e019      	b.n	8004ae6 <_printf_i+0x102>
 8004ab2:	680e      	ldr	r6, [r1, #0]
 8004ab4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	bf18      	it	ne
 8004abc:	b236      	sxthne	r6, r6
 8004abe:	e7ef      	b.n	8004aa0 <_printf_i+0xbc>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	6820      	ldr	r0, [r4, #0]
 8004ac4:	1d19      	adds	r1, r3, #4
 8004ac6:	6029      	str	r1, [r5, #0]
 8004ac8:	0601      	lsls	r1, r0, #24
 8004aca:	d501      	bpl.n	8004ad0 <_printf_i+0xec>
 8004acc:	681e      	ldr	r6, [r3, #0]
 8004ace:	e002      	b.n	8004ad6 <_printf_i+0xf2>
 8004ad0:	0646      	lsls	r6, r0, #25
 8004ad2:	d5fb      	bpl.n	8004acc <_printf_i+0xe8>
 8004ad4:	881e      	ldrh	r6, [r3, #0]
 8004ad6:	2f6f      	cmp	r7, #111	; 0x6f
 8004ad8:	bf0c      	ite	eq
 8004ada:	2308      	moveq	r3, #8
 8004adc:	230a      	movne	r3, #10
 8004ade:	4852      	ldr	r0, [pc, #328]	; (8004c28 <_printf_i+0x244>)
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ae6:	6865      	ldr	r5, [r4, #4]
 8004ae8:	2d00      	cmp	r5, #0
 8004aea:	bfa8      	it	ge
 8004aec:	6821      	ldrge	r1, [r4, #0]
 8004aee:	60a5      	str	r5, [r4, #8]
 8004af0:	bfa4      	itt	ge
 8004af2:	f021 0104 	bicge.w	r1, r1, #4
 8004af6:	6021      	strge	r1, [r4, #0]
 8004af8:	b90e      	cbnz	r6, 8004afe <_printf_i+0x11a>
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	d04d      	beq.n	8004b9a <_printf_i+0x1b6>
 8004afe:	4615      	mov	r5, r2
 8004b00:	fbb6 f1f3 	udiv	r1, r6, r3
 8004b04:	fb03 6711 	mls	r7, r3, r1, r6
 8004b08:	5dc7      	ldrb	r7, [r0, r7]
 8004b0a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b0e:	4637      	mov	r7, r6
 8004b10:	42bb      	cmp	r3, r7
 8004b12:	460e      	mov	r6, r1
 8004b14:	d9f4      	bls.n	8004b00 <_printf_i+0x11c>
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d10b      	bne.n	8004b32 <_printf_i+0x14e>
 8004b1a:	6823      	ldr	r3, [r4, #0]
 8004b1c:	07de      	lsls	r6, r3, #31
 8004b1e:	d508      	bpl.n	8004b32 <_printf_i+0x14e>
 8004b20:	6923      	ldr	r3, [r4, #16]
 8004b22:	6861      	ldr	r1, [r4, #4]
 8004b24:	4299      	cmp	r1, r3
 8004b26:	bfde      	ittt	le
 8004b28:	2330      	movle	r3, #48	; 0x30
 8004b2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b32:	1b52      	subs	r2, r2, r5
 8004b34:	6122      	str	r2, [r4, #16]
 8004b36:	464b      	mov	r3, r9
 8004b38:	4621      	mov	r1, r4
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	f8cd a000 	str.w	sl, [sp]
 8004b40:	aa03      	add	r2, sp, #12
 8004b42:	f7ff fedf 	bl	8004904 <_printf_common>
 8004b46:	3001      	adds	r0, #1
 8004b48:	d14c      	bne.n	8004be4 <_printf_i+0x200>
 8004b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4e:	b004      	add	sp, #16
 8004b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b54:	4834      	ldr	r0, [pc, #208]	; (8004c28 <_printf_i+0x244>)
 8004b56:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b5a:	6829      	ldr	r1, [r5, #0]
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b62:	6029      	str	r1, [r5, #0]
 8004b64:	061d      	lsls	r5, r3, #24
 8004b66:	d514      	bpl.n	8004b92 <_printf_i+0x1ae>
 8004b68:	07df      	lsls	r7, r3, #31
 8004b6a:	bf44      	itt	mi
 8004b6c:	f043 0320 	orrmi.w	r3, r3, #32
 8004b70:	6023      	strmi	r3, [r4, #0]
 8004b72:	b91e      	cbnz	r6, 8004b7c <_printf_i+0x198>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	f023 0320 	bic.w	r3, r3, #32
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	e7af      	b.n	8004ae0 <_printf_i+0xfc>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	f043 0320 	orr.w	r3, r3, #32
 8004b86:	6023      	str	r3, [r4, #0]
 8004b88:	2378      	movs	r3, #120	; 0x78
 8004b8a:	4828      	ldr	r0, [pc, #160]	; (8004c2c <_printf_i+0x248>)
 8004b8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b90:	e7e3      	b.n	8004b5a <_printf_i+0x176>
 8004b92:	0659      	lsls	r1, r3, #25
 8004b94:	bf48      	it	mi
 8004b96:	b2b6      	uxthmi	r6, r6
 8004b98:	e7e6      	b.n	8004b68 <_printf_i+0x184>
 8004b9a:	4615      	mov	r5, r2
 8004b9c:	e7bb      	b.n	8004b16 <_printf_i+0x132>
 8004b9e:	682b      	ldr	r3, [r5, #0]
 8004ba0:	6826      	ldr	r6, [r4, #0]
 8004ba2:	1d18      	adds	r0, r3, #4
 8004ba4:	6961      	ldr	r1, [r4, #20]
 8004ba6:	6028      	str	r0, [r5, #0]
 8004ba8:	0635      	lsls	r5, r6, #24
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	d501      	bpl.n	8004bb2 <_printf_i+0x1ce>
 8004bae:	6019      	str	r1, [r3, #0]
 8004bb0:	e002      	b.n	8004bb8 <_printf_i+0x1d4>
 8004bb2:	0670      	lsls	r0, r6, #25
 8004bb4:	d5fb      	bpl.n	8004bae <_printf_i+0x1ca>
 8004bb6:	8019      	strh	r1, [r3, #0]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4615      	mov	r5, r2
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	e7ba      	b.n	8004b36 <_printf_i+0x152>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	1d1a      	adds	r2, r3, #4
 8004bc6:	602a      	str	r2, [r5, #0]
 8004bc8:	681d      	ldr	r5, [r3, #0]
 8004bca:	6862      	ldr	r2, [r4, #4]
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f001 fa21 	bl	8006014 <memchr>
 8004bd2:	b108      	cbz	r0, 8004bd8 <_printf_i+0x1f4>
 8004bd4:	1b40      	subs	r0, r0, r5
 8004bd6:	6060      	str	r0, [r4, #4]
 8004bd8:	6863      	ldr	r3, [r4, #4]
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be2:	e7a8      	b.n	8004b36 <_printf_i+0x152>
 8004be4:	462a      	mov	r2, r5
 8004be6:	4649      	mov	r1, r9
 8004be8:	4640      	mov	r0, r8
 8004bea:	6923      	ldr	r3, [r4, #16]
 8004bec:	47d0      	blx	sl
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d0ab      	beq.n	8004b4a <_printf_i+0x166>
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	079b      	lsls	r3, r3, #30
 8004bf6:	d413      	bmi.n	8004c20 <_printf_i+0x23c>
 8004bf8:	68e0      	ldr	r0, [r4, #12]
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	4298      	cmp	r0, r3
 8004bfe:	bfb8      	it	lt
 8004c00:	4618      	movlt	r0, r3
 8004c02:	e7a4      	b.n	8004b4e <_printf_i+0x16a>
 8004c04:	2301      	movs	r3, #1
 8004c06:	4632      	mov	r2, r6
 8004c08:	4649      	mov	r1, r9
 8004c0a:	4640      	mov	r0, r8
 8004c0c:	47d0      	blx	sl
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d09b      	beq.n	8004b4a <_printf_i+0x166>
 8004c12:	3501      	adds	r5, #1
 8004c14:	68e3      	ldr	r3, [r4, #12]
 8004c16:	9903      	ldr	r1, [sp, #12]
 8004c18:	1a5b      	subs	r3, r3, r1
 8004c1a:	42ab      	cmp	r3, r5
 8004c1c:	dcf2      	bgt.n	8004c04 <_printf_i+0x220>
 8004c1e:	e7eb      	b.n	8004bf8 <_printf_i+0x214>
 8004c20:	2500      	movs	r5, #0
 8004c22:	f104 0619 	add.w	r6, r4, #25
 8004c26:	e7f5      	b.n	8004c14 <_printf_i+0x230>
 8004c28:	0800713a 	.word	0x0800713a
 8004c2c:	0800714b 	.word	0x0800714b

08004c30 <iprintf>:
 8004c30:	b40f      	push	{r0, r1, r2, r3}
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <iprintf+0x2c>)
 8004c34:	b513      	push	{r0, r1, r4, lr}
 8004c36:	681c      	ldr	r4, [r3, #0]
 8004c38:	b124      	cbz	r4, 8004c44 <iprintf+0x14>
 8004c3a:	69a3      	ldr	r3, [r4, #24]
 8004c3c:	b913      	cbnz	r3, 8004c44 <iprintf+0x14>
 8004c3e:	4620      	mov	r0, r4
 8004c40:	f001 f8d6 	bl	8005df0 <__sinit>
 8004c44:	ab05      	add	r3, sp, #20
 8004c46:	4620      	mov	r0, r4
 8004c48:	9a04      	ldr	r2, [sp, #16]
 8004c4a:	68a1      	ldr	r1, [r4, #8]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	f001 fe97 	bl	8006980 <_vfiprintf_r>
 8004c52:	b002      	add	sp, #8
 8004c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c58:	b004      	add	sp, #16
 8004c5a:	4770      	bx	lr
 8004c5c:	20000010 	.word	0x20000010

08004c60 <_puts_r>:
 8004c60:	b570      	push	{r4, r5, r6, lr}
 8004c62:	460e      	mov	r6, r1
 8004c64:	4605      	mov	r5, r0
 8004c66:	b118      	cbz	r0, 8004c70 <_puts_r+0x10>
 8004c68:	6983      	ldr	r3, [r0, #24]
 8004c6a:	b90b      	cbnz	r3, 8004c70 <_puts_r+0x10>
 8004c6c:	f001 f8c0 	bl	8005df0 <__sinit>
 8004c70:	69ab      	ldr	r3, [r5, #24]
 8004c72:	68ac      	ldr	r4, [r5, #8]
 8004c74:	b913      	cbnz	r3, 8004c7c <_puts_r+0x1c>
 8004c76:	4628      	mov	r0, r5
 8004c78:	f001 f8ba 	bl	8005df0 <__sinit>
 8004c7c:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <_puts_r+0xd0>)
 8004c7e:	429c      	cmp	r4, r3
 8004c80:	d120      	bne.n	8004cc4 <_puts_r+0x64>
 8004c82:	686c      	ldr	r4, [r5, #4]
 8004c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c86:	07db      	lsls	r3, r3, #31
 8004c88:	d405      	bmi.n	8004c96 <_puts_r+0x36>
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	0598      	lsls	r0, r3, #22
 8004c8e:	d402      	bmi.n	8004c96 <_puts_r+0x36>
 8004c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c92:	f001 f950 	bl	8005f36 <__retarget_lock_acquire_recursive>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	0719      	lsls	r1, r3, #28
 8004c9a:	d51d      	bpl.n	8004cd8 <_puts_r+0x78>
 8004c9c:	6923      	ldr	r3, [r4, #16]
 8004c9e:	b1db      	cbz	r3, 8004cd8 <_puts_r+0x78>
 8004ca0:	3e01      	subs	r6, #1
 8004ca2:	68a3      	ldr	r3, [r4, #8]
 8004ca4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	60a3      	str	r3, [r4, #8]
 8004cac:	bb39      	cbnz	r1, 8004cfe <_puts_r+0x9e>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da38      	bge.n	8004d24 <_puts_r+0xc4>
 8004cb2:	4622      	mov	r2, r4
 8004cb4:	210a      	movs	r1, #10
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 f848 	bl	8004d4c <__swbuf_r>
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d011      	beq.n	8004ce4 <_puts_r+0x84>
 8004cc0:	250a      	movs	r5, #10
 8004cc2:	e011      	b.n	8004ce8 <_puts_r+0x88>
 8004cc4:	4b1b      	ldr	r3, [pc, #108]	; (8004d34 <_puts_r+0xd4>)
 8004cc6:	429c      	cmp	r4, r3
 8004cc8:	d101      	bne.n	8004cce <_puts_r+0x6e>
 8004cca:	68ac      	ldr	r4, [r5, #8]
 8004ccc:	e7da      	b.n	8004c84 <_puts_r+0x24>
 8004cce:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <_puts_r+0xd8>)
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	bf08      	it	eq
 8004cd4:	68ec      	ldreq	r4, [r5, #12]
 8004cd6:	e7d5      	b.n	8004c84 <_puts_r+0x24>
 8004cd8:	4621      	mov	r1, r4
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 f888 	bl	8004df0 <__swsetup_r>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d0dd      	beq.n	8004ca0 <_puts_r+0x40>
 8004ce4:	f04f 35ff 	mov.w	r5, #4294967295
 8004ce8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cea:	07da      	lsls	r2, r3, #31
 8004cec:	d405      	bmi.n	8004cfa <_puts_r+0x9a>
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	059b      	lsls	r3, r3, #22
 8004cf2:	d402      	bmi.n	8004cfa <_puts_r+0x9a>
 8004cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cf6:	f001 f91f 	bl	8005f38 <__retarget_lock_release_recursive>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	bd70      	pop	{r4, r5, r6, pc}
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da04      	bge.n	8004d0c <_puts_r+0xac>
 8004d02:	69a2      	ldr	r2, [r4, #24]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dc06      	bgt.n	8004d16 <_puts_r+0xb6>
 8004d08:	290a      	cmp	r1, #10
 8004d0a:	d004      	beq.n	8004d16 <_puts_r+0xb6>
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	6022      	str	r2, [r4, #0]
 8004d12:	7019      	strb	r1, [r3, #0]
 8004d14:	e7c5      	b.n	8004ca2 <_puts_r+0x42>
 8004d16:	4622      	mov	r2, r4
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f000 f817 	bl	8004d4c <__swbuf_r>
 8004d1e:	3001      	adds	r0, #1
 8004d20:	d1bf      	bne.n	8004ca2 <_puts_r+0x42>
 8004d22:	e7df      	b.n	8004ce4 <_puts_r+0x84>
 8004d24:	250a      	movs	r5, #10
 8004d26:	6823      	ldr	r3, [r4, #0]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	6022      	str	r2, [r4, #0]
 8004d2c:	701d      	strb	r5, [r3, #0]
 8004d2e:	e7db      	b.n	8004ce8 <_puts_r+0x88>
 8004d30:	0800720c 	.word	0x0800720c
 8004d34:	0800722c 	.word	0x0800722c
 8004d38:	080071ec 	.word	0x080071ec

08004d3c <puts>:
 8004d3c:	4b02      	ldr	r3, [pc, #8]	; (8004d48 <puts+0xc>)
 8004d3e:	4601      	mov	r1, r0
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	f7ff bf8d 	b.w	8004c60 <_puts_r>
 8004d46:	bf00      	nop
 8004d48:	20000010 	.word	0x20000010

08004d4c <__swbuf_r>:
 8004d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d4e:	460e      	mov	r6, r1
 8004d50:	4614      	mov	r4, r2
 8004d52:	4605      	mov	r5, r0
 8004d54:	b118      	cbz	r0, 8004d5e <__swbuf_r+0x12>
 8004d56:	6983      	ldr	r3, [r0, #24]
 8004d58:	b90b      	cbnz	r3, 8004d5e <__swbuf_r+0x12>
 8004d5a:	f001 f849 	bl	8005df0 <__sinit>
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <__swbuf_r+0x98>)
 8004d60:	429c      	cmp	r4, r3
 8004d62:	d12b      	bne.n	8004dbc <__swbuf_r+0x70>
 8004d64:	686c      	ldr	r4, [r5, #4]
 8004d66:	69a3      	ldr	r3, [r4, #24]
 8004d68:	60a3      	str	r3, [r4, #8]
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	071a      	lsls	r2, r3, #28
 8004d6e:	d52f      	bpl.n	8004dd0 <__swbuf_r+0x84>
 8004d70:	6923      	ldr	r3, [r4, #16]
 8004d72:	b36b      	cbz	r3, 8004dd0 <__swbuf_r+0x84>
 8004d74:	6923      	ldr	r3, [r4, #16]
 8004d76:	6820      	ldr	r0, [r4, #0]
 8004d78:	b2f6      	uxtb	r6, r6
 8004d7a:	1ac0      	subs	r0, r0, r3
 8004d7c:	6963      	ldr	r3, [r4, #20]
 8004d7e:	4637      	mov	r7, r6
 8004d80:	4283      	cmp	r3, r0
 8004d82:	dc04      	bgt.n	8004d8e <__swbuf_r+0x42>
 8004d84:	4621      	mov	r1, r4
 8004d86:	4628      	mov	r0, r5
 8004d88:	f000 ff9e 	bl	8005cc8 <_fflush_r>
 8004d8c:	bb30      	cbnz	r0, 8004ddc <__swbuf_r+0x90>
 8004d8e:	68a3      	ldr	r3, [r4, #8]
 8004d90:	3001      	adds	r0, #1
 8004d92:	3b01      	subs	r3, #1
 8004d94:	60a3      	str	r3, [r4, #8]
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	6022      	str	r2, [r4, #0]
 8004d9c:	701e      	strb	r6, [r3, #0]
 8004d9e:	6963      	ldr	r3, [r4, #20]
 8004da0:	4283      	cmp	r3, r0
 8004da2:	d004      	beq.n	8004dae <__swbuf_r+0x62>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	07db      	lsls	r3, r3, #31
 8004da8:	d506      	bpl.n	8004db8 <__swbuf_r+0x6c>
 8004daa:	2e0a      	cmp	r6, #10
 8004dac:	d104      	bne.n	8004db8 <__swbuf_r+0x6c>
 8004dae:	4621      	mov	r1, r4
 8004db0:	4628      	mov	r0, r5
 8004db2:	f000 ff89 	bl	8005cc8 <_fflush_r>
 8004db6:	b988      	cbnz	r0, 8004ddc <__swbuf_r+0x90>
 8004db8:	4638      	mov	r0, r7
 8004dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	; (8004de8 <__swbuf_r+0x9c>)
 8004dbe:	429c      	cmp	r4, r3
 8004dc0:	d101      	bne.n	8004dc6 <__swbuf_r+0x7a>
 8004dc2:	68ac      	ldr	r4, [r5, #8]
 8004dc4:	e7cf      	b.n	8004d66 <__swbuf_r+0x1a>
 8004dc6:	4b09      	ldr	r3, [pc, #36]	; (8004dec <__swbuf_r+0xa0>)
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	bf08      	it	eq
 8004dcc:	68ec      	ldreq	r4, [r5, #12]
 8004dce:	e7ca      	b.n	8004d66 <__swbuf_r+0x1a>
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	f000 f80c 	bl	8004df0 <__swsetup_r>
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	d0cb      	beq.n	8004d74 <__swbuf_r+0x28>
 8004ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8004de0:	e7ea      	b.n	8004db8 <__swbuf_r+0x6c>
 8004de2:	bf00      	nop
 8004de4:	0800720c 	.word	0x0800720c
 8004de8:	0800722c 	.word	0x0800722c
 8004dec:	080071ec 	.word	0x080071ec

08004df0 <__swsetup_r>:
 8004df0:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <__swsetup_r+0xcc>)
 8004df2:	b570      	push	{r4, r5, r6, lr}
 8004df4:	681d      	ldr	r5, [r3, #0]
 8004df6:	4606      	mov	r6, r0
 8004df8:	460c      	mov	r4, r1
 8004dfa:	b125      	cbz	r5, 8004e06 <__swsetup_r+0x16>
 8004dfc:	69ab      	ldr	r3, [r5, #24]
 8004dfe:	b913      	cbnz	r3, 8004e06 <__swsetup_r+0x16>
 8004e00:	4628      	mov	r0, r5
 8004e02:	f000 fff5 	bl	8005df0 <__sinit>
 8004e06:	4b2e      	ldr	r3, [pc, #184]	; (8004ec0 <__swsetup_r+0xd0>)
 8004e08:	429c      	cmp	r4, r3
 8004e0a:	d10f      	bne.n	8004e2c <__swsetup_r+0x3c>
 8004e0c:	686c      	ldr	r4, [r5, #4]
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e14:	0719      	lsls	r1, r3, #28
 8004e16:	d42c      	bmi.n	8004e72 <__swsetup_r+0x82>
 8004e18:	06dd      	lsls	r5, r3, #27
 8004e1a:	d411      	bmi.n	8004e40 <__swsetup_r+0x50>
 8004e1c:	2309      	movs	r3, #9
 8004e1e:	6033      	str	r3, [r6, #0]
 8004e20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	e03e      	b.n	8004eaa <__swsetup_r+0xba>
 8004e2c:	4b25      	ldr	r3, [pc, #148]	; (8004ec4 <__swsetup_r+0xd4>)
 8004e2e:	429c      	cmp	r4, r3
 8004e30:	d101      	bne.n	8004e36 <__swsetup_r+0x46>
 8004e32:	68ac      	ldr	r4, [r5, #8]
 8004e34:	e7eb      	b.n	8004e0e <__swsetup_r+0x1e>
 8004e36:	4b24      	ldr	r3, [pc, #144]	; (8004ec8 <__swsetup_r+0xd8>)
 8004e38:	429c      	cmp	r4, r3
 8004e3a:	bf08      	it	eq
 8004e3c:	68ec      	ldreq	r4, [r5, #12]
 8004e3e:	e7e6      	b.n	8004e0e <__swsetup_r+0x1e>
 8004e40:	0758      	lsls	r0, r3, #29
 8004e42:	d512      	bpl.n	8004e6a <__swsetup_r+0x7a>
 8004e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e46:	b141      	cbz	r1, 8004e5a <__swsetup_r+0x6a>
 8004e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e4c:	4299      	cmp	r1, r3
 8004e4e:	d002      	beq.n	8004e56 <__swsetup_r+0x66>
 8004e50:	4630      	mov	r0, r6
 8004e52:	f001 fc91 	bl	8006778 <_free_r>
 8004e56:	2300      	movs	r3, #0
 8004e58:	6363      	str	r3, [r4, #52]	; 0x34
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	2300      	movs	r3, #0
 8004e64:	6063      	str	r3, [r4, #4]
 8004e66:	6923      	ldr	r3, [r4, #16]
 8004e68:	6023      	str	r3, [r4, #0]
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	f043 0308 	orr.w	r3, r3, #8
 8004e70:	81a3      	strh	r3, [r4, #12]
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	b94b      	cbnz	r3, 8004e8a <__swsetup_r+0x9a>
 8004e76:	89a3      	ldrh	r3, [r4, #12]
 8004e78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e80:	d003      	beq.n	8004e8a <__swsetup_r+0x9a>
 8004e82:	4621      	mov	r1, r4
 8004e84:	4630      	mov	r0, r6
 8004e86:	f001 f87d 	bl	8005f84 <__smakebuf_r>
 8004e8a:	89a0      	ldrh	r0, [r4, #12]
 8004e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e90:	f010 0301 	ands.w	r3, r0, #1
 8004e94:	d00a      	beq.n	8004eac <__swsetup_r+0xbc>
 8004e96:	2300      	movs	r3, #0
 8004e98:	60a3      	str	r3, [r4, #8]
 8004e9a:	6963      	ldr	r3, [r4, #20]
 8004e9c:	425b      	negs	r3, r3
 8004e9e:	61a3      	str	r3, [r4, #24]
 8004ea0:	6923      	ldr	r3, [r4, #16]
 8004ea2:	b943      	cbnz	r3, 8004eb6 <__swsetup_r+0xc6>
 8004ea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ea8:	d1ba      	bne.n	8004e20 <__swsetup_r+0x30>
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	0781      	lsls	r1, r0, #30
 8004eae:	bf58      	it	pl
 8004eb0:	6963      	ldrpl	r3, [r4, #20]
 8004eb2:	60a3      	str	r3, [r4, #8]
 8004eb4:	e7f4      	b.n	8004ea0 <__swsetup_r+0xb0>
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	e7f7      	b.n	8004eaa <__swsetup_r+0xba>
 8004eba:	bf00      	nop
 8004ebc:	20000010 	.word	0x20000010
 8004ec0:	0800720c 	.word	0x0800720c
 8004ec4:	0800722c 	.word	0x0800722c
 8004ec8:	080071ec 	.word	0x080071ec

08004ecc <quorem>:
 8004ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed0:	6903      	ldr	r3, [r0, #16]
 8004ed2:	690c      	ldr	r4, [r1, #16]
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	42a3      	cmp	r3, r4
 8004ed8:	f2c0 8082 	blt.w	8004fe0 <quorem+0x114>
 8004edc:	3c01      	subs	r4, #1
 8004ede:	f100 0514 	add.w	r5, r0, #20
 8004ee2:	f101 0814 	add.w	r8, r1, #20
 8004ee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004efc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f04:	d331      	bcc.n	8004f6a <quorem+0x9e>
 8004f06:	f04f 0e00 	mov.w	lr, #0
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	46ac      	mov	ip, r5
 8004f0e:	46f2      	mov	sl, lr
 8004f10:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f14:	b293      	uxth	r3, r2
 8004f16:	fb06 e303 	mla	r3, r6, r3, lr
 8004f1a:	0c12      	lsrs	r2, r2, #16
 8004f1c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	fb06 e202 	mla	r2, r6, r2, lr
 8004f26:	ebaa 0303 	sub.w	r3, sl, r3
 8004f2a:	f8dc a000 	ldr.w	sl, [ip]
 8004f2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f32:	fa1f fa8a 	uxth.w	sl, sl
 8004f36:	4453      	add	r3, sl
 8004f38:	f8dc a000 	ldr.w	sl, [ip]
 8004f3c:	b292      	uxth	r2, r2
 8004f3e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f42:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f4c:	4581      	cmp	r9, r0
 8004f4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f52:	f84c 3b04 	str.w	r3, [ip], #4
 8004f56:	d2db      	bcs.n	8004f10 <quorem+0x44>
 8004f58:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f5c:	b92b      	cbnz	r3, 8004f6a <quorem+0x9e>
 8004f5e:	9b01      	ldr	r3, [sp, #4]
 8004f60:	3b04      	subs	r3, #4
 8004f62:	429d      	cmp	r5, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	d32f      	bcc.n	8004fc8 <quorem+0xfc>
 8004f68:	613c      	str	r4, [r7, #16]
 8004f6a:	4638      	mov	r0, r7
 8004f6c:	f001 faec 	bl	8006548 <__mcmp>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	db25      	blt.n	8004fc0 <quorem+0xf4>
 8004f74:	4628      	mov	r0, r5
 8004f76:	f04f 0c00 	mov.w	ip, #0
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004f80:	f8d0 e000 	ldr.w	lr, [r0]
 8004f84:	b28b      	uxth	r3, r1
 8004f86:	ebac 0303 	sub.w	r3, ip, r3
 8004f8a:	fa1f f28e 	uxth.w	r2, lr
 8004f8e:	4413      	add	r3, r2
 8004f90:	0c0a      	lsrs	r2, r1, #16
 8004f92:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fa0:	45c1      	cmp	r9, r8
 8004fa2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fa6:	f840 3b04 	str.w	r3, [r0], #4
 8004faa:	d2e7      	bcs.n	8004f7c <quorem+0xb0>
 8004fac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fb4:	b922      	cbnz	r2, 8004fc0 <quorem+0xf4>
 8004fb6:	3b04      	subs	r3, #4
 8004fb8:	429d      	cmp	r5, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	d30a      	bcc.n	8004fd4 <quorem+0x108>
 8004fbe:	613c      	str	r4, [r7, #16]
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	b003      	add	sp, #12
 8004fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	d1cb      	bne.n	8004f68 <quorem+0x9c>
 8004fd0:	3c01      	subs	r4, #1
 8004fd2:	e7c6      	b.n	8004f62 <quorem+0x96>
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	3b04      	subs	r3, #4
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	d1f0      	bne.n	8004fbe <quorem+0xf2>
 8004fdc:	3c01      	subs	r4, #1
 8004fde:	e7eb      	b.n	8004fb8 <quorem+0xec>
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e7ee      	b.n	8004fc2 <quorem+0xf6>
 8004fe4:	0000      	movs	r0, r0
	...

08004fe8 <_dtoa_r>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	4616      	mov	r6, r2
 8004fee:	461f      	mov	r7, r3
 8004ff0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ff2:	b099      	sub	sp, #100	; 0x64
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ffa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ffe:	b974      	cbnz	r4, 800501e <_dtoa_r+0x36>
 8005000:	2010      	movs	r0, #16
 8005002:	f000 ffff 	bl	8006004 <malloc>
 8005006:	4602      	mov	r2, r0
 8005008:	6268      	str	r0, [r5, #36]	; 0x24
 800500a:	b920      	cbnz	r0, 8005016 <_dtoa_r+0x2e>
 800500c:	21ea      	movs	r1, #234	; 0xea
 800500e:	4ba8      	ldr	r3, [pc, #672]	; (80052b0 <_dtoa_r+0x2c8>)
 8005010:	48a8      	ldr	r0, [pc, #672]	; (80052b4 <_dtoa_r+0x2cc>)
 8005012:	f001 fe4b 	bl	8006cac <__assert_func>
 8005016:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800501a:	6004      	str	r4, [r0, #0]
 800501c:	60c4      	str	r4, [r0, #12]
 800501e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005020:	6819      	ldr	r1, [r3, #0]
 8005022:	b151      	cbz	r1, 800503a <_dtoa_r+0x52>
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	2301      	movs	r3, #1
 8005028:	4093      	lsls	r3, r2
 800502a:	604a      	str	r2, [r1, #4]
 800502c:	608b      	str	r3, [r1, #8]
 800502e:	4628      	mov	r0, r5
 8005030:	f001 f84c 	bl	80060cc <_Bfree>
 8005034:	2200      	movs	r2, #0
 8005036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	1e3b      	subs	r3, r7, #0
 800503c:	bfaf      	iteee	ge
 800503e:	2300      	movge	r3, #0
 8005040:	2201      	movlt	r2, #1
 8005042:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005046:	9305      	strlt	r3, [sp, #20]
 8005048:	bfa8      	it	ge
 800504a:	f8c8 3000 	strge.w	r3, [r8]
 800504e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005052:	4b99      	ldr	r3, [pc, #612]	; (80052b8 <_dtoa_r+0x2d0>)
 8005054:	bfb8      	it	lt
 8005056:	f8c8 2000 	strlt.w	r2, [r8]
 800505a:	ea33 0309 	bics.w	r3, r3, r9
 800505e:	d119      	bne.n	8005094 <_dtoa_r+0xac>
 8005060:	f242 730f 	movw	r3, #9999	; 0x270f
 8005064:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800506c:	4333      	orrs	r3, r6
 800506e:	f000 857f 	beq.w	8005b70 <_dtoa_r+0xb88>
 8005072:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005074:	b953      	cbnz	r3, 800508c <_dtoa_r+0xa4>
 8005076:	4b91      	ldr	r3, [pc, #580]	; (80052bc <_dtoa_r+0x2d4>)
 8005078:	e022      	b.n	80050c0 <_dtoa_r+0xd8>
 800507a:	4b91      	ldr	r3, [pc, #580]	; (80052c0 <_dtoa_r+0x2d8>)
 800507c:	9303      	str	r3, [sp, #12]
 800507e:	3308      	adds	r3, #8
 8005080:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005082:	6013      	str	r3, [r2, #0]
 8005084:	9803      	ldr	r0, [sp, #12]
 8005086:	b019      	add	sp, #100	; 0x64
 8005088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508c:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <_dtoa_r+0x2d4>)
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	3303      	adds	r3, #3
 8005092:	e7f5      	b.n	8005080 <_dtoa_r+0x98>
 8005094:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005098:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800509c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050a0:	2200      	movs	r2, #0
 80050a2:	2300      	movs	r3, #0
 80050a4:	f7fb fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80050a8:	4680      	mov	r8, r0
 80050aa:	b158      	cbz	r0, 80050c4 <_dtoa_r+0xdc>
 80050ac:	2301      	movs	r3, #1
 80050ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f000 8558 	beq.w	8005b6a <_dtoa_r+0xb82>
 80050ba:	4882      	ldr	r0, [pc, #520]	; (80052c4 <_dtoa_r+0x2dc>)
 80050bc:	6018      	str	r0, [r3, #0]
 80050be:	1e43      	subs	r3, r0, #1
 80050c0:	9303      	str	r3, [sp, #12]
 80050c2:	e7df      	b.n	8005084 <_dtoa_r+0x9c>
 80050c4:	ab16      	add	r3, sp, #88	; 0x58
 80050c6:	9301      	str	r3, [sp, #4]
 80050c8:	ab17      	add	r3, sp, #92	; 0x5c
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	4628      	mov	r0, r5
 80050ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050d2:	f001 fae1 	bl	8006698 <__d2b>
 80050d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80050da:	4683      	mov	fp, r0
 80050dc:	2c00      	cmp	r4, #0
 80050de:	d07f      	beq.n	80051e0 <_dtoa_r+0x1f8>
 80050e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80050f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80050f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80050fa:	2200      	movs	r2, #0
 80050fc:	4b72      	ldr	r3, [pc, #456]	; (80052c8 <_dtoa_r+0x2e0>)
 80050fe:	f7fb f833 	bl	8000168 <__aeabi_dsub>
 8005102:	a365      	add	r3, pc, #404	; (adr r3, 8005298 <_dtoa_r+0x2b0>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	f7fb f9e6 	bl	80004d8 <__aeabi_dmul>
 800510c:	a364      	add	r3, pc, #400	; (adr r3, 80052a0 <_dtoa_r+0x2b8>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f7fb f82b 	bl	800016c <__adddf3>
 8005116:	4606      	mov	r6, r0
 8005118:	4620      	mov	r0, r4
 800511a:	460f      	mov	r7, r1
 800511c:	f7fb f972 	bl	8000404 <__aeabi_i2d>
 8005120:	a361      	add	r3, pc, #388	; (adr r3, 80052a8 <_dtoa_r+0x2c0>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb f9d7 	bl	80004d8 <__aeabi_dmul>
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4630      	mov	r0, r6
 8005130:	4639      	mov	r1, r7
 8005132:	f7fb f81b 	bl	800016c <__adddf3>
 8005136:	4606      	mov	r6, r0
 8005138:	460f      	mov	r7, r1
 800513a:	f7fb fc7d 	bl	8000a38 <__aeabi_d2iz>
 800513e:	2200      	movs	r2, #0
 8005140:	4682      	mov	sl, r0
 8005142:	2300      	movs	r3, #0
 8005144:	4630      	mov	r0, r6
 8005146:	4639      	mov	r1, r7
 8005148:	f7fb fc38 	bl	80009bc <__aeabi_dcmplt>
 800514c:	b148      	cbz	r0, 8005162 <_dtoa_r+0x17a>
 800514e:	4650      	mov	r0, sl
 8005150:	f7fb f958 	bl	8000404 <__aeabi_i2d>
 8005154:	4632      	mov	r2, r6
 8005156:	463b      	mov	r3, r7
 8005158:	f7fb fc26 	bl	80009a8 <__aeabi_dcmpeq>
 800515c:	b908      	cbnz	r0, 8005162 <_dtoa_r+0x17a>
 800515e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005162:	f1ba 0f16 	cmp.w	sl, #22
 8005166:	d858      	bhi.n	800521a <_dtoa_r+0x232>
 8005168:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800516c:	4b57      	ldr	r3, [pc, #348]	; (80052cc <_dtoa_r+0x2e4>)
 800516e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f7fb fc21 	bl	80009bc <__aeabi_dcmplt>
 800517a:	2800      	cmp	r0, #0
 800517c:	d04f      	beq.n	800521e <_dtoa_r+0x236>
 800517e:	2300      	movs	r3, #0
 8005180:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005184:	930f      	str	r3, [sp, #60]	; 0x3c
 8005186:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005188:	1b1c      	subs	r4, r3, r4
 800518a:	1e63      	subs	r3, r4, #1
 800518c:	9309      	str	r3, [sp, #36]	; 0x24
 800518e:	bf49      	itett	mi
 8005190:	f1c4 0301 	rsbmi	r3, r4, #1
 8005194:	2300      	movpl	r3, #0
 8005196:	9306      	strmi	r3, [sp, #24]
 8005198:	2300      	movmi	r3, #0
 800519a:	bf54      	ite	pl
 800519c:	9306      	strpl	r3, [sp, #24]
 800519e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80051a0:	f1ba 0f00 	cmp.w	sl, #0
 80051a4:	db3d      	blt.n	8005222 <_dtoa_r+0x23a>
 80051a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80051ac:	4453      	add	r3, sl
 80051ae:	9309      	str	r3, [sp, #36]	; 0x24
 80051b0:	2300      	movs	r3, #0
 80051b2:	930a      	str	r3, [sp, #40]	; 0x28
 80051b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051b6:	2b09      	cmp	r3, #9
 80051b8:	f200 808c 	bhi.w	80052d4 <_dtoa_r+0x2ec>
 80051bc:	2b05      	cmp	r3, #5
 80051be:	bfc4      	itt	gt
 80051c0:	3b04      	subgt	r3, #4
 80051c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80051c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051c6:	bfc8      	it	gt
 80051c8:	2400      	movgt	r4, #0
 80051ca:	f1a3 0302 	sub.w	r3, r3, #2
 80051ce:	bfd8      	it	le
 80051d0:	2401      	movle	r4, #1
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	f200 808a 	bhi.w	80052ec <_dtoa_r+0x304>
 80051d8:	e8df f003 	tbb	[pc, r3]
 80051dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80051e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80051e4:	441c      	add	r4, r3
 80051e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	bfc3      	ittte	gt
 80051ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80051f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80051fa:	f1c3 0320 	rsble	r3, r3, #32
 80051fe:	bfc6      	itte	gt
 8005200:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005204:	4318      	orrgt	r0, r3
 8005206:	fa06 f003 	lslle.w	r0, r6, r3
 800520a:	f7fb f8eb 	bl	80003e4 <__aeabi_ui2d>
 800520e:	2301      	movs	r3, #1
 8005210:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005214:	3c01      	subs	r4, #1
 8005216:	9313      	str	r3, [sp, #76]	; 0x4c
 8005218:	e76f      	b.n	80050fa <_dtoa_r+0x112>
 800521a:	2301      	movs	r3, #1
 800521c:	e7b2      	b.n	8005184 <_dtoa_r+0x19c>
 800521e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005220:	e7b1      	b.n	8005186 <_dtoa_r+0x19e>
 8005222:	9b06      	ldr	r3, [sp, #24]
 8005224:	eba3 030a 	sub.w	r3, r3, sl
 8005228:	9306      	str	r3, [sp, #24]
 800522a:	f1ca 0300 	rsb	r3, sl, #0
 800522e:	930a      	str	r3, [sp, #40]	; 0x28
 8005230:	2300      	movs	r3, #0
 8005232:	930e      	str	r3, [sp, #56]	; 0x38
 8005234:	e7be      	b.n	80051b4 <_dtoa_r+0x1cc>
 8005236:	2300      	movs	r3, #0
 8005238:	930b      	str	r3, [sp, #44]	; 0x2c
 800523a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800523c:	2b00      	cmp	r3, #0
 800523e:	dc58      	bgt.n	80052f2 <_dtoa_r+0x30a>
 8005240:	f04f 0901 	mov.w	r9, #1
 8005244:	464b      	mov	r3, r9
 8005246:	f8cd 9020 	str.w	r9, [sp, #32]
 800524a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800524e:	2200      	movs	r2, #0
 8005250:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005252:	6042      	str	r2, [r0, #4]
 8005254:	2204      	movs	r2, #4
 8005256:	f102 0614 	add.w	r6, r2, #20
 800525a:	429e      	cmp	r6, r3
 800525c:	6841      	ldr	r1, [r0, #4]
 800525e:	d94e      	bls.n	80052fe <_dtoa_r+0x316>
 8005260:	4628      	mov	r0, r5
 8005262:	f000 fef3 	bl	800604c <_Balloc>
 8005266:	9003      	str	r0, [sp, #12]
 8005268:	2800      	cmp	r0, #0
 800526a:	d14c      	bne.n	8005306 <_dtoa_r+0x31e>
 800526c:	4602      	mov	r2, r0
 800526e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005272:	4b17      	ldr	r3, [pc, #92]	; (80052d0 <_dtoa_r+0x2e8>)
 8005274:	e6cc      	b.n	8005010 <_dtoa_r+0x28>
 8005276:	2301      	movs	r3, #1
 8005278:	e7de      	b.n	8005238 <_dtoa_r+0x250>
 800527a:	2300      	movs	r3, #0
 800527c:	930b      	str	r3, [sp, #44]	; 0x2c
 800527e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005280:	eb0a 0903 	add.w	r9, sl, r3
 8005284:	f109 0301 	add.w	r3, r9, #1
 8005288:	2b01      	cmp	r3, #1
 800528a:	9308      	str	r3, [sp, #32]
 800528c:	bfb8      	it	lt
 800528e:	2301      	movlt	r3, #1
 8005290:	e7dd      	b.n	800524e <_dtoa_r+0x266>
 8005292:	2301      	movs	r3, #1
 8005294:	e7f2      	b.n	800527c <_dtoa_r+0x294>
 8005296:	bf00      	nop
 8005298:	636f4361 	.word	0x636f4361
 800529c:	3fd287a7 	.word	0x3fd287a7
 80052a0:	8b60c8b3 	.word	0x8b60c8b3
 80052a4:	3fc68a28 	.word	0x3fc68a28
 80052a8:	509f79fb 	.word	0x509f79fb
 80052ac:	3fd34413 	.word	0x3fd34413
 80052b0:	08007169 	.word	0x08007169
 80052b4:	08007180 	.word	0x08007180
 80052b8:	7ff00000 	.word	0x7ff00000
 80052bc:	08007165 	.word	0x08007165
 80052c0:	0800715c 	.word	0x0800715c
 80052c4:	08007139 	.word	0x08007139
 80052c8:	3ff80000 	.word	0x3ff80000
 80052cc:	080072d0 	.word	0x080072d0
 80052d0:	080071db 	.word	0x080071db
 80052d4:	2401      	movs	r4, #1
 80052d6:	2300      	movs	r3, #0
 80052d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80052da:	9322      	str	r3, [sp, #136]	; 0x88
 80052dc:	f04f 39ff 	mov.w	r9, #4294967295
 80052e0:	2200      	movs	r2, #0
 80052e2:	2312      	movs	r3, #18
 80052e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80052e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80052ea:	e7b0      	b.n	800524e <_dtoa_r+0x266>
 80052ec:	2301      	movs	r3, #1
 80052ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80052f0:	e7f4      	b.n	80052dc <_dtoa_r+0x2f4>
 80052f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80052f6:	464b      	mov	r3, r9
 80052f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80052fc:	e7a7      	b.n	800524e <_dtoa_r+0x266>
 80052fe:	3101      	adds	r1, #1
 8005300:	6041      	str	r1, [r0, #4]
 8005302:	0052      	lsls	r2, r2, #1
 8005304:	e7a7      	b.n	8005256 <_dtoa_r+0x26e>
 8005306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005308:	9a03      	ldr	r2, [sp, #12]
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	9b08      	ldr	r3, [sp, #32]
 800530e:	2b0e      	cmp	r3, #14
 8005310:	f200 80a8 	bhi.w	8005464 <_dtoa_r+0x47c>
 8005314:	2c00      	cmp	r4, #0
 8005316:	f000 80a5 	beq.w	8005464 <_dtoa_r+0x47c>
 800531a:	f1ba 0f00 	cmp.w	sl, #0
 800531e:	dd34      	ble.n	800538a <_dtoa_r+0x3a2>
 8005320:	4a9a      	ldr	r2, [pc, #616]	; (800558c <_dtoa_r+0x5a4>)
 8005322:	f00a 030f 	and.w	r3, sl, #15
 8005326:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800532a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800532e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005332:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005336:	ea4f 142a 	mov.w	r4, sl, asr #4
 800533a:	d016      	beq.n	800536a <_dtoa_r+0x382>
 800533c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005340:	4b93      	ldr	r3, [pc, #588]	; (8005590 <_dtoa_r+0x5a8>)
 8005342:	2703      	movs	r7, #3
 8005344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005348:	f7fb f9f0 	bl	800072c <__aeabi_ddiv>
 800534c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005350:	f004 040f 	and.w	r4, r4, #15
 8005354:	4e8e      	ldr	r6, [pc, #568]	; (8005590 <_dtoa_r+0x5a8>)
 8005356:	b954      	cbnz	r4, 800536e <_dtoa_r+0x386>
 8005358:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800535c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005360:	f7fb f9e4 	bl	800072c <__aeabi_ddiv>
 8005364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005368:	e029      	b.n	80053be <_dtoa_r+0x3d6>
 800536a:	2702      	movs	r7, #2
 800536c:	e7f2      	b.n	8005354 <_dtoa_r+0x36c>
 800536e:	07e1      	lsls	r1, r4, #31
 8005370:	d508      	bpl.n	8005384 <_dtoa_r+0x39c>
 8005372:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005376:	e9d6 2300 	ldrd	r2, r3, [r6]
 800537a:	f7fb f8ad 	bl	80004d8 <__aeabi_dmul>
 800537e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005382:	3701      	adds	r7, #1
 8005384:	1064      	asrs	r4, r4, #1
 8005386:	3608      	adds	r6, #8
 8005388:	e7e5      	b.n	8005356 <_dtoa_r+0x36e>
 800538a:	f000 80a5 	beq.w	80054d8 <_dtoa_r+0x4f0>
 800538e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005392:	f1ca 0400 	rsb	r4, sl, #0
 8005396:	4b7d      	ldr	r3, [pc, #500]	; (800558c <_dtoa_r+0x5a4>)
 8005398:	f004 020f 	and.w	r2, r4, #15
 800539c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f7fb f898 	bl	80004d8 <__aeabi_dmul>
 80053a8:	2702      	movs	r7, #2
 80053aa:	2300      	movs	r3, #0
 80053ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053b0:	4e77      	ldr	r6, [pc, #476]	; (8005590 <_dtoa_r+0x5a8>)
 80053b2:	1124      	asrs	r4, r4, #4
 80053b4:	2c00      	cmp	r4, #0
 80053b6:	f040 8084 	bne.w	80054c2 <_dtoa_r+0x4da>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1d2      	bne.n	8005364 <_dtoa_r+0x37c>
 80053be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 808b 	beq.w	80054dc <_dtoa_r+0x4f4>
 80053c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053d2:	2200      	movs	r2, #0
 80053d4:	4b6f      	ldr	r3, [pc, #444]	; (8005594 <_dtoa_r+0x5ac>)
 80053d6:	f7fb faf1 	bl	80009bc <__aeabi_dcmplt>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d07e      	beq.n	80054dc <_dtoa_r+0x4f4>
 80053de:	9b08      	ldr	r3, [sp, #32]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d07b      	beq.n	80054dc <_dtoa_r+0x4f4>
 80053e4:	f1b9 0f00 	cmp.w	r9, #0
 80053e8:	dd38      	ble.n	800545c <_dtoa_r+0x474>
 80053ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053ee:	2200      	movs	r2, #0
 80053f0:	4b69      	ldr	r3, [pc, #420]	; (8005598 <_dtoa_r+0x5b0>)
 80053f2:	f7fb f871 	bl	80004d8 <__aeabi_dmul>
 80053f6:	464c      	mov	r4, r9
 80053f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005400:	3701      	adds	r7, #1
 8005402:	4638      	mov	r0, r7
 8005404:	f7fa fffe 	bl	8000404 <__aeabi_i2d>
 8005408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540c:	f7fb f864 	bl	80004d8 <__aeabi_dmul>
 8005410:	2200      	movs	r2, #0
 8005412:	4b62      	ldr	r3, [pc, #392]	; (800559c <_dtoa_r+0x5b4>)
 8005414:	f7fa feaa 	bl	800016c <__adddf3>
 8005418:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800541c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005420:	9611      	str	r6, [sp, #68]	; 0x44
 8005422:	2c00      	cmp	r4, #0
 8005424:	d15d      	bne.n	80054e2 <_dtoa_r+0x4fa>
 8005426:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800542a:	2200      	movs	r2, #0
 800542c:	4b5c      	ldr	r3, [pc, #368]	; (80055a0 <_dtoa_r+0x5b8>)
 800542e:	f7fa fe9b 	bl	8000168 <__aeabi_dsub>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800543a:	4633      	mov	r3, r6
 800543c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800543e:	f7fb fadb 	bl	80009f8 <__aeabi_dcmpgt>
 8005442:	2800      	cmp	r0, #0
 8005444:	f040 829c 	bne.w	8005980 <_dtoa_r+0x998>
 8005448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800544c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800544e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005452:	f7fb fab3 	bl	80009bc <__aeabi_dcmplt>
 8005456:	2800      	cmp	r0, #0
 8005458:	f040 8290 	bne.w	800597c <_dtoa_r+0x994>
 800545c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005460:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005464:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005466:	2b00      	cmp	r3, #0
 8005468:	f2c0 8152 	blt.w	8005710 <_dtoa_r+0x728>
 800546c:	f1ba 0f0e 	cmp.w	sl, #14
 8005470:	f300 814e 	bgt.w	8005710 <_dtoa_r+0x728>
 8005474:	4b45      	ldr	r3, [pc, #276]	; (800558c <_dtoa_r+0x5a4>)
 8005476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800547a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800547e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005482:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005484:	2b00      	cmp	r3, #0
 8005486:	f280 80db 	bge.w	8005640 <_dtoa_r+0x658>
 800548a:	9b08      	ldr	r3, [sp, #32]
 800548c:	2b00      	cmp	r3, #0
 800548e:	f300 80d7 	bgt.w	8005640 <_dtoa_r+0x658>
 8005492:	f040 8272 	bne.w	800597a <_dtoa_r+0x992>
 8005496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800549a:	2200      	movs	r2, #0
 800549c:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <_dtoa_r+0x5b8>)
 800549e:	f7fb f81b 	bl	80004d8 <__aeabi_dmul>
 80054a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054a6:	f7fb fa9d 	bl	80009e4 <__aeabi_dcmpge>
 80054aa:	9c08      	ldr	r4, [sp, #32]
 80054ac:	4626      	mov	r6, r4
 80054ae:	2800      	cmp	r0, #0
 80054b0:	f040 8248 	bne.w	8005944 <_dtoa_r+0x95c>
 80054b4:	2331      	movs	r3, #49	; 0x31
 80054b6:	9f03      	ldr	r7, [sp, #12]
 80054b8:	f10a 0a01 	add.w	sl, sl, #1
 80054bc:	f807 3b01 	strb.w	r3, [r7], #1
 80054c0:	e244      	b.n	800594c <_dtoa_r+0x964>
 80054c2:	07e2      	lsls	r2, r4, #31
 80054c4:	d505      	bpl.n	80054d2 <_dtoa_r+0x4ea>
 80054c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ca:	f7fb f805 	bl	80004d8 <__aeabi_dmul>
 80054ce:	2301      	movs	r3, #1
 80054d0:	3701      	adds	r7, #1
 80054d2:	1064      	asrs	r4, r4, #1
 80054d4:	3608      	adds	r6, #8
 80054d6:	e76d      	b.n	80053b4 <_dtoa_r+0x3cc>
 80054d8:	2702      	movs	r7, #2
 80054da:	e770      	b.n	80053be <_dtoa_r+0x3d6>
 80054dc:	46d0      	mov	r8, sl
 80054de:	9c08      	ldr	r4, [sp, #32]
 80054e0:	e78f      	b.n	8005402 <_dtoa_r+0x41a>
 80054e2:	9903      	ldr	r1, [sp, #12]
 80054e4:	4b29      	ldr	r3, [pc, #164]	; (800558c <_dtoa_r+0x5a4>)
 80054e6:	4421      	add	r1, r4
 80054e8:	9112      	str	r1, [sp, #72]	; 0x48
 80054ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80054f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d055      	beq.n	80055a8 <_dtoa_r+0x5c0>
 80054fc:	2000      	movs	r0, #0
 80054fe:	4929      	ldr	r1, [pc, #164]	; (80055a4 <_dtoa_r+0x5bc>)
 8005500:	f7fb f914 	bl	800072c <__aeabi_ddiv>
 8005504:	463b      	mov	r3, r7
 8005506:	4632      	mov	r2, r6
 8005508:	f7fa fe2e 	bl	8000168 <__aeabi_dsub>
 800550c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005510:	9f03      	ldr	r7, [sp, #12]
 8005512:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005516:	f7fb fa8f 	bl	8000a38 <__aeabi_d2iz>
 800551a:	4604      	mov	r4, r0
 800551c:	f7fa ff72 	bl	8000404 <__aeabi_i2d>
 8005520:	4602      	mov	r2, r0
 8005522:	460b      	mov	r3, r1
 8005524:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005528:	f7fa fe1e 	bl	8000168 <__aeabi_dsub>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	3430      	adds	r4, #48	; 0x30
 8005532:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005536:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800553a:	f807 4b01 	strb.w	r4, [r7], #1
 800553e:	f7fb fa3d 	bl	80009bc <__aeabi_dcmplt>
 8005542:	2800      	cmp	r0, #0
 8005544:	d174      	bne.n	8005630 <_dtoa_r+0x648>
 8005546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800554a:	2000      	movs	r0, #0
 800554c:	4911      	ldr	r1, [pc, #68]	; (8005594 <_dtoa_r+0x5ac>)
 800554e:	f7fa fe0b 	bl	8000168 <__aeabi_dsub>
 8005552:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005556:	f7fb fa31 	bl	80009bc <__aeabi_dcmplt>
 800555a:	2800      	cmp	r0, #0
 800555c:	f040 80b7 	bne.w	80056ce <_dtoa_r+0x6e6>
 8005560:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005562:	429f      	cmp	r7, r3
 8005564:	f43f af7a 	beq.w	800545c <_dtoa_r+0x474>
 8005568:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800556c:	2200      	movs	r2, #0
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <_dtoa_r+0x5b0>)
 8005570:	f7fa ffb2 	bl	80004d8 <__aeabi_dmul>
 8005574:	2200      	movs	r2, #0
 8005576:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800557a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <_dtoa_r+0x5b0>)
 8005580:	f7fa ffaa 	bl	80004d8 <__aeabi_dmul>
 8005584:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005588:	e7c3      	b.n	8005512 <_dtoa_r+0x52a>
 800558a:	bf00      	nop
 800558c:	080072d0 	.word	0x080072d0
 8005590:	080072a8 	.word	0x080072a8
 8005594:	3ff00000 	.word	0x3ff00000
 8005598:	40240000 	.word	0x40240000
 800559c:	401c0000 	.word	0x401c0000
 80055a0:	40140000 	.word	0x40140000
 80055a4:	3fe00000 	.word	0x3fe00000
 80055a8:	4630      	mov	r0, r6
 80055aa:	4639      	mov	r1, r7
 80055ac:	f7fa ff94 	bl	80004d8 <__aeabi_dmul>
 80055b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055b6:	9c03      	ldr	r4, [sp, #12]
 80055b8:	9314      	str	r3, [sp, #80]	; 0x50
 80055ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055be:	f7fb fa3b 	bl	8000a38 <__aeabi_d2iz>
 80055c2:	9015      	str	r0, [sp, #84]	; 0x54
 80055c4:	f7fa ff1e 	bl	8000404 <__aeabi_i2d>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d0:	f7fa fdca 	bl	8000168 <__aeabi_dsub>
 80055d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055d6:	4606      	mov	r6, r0
 80055d8:	3330      	adds	r3, #48	; 0x30
 80055da:	f804 3b01 	strb.w	r3, [r4], #1
 80055de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055e0:	460f      	mov	r7, r1
 80055e2:	429c      	cmp	r4, r3
 80055e4:	f04f 0200 	mov.w	r2, #0
 80055e8:	d124      	bne.n	8005634 <_dtoa_r+0x64c>
 80055ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055ee:	4bb0      	ldr	r3, [pc, #704]	; (80058b0 <_dtoa_r+0x8c8>)
 80055f0:	f7fa fdbc 	bl	800016c <__adddf3>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4630      	mov	r0, r6
 80055fa:	4639      	mov	r1, r7
 80055fc:	f7fb f9fc 	bl	80009f8 <__aeabi_dcmpgt>
 8005600:	2800      	cmp	r0, #0
 8005602:	d163      	bne.n	80056cc <_dtoa_r+0x6e4>
 8005604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005608:	2000      	movs	r0, #0
 800560a:	49a9      	ldr	r1, [pc, #676]	; (80058b0 <_dtoa_r+0x8c8>)
 800560c:	f7fa fdac 	bl	8000168 <__aeabi_dsub>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4630      	mov	r0, r6
 8005616:	4639      	mov	r1, r7
 8005618:	f7fb f9d0 	bl	80009bc <__aeabi_dcmplt>
 800561c:	2800      	cmp	r0, #0
 800561e:	f43f af1d 	beq.w	800545c <_dtoa_r+0x474>
 8005622:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005624:	1e7b      	subs	r3, r7, #1
 8005626:	9314      	str	r3, [sp, #80]	; 0x50
 8005628:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800562c:	2b30      	cmp	r3, #48	; 0x30
 800562e:	d0f8      	beq.n	8005622 <_dtoa_r+0x63a>
 8005630:	46c2      	mov	sl, r8
 8005632:	e03b      	b.n	80056ac <_dtoa_r+0x6c4>
 8005634:	4b9f      	ldr	r3, [pc, #636]	; (80058b4 <_dtoa_r+0x8cc>)
 8005636:	f7fa ff4f 	bl	80004d8 <__aeabi_dmul>
 800563a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800563e:	e7bc      	b.n	80055ba <_dtoa_r+0x5d2>
 8005640:	9f03      	ldr	r7, [sp, #12]
 8005642:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800564a:	4640      	mov	r0, r8
 800564c:	4649      	mov	r1, r9
 800564e:	f7fb f86d 	bl	800072c <__aeabi_ddiv>
 8005652:	f7fb f9f1 	bl	8000a38 <__aeabi_d2iz>
 8005656:	4604      	mov	r4, r0
 8005658:	f7fa fed4 	bl	8000404 <__aeabi_i2d>
 800565c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005660:	f7fa ff3a 	bl	80004d8 <__aeabi_dmul>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4640      	mov	r0, r8
 800566a:	4649      	mov	r1, r9
 800566c:	f7fa fd7c 	bl	8000168 <__aeabi_dsub>
 8005670:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005674:	f807 6b01 	strb.w	r6, [r7], #1
 8005678:	9e03      	ldr	r6, [sp, #12]
 800567a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800567e:	1bbe      	subs	r6, r7, r6
 8005680:	45b4      	cmp	ip, r6
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	d136      	bne.n	80056f6 <_dtoa_r+0x70e>
 8005688:	f7fa fd70 	bl	800016c <__adddf3>
 800568c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005690:	4680      	mov	r8, r0
 8005692:	4689      	mov	r9, r1
 8005694:	f7fb f9b0 	bl	80009f8 <__aeabi_dcmpgt>
 8005698:	bb58      	cbnz	r0, 80056f2 <_dtoa_r+0x70a>
 800569a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800569e:	4640      	mov	r0, r8
 80056a0:	4649      	mov	r1, r9
 80056a2:	f7fb f981 	bl	80009a8 <__aeabi_dcmpeq>
 80056a6:	b108      	cbz	r0, 80056ac <_dtoa_r+0x6c4>
 80056a8:	07e1      	lsls	r1, r4, #31
 80056aa:	d422      	bmi.n	80056f2 <_dtoa_r+0x70a>
 80056ac:	4628      	mov	r0, r5
 80056ae:	4659      	mov	r1, fp
 80056b0:	f000 fd0c 	bl	80060cc <_Bfree>
 80056b4:	2300      	movs	r3, #0
 80056b6:	703b      	strb	r3, [r7, #0]
 80056b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056ba:	f10a 0001 	add.w	r0, sl, #1
 80056be:	6018      	str	r0, [r3, #0]
 80056c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f43f acde 	beq.w	8005084 <_dtoa_r+0x9c>
 80056c8:	601f      	str	r7, [r3, #0]
 80056ca:	e4db      	b.n	8005084 <_dtoa_r+0x9c>
 80056cc:	4627      	mov	r7, r4
 80056ce:	463b      	mov	r3, r7
 80056d0:	461f      	mov	r7, r3
 80056d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056d6:	2a39      	cmp	r2, #57	; 0x39
 80056d8:	d107      	bne.n	80056ea <_dtoa_r+0x702>
 80056da:	9a03      	ldr	r2, [sp, #12]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d1f7      	bne.n	80056d0 <_dtoa_r+0x6e8>
 80056e0:	2230      	movs	r2, #48	; 0x30
 80056e2:	9903      	ldr	r1, [sp, #12]
 80056e4:	f108 0801 	add.w	r8, r8, #1
 80056e8:	700a      	strb	r2, [r1, #0]
 80056ea:	781a      	ldrb	r2, [r3, #0]
 80056ec:	3201      	adds	r2, #1
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	e79e      	b.n	8005630 <_dtoa_r+0x648>
 80056f2:	46d0      	mov	r8, sl
 80056f4:	e7eb      	b.n	80056ce <_dtoa_r+0x6e6>
 80056f6:	2200      	movs	r2, #0
 80056f8:	4b6e      	ldr	r3, [pc, #440]	; (80058b4 <_dtoa_r+0x8cc>)
 80056fa:	f7fa feed 	bl	80004d8 <__aeabi_dmul>
 80056fe:	2200      	movs	r2, #0
 8005700:	2300      	movs	r3, #0
 8005702:	4680      	mov	r8, r0
 8005704:	4689      	mov	r9, r1
 8005706:	f7fb f94f 	bl	80009a8 <__aeabi_dcmpeq>
 800570a:	2800      	cmp	r0, #0
 800570c:	d09b      	beq.n	8005646 <_dtoa_r+0x65e>
 800570e:	e7cd      	b.n	80056ac <_dtoa_r+0x6c4>
 8005710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005712:	2a00      	cmp	r2, #0
 8005714:	f000 80d0 	beq.w	80058b8 <_dtoa_r+0x8d0>
 8005718:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800571a:	2a01      	cmp	r2, #1
 800571c:	f300 80ae 	bgt.w	800587c <_dtoa_r+0x894>
 8005720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005722:	2a00      	cmp	r2, #0
 8005724:	f000 80a6 	beq.w	8005874 <_dtoa_r+0x88c>
 8005728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800572c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800572e:	9f06      	ldr	r7, [sp, #24]
 8005730:	9a06      	ldr	r2, [sp, #24]
 8005732:	2101      	movs	r1, #1
 8005734:	441a      	add	r2, r3
 8005736:	9206      	str	r2, [sp, #24]
 8005738:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800573a:	4628      	mov	r0, r5
 800573c:	441a      	add	r2, r3
 800573e:	9209      	str	r2, [sp, #36]	; 0x24
 8005740:	f000 fd7a 	bl	8006238 <__i2b>
 8005744:	4606      	mov	r6, r0
 8005746:	2f00      	cmp	r7, #0
 8005748:	dd0c      	ble.n	8005764 <_dtoa_r+0x77c>
 800574a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800574c:	2b00      	cmp	r3, #0
 800574e:	dd09      	ble.n	8005764 <_dtoa_r+0x77c>
 8005750:	42bb      	cmp	r3, r7
 8005752:	bfa8      	it	ge
 8005754:	463b      	movge	r3, r7
 8005756:	9a06      	ldr	r2, [sp, #24]
 8005758:	1aff      	subs	r7, r7, r3
 800575a:	1ad2      	subs	r2, r2, r3
 800575c:	9206      	str	r2, [sp, #24]
 800575e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	9309      	str	r3, [sp, #36]	; 0x24
 8005764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005766:	b1f3      	cbz	r3, 80057a6 <_dtoa_r+0x7be>
 8005768:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	f000 80a8 	beq.w	80058c0 <_dtoa_r+0x8d8>
 8005770:	2c00      	cmp	r4, #0
 8005772:	dd10      	ble.n	8005796 <_dtoa_r+0x7ae>
 8005774:	4631      	mov	r1, r6
 8005776:	4622      	mov	r2, r4
 8005778:	4628      	mov	r0, r5
 800577a:	f000 fe1b 	bl	80063b4 <__pow5mult>
 800577e:	465a      	mov	r2, fp
 8005780:	4601      	mov	r1, r0
 8005782:	4606      	mov	r6, r0
 8005784:	4628      	mov	r0, r5
 8005786:	f000 fd6d 	bl	8006264 <__multiply>
 800578a:	4680      	mov	r8, r0
 800578c:	4659      	mov	r1, fp
 800578e:	4628      	mov	r0, r5
 8005790:	f000 fc9c 	bl	80060cc <_Bfree>
 8005794:	46c3      	mov	fp, r8
 8005796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005798:	1b1a      	subs	r2, r3, r4
 800579a:	d004      	beq.n	80057a6 <_dtoa_r+0x7be>
 800579c:	4659      	mov	r1, fp
 800579e:	4628      	mov	r0, r5
 80057a0:	f000 fe08 	bl	80063b4 <__pow5mult>
 80057a4:	4683      	mov	fp, r0
 80057a6:	2101      	movs	r1, #1
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 fd45 	bl	8006238 <__i2b>
 80057ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057b0:	4604      	mov	r4, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f340 8086 	ble.w	80058c4 <_dtoa_r+0x8dc>
 80057b8:	461a      	mov	r2, r3
 80057ba:	4601      	mov	r1, r0
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 fdf9 	bl	80063b4 <__pow5mult>
 80057c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057c4:	4604      	mov	r4, r0
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	dd7f      	ble.n	80058ca <_dtoa_r+0x8e2>
 80057ca:	f04f 0800 	mov.w	r8, #0
 80057ce:	6923      	ldr	r3, [r4, #16]
 80057d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057d4:	6918      	ldr	r0, [r3, #16]
 80057d6:	f000 fce1 	bl	800619c <__hi0bits>
 80057da:	f1c0 0020 	rsb	r0, r0, #32
 80057de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057e0:	4418      	add	r0, r3
 80057e2:	f010 001f 	ands.w	r0, r0, #31
 80057e6:	f000 8092 	beq.w	800590e <_dtoa_r+0x926>
 80057ea:	f1c0 0320 	rsb	r3, r0, #32
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	f340 808a 	ble.w	8005908 <_dtoa_r+0x920>
 80057f4:	f1c0 001c 	rsb	r0, r0, #28
 80057f8:	9b06      	ldr	r3, [sp, #24]
 80057fa:	4407      	add	r7, r0
 80057fc:	4403      	add	r3, r0
 80057fe:	9306      	str	r3, [sp, #24]
 8005800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005802:	4403      	add	r3, r0
 8005804:	9309      	str	r3, [sp, #36]	; 0x24
 8005806:	9b06      	ldr	r3, [sp, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	dd05      	ble.n	8005818 <_dtoa_r+0x830>
 800580c:	4659      	mov	r1, fp
 800580e:	461a      	mov	r2, r3
 8005810:	4628      	mov	r0, r5
 8005812:	f000 fe29 	bl	8006468 <__lshift>
 8005816:	4683      	mov	fp, r0
 8005818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	dd05      	ble.n	800582a <_dtoa_r+0x842>
 800581e:	4621      	mov	r1, r4
 8005820:	461a      	mov	r2, r3
 8005822:	4628      	mov	r0, r5
 8005824:	f000 fe20 	bl	8006468 <__lshift>
 8005828:	4604      	mov	r4, r0
 800582a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800582c:	2b00      	cmp	r3, #0
 800582e:	d070      	beq.n	8005912 <_dtoa_r+0x92a>
 8005830:	4621      	mov	r1, r4
 8005832:	4658      	mov	r0, fp
 8005834:	f000 fe88 	bl	8006548 <__mcmp>
 8005838:	2800      	cmp	r0, #0
 800583a:	da6a      	bge.n	8005912 <_dtoa_r+0x92a>
 800583c:	2300      	movs	r3, #0
 800583e:	4659      	mov	r1, fp
 8005840:	220a      	movs	r2, #10
 8005842:	4628      	mov	r0, r5
 8005844:	f000 fc64 	bl	8006110 <__multadd>
 8005848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800584a:	4683      	mov	fp, r0
 800584c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8194 	beq.w	8005b7e <_dtoa_r+0xb96>
 8005856:	4631      	mov	r1, r6
 8005858:	2300      	movs	r3, #0
 800585a:	220a      	movs	r2, #10
 800585c:	4628      	mov	r0, r5
 800585e:	f000 fc57 	bl	8006110 <__multadd>
 8005862:	f1b9 0f00 	cmp.w	r9, #0
 8005866:	4606      	mov	r6, r0
 8005868:	f300 8093 	bgt.w	8005992 <_dtoa_r+0x9aa>
 800586c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800586e:	2b02      	cmp	r3, #2
 8005870:	dc57      	bgt.n	8005922 <_dtoa_r+0x93a>
 8005872:	e08e      	b.n	8005992 <_dtoa_r+0x9aa>
 8005874:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800587a:	e757      	b.n	800572c <_dtoa_r+0x744>
 800587c:	9b08      	ldr	r3, [sp, #32]
 800587e:	1e5c      	subs	r4, r3, #1
 8005880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005882:	42a3      	cmp	r3, r4
 8005884:	bfb7      	itett	lt
 8005886:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005888:	1b1c      	subge	r4, r3, r4
 800588a:	1ae2      	sublt	r2, r4, r3
 800588c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800588e:	bfbe      	ittt	lt
 8005890:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005892:	189b      	addlt	r3, r3, r2
 8005894:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005896:	9b08      	ldr	r3, [sp, #32]
 8005898:	bfb8      	it	lt
 800589a:	2400      	movlt	r4, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	bfbb      	ittet	lt
 80058a0:	9b06      	ldrlt	r3, [sp, #24]
 80058a2:	9a08      	ldrlt	r2, [sp, #32]
 80058a4:	9f06      	ldrge	r7, [sp, #24]
 80058a6:	1a9f      	sublt	r7, r3, r2
 80058a8:	bfac      	ite	ge
 80058aa:	9b08      	ldrge	r3, [sp, #32]
 80058ac:	2300      	movlt	r3, #0
 80058ae:	e73f      	b.n	8005730 <_dtoa_r+0x748>
 80058b0:	3fe00000 	.word	0x3fe00000
 80058b4:	40240000 	.word	0x40240000
 80058b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058ba:	9f06      	ldr	r7, [sp, #24]
 80058bc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058be:	e742      	b.n	8005746 <_dtoa_r+0x75e>
 80058c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c2:	e76b      	b.n	800579c <_dtoa_r+0x7b4>
 80058c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	dc19      	bgt.n	80058fe <_dtoa_r+0x916>
 80058ca:	9b04      	ldr	r3, [sp, #16]
 80058cc:	b9bb      	cbnz	r3, 80058fe <_dtoa_r+0x916>
 80058ce:	9b05      	ldr	r3, [sp, #20]
 80058d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058d4:	b99b      	cbnz	r3, 80058fe <_dtoa_r+0x916>
 80058d6:	9b05      	ldr	r3, [sp, #20]
 80058d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058dc:	0d1b      	lsrs	r3, r3, #20
 80058de:	051b      	lsls	r3, r3, #20
 80058e0:	b183      	cbz	r3, 8005904 <_dtoa_r+0x91c>
 80058e2:	f04f 0801 	mov.w	r8, #1
 80058e6:	9b06      	ldr	r3, [sp, #24]
 80058e8:	3301      	adds	r3, #1
 80058ea:	9306      	str	r3, [sp, #24]
 80058ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ee:	3301      	adds	r3, #1
 80058f0:	9309      	str	r3, [sp, #36]	; 0x24
 80058f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f47f af6a 	bne.w	80057ce <_dtoa_r+0x7e6>
 80058fa:	2001      	movs	r0, #1
 80058fc:	e76f      	b.n	80057de <_dtoa_r+0x7f6>
 80058fe:	f04f 0800 	mov.w	r8, #0
 8005902:	e7f6      	b.n	80058f2 <_dtoa_r+0x90a>
 8005904:	4698      	mov	r8, r3
 8005906:	e7f4      	b.n	80058f2 <_dtoa_r+0x90a>
 8005908:	f43f af7d 	beq.w	8005806 <_dtoa_r+0x81e>
 800590c:	4618      	mov	r0, r3
 800590e:	301c      	adds	r0, #28
 8005910:	e772      	b.n	80057f8 <_dtoa_r+0x810>
 8005912:	9b08      	ldr	r3, [sp, #32]
 8005914:	2b00      	cmp	r3, #0
 8005916:	dc36      	bgt.n	8005986 <_dtoa_r+0x99e>
 8005918:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800591a:	2b02      	cmp	r3, #2
 800591c:	dd33      	ble.n	8005986 <_dtoa_r+0x99e>
 800591e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005922:	f1b9 0f00 	cmp.w	r9, #0
 8005926:	d10d      	bne.n	8005944 <_dtoa_r+0x95c>
 8005928:	4621      	mov	r1, r4
 800592a:	464b      	mov	r3, r9
 800592c:	2205      	movs	r2, #5
 800592e:	4628      	mov	r0, r5
 8005930:	f000 fbee 	bl	8006110 <__multadd>
 8005934:	4601      	mov	r1, r0
 8005936:	4604      	mov	r4, r0
 8005938:	4658      	mov	r0, fp
 800593a:	f000 fe05 	bl	8006548 <__mcmp>
 800593e:	2800      	cmp	r0, #0
 8005940:	f73f adb8 	bgt.w	80054b4 <_dtoa_r+0x4cc>
 8005944:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005946:	9f03      	ldr	r7, [sp, #12]
 8005948:	ea6f 0a03 	mvn.w	sl, r3
 800594c:	f04f 0800 	mov.w	r8, #0
 8005950:	4621      	mov	r1, r4
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fbba 	bl	80060cc <_Bfree>
 8005958:	2e00      	cmp	r6, #0
 800595a:	f43f aea7 	beq.w	80056ac <_dtoa_r+0x6c4>
 800595e:	f1b8 0f00 	cmp.w	r8, #0
 8005962:	d005      	beq.n	8005970 <_dtoa_r+0x988>
 8005964:	45b0      	cmp	r8, r6
 8005966:	d003      	beq.n	8005970 <_dtoa_r+0x988>
 8005968:	4641      	mov	r1, r8
 800596a:	4628      	mov	r0, r5
 800596c:	f000 fbae 	bl	80060cc <_Bfree>
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fbaa 	bl	80060cc <_Bfree>
 8005978:	e698      	b.n	80056ac <_dtoa_r+0x6c4>
 800597a:	2400      	movs	r4, #0
 800597c:	4626      	mov	r6, r4
 800597e:	e7e1      	b.n	8005944 <_dtoa_r+0x95c>
 8005980:	46c2      	mov	sl, r8
 8005982:	4626      	mov	r6, r4
 8005984:	e596      	b.n	80054b4 <_dtoa_r+0x4cc>
 8005986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80fd 	beq.w	8005b8c <_dtoa_r+0xba4>
 8005992:	2f00      	cmp	r7, #0
 8005994:	dd05      	ble.n	80059a2 <_dtoa_r+0x9ba>
 8005996:	4631      	mov	r1, r6
 8005998:	463a      	mov	r2, r7
 800599a:	4628      	mov	r0, r5
 800599c:	f000 fd64 	bl	8006468 <__lshift>
 80059a0:	4606      	mov	r6, r0
 80059a2:	f1b8 0f00 	cmp.w	r8, #0
 80059a6:	d05c      	beq.n	8005a62 <_dtoa_r+0xa7a>
 80059a8:	4628      	mov	r0, r5
 80059aa:	6871      	ldr	r1, [r6, #4]
 80059ac:	f000 fb4e 	bl	800604c <_Balloc>
 80059b0:	4607      	mov	r7, r0
 80059b2:	b928      	cbnz	r0, 80059c0 <_dtoa_r+0x9d8>
 80059b4:	4602      	mov	r2, r0
 80059b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059ba:	4b7f      	ldr	r3, [pc, #508]	; (8005bb8 <_dtoa_r+0xbd0>)
 80059bc:	f7ff bb28 	b.w	8005010 <_dtoa_r+0x28>
 80059c0:	6932      	ldr	r2, [r6, #16]
 80059c2:	f106 010c 	add.w	r1, r6, #12
 80059c6:	3202      	adds	r2, #2
 80059c8:	0092      	lsls	r2, r2, #2
 80059ca:	300c      	adds	r0, #12
 80059cc:	f000 fb30 	bl	8006030 <memcpy>
 80059d0:	2201      	movs	r2, #1
 80059d2:	4639      	mov	r1, r7
 80059d4:	4628      	mov	r0, r5
 80059d6:	f000 fd47 	bl	8006468 <__lshift>
 80059da:	46b0      	mov	r8, r6
 80059dc:	4606      	mov	r6, r0
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	3301      	adds	r3, #1
 80059e2:	9308      	str	r3, [sp, #32]
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	444b      	add	r3, r9
 80059e8:	930a      	str	r3, [sp, #40]	; 0x28
 80059ea:	9b04      	ldr	r3, [sp, #16]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	9309      	str	r3, [sp, #36]	; 0x24
 80059f2:	9b08      	ldr	r3, [sp, #32]
 80059f4:	4621      	mov	r1, r4
 80059f6:	3b01      	subs	r3, #1
 80059f8:	4658      	mov	r0, fp
 80059fa:	9304      	str	r3, [sp, #16]
 80059fc:	f7ff fa66 	bl	8004ecc <quorem>
 8005a00:	4603      	mov	r3, r0
 8005a02:	4641      	mov	r1, r8
 8005a04:	3330      	adds	r3, #48	; 0x30
 8005a06:	9006      	str	r0, [sp, #24]
 8005a08:	4658      	mov	r0, fp
 8005a0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a0c:	f000 fd9c 	bl	8006548 <__mcmp>
 8005a10:	4632      	mov	r2, r6
 8005a12:	4681      	mov	r9, r0
 8005a14:	4621      	mov	r1, r4
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 fdb2 	bl	8006580 <__mdiff>
 8005a1c:	68c2      	ldr	r2, [r0, #12]
 8005a1e:	4607      	mov	r7, r0
 8005a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a22:	bb02      	cbnz	r2, 8005a66 <_dtoa_r+0xa7e>
 8005a24:	4601      	mov	r1, r0
 8005a26:	4658      	mov	r0, fp
 8005a28:	f000 fd8e 	bl	8006548 <__mcmp>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a30:	4639      	mov	r1, r7
 8005a32:	4628      	mov	r0, r5
 8005a34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005a38:	f000 fb48 	bl	80060cc <_Bfree>
 8005a3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a40:	9f08      	ldr	r7, [sp, #32]
 8005a42:	ea43 0102 	orr.w	r1, r3, r2
 8005a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a4c:	d10d      	bne.n	8005a6a <_dtoa_r+0xa82>
 8005a4e:	2b39      	cmp	r3, #57	; 0x39
 8005a50:	d029      	beq.n	8005aa6 <_dtoa_r+0xabe>
 8005a52:	f1b9 0f00 	cmp.w	r9, #0
 8005a56:	dd01      	ble.n	8005a5c <_dtoa_r+0xa74>
 8005a58:	9b06      	ldr	r3, [sp, #24]
 8005a5a:	3331      	adds	r3, #49	; 0x31
 8005a5c:	9a04      	ldr	r2, [sp, #16]
 8005a5e:	7013      	strb	r3, [r2, #0]
 8005a60:	e776      	b.n	8005950 <_dtoa_r+0x968>
 8005a62:	4630      	mov	r0, r6
 8005a64:	e7b9      	b.n	80059da <_dtoa_r+0x9f2>
 8005a66:	2201      	movs	r2, #1
 8005a68:	e7e2      	b.n	8005a30 <_dtoa_r+0xa48>
 8005a6a:	f1b9 0f00 	cmp.w	r9, #0
 8005a6e:	db06      	blt.n	8005a7e <_dtoa_r+0xa96>
 8005a70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005a72:	ea41 0909 	orr.w	r9, r1, r9
 8005a76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a78:	ea59 0101 	orrs.w	r1, r9, r1
 8005a7c:	d120      	bne.n	8005ac0 <_dtoa_r+0xad8>
 8005a7e:	2a00      	cmp	r2, #0
 8005a80:	ddec      	ble.n	8005a5c <_dtoa_r+0xa74>
 8005a82:	4659      	mov	r1, fp
 8005a84:	2201      	movs	r2, #1
 8005a86:	4628      	mov	r0, r5
 8005a88:	9308      	str	r3, [sp, #32]
 8005a8a:	f000 fced 	bl	8006468 <__lshift>
 8005a8e:	4621      	mov	r1, r4
 8005a90:	4683      	mov	fp, r0
 8005a92:	f000 fd59 	bl	8006548 <__mcmp>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	9b08      	ldr	r3, [sp, #32]
 8005a9a:	dc02      	bgt.n	8005aa2 <_dtoa_r+0xaba>
 8005a9c:	d1de      	bne.n	8005a5c <_dtoa_r+0xa74>
 8005a9e:	07da      	lsls	r2, r3, #31
 8005aa0:	d5dc      	bpl.n	8005a5c <_dtoa_r+0xa74>
 8005aa2:	2b39      	cmp	r3, #57	; 0x39
 8005aa4:	d1d8      	bne.n	8005a58 <_dtoa_r+0xa70>
 8005aa6:	2339      	movs	r3, #57	; 0x39
 8005aa8:	9a04      	ldr	r2, [sp, #16]
 8005aaa:	7013      	strb	r3, [r2, #0]
 8005aac:	463b      	mov	r3, r7
 8005aae:	461f      	mov	r7, r3
 8005ab0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	2a39      	cmp	r2, #57	; 0x39
 8005ab8:	d050      	beq.n	8005b5c <_dtoa_r+0xb74>
 8005aba:	3201      	adds	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]
 8005abe:	e747      	b.n	8005950 <_dtoa_r+0x968>
 8005ac0:	2a00      	cmp	r2, #0
 8005ac2:	dd03      	ble.n	8005acc <_dtoa_r+0xae4>
 8005ac4:	2b39      	cmp	r3, #57	; 0x39
 8005ac6:	d0ee      	beq.n	8005aa6 <_dtoa_r+0xabe>
 8005ac8:	3301      	adds	r3, #1
 8005aca:	e7c7      	b.n	8005a5c <_dtoa_r+0xa74>
 8005acc:	9a08      	ldr	r2, [sp, #32]
 8005ace:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005ad0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005ad4:	428a      	cmp	r2, r1
 8005ad6:	d02a      	beq.n	8005b2e <_dtoa_r+0xb46>
 8005ad8:	4659      	mov	r1, fp
 8005ada:	2300      	movs	r3, #0
 8005adc:	220a      	movs	r2, #10
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 fb16 	bl	8006110 <__multadd>
 8005ae4:	45b0      	cmp	r8, r6
 8005ae6:	4683      	mov	fp, r0
 8005ae8:	f04f 0300 	mov.w	r3, #0
 8005aec:	f04f 020a 	mov.w	r2, #10
 8005af0:	4641      	mov	r1, r8
 8005af2:	4628      	mov	r0, r5
 8005af4:	d107      	bne.n	8005b06 <_dtoa_r+0xb1e>
 8005af6:	f000 fb0b 	bl	8006110 <__multadd>
 8005afa:	4680      	mov	r8, r0
 8005afc:	4606      	mov	r6, r0
 8005afe:	9b08      	ldr	r3, [sp, #32]
 8005b00:	3301      	adds	r3, #1
 8005b02:	9308      	str	r3, [sp, #32]
 8005b04:	e775      	b.n	80059f2 <_dtoa_r+0xa0a>
 8005b06:	f000 fb03 	bl	8006110 <__multadd>
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4680      	mov	r8, r0
 8005b0e:	2300      	movs	r3, #0
 8005b10:	220a      	movs	r2, #10
 8005b12:	4628      	mov	r0, r5
 8005b14:	f000 fafc 	bl	8006110 <__multadd>
 8005b18:	4606      	mov	r6, r0
 8005b1a:	e7f0      	b.n	8005afe <_dtoa_r+0xb16>
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	bfcc      	ite	gt
 8005b22:	464f      	movgt	r7, r9
 8005b24:	2701      	movle	r7, #1
 8005b26:	f04f 0800 	mov.w	r8, #0
 8005b2a:	9a03      	ldr	r2, [sp, #12]
 8005b2c:	4417      	add	r7, r2
 8005b2e:	4659      	mov	r1, fp
 8005b30:	2201      	movs	r2, #1
 8005b32:	4628      	mov	r0, r5
 8005b34:	9308      	str	r3, [sp, #32]
 8005b36:	f000 fc97 	bl	8006468 <__lshift>
 8005b3a:	4621      	mov	r1, r4
 8005b3c:	4683      	mov	fp, r0
 8005b3e:	f000 fd03 	bl	8006548 <__mcmp>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	dcb2      	bgt.n	8005aac <_dtoa_r+0xac4>
 8005b46:	d102      	bne.n	8005b4e <_dtoa_r+0xb66>
 8005b48:	9b08      	ldr	r3, [sp, #32]
 8005b4a:	07db      	lsls	r3, r3, #31
 8005b4c:	d4ae      	bmi.n	8005aac <_dtoa_r+0xac4>
 8005b4e:	463b      	mov	r3, r7
 8005b50:	461f      	mov	r7, r3
 8005b52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b56:	2a30      	cmp	r2, #48	; 0x30
 8005b58:	d0fa      	beq.n	8005b50 <_dtoa_r+0xb68>
 8005b5a:	e6f9      	b.n	8005950 <_dtoa_r+0x968>
 8005b5c:	9a03      	ldr	r2, [sp, #12]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d1a5      	bne.n	8005aae <_dtoa_r+0xac6>
 8005b62:	2331      	movs	r3, #49	; 0x31
 8005b64:	f10a 0a01 	add.w	sl, sl, #1
 8005b68:	e779      	b.n	8005a5e <_dtoa_r+0xa76>
 8005b6a:	4b14      	ldr	r3, [pc, #80]	; (8005bbc <_dtoa_r+0xbd4>)
 8005b6c:	f7ff baa8 	b.w	80050c0 <_dtoa_r+0xd8>
 8005b70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f47f aa81 	bne.w	800507a <_dtoa_r+0x92>
 8005b78:	4b11      	ldr	r3, [pc, #68]	; (8005bc0 <_dtoa_r+0xbd8>)
 8005b7a:	f7ff baa1 	b.w	80050c0 <_dtoa_r+0xd8>
 8005b7e:	f1b9 0f00 	cmp.w	r9, #0
 8005b82:	dc03      	bgt.n	8005b8c <_dtoa_r+0xba4>
 8005b84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	f73f aecb 	bgt.w	8005922 <_dtoa_r+0x93a>
 8005b8c:	9f03      	ldr	r7, [sp, #12]
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4658      	mov	r0, fp
 8005b92:	f7ff f99b 	bl	8004ecc <quorem>
 8005b96:	9a03      	ldr	r2, [sp, #12]
 8005b98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b9c:	f807 3b01 	strb.w	r3, [r7], #1
 8005ba0:	1aba      	subs	r2, r7, r2
 8005ba2:	4591      	cmp	r9, r2
 8005ba4:	ddba      	ble.n	8005b1c <_dtoa_r+0xb34>
 8005ba6:	4659      	mov	r1, fp
 8005ba8:	2300      	movs	r3, #0
 8005baa:	220a      	movs	r2, #10
 8005bac:	4628      	mov	r0, r5
 8005bae:	f000 faaf 	bl	8006110 <__multadd>
 8005bb2:	4683      	mov	fp, r0
 8005bb4:	e7eb      	b.n	8005b8e <_dtoa_r+0xba6>
 8005bb6:	bf00      	nop
 8005bb8:	080071db 	.word	0x080071db
 8005bbc:	08007138 	.word	0x08007138
 8005bc0:	0800715c 	.word	0x0800715c

08005bc4 <__sflush_r>:
 8005bc4:	898a      	ldrh	r2, [r1, #12]
 8005bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc8:	4605      	mov	r5, r0
 8005bca:	0710      	lsls	r0, r2, #28
 8005bcc:	460c      	mov	r4, r1
 8005bce:	d457      	bmi.n	8005c80 <__sflush_r+0xbc>
 8005bd0:	684b      	ldr	r3, [r1, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dc04      	bgt.n	8005be0 <__sflush_r+0x1c>
 8005bd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	dc01      	bgt.n	8005be0 <__sflush_r+0x1c>
 8005bdc:	2000      	movs	r0, #0
 8005bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	d0fa      	beq.n	8005bdc <__sflush_r+0x18>
 8005be6:	2300      	movs	r3, #0
 8005be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bec:	682f      	ldr	r7, [r5, #0]
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	d032      	beq.n	8005c58 <__sflush_r+0x94>
 8005bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	075a      	lsls	r2, r3, #29
 8005bf8:	d505      	bpl.n	8005c06 <__sflush_r+0x42>
 8005bfa:	6863      	ldr	r3, [r4, #4]
 8005bfc:	1ac0      	subs	r0, r0, r3
 8005bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c00:	b10b      	cbz	r3, 8005c06 <__sflush_r+0x42>
 8005c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c04:	1ac0      	subs	r0, r0, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	6a21      	ldr	r1, [r4, #32]
 8005c10:	47b0      	blx	r6
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	d106      	bne.n	8005c26 <__sflush_r+0x62>
 8005c18:	6829      	ldr	r1, [r5, #0]
 8005c1a:	291d      	cmp	r1, #29
 8005c1c:	d82c      	bhi.n	8005c78 <__sflush_r+0xb4>
 8005c1e:	4a29      	ldr	r2, [pc, #164]	; (8005cc4 <__sflush_r+0x100>)
 8005c20:	40ca      	lsrs	r2, r1
 8005c22:	07d6      	lsls	r6, r2, #31
 8005c24:	d528      	bpl.n	8005c78 <__sflush_r+0xb4>
 8005c26:	2200      	movs	r2, #0
 8005c28:	6062      	str	r2, [r4, #4]
 8005c2a:	6922      	ldr	r2, [r4, #16]
 8005c2c:	04d9      	lsls	r1, r3, #19
 8005c2e:	6022      	str	r2, [r4, #0]
 8005c30:	d504      	bpl.n	8005c3c <__sflush_r+0x78>
 8005c32:	1c42      	adds	r2, r0, #1
 8005c34:	d101      	bne.n	8005c3a <__sflush_r+0x76>
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	b903      	cbnz	r3, 8005c3c <__sflush_r+0x78>
 8005c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c3e:	602f      	str	r7, [r5, #0]
 8005c40:	2900      	cmp	r1, #0
 8005c42:	d0cb      	beq.n	8005bdc <__sflush_r+0x18>
 8005c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c48:	4299      	cmp	r1, r3
 8005c4a:	d002      	beq.n	8005c52 <__sflush_r+0x8e>
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f000 fd93 	bl	8006778 <_free_r>
 8005c52:	2000      	movs	r0, #0
 8005c54:	6360      	str	r0, [r4, #52]	; 0x34
 8005c56:	e7c2      	b.n	8005bde <__sflush_r+0x1a>
 8005c58:	6a21      	ldr	r1, [r4, #32]
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b0      	blx	r6
 8005c60:	1c41      	adds	r1, r0, #1
 8005c62:	d1c7      	bne.n	8005bf4 <__sflush_r+0x30>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0c4      	beq.n	8005bf4 <__sflush_r+0x30>
 8005c6a:	2b1d      	cmp	r3, #29
 8005c6c:	d001      	beq.n	8005c72 <__sflush_r+0xae>
 8005c6e:	2b16      	cmp	r3, #22
 8005c70:	d101      	bne.n	8005c76 <__sflush_r+0xb2>
 8005c72:	602f      	str	r7, [r5, #0]
 8005c74:	e7b2      	b.n	8005bdc <__sflush_r+0x18>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	e7ae      	b.n	8005bde <__sflush_r+0x1a>
 8005c80:	690f      	ldr	r7, [r1, #16]
 8005c82:	2f00      	cmp	r7, #0
 8005c84:	d0aa      	beq.n	8005bdc <__sflush_r+0x18>
 8005c86:	0793      	lsls	r3, r2, #30
 8005c88:	bf18      	it	ne
 8005c8a:	2300      	movne	r3, #0
 8005c8c:	680e      	ldr	r6, [r1, #0]
 8005c8e:	bf08      	it	eq
 8005c90:	694b      	ldreq	r3, [r1, #20]
 8005c92:	1bf6      	subs	r6, r6, r7
 8005c94:	600f      	str	r7, [r1, #0]
 8005c96:	608b      	str	r3, [r1, #8]
 8005c98:	2e00      	cmp	r6, #0
 8005c9a:	dd9f      	ble.n	8005bdc <__sflush_r+0x18>
 8005c9c:	4633      	mov	r3, r6
 8005c9e:	463a      	mov	r2, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	6a21      	ldr	r1, [r4, #32]
 8005ca4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005ca8:	47e0      	blx	ip
 8005caa:	2800      	cmp	r0, #0
 8005cac:	dc06      	bgt.n	8005cbc <__sflush_r+0xf8>
 8005cae:	89a3      	ldrh	r3, [r4, #12]
 8005cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	e790      	b.n	8005bde <__sflush_r+0x1a>
 8005cbc:	4407      	add	r7, r0
 8005cbe:	1a36      	subs	r6, r6, r0
 8005cc0:	e7ea      	b.n	8005c98 <__sflush_r+0xd4>
 8005cc2:	bf00      	nop
 8005cc4:	20400001 	.word	0x20400001

08005cc8 <_fflush_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	4605      	mov	r5, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	b913      	cbnz	r3, 8005cd8 <_fflush_r+0x10>
 8005cd2:	2500      	movs	r5, #0
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	b118      	cbz	r0, 8005ce2 <_fflush_r+0x1a>
 8005cda:	6983      	ldr	r3, [r0, #24]
 8005cdc:	b90b      	cbnz	r3, 8005ce2 <_fflush_r+0x1a>
 8005cde:	f000 f887 	bl	8005df0 <__sinit>
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <_fflush_r+0x6c>)
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d11b      	bne.n	8005d20 <_fflush_r+0x58>
 8005ce8:	686c      	ldr	r4, [r5, #4]
 8005cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0ef      	beq.n	8005cd2 <_fflush_r+0xa>
 8005cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cf4:	07d0      	lsls	r0, r2, #31
 8005cf6:	d404      	bmi.n	8005d02 <_fflush_r+0x3a>
 8005cf8:	0599      	lsls	r1, r3, #22
 8005cfa:	d402      	bmi.n	8005d02 <_fflush_r+0x3a>
 8005cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfe:	f000 f91a 	bl	8005f36 <__retarget_lock_acquire_recursive>
 8005d02:	4628      	mov	r0, r5
 8005d04:	4621      	mov	r1, r4
 8005d06:	f7ff ff5d 	bl	8005bc4 <__sflush_r>
 8005d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	07da      	lsls	r2, r3, #31
 8005d10:	d4e0      	bmi.n	8005cd4 <_fflush_r+0xc>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	059b      	lsls	r3, r3, #22
 8005d16:	d4dd      	bmi.n	8005cd4 <_fflush_r+0xc>
 8005d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d1a:	f000 f90d 	bl	8005f38 <__retarget_lock_release_recursive>
 8005d1e:	e7d9      	b.n	8005cd4 <_fflush_r+0xc>
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <_fflush_r+0x70>)
 8005d22:	429c      	cmp	r4, r3
 8005d24:	d101      	bne.n	8005d2a <_fflush_r+0x62>
 8005d26:	68ac      	ldr	r4, [r5, #8]
 8005d28:	e7df      	b.n	8005cea <_fflush_r+0x22>
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <_fflush_r+0x74>)
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	bf08      	it	eq
 8005d30:	68ec      	ldreq	r4, [r5, #12]
 8005d32:	e7da      	b.n	8005cea <_fflush_r+0x22>
 8005d34:	0800720c 	.word	0x0800720c
 8005d38:	0800722c 	.word	0x0800722c
 8005d3c:	080071ec 	.word	0x080071ec

08005d40 <std>:
 8005d40:	2300      	movs	r3, #0
 8005d42:	b510      	push	{r4, lr}
 8005d44:	4604      	mov	r4, r0
 8005d46:	e9c0 3300 	strd	r3, r3, [r0]
 8005d4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d4e:	6083      	str	r3, [r0, #8]
 8005d50:	8181      	strh	r1, [r0, #12]
 8005d52:	6643      	str	r3, [r0, #100]	; 0x64
 8005d54:	81c2      	strh	r2, [r0, #14]
 8005d56:	6183      	str	r3, [r0, #24]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	2208      	movs	r2, #8
 8005d5c:	305c      	adds	r0, #92	; 0x5c
 8005d5e:	f7fe faff 	bl	8004360 <memset>
 8005d62:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <std+0x38>)
 8005d64:	6224      	str	r4, [r4, #32]
 8005d66:	6263      	str	r3, [r4, #36]	; 0x24
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <std+0x3c>)
 8005d6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d6c:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <std+0x40>)
 8005d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <std+0x44>)
 8005d72:	6323      	str	r3, [r4, #48]	; 0x30
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	bf00      	nop
 8005d78:	08006c01 	.word	0x08006c01
 8005d7c:	08006c23 	.word	0x08006c23
 8005d80:	08006c5b 	.word	0x08006c5b
 8005d84:	08006c7f 	.word	0x08006c7f

08005d88 <_cleanup_r>:
 8005d88:	4901      	ldr	r1, [pc, #4]	; (8005d90 <_cleanup_r+0x8>)
 8005d8a:	f000 b8af 	b.w	8005eec <_fwalk_reent>
 8005d8e:	bf00      	nop
 8005d90:	08005cc9 	.word	0x08005cc9

08005d94 <__sfmoreglue>:
 8005d94:	2268      	movs	r2, #104	; 0x68
 8005d96:	b570      	push	{r4, r5, r6, lr}
 8005d98:	1e4d      	subs	r5, r1, #1
 8005d9a:	4355      	muls	r5, r2
 8005d9c:	460e      	mov	r6, r1
 8005d9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005da2:	f000 fd51 	bl	8006848 <_malloc_r>
 8005da6:	4604      	mov	r4, r0
 8005da8:	b140      	cbz	r0, 8005dbc <__sfmoreglue+0x28>
 8005daa:	2100      	movs	r1, #0
 8005dac:	e9c0 1600 	strd	r1, r6, [r0]
 8005db0:	300c      	adds	r0, #12
 8005db2:	60a0      	str	r0, [r4, #8]
 8005db4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005db8:	f7fe fad2 	bl	8004360 <memset>
 8005dbc:	4620      	mov	r0, r4
 8005dbe:	bd70      	pop	{r4, r5, r6, pc}

08005dc0 <__sfp_lock_acquire>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	; (8005dc8 <__sfp_lock_acquire+0x8>)
 8005dc2:	f000 b8b8 	b.w	8005f36 <__retarget_lock_acquire_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	20001349 	.word	0x20001349

08005dcc <__sfp_lock_release>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	; (8005dd4 <__sfp_lock_release+0x8>)
 8005dce:	f000 b8b3 	b.w	8005f38 <__retarget_lock_release_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20001349 	.word	0x20001349

08005dd8 <__sinit_lock_acquire>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	; (8005de0 <__sinit_lock_acquire+0x8>)
 8005dda:	f000 b8ac 	b.w	8005f36 <__retarget_lock_acquire_recursive>
 8005dde:	bf00      	nop
 8005de0:	2000134a 	.word	0x2000134a

08005de4 <__sinit_lock_release>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__sinit_lock_release+0x8>)
 8005de6:	f000 b8a7 	b.w	8005f38 <__retarget_lock_release_recursive>
 8005dea:	bf00      	nop
 8005dec:	2000134a 	.word	0x2000134a

08005df0 <__sinit>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4604      	mov	r4, r0
 8005df4:	f7ff fff0 	bl	8005dd8 <__sinit_lock_acquire>
 8005df8:	69a3      	ldr	r3, [r4, #24]
 8005dfa:	b11b      	cbz	r3, 8005e04 <__sinit+0x14>
 8005dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e00:	f7ff bff0 	b.w	8005de4 <__sinit_lock_release>
 8005e04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e08:	6523      	str	r3, [r4, #80]	; 0x50
 8005e0a:	4b13      	ldr	r3, [pc, #76]	; (8005e58 <__sinit+0x68>)
 8005e0c:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <__sinit+0x6c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	bf08      	it	eq
 8005e16:	2301      	moveq	r3, #1
 8005e18:	4620      	mov	r0, r4
 8005e1a:	bf08      	it	eq
 8005e1c:	61a3      	streq	r3, [r4, #24]
 8005e1e:	f000 f81f 	bl	8005e60 <__sfp>
 8005e22:	6060      	str	r0, [r4, #4]
 8005e24:	4620      	mov	r0, r4
 8005e26:	f000 f81b 	bl	8005e60 <__sfp>
 8005e2a:	60a0      	str	r0, [r4, #8]
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	f000 f817 	bl	8005e60 <__sfp>
 8005e32:	2200      	movs	r2, #0
 8005e34:	2104      	movs	r1, #4
 8005e36:	60e0      	str	r0, [r4, #12]
 8005e38:	6860      	ldr	r0, [r4, #4]
 8005e3a:	f7ff ff81 	bl	8005d40 <std>
 8005e3e:	2201      	movs	r2, #1
 8005e40:	2109      	movs	r1, #9
 8005e42:	68a0      	ldr	r0, [r4, #8]
 8005e44:	f7ff ff7c 	bl	8005d40 <std>
 8005e48:	2202      	movs	r2, #2
 8005e4a:	2112      	movs	r1, #18
 8005e4c:	68e0      	ldr	r0, [r4, #12]
 8005e4e:	f7ff ff77 	bl	8005d40 <std>
 8005e52:	2301      	movs	r3, #1
 8005e54:	61a3      	str	r3, [r4, #24]
 8005e56:	e7d1      	b.n	8005dfc <__sinit+0xc>
 8005e58:	08007124 	.word	0x08007124
 8005e5c:	08005d89 	.word	0x08005d89

08005e60 <__sfp>:
 8005e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e62:	4607      	mov	r7, r0
 8005e64:	f7ff ffac 	bl	8005dc0 <__sfp_lock_acquire>
 8005e68:	4b1e      	ldr	r3, [pc, #120]	; (8005ee4 <__sfp+0x84>)
 8005e6a:	681e      	ldr	r6, [r3, #0]
 8005e6c:	69b3      	ldr	r3, [r6, #24]
 8005e6e:	b913      	cbnz	r3, 8005e76 <__sfp+0x16>
 8005e70:	4630      	mov	r0, r6
 8005e72:	f7ff ffbd 	bl	8005df0 <__sinit>
 8005e76:	3648      	adds	r6, #72	; 0x48
 8005e78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	d503      	bpl.n	8005e88 <__sfp+0x28>
 8005e80:	6833      	ldr	r3, [r6, #0]
 8005e82:	b30b      	cbz	r3, 8005ec8 <__sfp+0x68>
 8005e84:	6836      	ldr	r6, [r6, #0]
 8005e86:	e7f7      	b.n	8005e78 <__sfp+0x18>
 8005e88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e8c:	b9d5      	cbnz	r5, 8005ec4 <__sfp+0x64>
 8005e8e:	4b16      	ldr	r3, [pc, #88]	; (8005ee8 <__sfp+0x88>)
 8005e90:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e94:	60e3      	str	r3, [r4, #12]
 8005e96:	6665      	str	r5, [r4, #100]	; 0x64
 8005e98:	f000 f84c 	bl	8005f34 <__retarget_lock_init_recursive>
 8005e9c:	f7ff ff96 	bl	8005dcc <__sfp_lock_release>
 8005ea0:	2208      	movs	r2, #8
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005eac:	6025      	str	r5, [r4, #0]
 8005eae:	61a5      	str	r5, [r4, #24]
 8005eb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eb4:	f7fe fa54 	bl	8004360 <memset>
 8005eb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ebc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec4:	3468      	adds	r4, #104	; 0x68
 8005ec6:	e7d9      	b.n	8005e7c <__sfp+0x1c>
 8005ec8:	2104      	movs	r1, #4
 8005eca:	4638      	mov	r0, r7
 8005ecc:	f7ff ff62 	bl	8005d94 <__sfmoreglue>
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	6030      	str	r0, [r6, #0]
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d1d5      	bne.n	8005e84 <__sfp+0x24>
 8005ed8:	f7ff ff78 	bl	8005dcc <__sfp_lock_release>
 8005edc:	230c      	movs	r3, #12
 8005ede:	603b      	str	r3, [r7, #0]
 8005ee0:	e7ee      	b.n	8005ec0 <__sfp+0x60>
 8005ee2:	bf00      	nop
 8005ee4:	08007124 	.word	0x08007124
 8005ee8:	ffff0001 	.word	0xffff0001

08005eec <_fwalk_reent>:
 8005eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef0:	4606      	mov	r6, r0
 8005ef2:	4688      	mov	r8, r1
 8005ef4:	2700      	movs	r7, #0
 8005ef6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005efa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005efe:	f1b9 0901 	subs.w	r9, r9, #1
 8005f02:	d505      	bpl.n	8005f10 <_fwalk_reent+0x24>
 8005f04:	6824      	ldr	r4, [r4, #0]
 8005f06:	2c00      	cmp	r4, #0
 8005f08:	d1f7      	bne.n	8005efa <_fwalk_reent+0xe>
 8005f0a:	4638      	mov	r0, r7
 8005f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f10:	89ab      	ldrh	r3, [r5, #12]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d907      	bls.n	8005f26 <_fwalk_reent+0x3a>
 8005f16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	d003      	beq.n	8005f26 <_fwalk_reent+0x3a>
 8005f1e:	4629      	mov	r1, r5
 8005f20:	4630      	mov	r0, r6
 8005f22:	47c0      	blx	r8
 8005f24:	4307      	orrs	r7, r0
 8005f26:	3568      	adds	r5, #104	; 0x68
 8005f28:	e7e9      	b.n	8005efe <_fwalk_reent+0x12>
	...

08005f2c <_localeconv_r>:
 8005f2c:	4800      	ldr	r0, [pc, #0]	; (8005f30 <_localeconv_r+0x4>)
 8005f2e:	4770      	bx	lr
 8005f30:	20000164 	.word	0x20000164

08005f34 <__retarget_lock_init_recursive>:
 8005f34:	4770      	bx	lr

08005f36 <__retarget_lock_acquire_recursive>:
 8005f36:	4770      	bx	lr

08005f38 <__retarget_lock_release_recursive>:
 8005f38:	4770      	bx	lr

08005f3a <__swhatbuf_r>:
 8005f3a:	b570      	push	{r4, r5, r6, lr}
 8005f3c:	460e      	mov	r6, r1
 8005f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f42:	4614      	mov	r4, r2
 8005f44:	2900      	cmp	r1, #0
 8005f46:	461d      	mov	r5, r3
 8005f48:	b096      	sub	sp, #88	; 0x58
 8005f4a:	da08      	bge.n	8005f5e <__swhatbuf_r+0x24>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f52:	602a      	str	r2, [r5, #0]
 8005f54:	061a      	lsls	r2, r3, #24
 8005f56:	d410      	bmi.n	8005f7a <__swhatbuf_r+0x40>
 8005f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5c:	e00e      	b.n	8005f7c <__swhatbuf_r+0x42>
 8005f5e:	466a      	mov	r2, sp
 8005f60:	f000 fee4 	bl	8006d2c <_fstat_r>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	dbf1      	blt.n	8005f4c <__swhatbuf_r+0x12>
 8005f68:	9a01      	ldr	r2, [sp, #4]
 8005f6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f72:	425a      	negs	r2, r3
 8005f74:	415a      	adcs	r2, r3
 8005f76:	602a      	str	r2, [r5, #0]
 8005f78:	e7ee      	b.n	8005f58 <__swhatbuf_r+0x1e>
 8005f7a:	2340      	movs	r3, #64	; 0x40
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	b016      	add	sp, #88	; 0x58
 8005f82:	bd70      	pop	{r4, r5, r6, pc}

08005f84 <__smakebuf_r>:
 8005f84:	898b      	ldrh	r3, [r1, #12]
 8005f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f88:	079d      	lsls	r5, r3, #30
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	d507      	bpl.n	8005fa0 <__smakebuf_r+0x1c>
 8005f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	6123      	str	r3, [r4, #16]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	6163      	str	r3, [r4, #20]
 8005f9c:	b002      	add	sp, #8
 8005f9e:	bd70      	pop	{r4, r5, r6, pc}
 8005fa0:	466a      	mov	r2, sp
 8005fa2:	ab01      	add	r3, sp, #4
 8005fa4:	f7ff ffc9 	bl	8005f3a <__swhatbuf_r>
 8005fa8:	9900      	ldr	r1, [sp, #0]
 8005faa:	4605      	mov	r5, r0
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 fc4b 	bl	8006848 <_malloc_r>
 8005fb2:	b948      	cbnz	r0, 8005fc8 <__smakebuf_r+0x44>
 8005fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb8:	059a      	lsls	r2, r3, #22
 8005fba:	d4ef      	bmi.n	8005f9c <__smakebuf_r+0x18>
 8005fbc:	f023 0303 	bic.w	r3, r3, #3
 8005fc0:	f043 0302 	orr.w	r3, r3, #2
 8005fc4:	81a3      	strh	r3, [r4, #12]
 8005fc6:	e7e3      	b.n	8005f90 <__smakebuf_r+0xc>
 8005fc8:	4b0d      	ldr	r3, [pc, #52]	; (8006000 <__smakebuf_r+0x7c>)
 8005fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	6020      	str	r0, [r4, #0]
 8005fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd4:	81a3      	strh	r3, [r4, #12]
 8005fd6:	9b00      	ldr	r3, [sp, #0]
 8005fd8:	6120      	str	r0, [r4, #16]
 8005fda:	6163      	str	r3, [r4, #20]
 8005fdc:	9b01      	ldr	r3, [sp, #4]
 8005fde:	b15b      	cbz	r3, 8005ff8 <__smakebuf_r+0x74>
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe6:	f000 feb3 	bl	8006d50 <_isatty_r>
 8005fea:	b128      	cbz	r0, 8005ff8 <__smakebuf_r+0x74>
 8005fec:	89a3      	ldrh	r3, [r4, #12]
 8005fee:	f023 0303 	bic.w	r3, r3, #3
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	89a0      	ldrh	r0, [r4, #12]
 8005ffa:	4305      	orrs	r5, r0
 8005ffc:	81a5      	strh	r5, [r4, #12]
 8005ffe:	e7cd      	b.n	8005f9c <__smakebuf_r+0x18>
 8006000:	08005d89 	.word	0x08005d89

08006004 <malloc>:
 8006004:	4b02      	ldr	r3, [pc, #8]	; (8006010 <malloc+0xc>)
 8006006:	4601      	mov	r1, r0
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	f000 bc1d 	b.w	8006848 <_malloc_r>
 800600e:	bf00      	nop
 8006010:	20000010 	.word	0x20000010

08006014 <memchr>:
 8006014:	4603      	mov	r3, r0
 8006016:	b510      	push	{r4, lr}
 8006018:	b2c9      	uxtb	r1, r1
 800601a:	4402      	add	r2, r0
 800601c:	4293      	cmp	r3, r2
 800601e:	4618      	mov	r0, r3
 8006020:	d101      	bne.n	8006026 <memchr+0x12>
 8006022:	2000      	movs	r0, #0
 8006024:	e003      	b.n	800602e <memchr+0x1a>
 8006026:	7804      	ldrb	r4, [r0, #0]
 8006028:	3301      	adds	r3, #1
 800602a:	428c      	cmp	r4, r1
 800602c:	d1f6      	bne.n	800601c <memchr+0x8>
 800602e:	bd10      	pop	{r4, pc}

08006030 <memcpy>:
 8006030:	440a      	add	r2, r1
 8006032:	4291      	cmp	r1, r2
 8006034:	f100 33ff 	add.w	r3, r0, #4294967295
 8006038:	d100      	bne.n	800603c <memcpy+0xc>
 800603a:	4770      	bx	lr
 800603c:	b510      	push	{r4, lr}
 800603e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006042:	4291      	cmp	r1, r2
 8006044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006048:	d1f9      	bne.n	800603e <memcpy+0xe>
 800604a:	bd10      	pop	{r4, pc}

0800604c <_Balloc>:
 800604c:	b570      	push	{r4, r5, r6, lr}
 800604e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006050:	4604      	mov	r4, r0
 8006052:	460d      	mov	r5, r1
 8006054:	b976      	cbnz	r6, 8006074 <_Balloc+0x28>
 8006056:	2010      	movs	r0, #16
 8006058:	f7ff ffd4 	bl	8006004 <malloc>
 800605c:	4602      	mov	r2, r0
 800605e:	6260      	str	r0, [r4, #36]	; 0x24
 8006060:	b920      	cbnz	r0, 800606c <_Balloc+0x20>
 8006062:	2166      	movs	r1, #102	; 0x66
 8006064:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <_Balloc+0x78>)
 8006066:	4818      	ldr	r0, [pc, #96]	; (80060c8 <_Balloc+0x7c>)
 8006068:	f000 fe20 	bl	8006cac <__assert_func>
 800606c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006070:	6006      	str	r6, [r0, #0]
 8006072:	60c6      	str	r6, [r0, #12]
 8006074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006076:	68f3      	ldr	r3, [r6, #12]
 8006078:	b183      	cbz	r3, 800609c <_Balloc+0x50>
 800607a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006082:	b9b8      	cbnz	r0, 80060b4 <_Balloc+0x68>
 8006084:	2101      	movs	r1, #1
 8006086:	fa01 f605 	lsl.w	r6, r1, r5
 800608a:	1d72      	adds	r2, r6, #5
 800608c:	4620      	mov	r0, r4
 800608e:	0092      	lsls	r2, r2, #2
 8006090:	f000 fb5e 	bl	8006750 <_calloc_r>
 8006094:	b160      	cbz	r0, 80060b0 <_Balloc+0x64>
 8006096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800609a:	e00e      	b.n	80060ba <_Balloc+0x6e>
 800609c:	2221      	movs	r2, #33	; 0x21
 800609e:	2104      	movs	r1, #4
 80060a0:	4620      	mov	r0, r4
 80060a2:	f000 fb55 	bl	8006750 <_calloc_r>
 80060a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a8:	60f0      	str	r0, [r6, #12]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e4      	bne.n	800607a <_Balloc+0x2e>
 80060b0:	2000      	movs	r0, #0
 80060b2:	bd70      	pop	{r4, r5, r6, pc}
 80060b4:	6802      	ldr	r2, [r0, #0]
 80060b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060ba:	2300      	movs	r3, #0
 80060bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80060c0:	e7f7      	b.n	80060b2 <_Balloc+0x66>
 80060c2:	bf00      	nop
 80060c4:	08007169 	.word	0x08007169
 80060c8:	0800724c 	.word	0x0800724c

080060cc <_Bfree>:
 80060cc:	b570      	push	{r4, r5, r6, lr}
 80060ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060d0:	4605      	mov	r5, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	b976      	cbnz	r6, 80060f4 <_Bfree+0x28>
 80060d6:	2010      	movs	r0, #16
 80060d8:	f7ff ff94 	bl	8006004 <malloc>
 80060dc:	4602      	mov	r2, r0
 80060de:	6268      	str	r0, [r5, #36]	; 0x24
 80060e0:	b920      	cbnz	r0, 80060ec <_Bfree+0x20>
 80060e2:	218a      	movs	r1, #138	; 0x8a
 80060e4:	4b08      	ldr	r3, [pc, #32]	; (8006108 <_Bfree+0x3c>)
 80060e6:	4809      	ldr	r0, [pc, #36]	; (800610c <_Bfree+0x40>)
 80060e8:	f000 fde0 	bl	8006cac <__assert_func>
 80060ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060f0:	6006      	str	r6, [r0, #0]
 80060f2:	60c6      	str	r6, [r0, #12]
 80060f4:	b13c      	cbz	r4, 8006106 <_Bfree+0x3a>
 80060f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80060f8:	6862      	ldr	r2, [r4, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006100:	6021      	str	r1, [r4, #0]
 8006102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006106:	bd70      	pop	{r4, r5, r6, pc}
 8006108:	08007169 	.word	0x08007169
 800610c:	0800724c 	.word	0x0800724c

08006110 <__multadd>:
 8006110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006114:	4607      	mov	r7, r0
 8006116:	460c      	mov	r4, r1
 8006118:	461e      	mov	r6, r3
 800611a:	2000      	movs	r0, #0
 800611c:	690d      	ldr	r5, [r1, #16]
 800611e:	f101 0c14 	add.w	ip, r1, #20
 8006122:	f8dc 3000 	ldr.w	r3, [ip]
 8006126:	3001      	adds	r0, #1
 8006128:	b299      	uxth	r1, r3
 800612a:	fb02 6101 	mla	r1, r2, r1, r6
 800612e:	0c1e      	lsrs	r6, r3, #16
 8006130:	0c0b      	lsrs	r3, r1, #16
 8006132:	fb02 3306 	mla	r3, r2, r6, r3
 8006136:	b289      	uxth	r1, r1
 8006138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800613c:	4285      	cmp	r5, r0
 800613e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006142:	f84c 1b04 	str.w	r1, [ip], #4
 8006146:	dcec      	bgt.n	8006122 <__multadd+0x12>
 8006148:	b30e      	cbz	r6, 800618e <__multadd+0x7e>
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	42ab      	cmp	r3, r5
 800614e:	dc19      	bgt.n	8006184 <__multadd+0x74>
 8006150:	6861      	ldr	r1, [r4, #4]
 8006152:	4638      	mov	r0, r7
 8006154:	3101      	adds	r1, #1
 8006156:	f7ff ff79 	bl	800604c <_Balloc>
 800615a:	4680      	mov	r8, r0
 800615c:	b928      	cbnz	r0, 800616a <__multadd+0x5a>
 800615e:	4602      	mov	r2, r0
 8006160:	21b5      	movs	r1, #181	; 0xb5
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <__multadd+0x84>)
 8006164:	480c      	ldr	r0, [pc, #48]	; (8006198 <__multadd+0x88>)
 8006166:	f000 fda1 	bl	8006cac <__assert_func>
 800616a:	6922      	ldr	r2, [r4, #16]
 800616c:	f104 010c 	add.w	r1, r4, #12
 8006170:	3202      	adds	r2, #2
 8006172:	0092      	lsls	r2, r2, #2
 8006174:	300c      	adds	r0, #12
 8006176:	f7ff ff5b 	bl	8006030 <memcpy>
 800617a:	4621      	mov	r1, r4
 800617c:	4638      	mov	r0, r7
 800617e:	f7ff ffa5 	bl	80060cc <_Bfree>
 8006182:	4644      	mov	r4, r8
 8006184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006188:	3501      	adds	r5, #1
 800618a:	615e      	str	r6, [r3, #20]
 800618c:	6125      	str	r5, [r4, #16]
 800618e:	4620      	mov	r0, r4
 8006190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006194:	080071db 	.word	0x080071db
 8006198:	0800724c 	.word	0x0800724c

0800619c <__hi0bits>:
 800619c:	0c02      	lsrs	r2, r0, #16
 800619e:	0412      	lsls	r2, r2, #16
 80061a0:	4603      	mov	r3, r0
 80061a2:	b9ca      	cbnz	r2, 80061d8 <__hi0bits+0x3c>
 80061a4:	0403      	lsls	r3, r0, #16
 80061a6:	2010      	movs	r0, #16
 80061a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061ac:	bf04      	itt	eq
 80061ae:	021b      	lsleq	r3, r3, #8
 80061b0:	3008      	addeq	r0, #8
 80061b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061b6:	bf04      	itt	eq
 80061b8:	011b      	lsleq	r3, r3, #4
 80061ba:	3004      	addeq	r0, #4
 80061bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80061c0:	bf04      	itt	eq
 80061c2:	009b      	lsleq	r3, r3, #2
 80061c4:	3002      	addeq	r0, #2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	db05      	blt.n	80061d6 <__hi0bits+0x3a>
 80061ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80061ce:	f100 0001 	add.w	r0, r0, #1
 80061d2:	bf08      	it	eq
 80061d4:	2020      	moveq	r0, #32
 80061d6:	4770      	bx	lr
 80061d8:	2000      	movs	r0, #0
 80061da:	e7e5      	b.n	80061a8 <__hi0bits+0xc>

080061dc <__lo0bits>:
 80061dc:	6803      	ldr	r3, [r0, #0]
 80061de:	4602      	mov	r2, r0
 80061e0:	f013 0007 	ands.w	r0, r3, #7
 80061e4:	d00b      	beq.n	80061fe <__lo0bits+0x22>
 80061e6:	07d9      	lsls	r1, r3, #31
 80061e8:	d421      	bmi.n	800622e <__lo0bits+0x52>
 80061ea:	0798      	lsls	r0, r3, #30
 80061ec:	bf49      	itett	mi
 80061ee:	085b      	lsrmi	r3, r3, #1
 80061f0:	089b      	lsrpl	r3, r3, #2
 80061f2:	2001      	movmi	r0, #1
 80061f4:	6013      	strmi	r3, [r2, #0]
 80061f6:	bf5c      	itt	pl
 80061f8:	2002      	movpl	r0, #2
 80061fa:	6013      	strpl	r3, [r2, #0]
 80061fc:	4770      	bx	lr
 80061fe:	b299      	uxth	r1, r3
 8006200:	b909      	cbnz	r1, 8006206 <__lo0bits+0x2a>
 8006202:	2010      	movs	r0, #16
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	b2d9      	uxtb	r1, r3
 8006208:	b909      	cbnz	r1, 800620e <__lo0bits+0x32>
 800620a:	3008      	adds	r0, #8
 800620c:	0a1b      	lsrs	r3, r3, #8
 800620e:	0719      	lsls	r1, r3, #28
 8006210:	bf04      	itt	eq
 8006212:	091b      	lsreq	r3, r3, #4
 8006214:	3004      	addeq	r0, #4
 8006216:	0799      	lsls	r1, r3, #30
 8006218:	bf04      	itt	eq
 800621a:	089b      	lsreq	r3, r3, #2
 800621c:	3002      	addeq	r0, #2
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	d403      	bmi.n	800622a <__lo0bits+0x4e>
 8006222:	085b      	lsrs	r3, r3, #1
 8006224:	f100 0001 	add.w	r0, r0, #1
 8006228:	d003      	beq.n	8006232 <__lo0bits+0x56>
 800622a:	6013      	str	r3, [r2, #0]
 800622c:	4770      	bx	lr
 800622e:	2000      	movs	r0, #0
 8006230:	4770      	bx	lr
 8006232:	2020      	movs	r0, #32
 8006234:	4770      	bx	lr
	...

08006238 <__i2b>:
 8006238:	b510      	push	{r4, lr}
 800623a:	460c      	mov	r4, r1
 800623c:	2101      	movs	r1, #1
 800623e:	f7ff ff05 	bl	800604c <_Balloc>
 8006242:	4602      	mov	r2, r0
 8006244:	b928      	cbnz	r0, 8006252 <__i2b+0x1a>
 8006246:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800624a:	4b04      	ldr	r3, [pc, #16]	; (800625c <__i2b+0x24>)
 800624c:	4804      	ldr	r0, [pc, #16]	; (8006260 <__i2b+0x28>)
 800624e:	f000 fd2d 	bl	8006cac <__assert_func>
 8006252:	2301      	movs	r3, #1
 8006254:	6144      	str	r4, [r0, #20]
 8006256:	6103      	str	r3, [r0, #16]
 8006258:	bd10      	pop	{r4, pc}
 800625a:	bf00      	nop
 800625c:	080071db 	.word	0x080071db
 8006260:	0800724c 	.word	0x0800724c

08006264 <__multiply>:
 8006264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006268:	4691      	mov	r9, r2
 800626a:	690a      	ldr	r2, [r1, #16]
 800626c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006270:	460c      	mov	r4, r1
 8006272:	429a      	cmp	r2, r3
 8006274:	bfbe      	ittt	lt
 8006276:	460b      	movlt	r3, r1
 8006278:	464c      	movlt	r4, r9
 800627a:	4699      	movlt	r9, r3
 800627c:	6927      	ldr	r7, [r4, #16]
 800627e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006282:	68a3      	ldr	r3, [r4, #8]
 8006284:	6861      	ldr	r1, [r4, #4]
 8006286:	eb07 060a 	add.w	r6, r7, sl
 800628a:	42b3      	cmp	r3, r6
 800628c:	b085      	sub	sp, #20
 800628e:	bfb8      	it	lt
 8006290:	3101      	addlt	r1, #1
 8006292:	f7ff fedb 	bl	800604c <_Balloc>
 8006296:	b930      	cbnz	r0, 80062a6 <__multiply+0x42>
 8006298:	4602      	mov	r2, r0
 800629a:	f240 115d 	movw	r1, #349	; 0x15d
 800629e:	4b43      	ldr	r3, [pc, #268]	; (80063ac <__multiply+0x148>)
 80062a0:	4843      	ldr	r0, [pc, #268]	; (80063b0 <__multiply+0x14c>)
 80062a2:	f000 fd03 	bl	8006cac <__assert_func>
 80062a6:	f100 0514 	add.w	r5, r0, #20
 80062aa:	462b      	mov	r3, r5
 80062ac:	2200      	movs	r2, #0
 80062ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062b2:	4543      	cmp	r3, r8
 80062b4:	d321      	bcc.n	80062fa <__multiply+0x96>
 80062b6:	f104 0314 	add.w	r3, r4, #20
 80062ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062be:	f109 0314 	add.w	r3, r9, #20
 80062c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80062c6:	9202      	str	r2, [sp, #8]
 80062c8:	1b3a      	subs	r2, r7, r4
 80062ca:	3a15      	subs	r2, #21
 80062cc:	f022 0203 	bic.w	r2, r2, #3
 80062d0:	3204      	adds	r2, #4
 80062d2:	f104 0115 	add.w	r1, r4, #21
 80062d6:	428f      	cmp	r7, r1
 80062d8:	bf38      	it	cc
 80062da:	2204      	movcc	r2, #4
 80062dc:	9201      	str	r2, [sp, #4]
 80062de:	9a02      	ldr	r2, [sp, #8]
 80062e0:	9303      	str	r3, [sp, #12]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d80c      	bhi.n	8006300 <__multiply+0x9c>
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	dd03      	ble.n	80062f2 <__multiply+0x8e>
 80062ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d059      	beq.n	80063a6 <__multiply+0x142>
 80062f2:	6106      	str	r6, [r0, #16]
 80062f4:	b005      	add	sp, #20
 80062f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fa:	f843 2b04 	str.w	r2, [r3], #4
 80062fe:	e7d8      	b.n	80062b2 <__multiply+0x4e>
 8006300:	f8b3 a000 	ldrh.w	sl, [r3]
 8006304:	f1ba 0f00 	cmp.w	sl, #0
 8006308:	d023      	beq.n	8006352 <__multiply+0xee>
 800630a:	46a9      	mov	r9, r5
 800630c:	f04f 0c00 	mov.w	ip, #0
 8006310:	f104 0e14 	add.w	lr, r4, #20
 8006314:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006318:	f8d9 1000 	ldr.w	r1, [r9]
 800631c:	fa1f fb82 	uxth.w	fp, r2
 8006320:	b289      	uxth	r1, r1
 8006322:	fb0a 110b 	mla	r1, sl, fp, r1
 8006326:	4461      	add	r1, ip
 8006328:	f8d9 c000 	ldr.w	ip, [r9]
 800632c:	0c12      	lsrs	r2, r2, #16
 800632e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006332:	fb0a c202 	mla	r2, sl, r2, ip
 8006336:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800633a:	b289      	uxth	r1, r1
 800633c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006340:	4577      	cmp	r7, lr
 8006342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006346:	f849 1b04 	str.w	r1, [r9], #4
 800634a:	d8e3      	bhi.n	8006314 <__multiply+0xb0>
 800634c:	9a01      	ldr	r2, [sp, #4]
 800634e:	f845 c002 	str.w	ip, [r5, r2]
 8006352:	9a03      	ldr	r2, [sp, #12]
 8006354:	3304      	adds	r3, #4
 8006356:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800635a:	f1b9 0f00 	cmp.w	r9, #0
 800635e:	d020      	beq.n	80063a2 <__multiply+0x13e>
 8006360:	46ae      	mov	lr, r5
 8006362:	f04f 0a00 	mov.w	sl, #0
 8006366:	6829      	ldr	r1, [r5, #0]
 8006368:	f104 0c14 	add.w	ip, r4, #20
 800636c:	f8bc b000 	ldrh.w	fp, [ip]
 8006370:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006374:	b289      	uxth	r1, r1
 8006376:	fb09 220b 	mla	r2, r9, fp, r2
 800637a:	4492      	add	sl, r2
 800637c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006380:	f84e 1b04 	str.w	r1, [lr], #4
 8006384:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006388:	f8be 1000 	ldrh.w	r1, [lr]
 800638c:	0c12      	lsrs	r2, r2, #16
 800638e:	fb09 1102 	mla	r1, r9, r2, r1
 8006392:	4567      	cmp	r7, ip
 8006394:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006398:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800639c:	d8e6      	bhi.n	800636c <__multiply+0x108>
 800639e:	9a01      	ldr	r2, [sp, #4]
 80063a0:	50a9      	str	r1, [r5, r2]
 80063a2:	3504      	adds	r5, #4
 80063a4:	e79b      	b.n	80062de <__multiply+0x7a>
 80063a6:	3e01      	subs	r6, #1
 80063a8:	e79d      	b.n	80062e6 <__multiply+0x82>
 80063aa:	bf00      	nop
 80063ac:	080071db 	.word	0x080071db
 80063b0:	0800724c 	.word	0x0800724c

080063b4 <__pow5mult>:
 80063b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b8:	4615      	mov	r5, r2
 80063ba:	f012 0203 	ands.w	r2, r2, #3
 80063be:	4606      	mov	r6, r0
 80063c0:	460f      	mov	r7, r1
 80063c2:	d007      	beq.n	80063d4 <__pow5mult+0x20>
 80063c4:	4c25      	ldr	r4, [pc, #148]	; (800645c <__pow5mult+0xa8>)
 80063c6:	3a01      	subs	r2, #1
 80063c8:	2300      	movs	r3, #0
 80063ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80063ce:	f7ff fe9f 	bl	8006110 <__multadd>
 80063d2:	4607      	mov	r7, r0
 80063d4:	10ad      	asrs	r5, r5, #2
 80063d6:	d03d      	beq.n	8006454 <__pow5mult+0xa0>
 80063d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80063da:	b97c      	cbnz	r4, 80063fc <__pow5mult+0x48>
 80063dc:	2010      	movs	r0, #16
 80063de:	f7ff fe11 	bl	8006004 <malloc>
 80063e2:	4602      	mov	r2, r0
 80063e4:	6270      	str	r0, [r6, #36]	; 0x24
 80063e6:	b928      	cbnz	r0, 80063f4 <__pow5mult+0x40>
 80063e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80063ec:	4b1c      	ldr	r3, [pc, #112]	; (8006460 <__pow5mult+0xac>)
 80063ee:	481d      	ldr	r0, [pc, #116]	; (8006464 <__pow5mult+0xb0>)
 80063f0:	f000 fc5c 	bl	8006cac <__assert_func>
 80063f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063f8:	6004      	str	r4, [r0, #0]
 80063fa:	60c4      	str	r4, [r0, #12]
 80063fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006400:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006404:	b94c      	cbnz	r4, 800641a <__pow5mult+0x66>
 8006406:	f240 2171 	movw	r1, #625	; 0x271
 800640a:	4630      	mov	r0, r6
 800640c:	f7ff ff14 	bl	8006238 <__i2b>
 8006410:	2300      	movs	r3, #0
 8006412:	4604      	mov	r4, r0
 8006414:	f8c8 0008 	str.w	r0, [r8, #8]
 8006418:	6003      	str	r3, [r0, #0]
 800641a:	f04f 0900 	mov.w	r9, #0
 800641e:	07eb      	lsls	r3, r5, #31
 8006420:	d50a      	bpl.n	8006438 <__pow5mult+0x84>
 8006422:	4639      	mov	r1, r7
 8006424:	4622      	mov	r2, r4
 8006426:	4630      	mov	r0, r6
 8006428:	f7ff ff1c 	bl	8006264 <__multiply>
 800642c:	4680      	mov	r8, r0
 800642e:	4639      	mov	r1, r7
 8006430:	4630      	mov	r0, r6
 8006432:	f7ff fe4b 	bl	80060cc <_Bfree>
 8006436:	4647      	mov	r7, r8
 8006438:	106d      	asrs	r5, r5, #1
 800643a:	d00b      	beq.n	8006454 <__pow5mult+0xa0>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	b938      	cbnz	r0, 8006450 <__pow5mult+0x9c>
 8006440:	4622      	mov	r2, r4
 8006442:	4621      	mov	r1, r4
 8006444:	4630      	mov	r0, r6
 8006446:	f7ff ff0d 	bl	8006264 <__multiply>
 800644a:	6020      	str	r0, [r4, #0]
 800644c:	f8c0 9000 	str.w	r9, [r0]
 8006450:	4604      	mov	r4, r0
 8006452:	e7e4      	b.n	800641e <__pow5mult+0x6a>
 8006454:	4638      	mov	r0, r7
 8006456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800645a:	bf00      	nop
 800645c:	08007398 	.word	0x08007398
 8006460:	08007169 	.word	0x08007169
 8006464:	0800724c 	.word	0x0800724c

08006468 <__lshift>:
 8006468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	460c      	mov	r4, r1
 800646e:	4607      	mov	r7, r0
 8006470:	4691      	mov	r9, r2
 8006472:	6923      	ldr	r3, [r4, #16]
 8006474:	6849      	ldr	r1, [r1, #4]
 8006476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800647a:	68a3      	ldr	r3, [r4, #8]
 800647c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006480:	f108 0601 	add.w	r6, r8, #1
 8006484:	42b3      	cmp	r3, r6
 8006486:	db0b      	blt.n	80064a0 <__lshift+0x38>
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff fddf 	bl	800604c <_Balloc>
 800648e:	4605      	mov	r5, r0
 8006490:	b948      	cbnz	r0, 80064a6 <__lshift+0x3e>
 8006492:	4602      	mov	r2, r0
 8006494:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006498:	4b29      	ldr	r3, [pc, #164]	; (8006540 <__lshift+0xd8>)
 800649a:	482a      	ldr	r0, [pc, #168]	; (8006544 <__lshift+0xdc>)
 800649c:	f000 fc06 	bl	8006cac <__assert_func>
 80064a0:	3101      	adds	r1, #1
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	e7ee      	b.n	8006484 <__lshift+0x1c>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f100 0114 	add.w	r1, r0, #20
 80064ac:	f100 0210 	add.w	r2, r0, #16
 80064b0:	4618      	mov	r0, r3
 80064b2:	4553      	cmp	r3, sl
 80064b4:	db37      	blt.n	8006526 <__lshift+0xbe>
 80064b6:	6920      	ldr	r0, [r4, #16]
 80064b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064bc:	f104 0314 	add.w	r3, r4, #20
 80064c0:	f019 091f 	ands.w	r9, r9, #31
 80064c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80064c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80064cc:	d02f      	beq.n	800652e <__lshift+0xc6>
 80064ce:	468a      	mov	sl, r1
 80064d0:	f04f 0c00 	mov.w	ip, #0
 80064d4:	f1c9 0e20 	rsb	lr, r9, #32
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	fa02 f209 	lsl.w	r2, r2, r9
 80064de:	ea42 020c 	orr.w	r2, r2, ip
 80064e2:	f84a 2b04 	str.w	r2, [sl], #4
 80064e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ea:	4298      	cmp	r0, r3
 80064ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80064f0:	d8f2      	bhi.n	80064d8 <__lshift+0x70>
 80064f2:	1b03      	subs	r3, r0, r4
 80064f4:	3b15      	subs	r3, #21
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	3304      	adds	r3, #4
 80064fc:	f104 0215 	add.w	r2, r4, #21
 8006500:	4290      	cmp	r0, r2
 8006502:	bf38      	it	cc
 8006504:	2304      	movcc	r3, #4
 8006506:	f841 c003 	str.w	ip, [r1, r3]
 800650a:	f1bc 0f00 	cmp.w	ip, #0
 800650e:	d001      	beq.n	8006514 <__lshift+0xac>
 8006510:	f108 0602 	add.w	r6, r8, #2
 8006514:	3e01      	subs	r6, #1
 8006516:	4638      	mov	r0, r7
 8006518:	4621      	mov	r1, r4
 800651a:	612e      	str	r6, [r5, #16]
 800651c:	f7ff fdd6 	bl	80060cc <_Bfree>
 8006520:	4628      	mov	r0, r5
 8006522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006526:	f842 0f04 	str.w	r0, [r2, #4]!
 800652a:	3301      	adds	r3, #1
 800652c:	e7c1      	b.n	80064b2 <__lshift+0x4a>
 800652e:	3904      	subs	r1, #4
 8006530:	f853 2b04 	ldr.w	r2, [r3], #4
 8006534:	4298      	cmp	r0, r3
 8006536:	f841 2f04 	str.w	r2, [r1, #4]!
 800653a:	d8f9      	bhi.n	8006530 <__lshift+0xc8>
 800653c:	e7ea      	b.n	8006514 <__lshift+0xac>
 800653e:	bf00      	nop
 8006540:	080071db 	.word	0x080071db
 8006544:	0800724c 	.word	0x0800724c

08006548 <__mcmp>:
 8006548:	4603      	mov	r3, r0
 800654a:	690a      	ldr	r2, [r1, #16]
 800654c:	6900      	ldr	r0, [r0, #16]
 800654e:	b530      	push	{r4, r5, lr}
 8006550:	1a80      	subs	r0, r0, r2
 8006552:	d10d      	bne.n	8006570 <__mcmp+0x28>
 8006554:	3314      	adds	r3, #20
 8006556:	3114      	adds	r1, #20
 8006558:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800655c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006560:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006564:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006568:	4295      	cmp	r5, r2
 800656a:	d002      	beq.n	8006572 <__mcmp+0x2a>
 800656c:	d304      	bcc.n	8006578 <__mcmp+0x30>
 800656e:	2001      	movs	r0, #1
 8006570:	bd30      	pop	{r4, r5, pc}
 8006572:	42a3      	cmp	r3, r4
 8006574:	d3f4      	bcc.n	8006560 <__mcmp+0x18>
 8006576:	e7fb      	b.n	8006570 <__mcmp+0x28>
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	e7f8      	b.n	8006570 <__mcmp+0x28>
	...

08006580 <__mdiff>:
 8006580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006584:	460d      	mov	r5, r1
 8006586:	4607      	mov	r7, r0
 8006588:	4611      	mov	r1, r2
 800658a:	4628      	mov	r0, r5
 800658c:	4614      	mov	r4, r2
 800658e:	f7ff ffdb 	bl	8006548 <__mcmp>
 8006592:	1e06      	subs	r6, r0, #0
 8006594:	d111      	bne.n	80065ba <__mdiff+0x3a>
 8006596:	4631      	mov	r1, r6
 8006598:	4638      	mov	r0, r7
 800659a:	f7ff fd57 	bl	800604c <_Balloc>
 800659e:	4602      	mov	r2, r0
 80065a0:	b928      	cbnz	r0, 80065ae <__mdiff+0x2e>
 80065a2:	f240 2132 	movw	r1, #562	; 0x232
 80065a6:	4b3a      	ldr	r3, [pc, #232]	; (8006690 <__mdiff+0x110>)
 80065a8:	483a      	ldr	r0, [pc, #232]	; (8006694 <__mdiff+0x114>)
 80065aa:	f000 fb7f 	bl	8006cac <__assert_func>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80065b4:	4610      	mov	r0, r2
 80065b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ba:	bfa4      	itt	ge
 80065bc:	4623      	movge	r3, r4
 80065be:	462c      	movge	r4, r5
 80065c0:	4638      	mov	r0, r7
 80065c2:	6861      	ldr	r1, [r4, #4]
 80065c4:	bfa6      	itte	ge
 80065c6:	461d      	movge	r5, r3
 80065c8:	2600      	movge	r6, #0
 80065ca:	2601      	movlt	r6, #1
 80065cc:	f7ff fd3e 	bl	800604c <_Balloc>
 80065d0:	4602      	mov	r2, r0
 80065d2:	b918      	cbnz	r0, 80065dc <__mdiff+0x5c>
 80065d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80065d8:	4b2d      	ldr	r3, [pc, #180]	; (8006690 <__mdiff+0x110>)
 80065da:	e7e5      	b.n	80065a8 <__mdiff+0x28>
 80065dc:	f102 0814 	add.w	r8, r2, #20
 80065e0:	46c2      	mov	sl, r8
 80065e2:	f04f 0c00 	mov.w	ip, #0
 80065e6:	6927      	ldr	r7, [r4, #16]
 80065e8:	60c6      	str	r6, [r0, #12]
 80065ea:	692e      	ldr	r6, [r5, #16]
 80065ec:	f104 0014 	add.w	r0, r4, #20
 80065f0:	f105 0914 	add.w	r9, r5, #20
 80065f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80065f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065fc:	3410      	adds	r4, #16
 80065fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006602:	f859 3b04 	ldr.w	r3, [r9], #4
 8006606:	fa1f f18b 	uxth.w	r1, fp
 800660a:	448c      	add	ip, r1
 800660c:	b299      	uxth	r1, r3
 800660e:	0c1b      	lsrs	r3, r3, #16
 8006610:	ebac 0101 	sub.w	r1, ip, r1
 8006614:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006618:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800661c:	b289      	uxth	r1, r1
 800661e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006622:	454e      	cmp	r6, r9
 8006624:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006628:	f84a 3b04 	str.w	r3, [sl], #4
 800662c:	d8e7      	bhi.n	80065fe <__mdiff+0x7e>
 800662e:	1b73      	subs	r3, r6, r5
 8006630:	3b15      	subs	r3, #21
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	3515      	adds	r5, #21
 8006638:	3304      	adds	r3, #4
 800663a:	42ae      	cmp	r6, r5
 800663c:	bf38      	it	cc
 800663e:	2304      	movcc	r3, #4
 8006640:	4418      	add	r0, r3
 8006642:	4443      	add	r3, r8
 8006644:	461e      	mov	r6, r3
 8006646:	4605      	mov	r5, r0
 8006648:	4575      	cmp	r5, lr
 800664a:	d30e      	bcc.n	800666a <__mdiff+0xea>
 800664c:	f10e 0103 	add.w	r1, lr, #3
 8006650:	1a09      	subs	r1, r1, r0
 8006652:	f021 0103 	bic.w	r1, r1, #3
 8006656:	3803      	subs	r0, #3
 8006658:	4586      	cmp	lr, r0
 800665a:	bf38      	it	cc
 800665c:	2100      	movcc	r1, #0
 800665e:	4419      	add	r1, r3
 8006660:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006664:	b18b      	cbz	r3, 800668a <__mdiff+0x10a>
 8006666:	6117      	str	r7, [r2, #16]
 8006668:	e7a4      	b.n	80065b4 <__mdiff+0x34>
 800666a:	f855 8b04 	ldr.w	r8, [r5], #4
 800666e:	fa1f f188 	uxth.w	r1, r8
 8006672:	4461      	add	r1, ip
 8006674:	140c      	asrs	r4, r1, #16
 8006676:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800667a:	b289      	uxth	r1, r1
 800667c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006680:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006684:	f846 1b04 	str.w	r1, [r6], #4
 8006688:	e7de      	b.n	8006648 <__mdiff+0xc8>
 800668a:	3f01      	subs	r7, #1
 800668c:	e7e8      	b.n	8006660 <__mdiff+0xe0>
 800668e:	bf00      	nop
 8006690:	080071db 	.word	0x080071db
 8006694:	0800724c 	.word	0x0800724c

08006698 <__d2b>:
 8006698:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800669c:	2101      	movs	r1, #1
 800669e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80066a2:	4690      	mov	r8, r2
 80066a4:	461d      	mov	r5, r3
 80066a6:	f7ff fcd1 	bl	800604c <_Balloc>
 80066aa:	4604      	mov	r4, r0
 80066ac:	b930      	cbnz	r0, 80066bc <__d2b+0x24>
 80066ae:	4602      	mov	r2, r0
 80066b0:	f240 310a 	movw	r1, #778	; 0x30a
 80066b4:	4b24      	ldr	r3, [pc, #144]	; (8006748 <__d2b+0xb0>)
 80066b6:	4825      	ldr	r0, [pc, #148]	; (800674c <__d2b+0xb4>)
 80066b8:	f000 faf8 	bl	8006cac <__assert_func>
 80066bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80066c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80066c4:	bb2d      	cbnz	r5, 8006712 <__d2b+0x7a>
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	f1b8 0300 	subs.w	r3, r8, #0
 80066cc:	d026      	beq.n	800671c <__d2b+0x84>
 80066ce:	4668      	mov	r0, sp
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	f7ff fd83 	bl	80061dc <__lo0bits>
 80066d6:	9900      	ldr	r1, [sp, #0]
 80066d8:	b1f0      	cbz	r0, 8006718 <__d2b+0x80>
 80066da:	9a01      	ldr	r2, [sp, #4]
 80066dc:	f1c0 0320 	rsb	r3, r0, #32
 80066e0:	fa02 f303 	lsl.w	r3, r2, r3
 80066e4:	430b      	orrs	r3, r1
 80066e6:	40c2      	lsrs	r2, r0
 80066e8:	6163      	str	r3, [r4, #20]
 80066ea:	9201      	str	r2, [sp, #4]
 80066ec:	9b01      	ldr	r3, [sp, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	bf14      	ite	ne
 80066f2:	2102      	movne	r1, #2
 80066f4:	2101      	moveq	r1, #1
 80066f6:	61a3      	str	r3, [r4, #24]
 80066f8:	6121      	str	r1, [r4, #16]
 80066fa:	b1c5      	cbz	r5, 800672e <__d2b+0x96>
 80066fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006700:	4405      	add	r5, r0
 8006702:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006706:	603d      	str	r5, [r7, #0]
 8006708:	6030      	str	r0, [r6, #0]
 800670a:	4620      	mov	r0, r4
 800670c:	b002      	add	sp, #8
 800670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006716:	e7d6      	b.n	80066c6 <__d2b+0x2e>
 8006718:	6161      	str	r1, [r4, #20]
 800671a:	e7e7      	b.n	80066ec <__d2b+0x54>
 800671c:	a801      	add	r0, sp, #4
 800671e:	f7ff fd5d 	bl	80061dc <__lo0bits>
 8006722:	2101      	movs	r1, #1
 8006724:	9b01      	ldr	r3, [sp, #4]
 8006726:	6121      	str	r1, [r4, #16]
 8006728:	6163      	str	r3, [r4, #20]
 800672a:	3020      	adds	r0, #32
 800672c:	e7e5      	b.n	80066fa <__d2b+0x62>
 800672e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006732:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006736:	6038      	str	r0, [r7, #0]
 8006738:	6918      	ldr	r0, [r3, #16]
 800673a:	f7ff fd2f 	bl	800619c <__hi0bits>
 800673e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006742:	6031      	str	r1, [r6, #0]
 8006744:	e7e1      	b.n	800670a <__d2b+0x72>
 8006746:	bf00      	nop
 8006748:	080071db 	.word	0x080071db
 800674c:	0800724c 	.word	0x0800724c

08006750 <_calloc_r>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	fba1 5402 	umull	r5, r4, r1, r2
 8006756:	b934      	cbnz	r4, 8006766 <_calloc_r+0x16>
 8006758:	4629      	mov	r1, r5
 800675a:	f000 f875 	bl	8006848 <_malloc_r>
 800675e:	4606      	mov	r6, r0
 8006760:	b928      	cbnz	r0, 800676e <_calloc_r+0x1e>
 8006762:	4630      	mov	r0, r6
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	220c      	movs	r2, #12
 8006768:	2600      	movs	r6, #0
 800676a:	6002      	str	r2, [r0, #0]
 800676c:	e7f9      	b.n	8006762 <_calloc_r+0x12>
 800676e:	462a      	mov	r2, r5
 8006770:	4621      	mov	r1, r4
 8006772:	f7fd fdf5 	bl	8004360 <memset>
 8006776:	e7f4      	b.n	8006762 <_calloc_r+0x12>

08006778 <_free_r>:
 8006778:	b538      	push	{r3, r4, r5, lr}
 800677a:	4605      	mov	r5, r0
 800677c:	2900      	cmp	r1, #0
 800677e:	d040      	beq.n	8006802 <_free_r+0x8a>
 8006780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006784:	1f0c      	subs	r4, r1, #4
 8006786:	2b00      	cmp	r3, #0
 8006788:	bfb8      	it	lt
 800678a:	18e4      	addlt	r4, r4, r3
 800678c:	f000 fb14 	bl	8006db8 <__malloc_lock>
 8006790:	4a1c      	ldr	r2, [pc, #112]	; (8006804 <_free_r+0x8c>)
 8006792:	6813      	ldr	r3, [r2, #0]
 8006794:	b933      	cbnz	r3, 80067a4 <_free_r+0x2c>
 8006796:	6063      	str	r3, [r4, #4]
 8006798:	6014      	str	r4, [r2, #0]
 800679a:	4628      	mov	r0, r5
 800679c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067a0:	f000 bb10 	b.w	8006dc4 <__malloc_unlock>
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d908      	bls.n	80067ba <_free_r+0x42>
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	1821      	adds	r1, r4, r0
 80067ac:	428b      	cmp	r3, r1
 80067ae:	bf01      	itttt	eq
 80067b0:	6819      	ldreq	r1, [r3, #0]
 80067b2:	685b      	ldreq	r3, [r3, #4]
 80067b4:	1809      	addeq	r1, r1, r0
 80067b6:	6021      	streq	r1, [r4, #0]
 80067b8:	e7ed      	b.n	8006796 <_free_r+0x1e>
 80067ba:	461a      	mov	r2, r3
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	b10b      	cbz	r3, 80067c4 <_free_r+0x4c>
 80067c0:	42a3      	cmp	r3, r4
 80067c2:	d9fa      	bls.n	80067ba <_free_r+0x42>
 80067c4:	6811      	ldr	r1, [r2, #0]
 80067c6:	1850      	adds	r0, r2, r1
 80067c8:	42a0      	cmp	r0, r4
 80067ca:	d10b      	bne.n	80067e4 <_free_r+0x6c>
 80067cc:	6820      	ldr	r0, [r4, #0]
 80067ce:	4401      	add	r1, r0
 80067d0:	1850      	adds	r0, r2, r1
 80067d2:	4283      	cmp	r3, r0
 80067d4:	6011      	str	r1, [r2, #0]
 80067d6:	d1e0      	bne.n	800679a <_free_r+0x22>
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4401      	add	r1, r0
 80067de:	6011      	str	r1, [r2, #0]
 80067e0:	6053      	str	r3, [r2, #4]
 80067e2:	e7da      	b.n	800679a <_free_r+0x22>
 80067e4:	d902      	bls.n	80067ec <_free_r+0x74>
 80067e6:	230c      	movs	r3, #12
 80067e8:	602b      	str	r3, [r5, #0]
 80067ea:	e7d6      	b.n	800679a <_free_r+0x22>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	1821      	adds	r1, r4, r0
 80067f0:	428b      	cmp	r3, r1
 80067f2:	bf01      	itttt	eq
 80067f4:	6819      	ldreq	r1, [r3, #0]
 80067f6:	685b      	ldreq	r3, [r3, #4]
 80067f8:	1809      	addeq	r1, r1, r0
 80067fa:	6021      	streq	r1, [r4, #0]
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	6054      	str	r4, [r2, #4]
 8006800:	e7cb      	b.n	800679a <_free_r+0x22>
 8006802:	bd38      	pop	{r3, r4, r5, pc}
 8006804:	2000134c 	.word	0x2000134c

08006808 <sbrk_aligned>:
 8006808:	b570      	push	{r4, r5, r6, lr}
 800680a:	4e0e      	ldr	r6, [pc, #56]	; (8006844 <sbrk_aligned+0x3c>)
 800680c:	460c      	mov	r4, r1
 800680e:	6831      	ldr	r1, [r6, #0]
 8006810:	4605      	mov	r5, r0
 8006812:	b911      	cbnz	r1, 800681a <sbrk_aligned+0x12>
 8006814:	f000 f9e4 	bl	8006be0 <_sbrk_r>
 8006818:	6030      	str	r0, [r6, #0]
 800681a:	4621      	mov	r1, r4
 800681c:	4628      	mov	r0, r5
 800681e:	f000 f9df 	bl	8006be0 <_sbrk_r>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	d00a      	beq.n	800683c <sbrk_aligned+0x34>
 8006826:	1cc4      	adds	r4, r0, #3
 8006828:	f024 0403 	bic.w	r4, r4, #3
 800682c:	42a0      	cmp	r0, r4
 800682e:	d007      	beq.n	8006840 <sbrk_aligned+0x38>
 8006830:	1a21      	subs	r1, r4, r0
 8006832:	4628      	mov	r0, r5
 8006834:	f000 f9d4 	bl	8006be0 <_sbrk_r>
 8006838:	3001      	adds	r0, #1
 800683a:	d101      	bne.n	8006840 <sbrk_aligned+0x38>
 800683c:	f04f 34ff 	mov.w	r4, #4294967295
 8006840:	4620      	mov	r0, r4
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	20001350 	.word	0x20001350

08006848 <_malloc_r>:
 8006848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684c:	1ccd      	adds	r5, r1, #3
 800684e:	f025 0503 	bic.w	r5, r5, #3
 8006852:	3508      	adds	r5, #8
 8006854:	2d0c      	cmp	r5, #12
 8006856:	bf38      	it	cc
 8006858:	250c      	movcc	r5, #12
 800685a:	2d00      	cmp	r5, #0
 800685c:	4607      	mov	r7, r0
 800685e:	db01      	blt.n	8006864 <_malloc_r+0x1c>
 8006860:	42a9      	cmp	r1, r5
 8006862:	d905      	bls.n	8006870 <_malloc_r+0x28>
 8006864:	230c      	movs	r3, #12
 8006866:	2600      	movs	r6, #0
 8006868:	603b      	str	r3, [r7, #0]
 800686a:	4630      	mov	r0, r6
 800686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006870:	4e2e      	ldr	r6, [pc, #184]	; (800692c <_malloc_r+0xe4>)
 8006872:	f000 faa1 	bl	8006db8 <__malloc_lock>
 8006876:	6833      	ldr	r3, [r6, #0]
 8006878:	461c      	mov	r4, r3
 800687a:	bb34      	cbnz	r4, 80068ca <_malloc_r+0x82>
 800687c:	4629      	mov	r1, r5
 800687e:	4638      	mov	r0, r7
 8006880:	f7ff ffc2 	bl	8006808 <sbrk_aligned>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	4604      	mov	r4, r0
 8006888:	d14d      	bne.n	8006926 <_malloc_r+0xde>
 800688a:	6834      	ldr	r4, [r6, #0]
 800688c:	4626      	mov	r6, r4
 800688e:	2e00      	cmp	r6, #0
 8006890:	d140      	bne.n	8006914 <_malloc_r+0xcc>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	4631      	mov	r1, r6
 8006896:	4638      	mov	r0, r7
 8006898:	eb04 0803 	add.w	r8, r4, r3
 800689c:	f000 f9a0 	bl	8006be0 <_sbrk_r>
 80068a0:	4580      	cmp	r8, r0
 80068a2:	d13a      	bne.n	800691a <_malloc_r+0xd2>
 80068a4:	6821      	ldr	r1, [r4, #0]
 80068a6:	3503      	adds	r5, #3
 80068a8:	1a6d      	subs	r5, r5, r1
 80068aa:	f025 0503 	bic.w	r5, r5, #3
 80068ae:	3508      	adds	r5, #8
 80068b0:	2d0c      	cmp	r5, #12
 80068b2:	bf38      	it	cc
 80068b4:	250c      	movcc	r5, #12
 80068b6:	4638      	mov	r0, r7
 80068b8:	4629      	mov	r1, r5
 80068ba:	f7ff ffa5 	bl	8006808 <sbrk_aligned>
 80068be:	3001      	adds	r0, #1
 80068c0:	d02b      	beq.n	800691a <_malloc_r+0xd2>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	442b      	add	r3, r5
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	e00e      	b.n	80068e8 <_malloc_r+0xa0>
 80068ca:	6822      	ldr	r2, [r4, #0]
 80068cc:	1b52      	subs	r2, r2, r5
 80068ce:	d41e      	bmi.n	800690e <_malloc_r+0xc6>
 80068d0:	2a0b      	cmp	r2, #11
 80068d2:	d916      	bls.n	8006902 <_malloc_r+0xba>
 80068d4:	1961      	adds	r1, r4, r5
 80068d6:	42a3      	cmp	r3, r4
 80068d8:	6025      	str	r5, [r4, #0]
 80068da:	bf18      	it	ne
 80068dc:	6059      	strne	r1, [r3, #4]
 80068de:	6863      	ldr	r3, [r4, #4]
 80068e0:	bf08      	it	eq
 80068e2:	6031      	streq	r1, [r6, #0]
 80068e4:	5162      	str	r2, [r4, r5]
 80068e6:	604b      	str	r3, [r1, #4]
 80068e8:	4638      	mov	r0, r7
 80068ea:	f104 060b 	add.w	r6, r4, #11
 80068ee:	f000 fa69 	bl	8006dc4 <__malloc_unlock>
 80068f2:	f026 0607 	bic.w	r6, r6, #7
 80068f6:	1d23      	adds	r3, r4, #4
 80068f8:	1af2      	subs	r2, r6, r3
 80068fa:	d0b6      	beq.n	800686a <_malloc_r+0x22>
 80068fc:	1b9b      	subs	r3, r3, r6
 80068fe:	50a3      	str	r3, [r4, r2]
 8006900:	e7b3      	b.n	800686a <_malloc_r+0x22>
 8006902:	6862      	ldr	r2, [r4, #4]
 8006904:	42a3      	cmp	r3, r4
 8006906:	bf0c      	ite	eq
 8006908:	6032      	streq	r2, [r6, #0]
 800690a:	605a      	strne	r2, [r3, #4]
 800690c:	e7ec      	b.n	80068e8 <_malloc_r+0xa0>
 800690e:	4623      	mov	r3, r4
 8006910:	6864      	ldr	r4, [r4, #4]
 8006912:	e7b2      	b.n	800687a <_malloc_r+0x32>
 8006914:	4634      	mov	r4, r6
 8006916:	6876      	ldr	r6, [r6, #4]
 8006918:	e7b9      	b.n	800688e <_malloc_r+0x46>
 800691a:	230c      	movs	r3, #12
 800691c:	4638      	mov	r0, r7
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	f000 fa50 	bl	8006dc4 <__malloc_unlock>
 8006924:	e7a1      	b.n	800686a <_malloc_r+0x22>
 8006926:	6025      	str	r5, [r4, #0]
 8006928:	e7de      	b.n	80068e8 <_malloc_r+0xa0>
 800692a:	bf00      	nop
 800692c:	2000134c 	.word	0x2000134c

08006930 <__sfputc_r>:
 8006930:	6893      	ldr	r3, [r2, #8]
 8006932:	b410      	push	{r4}
 8006934:	3b01      	subs	r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	6093      	str	r3, [r2, #8]
 800693a:	da07      	bge.n	800694c <__sfputc_r+0x1c>
 800693c:	6994      	ldr	r4, [r2, #24]
 800693e:	42a3      	cmp	r3, r4
 8006940:	db01      	blt.n	8006946 <__sfputc_r+0x16>
 8006942:	290a      	cmp	r1, #10
 8006944:	d102      	bne.n	800694c <__sfputc_r+0x1c>
 8006946:	bc10      	pop	{r4}
 8006948:	f7fe ba00 	b.w	8004d4c <__swbuf_r>
 800694c:	6813      	ldr	r3, [r2, #0]
 800694e:	1c58      	adds	r0, r3, #1
 8006950:	6010      	str	r0, [r2, #0]
 8006952:	7019      	strb	r1, [r3, #0]
 8006954:	4608      	mov	r0, r1
 8006956:	bc10      	pop	{r4}
 8006958:	4770      	bx	lr

0800695a <__sfputs_r>:
 800695a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695c:	4606      	mov	r6, r0
 800695e:	460f      	mov	r7, r1
 8006960:	4614      	mov	r4, r2
 8006962:	18d5      	adds	r5, r2, r3
 8006964:	42ac      	cmp	r4, r5
 8006966:	d101      	bne.n	800696c <__sfputs_r+0x12>
 8006968:	2000      	movs	r0, #0
 800696a:	e007      	b.n	800697c <__sfputs_r+0x22>
 800696c:	463a      	mov	r2, r7
 800696e:	4630      	mov	r0, r6
 8006970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006974:	f7ff ffdc 	bl	8006930 <__sfputc_r>
 8006978:	1c43      	adds	r3, r0, #1
 800697a:	d1f3      	bne.n	8006964 <__sfputs_r+0xa>
 800697c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006980 <_vfiprintf_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	460d      	mov	r5, r1
 8006986:	4614      	mov	r4, r2
 8006988:	4698      	mov	r8, r3
 800698a:	4606      	mov	r6, r0
 800698c:	b09d      	sub	sp, #116	; 0x74
 800698e:	b118      	cbz	r0, 8006998 <_vfiprintf_r+0x18>
 8006990:	6983      	ldr	r3, [r0, #24]
 8006992:	b90b      	cbnz	r3, 8006998 <_vfiprintf_r+0x18>
 8006994:	f7ff fa2c 	bl	8005df0 <__sinit>
 8006998:	4b89      	ldr	r3, [pc, #548]	; (8006bc0 <_vfiprintf_r+0x240>)
 800699a:	429d      	cmp	r5, r3
 800699c:	d11b      	bne.n	80069d6 <_vfiprintf_r+0x56>
 800699e:	6875      	ldr	r5, [r6, #4]
 80069a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069a2:	07d9      	lsls	r1, r3, #31
 80069a4:	d405      	bmi.n	80069b2 <_vfiprintf_r+0x32>
 80069a6:	89ab      	ldrh	r3, [r5, #12]
 80069a8:	059a      	lsls	r2, r3, #22
 80069aa:	d402      	bmi.n	80069b2 <_vfiprintf_r+0x32>
 80069ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ae:	f7ff fac2 	bl	8005f36 <__retarget_lock_acquire_recursive>
 80069b2:	89ab      	ldrh	r3, [r5, #12]
 80069b4:	071b      	lsls	r3, r3, #28
 80069b6:	d501      	bpl.n	80069bc <_vfiprintf_r+0x3c>
 80069b8:	692b      	ldr	r3, [r5, #16]
 80069ba:	b9eb      	cbnz	r3, 80069f8 <_vfiprintf_r+0x78>
 80069bc:	4629      	mov	r1, r5
 80069be:	4630      	mov	r0, r6
 80069c0:	f7fe fa16 	bl	8004df0 <__swsetup_r>
 80069c4:	b1c0      	cbz	r0, 80069f8 <_vfiprintf_r+0x78>
 80069c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069c8:	07dc      	lsls	r4, r3, #31
 80069ca:	d50e      	bpl.n	80069ea <_vfiprintf_r+0x6a>
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	b01d      	add	sp, #116	; 0x74
 80069d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d6:	4b7b      	ldr	r3, [pc, #492]	; (8006bc4 <_vfiprintf_r+0x244>)
 80069d8:	429d      	cmp	r5, r3
 80069da:	d101      	bne.n	80069e0 <_vfiprintf_r+0x60>
 80069dc:	68b5      	ldr	r5, [r6, #8]
 80069de:	e7df      	b.n	80069a0 <_vfiprintf_r+0x20>
 80069e0:	4b79      	ldr	r3, [pc, #484]	; (8006bc8 <_vfiprintf_r+0x248>)
 80069e2:	429d      	cmp	r5, r3
 80069e4:	bf08      	it	eq
 80069e6:	68f5      	ldreq	r5, [r6, #12]
 80069e8:	e7da      	b.n	80069a0 <_vfiprintf_r+0x20>
 80069ea:	89ab      	ldrh	r3, [r5, #12]
 80069ec:	0598      	lsls	r0, r3, #22
 80069ee:	d4ed      	bmi.n	80069cc <_vfiprintf_r+0x4c>
 80069f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069f2:	f7ff faa1 	bl	8005f38 <__retarget_lock_release_recursive>
 80069f6:	e7e9      	b.n	80069cc <_vfiprintf_r+0x4c>
 80069f8:	2300      	movs	r3, #0
 80069fa:	9309      	str	r3, [sp, #36]	; 0x24
 80069fc:	2320      	movs	r3, #32
 80069fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a02:	2330      	movs	r3, #48	; 0x30
 8006a04:	f04f 0901 	mov.w	r9, #1
 8006a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006bcc <_vfiprintf_r+0x24c>
 8006a10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a14:	4623      	mov	r3, r4
 8006a16:	469a      	mov	sl, r3
 8006a18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a1c:	b10a      	cbz	r2, 8006a22 <_vfiprintf_r+0xa2>
 8006a1e:	2a25      	cmp	r2, #37	; 0x25
 8006a20:	d1f9      	bne.n	8006a16 <_vfiprintf_r+0x96>
 8006a22:	ebba 0b04 	subs.w	fp, sl, r4
 8006a26:	d00b      	beq.n	8006a40 <_vfiprintf_r+0xc0>
 8006a28:	465b      	mov	r3, fp
 8006a2a:	4622      	mov	r2, r4
 8006a2c:	4629      	mov	r1, r5
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7ff ff93 	bl	800695a <__sfputs_r>
 8006a34:	3001      	adds	r0, #1
 8006a36:	f000 80aa 	beq.w	8006b8e <_vfiprintf_r+0x20e>
 8006a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a3c:	445a      	add	r2, fp
 8006a3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a40:	f89a 3000 	ldrb.w	r3, [sl]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	f000 80a2 	beq.w	8006b8e <_vfiprintf_r+0x20e>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a54:	f10a 0a01 	add.w	sl, sl, #1
 8006a58:	9304      	str	r3, [sp, #16]
 8006a5a:	9307      	str	r3, [sp, #28]
 8006a5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a60:	931a      	str	r3, [sp, #104]	; 0x68
 8006a62:	4654      	mov	r4, sl
 8006a64:	2205      	movs	r2, #5
 8006a66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a6a:	4858      	ldr	r0, [pc, #352]	; (8006bcc <_vfiprintf_r+0x24c>)
 8006a6c:	f7ff fad2 	bl	8006014 <memchr>
 8006a70:	9a04      	ldr	r2, [sp, #16]
 8006a72:	b9d8      	cbnz	r0, 8006aac <_vfiprintf_r+0x12c>
 8006a74:	06d1      	lsls	r1, r2, #27
 8006a76:	bf44      	itt	mi
 8006a78:	2320      	movmi	r3, #32
 8006a7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a7e:	0713      	lsls	r3, r2, #28
 8006a80:	bf44      	itt	mi
 8006a82:	232b      	movmi	r3, #43	; 0x2b
 8006a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a88:	f89a 3000 	ldrb.w	r3, [sl]
 8006a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a8e:	d015      	beq.n	8006abc <_vfiprintf_r+0x13c>
 8006a90:	4654      	mov	r4, sl
 8006a92:	2000      	movs	r0, #0
 8006a94:	f04f 0c0a 	mov.w	ip, #10
 8006a98:	9a07      	ldr	r2, [sp, #28]
 8006a9a:	4621      	mov	r1, r4
 8006a9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006aa0:	3b30      	subs	r3, #48	; 0x30
 8006aa2:	2b09      	cmp	r3, #9
 8006aa4:	d94e      	bls.n	8006b44 <_vfiprintf_r+0x1c4>
 8006aa6:	b1b0      	cbz	r0, 8006ad6 <_vfiprintf_r+0x156>
 8006aa8:	9207      	str	r2, [sp, #28]
 8006aaa:	e014      	b.n	8006ad6 <_vfiprintf_r+0x156>
 8006aac:	eba0 0308 	sub.w	r3, r0, r8
 8006ab0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	46a2      	mov	sl, r4
 8006ab8:	9304      	str	r3, [sp, #16]
 8006aba:	e7d2      	b.n	8006a62 <_vfiprintf_r+0xe2>
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	1d19      	adds	r1, r3, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	9103      	str	r1, [sp, #12]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bfbb      	ittet	lt
 8006ac8:	425b      	neglt	r3, r3
 8006aca:	f042 0202 	orrlt.w	r2, r2, #2
 8006ace:	9307      	strge	r3, [sp, #28]
 8006ad0:	9307      	strlt	r3, [sp, #28]
 8006ad2:	bfb8      	it	lt
 8006ad4:	9204      	strlt	r2, [sp, #16]
 8006ad6:	7823      	ldrb	r3, [r4, #0]
 8006ad8:	2b2e      	cmp	r3, #46	; 0x2e
 8006ada:	d10c      	bne.n	8006af6 <_vfiprintf_r+0x176>
 8006adc:	7863      	ldrb	r3, [r4, #1]
 8006ade:	2b2a      	cmp	r3, #42	; 0x2a
 8006ae0:	d135      	bne.n	8006b4e <_vfiprintf_r+0x1ce>
 8006ae2:	9b03      	ldr	r3, [sp, #12]
 8006ae4:	3402      	adds	r4, #2
 8006ae6:	1d1a      	adds	r2, r3, #4
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	9203      	str	r2, [sp, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	bfb8      	it	lt
 8006af0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006bd0 <_vfiprintf_r+0x250>
 8006afa:	2203      	movs	r2, #3
 8006afc:	4650      	mov	r0, sl
 8006afe:	7821      	ldrb	r1, [r4, #0]
 8006b00:	f7ff fa88 	bl	8006014 <memchr>
 8006b04:	b140      	cbz	r0, 8006b18 <_vfiprintf_r+0x198>
 8006b06:	2340      	movs	r3, #64	; 0x40
 8006b08:	eba0 000a 	sub.w	r0, r0, sl
 8006b0c:	fa03 f000 	lsl.w	r0, r3, r0
 8006b10:	9b04      	ldr	r3, [sp, #16]
 8006b12:	3401      	adds	r4, #1
 8006b14:	4303      	orrs	r3, r0
 8006b16:	9304      	str	r3, [sp, #16]
 8006b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b1c:	2206      	movs	r2, #6
 8006b1e:	482d      	ldr	r0, [pc, #180]	; (8006bd4 <_vfiprintf_r+0x254>)
 8006b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b24:	f7ff fa76 	bl	8006014 <memchr>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d03f      	beq.n	8006bac <_vfiprintf_r+0x22c>
 8006b2c:	4b2a      	ldr	r3, [pc, #168]	; (8006bd8 <_vfiprintf_r+0x258>)
 8006b2e:	bb1b      	cbnz	r3, 8006b78 <_vfiprintf_r+0x1f8>
 8006b30:	9b03      	ldr	r3, [sp, #12]
 8006b32:	3307      	adds	r3, #7
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	3308      	adds	r3, #8
 8006b3a:	9303      	str	r3, [sp, #12]
 8006b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b3e:	443b      	add	r3, r7
 8006b40:	9309      	str	r3, [sp, #36]	; 0x24
 8006b42:	e767      	b.n	8006a14 <_vfiprintf_r+0x94>
 8006b44:	460c      	mov	r4, r1
 8006b46:	2001      	movs	r0, #1
 8006b48:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b4c:	e7a5      	b.n	8006a9a <_vfiprintf_r+0x11a>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f04f 0c0a 	mov.w	ip, #10
 8006b54:	4619      	mov	r1, r3
 8006b56:	3401      	adds	r4, #1
 8006b58:	9305      	str	r3, [sp, #20]
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b60:	3a30      	subs	r2, #48	; 0x30
 8006b62:	2a09      	cmp	r2, #9
 8006b64:	d903      	bls.n	8006b6e <_vfiprintf_r+0x1ee>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0c5      	beq.n	8006af6 <_vfiprintf_r+0x176>
 8006b6a:	9105      	str	r1, [sp, #20]
 8006b6c:	e7c3      	b.n	8006af6 <_vfiprintf_r+0x176>
 8006b6e:	4604      	mov	r4, r0
 8006b70:	2301      	movs	r3, #1
 8006b72:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b76:	e7f0      	b.n	8006b5a <_vfiprintf_r+0x1da>
 8006b78:	ab03      	add	r3, sp, #12
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	462a      	mov	r2, r5
 8006b7e:	4630      	mov	r0, r6
 8006b80:	4b16      	ldr	r3, [pc, #88]	; (8006bdc <_vfiprintf_r+0x25c>)
 8006b82:	a904      	add	r1, sp, #16
 8006b84:	f7fd fc92 	bl	80044ac <_printf_float>
 8006b88:	4607      	mov	r7, r0
 8006b8a:	1c78      	adds	r0, r7, #1
 8006b8c:	d1d6      	bne.n	8006b3c <_vfiprintf_r+0x1bc>
 8006b8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b90:	07d9      	lsls	r1, r3, #31
 8006b92:	d405      	bmi.n	8006ba0 <_vfiprintf_r+0x220>
 8006b94:	89ab      	ldrh	r3, [r5, #12]
 8006b96:	059a      	lsls	r2, r3, #22
 8006b98:	d402      	bmi.n	8006ba0 <_vfiprintf_r+0x220>
 8006b9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b9c:	f7ff f9cc 	bl	8005f38 <__retarget_lock_release_recursive>
 8006ba0:	89ab      	ldrh	r3, [r5, #12]
 8006ba2:	065b      	lsls	r3, r3, #25
 8006ba4:	f53f af12 	bmi.w	80069cc <_vfiprintf_r+0x4c>
 8006ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006baa:	e711      	b.n	80069d0 <_vfiprintf_r+0x50>
 8006bac:	ab03      	add	r3, sp, #12
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	462a      	mov	r2, r5
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <_vfiprintf_r+0x25c>)
 8006bb6:	a904      	add	r1, sp, #16
 8006bb8:	f7fd ff14 	bl	80049e4 <_printf_i>
 8006bbc:	e7e4      	b.n	8006b88 <_vfiprintf_r+0x208>
 8006bbe:	bf00      	nop
 8006bc0:	0800720c 	.word	0x0800720c
 8006bc4:	0800722c 	.word	0x0800722c
 8006bc8:	080071ec 	.word	0x080071ec
 8006bcc:	080073a4 	.word	0x080073a4
 8006bd0:	080073aa 	.word	0x080073aa
 8006bd4:	080073ae 	.word	0x080073ae
 8006bd8:	080044ad 	.word	0x080044ad
 8006bdc:	0800695b 	.word	0x0800695b

08006be0 <_sbrk_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	2300      	movs	r3, #0
 8006be4:	4d05      	ldr	r5, [pc, #20]	; (8006bfc <_sbrk_r+0x1c>)
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fa fff8 	bl	8001be0 <_sbrk>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_sbrk_r+0x1a>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_sbrk_r+0x1a>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20001354 	.word	0x20001354

08006c00 <__sread>:
 8006c00:	b510      	push	{r4, lr}
 8006c02:	460c      	mov	r4, r1
 8006c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c08:	f000 f8e2 	bl	8006dd0 <_read_r>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	bfab      	itete	ge
 8006c10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c12:	89a3      	ldrhlt	r3, [r4, #12]
 8006c14:	181b      	addge	r3, r3, r0
 8006c16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c1a:	bfac      	ite	ge
 8006c1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c1e:	81a3      	strhlt	r3, [r4, #12]
 8006c20:	bd10      	pop	{r4, pc}

08006c22 <__swrite>:
 8006c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c26:	461f      	mov	r7, r3
 8006c28:	898b      	ldrh	r3, [r1, #12]
 8006c2a:	4605      	mov	r5, r0
 8006c2c:	05db      	lsls	r3, r3, #23
 8006c2e:	460c      	mov	r4, r1
 8006c30:	4616      	mov	r6, r2
 8006c32:	d505      	bpl.n	8006c40 <__swrite+0x1e>
 8006c34:	2302      	movs	r3, #2
 8006c36:	2200      	movs	r2, #0
 8006c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c3c:	f000 f898 	bl	8006d70 <_lseek_r>
 8006c40:	89a3      	ldrh	r3, [r4, #12]
 8006c42:	4632      	mov	r2, r6
 8006c44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c48:	81a3      	strh	r3, [r4, #12]
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	463b      	mov	r3, r7
 8006c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c56:	f000 b817 	b.w	8006c88 <_write_r>

08006c5a <__sseek>:
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c62:	f000 f885 	bl	8006d70 <_lseek_r>
 8006c66:	1c43      	adds	r3, r0, #1
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	bf15      	itete	ne
 8006c6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c76:	81a3      	strheq	r3, [r4, #12]
 8006c78:	bf18      	it	ne
 8006c7a:	81a3      	strhne	r3, [r4, #12]
 8006c7c:	bd10      	pop	{r4, pc}

08006c7e <__sclose>:
 8006c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c82:	f000 b831 	b.w	8006ce8 <_close_r>
	...

08006c88 <_write_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	4608      	mov	r0, r1
 8006c8e:	4611      	mov	r1, r2
 8006c90:	2200      	movs	r2, #0
 8006c92:	4d05      	ldr	r5, [pc, #20]	; (8006ca8 <_write_r+0x20>)
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fa ff56 	bl	8001b48 <_write>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_write_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_write_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	20001354 	.word	0x20001354

08006cac <__assert_func>:
 8006cac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cae:	4614      	mov	r4, r2
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <__assert_func+0x2c>)
 8006cb4:	4605      	mov	r5, r0
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68d8      	ldr	r0, [r3, #12]
 8006cba:	b14c      	cbz	r4, 8006cd0 <__assert_func+0x24>
 8006cbc:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <__assert_func+0x30>)
 8006cbe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cc2:	9100      	str	r1, [sp, #0]
 8006cc4:	462b      	mov	r3, r5
 8006cc6:	4906      	ldr	r1, [pc, #24]	; (8006ce0 <__assert_func+0x34>)
 8006cc8:	f000 f81e 	bl	8006d08 <fiprintf>
 8006ccc:	f000 f89f 	bl	8006e0e <abort>
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <__assert_func+0x38>)
 8006cd2:	461c      	mov	r4, r3
 8006cd4:	e7f3      	b.n	8006cbe <__assert_func+0x12>
 8006cd6:	bf00      	nop
 8006cd8:	20000010 	.word	0x20000010
 8006cdc:	080073b5 	.word	0x080073b5
 8006ce0:	080073c2 	.word	0x080073c2
 8006ce4:	080073f0 	.word	0x080073f0

08006ce8 <_close_r>:
 8006ce8:	b538      	push	{r3, r4, r5, lr}
 8006cea:	2300      	movs	r3, #0
 8006cec:	4d05      	ldr	r5, [pc, #20]	; (8006d04 <_close_r+0x1c>)
 8006cee:	4604      	mov	r4, r0
 8006cf0:	4608      	mov	r0, r1
 8006cf2:	602b      	str	r3, [r5, #0]
 8006cf4:	f7fa ff44 	bl	8001b80 <_close>
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d102      	bne.n	8006d02 <_close_r+0x1a>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	b103      	cbz	r3, 8006d02 <_close_r+0x1a>
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	20001354 	.word	0x20001354

08006d08 <fiprintf>:
 8006d08:	b40e      	push	{r1, r2, r3}
 8006d0a:	b503      	push	{r0, r1, lr}
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	ab03      	add	r3, sp, #12
 8006d10:	4805      	ldr	r0, [pc, #20]	; (8006d28 <fiprintf+0x20>)
 8006d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d16:	6800      	ldr	r0, [r0, #0]
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	f7ff fe31 	bl	8006980 <_vfiprintf_r>
 8006d1e:	b002      	add	sp, #8
 8006d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d24:	b003      	add	sp, #12
 8006d26:	4770      	bx	lr
 8006d28:	20000010 	.word	0x20000010

08006d2c <_fstat_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4d06      	ldr	r5, [pc, #24]	; (8006d4c <_fstat_r+0x20>)
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	f7fa ff2c 	bl	8001b96 <_fstat>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d102      	bne.n	8006d48 <_fstat_r+0x1c>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	b103      	cbz	r3, 8006d48 <_fstat_r+0x1c>
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20001354 	.word	0x20001354

08006d50 <_isatty_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	2300      	movs	r3, #0
 8006d54:	4d05      	ldr	r5, [pc, #20]	; (8006d6c <_isatty_r+0x1c>)
 8006d56:	4604      	mov	r4, r0
 8006d58:	4608      	mov	r0, r1
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	f7fa ff2a 	bl	8001bb4 <_isatty>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d102      	bne.n	8006d6a <_isatty_r+0x1a>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	b103      	cbz	r3, 8006d6a <_isatty_r+0x1a>
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	20001354 	.word	0x20001354

08006d70 <_lseek_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	4604      	mov	r4, r0
 8006d74:	4608      	mov	r0, r1
 8006d76:	4611      	mov	r1, r2
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4d05      	ldr	r5, [pc, #20]	; (8006d90 <_lseek_r+0x20>)
 8006d7c:	602a      	str	r2, [r5, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	f7fa ff22 	bl	8001bc8 <_lseek>
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d102      	bne.n	8006d8e <_lseek_r+0x1e>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b103      	cbz	r3, 8006d8e <_lseek_r+0x1e>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd38      	pop	{r3, r4, r5, pc}
 8006d90:	20001354 	.word	0x20001354

08006d94 <__ascii_mbtowc>:
 8006d94:	b082      	sub	sp, #8
 8006d96:	b901      	cbnz	r1, 8006d9a <__ascii_mbtowc+0x6>
 8006d98:	a901      	add	r1, sp, #4
 8006d9a:	b142      	cbz	r2, 8006dae <__ascii_mbtowc+0x1a>
 8006d9c:	b14b      	cbz	r3, 8006db2 <__ascii_mbtowc+0x1e>
 8006d9e:	7813      	ldrb	r3, [r2, #0]
 8006da0:	600b      	str	r3, [r1, #0]
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	1e10      	subs	r0, r2, #0
 8006da6:	bf18      	it	ne
 8006da8:	2001      	movne	r0, #1
 8006daa:	b002      	add	sp, #8
 8006dac:	4770      	bx	lr
 8006dae:	4610      	mov	r0, r2
 8006db0:	e7fb      	b.n	8006daa <__ascii_mbtowc+0x16>
 8006db2:	f06f 0001 	mvn.w	r0, #1
 8006db6:	e7f8      	b.n	8006daa <__ascii_mbtowc+0x16>

08006db8 <__malloc_lock>:
 8006db8:	4801      	ldr	r0, [pc, #4]	; (8006dc0 <__malloc_lock+0x8>)
 8006dba:	f7ff b8bc 	b.w	8005f36 <__retarget_lock_acquire_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	20001348 	.word	0x20001348

08006dc4 <__malloc_unlock>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	; (8006dcc <__malloc_unlock+0x8>)
 8006dc6:	f7ff b8b7 	b.w	8005f38 <__retarget_lock_release_recursive>
 8006dca:	bf00      	nop
 8006dcc:	20001348 	.word	0x20001348

08006dd0 <_read_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	4608      	mov	r0, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	2200      	movs	r2, #0
 8006dda:	4d05      	ldr	r5, [pc, #20]	; (8006df0 <_read_r+0x20>)
 8006ddc:	602a      	str	r2, [r5, #0]
 8006dde:	461a      	mov	r2, r3
 8006de0:	f7fa fe95 	bl	8001b0e <_read>
 8006de4:	1c43      	adds	r3, r0, #1
 8006de6:	d102      	bne.n	8006dee <_read_r+0x1e>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	b103      	cbz	r3, 8006dee <_read_r+0x1e>
 8006dec:	6023      	str	r3, [r4, #0]
 8006dee:	bd38      	pop	{r3, r4, r5, pc}
 8006df0:	20001354 	.word	0x20001354

08006df4 <__ascii_wctomb>:
 8006df4:	4603      	mov	r3, r0
 8006df6:	4608      	mov	r0, r1
 8006df8:	b141      	cbz	r1, 8006e0c <__ascii_wctomb+0x18>
 8006dfa:	2aff      	cmp	r2, #255	; 0xff
 8006dfc:	d904      	bls.n	8006e08 <__ascii_wctomb+0x14>
 8006dfe:	228a      	movs	r2, #138	; 0x8a
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	4770      	bx	lr
 8006e08:	2001      	movs	r0, #1
 8006e0a:	700a      	strb	r2, [r1, #0]
 8006e0c:	4770      	bx	lr

08006e0e <abort>:
 8006e0e:	2006      	movs	r0, #6
 8006e10:	b508      	push	{r3, lr}
 8006e12:	f000 f82b 	bl	8006e6c <raise>
 8006e16:	2001      	movs	r0, #1
 8006e18:	f7fa fe6f 	bl	8001afa <_exit>

08006e1c <_raise_r>:
 8006e1c:	291f      	cmp	r1, #31
 8006e1e:	b538      	push	{r3, r4, r5, lr}
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	d904      	bls.n	8006e30 <_raise_r+0x14>
 8006e26:	2316      	movs	r3, #22
 8006e28:	6003      	str	r3, [r0, #0]
 8006e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e2e:	bd38      	pop	{r3, r4, r5, pc}
 8006e30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e32:	b112      	cbz	r2, 8006e3a <_raise_r+0x1e>
 8006e34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e38:	b94b      	cbnz	r3, 8006e4e <_raise_r+0x32>
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	f000 f830 	bl	8006ea0 <_getpid_r>
 8006e40:	462a      	mov	r2, r5
 8006e42:	4601      	mov	r1, r0
 8006e44:	4620      	mov	r0, r4
 8006e46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e4a:	f000 b817 	b.w	8006e7c <_kill_r>
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d00a      	beq.n	8006e68 <_raise_r+0x4c>
 8006e52:	1c59      	adds	r1, r3, #1
 8006e54:	d103      	bne.n	8006e5e <_raise_r+0x42>
 8006e56:	2316      	movs	r3, #22
 8006e58:	6003      	str	r3, [r0, #0]
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	e7e7      	b.n	8006e2e <_raise_r+0x12>
 8006e5e:	2400      	movs	r4, #0
 8006e60:	4628      	mov	r0, r5
 8006e62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e66:	4798      	blx	r3
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e7e0      	b.n	8006e2e <_raise_r+0x12>

08006e6c <raise>:
 8006e6c:	4b02      	ldr	r3, [pc, #8]	; (8006e78 <raise+0xc>)
 8006e6e:	4601      	mov	r1, r0
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	f7ff bfd3 	b.w	8006e1c <_raise_r>
 8006e76:	bf00      	nop
 8006e78:	20000010 	.word	0x20000010

08006e7c <_kill_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4d06      	ldr	r5, [pc, #24]	; (8006e9c <_kill_r+0x20>)
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	f7fa fe26 	bl	8001ada <_kill>
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	d102      	bne.n	8006e98 <_kill_r+0x1c>
 8006e92:	682b      	ldr	r3, [r5, #0]
 8006e94:	b103      	cbz	r3, 8006e98 <_kill_r+0x1c>
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
 8006e9a:	bf00      	nop
 8006e9c:	20001354 	.word	0x20001354

08006ea0 <_getpid_r>:
 8006ea0:	f7fa be14 	b.w	8001acc <_getpid>

08006ea4 <sqrt>:
 8006ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea6:	4606      	mov	r6, r0
 8006ea8:	460f      	mov	r7, r1
 8006eaa:	f000 f81f 	bl	8006eec <__ieee754_sqrt>
 8006eae:	4632      	mov	r2, r6
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	4639      	mov	r1, r7
 8006eba:	f7f9 fda7 	bl	8000a0c <__aeabi_dcmpun>
 8006ebe:	b990      	cbnz	r0, 8006ee6 <sqrt+0x42>
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 fd78 	bl	80009bc <__aeabi_dcmplt>
 8006ecc:	b158      	cbz	r0, 8006ee6 <sqrt+0x42>
 8006ece:	f7fd fa1d 	bl	800430c <__errno>
 8006ed2:	2321      	movs	r3, #33	; 0x21
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	6003      	str	r3, [r0, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	4610      	mov	r0, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	f7f9 fc25 	bl	800072c <__aeabi_ddiv>
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	460d      	mov	r5, r1
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006eec <__ieee754_sqrt>:
 8006eec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007048 <__ieee754_sqrt+0x15c>
 8006ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef4:	ea3c 0c01 	bics.w	ip, ip, r1
 8006ef8:	4606      	mov	r6, r0
 8006efa:	460d      	mov	r5, r1
 8006efc:	460c      	mov	r4, r1
 8006efe:	460a      	mov	r2, r1
 8006f00:	4607      	mov	r7, r0
 8006f02:	4603      	mov	r3, r0
 8006f04:	d10f      	bne.n	8006f26 <__ieee754_sqrt+0x3a>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	f7f9 fae5 	bl	80004d8 <__aeabi_dmul>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4630      	mov	r0, r6
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 f929 	bl	800016c <__adddf3>
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4629      	mov	r1, r5
 8006f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f26:	2900      	cmp	r1, #0
 8006f28:	dc0e      	bgt.n	8006f48 <__ieee754_sqrt+0x5c>
 8006f2a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006f2e:	ea5c 0707 	orrs.w	r7, ip, r7
 8006f32:	d0f4      	beq.n	8006f1e <__ieee754_sqrt+0x32>
 8006f34:	b141      	cbz	r1, 8006f48 <__ieee754_sqrt+0x5c>
 8006f36:	4602      	mov	r2, r0
 8006f38:	460b      	mov	r3, r1
 8006f3a:	f7f9 f915 	bl	8000168 <__aeabi_dsub>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	f7f9 fbf3 	bl	800072c <__aeabi_ddiv>
 8006f46:	e7e8      	b.n	8006f1a <__ieee754_sqrt+0x2e>
 8006f48:	1521      	asrs	r1, r4, #20
 8006f4a:	d075      	beq.n	8007038 <__ieee754_sqrt+0x14c>
 8006f4c:	07cc      	lsls	r4, r1, #31
 8006f4e:	f04f 0400 	mov.w	r4, #0
 8006f52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006f56:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8006f5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006f5e:	bf5e      	ittt	pl
 8006f60:	0fd9      	lsrpl	r1, r3, #31
 8006f62:	005b      	lslpl	r3, r3, #1
 8006f64:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8006f68:	0fd9      	lsrs	r1, r3, #31
 8006f6a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006f6e:	2516      	movs	r5, #22
 8006f70:	4620      	mov	r0, r4
 8006f72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f76:	107f      	asrs	r7, r7, #1
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	1846      	adds	r6, r0, r1
 8006f7c:	4296      	cmp	r6, r2
 8006f7e:	bfde      	ittt	le
 8006f80:	1b92      	suble	r2, r2, r6
 8006f82:	1870      	addle	r0, r6, r1
 8006f84:	1864      	addle	r4, r4, r1
 8006f86:	0052      	lsls	r2, r2, #1
 8006f88:	3d01      	subs	r5, #1
 8006f8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006f8e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006f92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f96:	d1f0      	bne.n	8006f7a <__ieee754_sqrt+0x8e>
 8006f98:	4629      	mov	r1, r5
 8006f9a:	f04f 0e20 	mov.w	lr, #32
 8006f9e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006fa2:	4282      	cmp	r2, r0
 8006fa4:	eb06 0c05 	add.w	ip, r6, r5
 8006fa8:	dc02      	bgt.n	8006fb0 <__ieee754_sqrt+0xc4>
 8006faa:	d113      	bne.n	8006fd4 <__ieee754_sqrt+0xe8>
 8006fac:	459c      	cmp	ip, r3
 8006fae:	d811      	bhi.n	8006fd4 <__ieee754_sqrt+0xe8>
 8006fb0:	f1bc 0f00 	cmp.w	ip, #0
 8006fb4:	eb0c 0506 	add.w	r5, ip, r6
 8006fb8:	da43      	bge.n	8007042 <__ieee754_sqrt+0x156>
 8006fba:	2d00      	cmp	r5, #0
 8006fbc:	db41      	blt.n	8007042 <__ieee754_sqrt+0x156>
 8006fbe:	f100 0801 	add.w	r8, r0, #1
 8006fc2:	1a12      	subs	r2, r2, r0
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	459c      	cmp	ip, r3
 8006fc8:	bf88      	it	hi
 8006fca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006fce:	eba3 030c 	sub.w	r3, r3, ip
 8006fd2:	4431      	add	r1, r6
 8006fd4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006fd8:	f1be 0e01 	subs.w	lr, lr, #1
 8006fdc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006fe0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006fe4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006fe8:	d1db      	bne.n	8006fa2 <__ieee754_sqrt+0xb6>
 8006fea:	4313      	orrs	r3, r2
 8006fec:	d006      	beq.n	8006ffc <__ieee754_sqrt+0x110>
 8006fee:	1c48      	adds	r0, r1, #1
 8006ff0:	bf0b      	itete	eq
 8006ff2:	4671      	moveq	r1, lr
 8006ff4:	3101      	addne	r1, #1
 8006ff6:	3401      	addeq	r4, #1
 8006ff8:	f021 0101 	bicne.w	r1, r1, #1
 8006ffc:	1063      	asrs	r3, r4, #1
 8006ffe:	0849      	lsrs	r1, r1, #1
 8007000:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007004:	07e2      	lsls	r2, r4, #31
 8007006:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800700a:	bf48      	it	mi
 800700c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007010:	460e      	mov	r6, r1
 8007012:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007016:	e782      	b.n	8006f1e <__ieee754_sqrt+0x32>
 8007018:	0ada      	lsrs	r2, r3, #11
 800701a:	3815      	subs	r0, #21
 800701c:	055b      	lsls	r3, r3, #21
 800701e:	2a00      	cmp	r2, #0
 8007020:	d0fa      	beq.n	8007018 <__ieee754_sqrt+0x12c>
 8007022:	02d5      	lsls	r5, r2, #11
 8007024:	d50a      	bpl.n	800703c <__ieee754_sqrt+0x150>
 8007026:	f1c1 0420 	rsb	r4, r1, #32
 800702a:	fa23 f404 	lsr.w	r4, r3, r4
 800702e:	1e4d      	subs	r5, r1, #1
 8007030:	408b      	lsls	r3, r1
 8007032:	4322      	orrs	r2, r4
 8007034:	1b41      	subs	r1, r0, r5
 8007036:	e789      	b.n	8006f4c <__ieee754_sqrt+0x60>
 8007038:	4608      	mov	r0, r1
 800703a:	e7f0      	b.n	800701e <__ieee754_sqrt+0x132>
 800703c:	0052      	lsls	r2, r2, #1
 800703e:	3101      	adds	r1, #1
 8007040:	e7ef      	b.n	8007022 <__ieee754_sqrt+0x136>
 8007042:	4680      	mov	r8, r0
 8007044:	e7bd      	b.n	8006fc2 <__ieee754_sqrt+0xd6>
 8007046:	bf00      	nop
 8007048:	7ff00000 	.word	0x7ff00000

0800704c <_init>:
 800704c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704e:	bf00      	nop
 8007050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007052:	bc08      	pop	{r3}
 8007054:	469e      	mov	lr, r3
 8007056:	4770      	bx	lr

08007058 <_fini>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

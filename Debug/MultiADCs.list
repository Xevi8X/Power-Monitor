
MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c94  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003ea0  08003ea0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ea0  08003ea0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000944  20000074  08003f1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  08003f1c  000209b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009559  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d7  00000000  00000000  000295f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002b8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a04  00000000  00000000  0002cb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bea4  00000000  00000000  0004552c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088ba0  00000000  00000000  000513d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9f70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b1c  00000000  00000000  000d9fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003d88 	.word	0x08003d88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003d88 	.word	0x08003d88

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000152:	2300      	movs	r3, #0
 8000154:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	463b      	mov	r3, r7
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b2e      	ldr	r3, [pc, #184]	; (800021c <MX_ADC1_Init+0xd0>)
 8000162:	4a2f      	ldr	r2, [pc, #188]	; (8000220 <MX_ADC1_Init+0xd4>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000166:	4b2d      	ldr	r3, [pc, #180]	; (800021c <MX_ADC1_Init+0xd0>)
 8000168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	4b2b      	ldr	r3, [pc, #172]	; (800021c <MX_ADC1_Init+0xd0>)
 8000170:	2201      	movs	r2, #1
 8000172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	4b29      	ldr	r3, [pc, #164]	; (800021c <MX_ADC1_Init+0xd0>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017a:	4b28      	ldr	r3, [pc, #160]	; (800021c <MX_ADC1_Init+0xd0>)
 800017c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <MX_ADC1_Init+0xd0>)
 8000184:	2200      	movs	r2, #0
 8000186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000188:	4b24      	ldr	r3, [pc, #144]	; (800021c <MX_ADC1_Init+0xd0>)
 800018a:	2203      	movs	r2, #3
 800018c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018e:	4823      	ldr	r0, [pc, #140]	; (800021c <MX_ADC1_Init+0xd0>)
 8000190:	f000 fe8c 	bl	8000eac <HAL_ADC_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 800019a:	f000 fc4e 	bl	8000a3a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800019e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80001a4:	f107 030c 	add.w	r3, r7, #12
 80001a8:	4619      	mov	r1, r3
 80001aa:	481c      	ldr	r0, [pc, #112]	; (800021c <MX_ADC1_Init+0xd0>)
 80001ac:	f001 fc40 	bl	8001a30 <HAL_ADCEx_MultiModeConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fc40 	bl	8000a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001be:	2301      	movs	r3, #1
 80001c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001c2:	2307      	movs	r3, #7
 80001c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	463b      	mov	r3, r7
 80001c8:	4619      	mov	r1, r3
 80001ca:	4814      	ldr	r0, [pc, #80]	; (800021c <MX_ADC1_Init+0xd0>)
 80001cc:	f001 f8ca 	bl	8001364 <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80001d6:	f000 fc30 	bl	8000a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80001da:	2304      	movs	r3, #4
 80001dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001de:	2302      	movs	r3, #2
 80001e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e2:	463b      	mov	r3, r7
 80001e4:	4619      	mov	r1, r3
 80001e6:	480d      	ldr	r0, [pc, #52]	; (800021c <MX_ADC1_Init+0xd0>)
 80001e8:	f001 f8bc 	bl	8001364 <HAL_ADC_ConfigChannel>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80001f2:	f000 fc22 	bl	8000a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80001f6:	230b      	movs	r3, #11
 80001f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001fa:	2303      	movs	r3, #3
 80001fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fe:	463b      	mov	r3, r7
 8000200:	4619      	mov	r1, r3
 8000202:	4806      	ldr	r0, [pc, #24]	; (800021c <MX_ADC1_Init+0xd0>)
 8000204:	f001 f8ae 	bl	8001364 <HAL_ADC_ConfigChannel>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800020e:	f000 fc14 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000090 	.word	0x20000090
 8000220:	40012400 	.word	0x40012400

08000224 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000236:	4a28      	ldr	r2, [pc, #160]	; (80002d8 <MX_ADC2_Init+0xb4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000242:	4b24      	ldr	r3, [pc, #144]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000244:	2201      	movs	r2, #1
 8000246:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800025e:	2203      	movs	r2, #3
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000262:	481c      	ldr	r0, [pc, #112]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000264:	f000 fe22 	bl	8000eac <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 fbe4 	bl	8000a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000272:	2301      	movs	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800027a:	2307      	movs	r3, #7
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4814      	ldr	r0, [pc, #80]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000284:	f001 f86e 	bl	8001364 <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 fbd4 	bl	8000a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000292:	2308      	movs	r3, #8
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	480d      	ldr	r0, [pc, #52]	; (80002d4 <MX_ADC2_Init+0xb0>)
 80002a0:	f001 f860 	bl	8001364 <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 fbc6 	bl	8000a3a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002ae:	230a      	movs	r3, #10
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <MX_ADC2_Init+0xb0>)
 80002bc:	f001 f852 	bl	8001364 <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 fbb8 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200000c0 	.word	0x200000c0
 80002d8:	40012800 	.word	0x40012800

080002dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a65      	ldr	r2, [pc, #404]	; (800048c <HAL_ADC_MspInit+0x1b0>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d168      	bne.n	80003ce <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002fc:	4b64      	ldr	r3, [pc, #400]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a63      	ldr	r2, [pc, #396]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b61      	ldr	r3, [pc, #388]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000310:	627b      	str	r3, [r7, #36]	; 0x24
 8000312:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b5e      	ldr	r3, [pc, #376]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a5d      	ldr	r2, [pc, #372]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b5b      	ldr	r3, [pc, #364]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	623b      	str	r3, [r7, #32]
 800032a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b58      	ldr	r3, [pc, #352]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a57      	ldr	r2, [pc, #348]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b55      	ldr	r3, [pc, #340]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	61fb      	str	r3, [r7, #28]
 8000342:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000344:	2303      	movs	r3, #3
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000348:	2303      	movs	r3, #3
 800034a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800034c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000350:	4619      	mov	r1, r3
 8000352:	4850      	ldr	r0, [pc, #320]	; (8000494 <HAL_ADC_MspInit+0x1b8>)
 8000354:	f001 feba 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000358:	2311      	movs	r3, #17
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800035c:	2303      	movs	r3, #3
 800035e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000364:	4619      	mov	r1, r3
 8000366:	484c      	ldr	r0, [pc, #304]	; (8000498 <HAL_ADC_MspInit+0x1bc>)
 8000368:	f001 feb0 	bl	80020cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800036c:	4b4b      	ldr	r3, [pc, #300]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800036e:	4a4c      	ldr	r2, [pc, #304]	; (80004a0 <HAL_ADC_MspInit+0x1c4>)
 8000370:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000372:	4b4a      	ldr	r3, [pc, #296]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000378:	4b48      	ldr	r3, [pc, #288]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037e:	4b47      	ldr	r3, [pc, #284]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000380:	2280      	movs	r2, #128	; 0x80
 8000382:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000384:	4b45      	ldr	r3, [pc, #276]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800038c:	4b43      	ldr	r3, [pc, #268]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800038e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000392:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000394:	4b41      	ldr	r3, [pc, #260]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000396:	2220      	movs	r2, #32
 8000398:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800039a:	4b40      	ldr	r3, [pc, #256]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800039c:	2200      	movs	r2, #0
 800039e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003a0:	483e      	ldr	r0, [pc, #248]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003a2:	f001 fca5 	bl	8001cf0 <HAL_DMA_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80003ac:	f000 fb45 	bl	8000a3a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a3a      	ldr	r2, [pc, #232]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003b4:	621a      	str	r2, [r3, #32]
 80003b6:	4a39      	ldr	r2, [pc, #228]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2100      	movs	r1, #0
 80003c0:	2012      	movs	r0, #18
 80003c2:	f001 fc5e 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80003c6:	2012      	movs	r0, #18
 80003c8:	f001 fc77 	bl	8001cba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80003cc:	e05a      	b.n	8000484 <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a34      	ldr	r2, [pc, #208]	; (80004a4 <HAL_ADC_MspInit+0x1c8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d155      	bne.n	8000484 <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80003d8:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003ec:	61bb      	str	r3, [r7, #24]
 80003ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a26      	ldr	r2, [pc, #152]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0310 	and.w	r3, r3, #16
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a20      	ldr	r2, [pc, #128]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	613b      	str	r3, [r7, #16]
 800041e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1a      	ldr	r2, [pc, #104]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000438:	2303      	movs	r3, #3
 800043a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043c:	2303      	movs	r3, #3
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000444:	4619      	mov	r1, r3
 8000446:	4813      	ldr	r0, [pc, #76]	; (8000494 <HAL_ADC_MspInit+0x1b8>)
 8000448:	f001 fe40 	bl	80020cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800044c:	2302      	movs	r3, #2
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000450:	2303      	movs	r3, #3
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000458:	4619      	mov	r1, r3
 800045a:	480f      	ldr	r0, [pc, #60]	; (8000498 <HAL_ADC_MspInit+0x1bc>)
 800045c:	f001 fe36 	bl	80020cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000460:	2301      	movs	r3, #1
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000464:	2303      	movs	r3, #3
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046c:	4619      	mov	r1, r3
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <HAL_ADC_MspInit+0x1cc>)
 8000470:	f001 fe2c 	bl	80020cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2012      	movs	r0, #18
 800047a:	f001 fc02 	bl	8001c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800047e:	2012      	movs	r0, #18
 8000480:	f001 fc1b 	bl	8001cba <HAL_NVIC_EnableIRQ>
}
 8000484:	bf00      	nop
 8000486:	3738      	adds	r7, #56	; 0x38
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40012400 	.word	0x40012400
 8000490:	40021000 	.word	0x40021000
 8000494:	40011000 	.word	0x40011000
 8000498:	40010800 	.word	0x40010800
 800049c:	200000f0 	.word	0x200000f0
 80004a0:	40020008 	.word	0x40020008
 80004a4:	40012800 	.word	0x40012800
 80004a8:	40010c00 	.word	0x40010c00

080004ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_DMA_Init+0x38>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <MX_DMA_Init+0x38>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_DMA_Init+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	200b      	movs	r0, #11
 80004d0:	f001 fbd7 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d4:	200b      	movs	r0, #11
 80004d6:	f001 fbf0 	bl	8001cba <HAL_NVIC_EnableIRQ>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_GPIO_Init+0xcc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a1a      	ldr	r2, [pc, #104]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	4815      	ldr	r0, [pc, #84]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000562:	f001 ff4e 	bl	8002402 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_GPIO_Init+0xd4>)
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xd8>)
 800057c:	f001 fda6 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000580:	2320      	movs	r3, #32
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000598:	f001 fd98 	bl	80020cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	2028      	movs	r0, #40	; 0x28
 80005a2:	f001 fb6e 	bl	8001c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a6:	2028      	movs	r0, #40	; 0x28
 80005a8:	f001 fb87 	bl	8001cba <HAL_NVIC_EnableIRQ>

}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800
 80005bc:	10110000 	.word	0x10110000
 80005c0:	40011000 	.word	0x40011000

080005c4 <ADC_Start>:
/* USER CODE BEGIN 0 */



void ADC_Start(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 80005c8:	bf00      	nop
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <ADC_Start+0x3c>)
 80005cc:	f001 f8c4 	bl	8001758 <HAL_ADCEx_Calibration_Start>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1f9      	bne.n	80005ca <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 80005d6:	bf00      	nop
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <ADC_Start+0x40>)
 80005da:	f001 f8bd 	bl	8001758 <HAL_ADCEx_Calibration_Start>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f9      	bne.n	80005d8 <ADC_Start+0x14>
	HAL_Delay(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fc3d 	bl	8000e64 <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <ADC_Start+0x40>)
 80005ec:	f000 fd36 	bl	800105c <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADC_Buffer, (uint32_t)2 * CHANNELS);
 80005f0:	2206      	movs	r2, #6
 80005f2:	4905      	ldr	r1, [pc, #20]	; (8000608 <ADC_Start+0x44>)
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <ADC_Start+0x3c>)
 80005f6:	f001 f95b 	bl	80018b0 <HAL_ADCEx_MultiModeStart_DMA>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000090 	.word	0x20000090
 8000604:	200000c0 	.word	0x200000c0
 8000608:	20000134 	.word	0x20000134

0800060c <CalibrateZero>:

void CalibrateZero()
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b089      	sub	sp, #36	; 0x24
 8000610:	af00      	add	r7, sp, #0

	printf("Starting calibration...\n");
 8000612:	4832      	ldr	r0, [pc, #200]	; (80006dc <CalibrateZero+0xd0>)
 8000614:	f002 ff30 	bl	8003478 <puts>
	printf("Press button when voltage and current is equal to 0\n");
 8000618:	4831      	ldr	r0, [pc, #196]	; (80006e0 <CalibrateZero+0xd4>)
 800061a:	f002 ff2d 	bl	8003478 <puts>
	HAL_Delay(2000);
 800061e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000622:	f000 fc1f 	bl	8000e64 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000626:	b672      	cpsid	i
}
 8000628:	bf00      	nop

	__disable_irq();
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET);
 800062a:	bf00      	nop
 800062c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000630:	482c      	ldr	r0, [pc, #176]	; (80006e4 <CalibrateZero+0xd8>)
 8000632:	f001 fecf 	bl	80023d4 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d1f7      	bne.n	800062c <CalibrateZero+0x20>

	uint32_t sum[CHANNELS*2] = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
 800064a:	615a      	str	r2, [r3, #20]
	for(uint16_t i = 0; i < BUFFERSIZE;i++)
 800064c:	2300      	movs	r3, #0
 800064e:	83fb      	strh	r3, [r7, #30]
 8000650:	e023      	b.n	800069a <CalibrateZero+0x8e>
	{
		for(uint8_t j = 0; j < CHANNELS*2;j++)
 8000652:	2300      	movs	r3, #0
 8000654:	777b      	strb	r3, [r7, #29]
 8000656:	e01a      	b.n	800068e <CalibrateZero+0x82>
		{
			sum[j] += data[i][j];
 8000658:	7f7b      	ldrb	r3, [r7, #29]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	3320      	adds	r3, #32
 800065e:	443b      	add	r3, r7
 8000660:	f853 1c1c 	ldr.w	r1, [r3, #-28]
 8000664:	8bfa      	ldrh	r2, [r7, #30]
 8000666:	7f78      	ldrb	r0, [r7, #29]
 8000668:	4c1f      	ldr	r4, [pc, #124]	; (80006e8 <CalibrateZero+0xdc>)
 800066a:	4613      	mov	r3, r2
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	4413      	add	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	4403      	add	r3, r0
 8000674:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8000678:	461a      	mov	r2, r3
 800067a:	7f7b      	ldrb	r3, [r7, #29]
 800067c:	440a      	add	r2, r1
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	3320      	adds	r3, #32
 8000682:	443b      	add	r3, r7
 8000684:	f843 2c1c 	str.w	r2, [r3, #-28]
		for(uint8_t j = 0; j < CHANNELS*2;j++)
 8000688:	7f7b      	ldrb	r3, [r7, #29]
 800068a:	3301      	adds	r3, #1
 800068c:	777b      	strb	r3, [r7, #29]
 800068e:	7f7b      	ldrb	r3, [r7, #29]
 8000690:	2b05      	cmp	r3, #5
 8000692:	d9e1      	bls.n	8000658 <CalibrateZero+0x4c>
	for(uint16_t i = 0; i < BUFFERSIZE;i++)
 8000694:	8bfb      	ldrh	r3, [r7, #30]
 8000696:	3301      	adds	r3, #1
 8000698:	83fb      	strh	r3, [r7, #30]
 800069a:	8bfb      	ldrh	r3, [r7, #30]
 800069c:	2b7f      	cmp	r3, #127	; 0x7f
 800069e:	d9d8      	bls.n	8000652 <CalibrateZero+0x46>
		}
	}
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 80006a0:	2300      	movs	r3, #0
 80006a2:	773b      	strb	r3, [r7, #28]
 80006a4:	e00e      	b.n	80006c4 <CalibrateZero+0xb8>
	{
		calibZeros[j] = (uint16_t) (sum[j]/BUFFERSIZE);
 80006a6:	7f3b      	ldrb	r3, [r7, #28]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	3320      	adds	r3, #32
 80006ac:	443b      	add	r3, r7
 80006ae:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80006b2:	09da      	lsrs	r2, r3, #7
 80006b4:	7f3b      	ldrb	r3, [r7, #28]
 80006b6:	b291      	uxth	r1, r2
 80006b8:	4a0c      	ldr	r2, [pc, #48]	; (80006ec <CalibrateZero+0xe0>)
 80006ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 80006be:	7f3b      	ldrb	r3, [r7, #28]
 80006c0:	3301      	adds	r3, #1
 80006c2:	773b      	strb	r3, [r7, #28]
 80006c4:	7f3b      	ldrb	r3, [r7, #28]
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d9ed      	bls.n	80006a6 <CalibrateZero+0x9a>
	}
	printf("Calibration completed\n");
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <CalibrateZero+0xe4>)
 80006cc:	f002 fed4 	bl	8003478 <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 80006d0:	b662      	cpsie	i
}
 80006d2:	bf00      	nop
	__enable_irq();
}
 80006d4:	bf00      	nop
 80006d6:	3724      	adds	r7, #36	; 0x24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd90      	pop	{r4, r7, pc}
 80006dc:	08003da0 	.word	0x08003da0
 80006e0:	08003db8 	.word	0x08003db8
 80006e4:	40011000 	.word	0x40011000
 80006e8:	2000014c 	.word	0x2000014c
 80006ec:	20000950 	.word	0x20000950
 80006f0:	08003dec 	.word	0x08003dec

080006f4 <takeData>:

void takeData(uint32_t* buffer)
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	if(oversamplingIndex == OVERSAMPLING)
 80006fc:	4b4e      	ldr	r3, [pc, #312]	; (8000838 <takeData+0x144>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b08      	cmp	r3, #8
 8000702:	d139      	bne.n	8000778 <takeData+0x84>
	{
		oversamplingIndex = 0;
 8000704:	4b4c      	ldr	r3, [pc, #304]	; (8000838 <takeData+0x144>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
		time[indexCircBuffer] = getCurrentMicros();
 800070a:	4b4c      	ldr	r3, [pc, #304]	; (800083c <takeData+0x148>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	461c      	mov	r4, r3
 8000710:	f000 f8ea 	bl	80008e8 <getCurrentMicros>
 8000714:	4603      	mov	r3, r0
 8000716:	4a4a      	ldr	r2, [pc, #296]	; (8000840 <takeData+0x14c>)
 8000718:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		indexCircBuffer++;
 800071c:	4b47      	ldr	r3, [pc, #284]	; (800083c <takeData+0x148>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	b29a      	uxth	r2, r3
 8000724:	4b45      	ldr	r3, [pc, #276]	; (800083c <takeData+0x148>)
 8000726:	801a      	strh	r2, [r3, #0]
		if(indexCircBuffer == BUFFERSIZE)
 8000728:	4b44      	ldr	r3, [pc, #272]	; (800083c <takeData+0x148>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	2b80      	cmp	r3, #128	; 0x80
 800072e:	d106      	bne.n	800073e <takeData+0x4a>
		{
			indexCircBuffer = 0;
 8000730:	4b42      	ldr	r3, [pc, #264]	; (800083c <takeData+0x148>)
 8000732:	2200      	movs	r2, #0
 8000734:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000736:	2120      	movs	r1, #32
 8000738:	4842      	ldr	r0, [pc, #264]	; (8000844 <takeData+0x150>)
 800073a:	f001 fe7a 	bl	8002432 <HAL_GPIO_TogglePin>
		}
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 800073e:	2300      	movs	r3, #0
 8000740:	73fb      	strb	r3, [r7, #15]
 8000742:	e016      	b.n	8000772 <takeData+0x7e>
		{
			data[indexCircBuffer][i] = -calibZeros[i];
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	4a40      	ldr	r2, [pc, #256]	; (8000848 <takeData+0x154>)
 8000748:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800074c:	425b      	negs	r3, r3
 800074e:	b299      	uxth	r1, r3
 8000750:	4b3a      	ldr	r3, [pc, #232]	; (800083c <takeData+0x148>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	4618      	mov	r0, r3
 8000756:	7bfa      	ldrb	r2, [r7, #15]
 8000758:	b20c      	sxth	r4, r1
 800075a:	493c      	ldr	r1, [pc, #240]	; (800084c <takeData+0x158>)
 800075c:	4603      	mov	r3, r0
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4403      	add	r3, r0
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4413      	add	r3, r2
 8000766:	4622      	mov	r2, r4
 8000768:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 800076c:	7bfb      	ldrb	r3, [r7, #15]
 800076e:	3301      	adds	r3, #1
 8000770:	73fb      	strb	r3, [r7, #15]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	2b05      	cmp	r3, #5
 8000776:	d9e5      	bls.n	8000744 <takeData+0x50>
		}
	}
	for(uint8_t i = 0; i < CHANNELS;i++)
 8000778:	2300      	movs	r3, #0
 800077a:	73bb      	strb	r3, [r7, #14]
 800077c:	e04f      	b.n	800081e <takeData+0x12a>
	{
		data[indexCircBuffer][2*i] += (uint16_t) buffer[i];
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <takeData+0x148>)
 8000780:	881b      	ldrh	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	7bbb      	ldrb	r3, [r7, #14]
 8000786:	005a      	lsls	r2, r3, #1
 8000788:	4930      	ldr	r1, [pc, #192]	; (800084c <takeData+0x158>)
 800078a:	4603      	mov	r3, r0
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4403      	add	r3, r0
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000798:	b29a      	uxth	r2, r3
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	440b      	add	r3, r1
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4413      	add	r3, r2
 80007a8:	b299      	uxth	r1, r3
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <takeData+0x148>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	4618      	mov	r0, r3
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	005a      	lsls	r2, r3, #1
 80007b4:	b20c      	sxth	r4, r1
 80007b6:	4925      	ldr	r1, [pc, #148]	; (800084c <takeData+0x158>)
 80007b8:	4603      	mov	r3, r0
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4403      	add	r3, r0
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4413      	add	r3, r2
 80007c2:	4622      	mov	r2, r4
 80007c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		data[indexCircBuffer][2*i+1] += (uint16_t) (buffer[i] >> 16);
 80007c8:	4b1c      	ldr	r3, [pc, #112]	; (800083c <takeData+0x148>)
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	7bbb      	ldrb	r3, [r7, #14]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	491d      	ldr	r1, [pc, #116]	; (800084c <takeData+0x158>)
 80007d6:	4603      	mov	r3, r0
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4403      	add	r3, r0
 80007dc:	005b      	lsls	r3, r3, #1
 80007de:	4413      	add	r3, r2
 80007e0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80007e4:	b29a      	uxth	r2, r3
 80007e6:	7bbb      	ldrb	r3, [r7, #14]
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	440b      	add	r3, r1
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	4413      	add	r3, r2
 80007f6:	b299      	uxth	r1, r3
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <takeData+0x148>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	7bbb      	ldrb	r3, [r7, #14]
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	1c5a      	adds	r2, r3, #1
 8000804:	b20c      	sxth	r4, r1
 8000806:	4911      	ldr	r1, [pc, #68]	; (800084c <takeData+0x158>)
 8000808:	4603      	mov	r3, r0
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4403      	add	r3, r0
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	4413      	add	r3, r2
 8000812:	4622      	mov	r2, r4
 8000814:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t i = 0; i < CHANNELS;i++)
 8000818:	7bbb      	ldrb	r3, [r7, #14]
 800081a:	3301      	adds	r3, #1
 800081c:	73bb      	strb	r3, [r7, #14]
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	2b02      	cmp	r3, #2
 8000822:	d9ac      	bls.n	800077e <takeData+0x8a>
	}
	oversamplingIndex++;
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <takeData+0x144>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	3301      	adds	r3, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <takeData+0x144>)
 800082e:	701a      	strb	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bd90      	pop	{r4, r7, pc}
 8000838:	2000094e 	.word	0x2000094e
 800083c:	2000094c 	.word	0x2000094c
 8000840:	2000074c 	.word	0x2000074c
 8000844:	40010800 	.word	0x40010800
 8000848:	20000950 	.word	0x20000950
 800084c:	2000014c 	.word	0x2000014c

08000850 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	if(hadc)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d002      	beq.n	8000864 <HAL_ADC_ConvHalfCpltCallback+0x14>
	{
		takeData(ADC_Buffer);
 800085e:	4803      	ldr	r0, [pc, #12]	; (800086c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000860:	f7ff ff48 	bl	80006f4 <takeData>
	}
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000134 	.word	0x20000134

08000870 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if(hadc)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d004      	beq.n	8000888 <HAL_ADC_ConvCpltCallback+0x18>
	{
		takeData(halfOfADC_Buffer);
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <HAL_ADC_ConvCpltCallback+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ff36 	bl	80006f4 <takeData>
	}
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000000 	.word	0x20000000

08000894 <__io_putchar>:


int __io_putchar(int ch)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b0a      	cmp	r3, #10
 80008a0:	d102      	bne.n	80008a8 <__io_putchar+0x14>
    __io_putchar('\r');
 80008a2:	200d      	movs	r0, #13
 80008a4:	f7ff fff6 	bl	8000894 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80008a8:	1d39      	adds	r1, r7, #4
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2201      	movs	r2, #1
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <__io_putchar+0x2c>)
 80008b2:	f002 fbd6 	bl	8003062 <HAL_UART_Transmit>

  return 1;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000960 	.word	0x20000960

080008c4 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008d4:	bf0c      	ite	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	2300      	movne	r3, #0
 80008da:	b2db      	uxtb	r3, r3
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	e000e010 	.word	0xe000e010

080008e8 <getCurrentMicros>:

uint32_t getCurrentMicros(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 80008ee:	f7ff ffe9 	bl	80008c4 <LL_SYSTICK_IsActiveCounterFlag>
  uint32_t m = HAL_GetTick();
 80008f2:	f000 faad 	bl	8000e50 <HAL_GetTick>
 80008f6:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <getCurrentMicros+0x60>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	3301      	adds	r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <getCurrentMicros+0x60>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	68ba      	ldr	r2, [r7, #8]
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 800090a:	f7ff ffdb 	bl	80008c4 <LL_SYSTICK_IsActiveCounterFlag>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d007      	beq.n	8000924 <getCurrentMicros+0x3c>
    m = HAL_GetTick();
 8000914:	f000 fa9c 	bl	8000e50 <HAL_GetTick>
 8000918:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <getCurrentMicros+0x60>)
 800091c:	689b      	ldr	r3, [r3, #8]
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800092a:	fb03 f202 	mul.w	r2, r3, r2
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000934:	fb03 f101 	mul.w	r1, r3, r1
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	fbb1 f3f3 	udiv	r3, r1, r3
 800093e:	4413      	add	r3, r2
}
 8000940:	4618      	mov	r0, r3
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	e000e010 	.word	0xe000e010

0800094c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000950:	f000 fa26 	bl	8000da0 <HAL_Init>

  /* USER CODE BEGIN Init */
  indexCircBuffer = 0;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <main+0x38>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
  oversamplingIndex = 0;
 800095a:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <main+0x3c>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000960:	f000 f814 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000964:	f7ff fdc0 	bl	80004e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000968:	f7ff fda0 	bl	80004ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 800096c:	f000 f98a 	bl	8000c84 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000970:	f7ff fbec 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000974:	f7ff fc56 	bl	8000224 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 8000978:	f7ff fe24 	bl	80005c4 <ADC_Start>
  CalibrateZero();
 800097c:	f7ff fe46 	bl	800060c <CalibrateZero>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000980:	e7fe      	b.n	8000980 <main+0x34>
 8000982:	bf00      	nop
 8000984:	2000094c 	.word	0x2000094c
 8000988:	2000094e 	.word	0x2000094e

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000996:	2228      	movs	r2, #40	; 0x28
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f002 fcf6 	bl	800338c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c0:	2301      	movs	r3, #1
 80009c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	2310      	movs	r3, #16
 80009c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	2302      	movs	r3, #2
 80009ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009d0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80009d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 fd64 	bl	80024a8 <HAL_RCC_OscConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80009e6:	f000 f828 	bl	8000a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ea:	230f      	movs	r3, #15
 80009ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	2102      	movs	r1, #2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f001 ffd0 	bl	80029ac <HAL_RCC_ClockConfig>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a12:	f000 f812 	bl	8000a3a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a16:	2302      	movs	r3, #2
 8000a18:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000a1a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000a1e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 f95a 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a2e:	f000 f804 	bl	8000a3a <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
}
 8000a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6193      	str	r3, [r2, #24]
 8000a56:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <HAL_MspInit+0x5c>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_MspInit+0x60>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4a04      	ldr	r2, [pc, #16]	; (8000aa4 <HAL_MspInit+0x60>)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3714      	adds	r7, #20
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010000 	.word	0x40010000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aee:	f000 f99d 	bl	8000e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <DMA1_Channel1_IRQHandler+0x10>)
 8000afe:	f001 f9b1 	bl	8001e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000f0 	.word	0x200000f0

08000b0c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <ADC1_2_IRQHandler+0x14>)
 8000b12:	f000 fb51 	bl	80011b8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <ADC1_2_IRQHandler+0x18>)
 8000b18:	f000 fb4e 	bl	80011b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000090 	.word	0x20000090
 8000b24:	200000c0 	.word	0x200000c0

08000b28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b2c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b30:	f001 fc98 	bl	8002464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_read>:
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e00a      	b.n	8000b60 <_read+0x28>
 8000b4a:	f3af 8000 	nop.w
 8000b4e:	4601      	mov	r1, r0
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	b2ca      	uxtb	r2, r1
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf0      	blt.n	8000b4a <_read+0x12>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_write>:
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e009      	b.n	8000b98 <_write+0x26>
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fe81 	bl	8000894 <__io_putchar>
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf1      	blt.n	8000b84 <_write+0x12>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_close>:
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr

08000bc0 <_fstat>:
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr

08000bde <_isatty>:
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	2301      	movs	r3, #1
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr

08000bf2 <_lseek>:
 8000bf2:	b480      	push	{r7}
 8000bf4:	b085      	sub	sp, #20
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
	...

08000c0c <_sbrk>:
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
 8000c3c:	f002 fb7c 	bl	8003338 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20005000 	.word	0x20005000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	2000095c 	.word	0x2000095c
 8000c74:	200009b8 	.word	0x200009b8

08000c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <MX_USART2_UART_Init+0x50>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	f002 f984 	bl	8002fc8 <HAL_UART_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cc6:	f7ff feb8 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000960 	.word	0x20000960
 8000cd4:	40004400 	.word	0x40004400

08000cd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a15      	ldr	r2, [pc, #84]	; (8000d48 <HAL_UART_MspInit+0x70>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d123      	bne.n	8000d40 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_UART_MspInit+0x74>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <HAL_UART_MspInit+0x74>)
 8000cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d02:	61d3      	str	r3, [r2, #28]
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0x74>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_UART_MspInit+0x74>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <HAL_UART_MspInit+0x74>)
 8000d16:	f043 0304 	orr.w	r3, r3, #4
 8000d1a:	6193      	str	r3, [r2, #24]
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_UART_MspInit+0x74>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2302      	movs	r3, #2
 8000d32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0x78>)
 8000d3c:	f001 f9c6 	bl	80020cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010800 	.word	0x40010800

08000d54 <Reset_Handler>:
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopFillZerobss+0x12>)
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopFillZerobss+0x16>)
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopFillZerobss+0x1a>)
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:
 8000d5e:	58d4      	ldr	r4, [r2, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:
 8000d64:	18c4      	adds	r4, r0, r3
 8000d66:	428c      	cmp	r4, r1
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopFillZerobss+0x1e>)
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopFillZerobss+0x22>)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:
 8000d76:	42a2      	cmp	r2, r4
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>
 8000d7a:	f7ff ff7d 	bl	8000c78 <SystemInit>
 8000d7e:	f002 fae1 	bl	8003344 <__libc_init_array>
 8000d82:	f7ff fde3 	bl	800094c <main>
 8000d86:	4770      	bx	lr
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000074 	.word	0x20000074
 8000d90:	08003ea8 	.word	0x08003ea8
 8000d94:	20000074 	.word	0x20000074
 8000d98:	200009b8 	.word	0x200009b8

08000d9c <CAN1_RX1_IRQHandler>:
 8000d9c:	e7fe      	b.n	8000d9c <CAN1_RX1_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <HAL_Init+0x28>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a07      	ldr	r2, [pc, #28]	; (8000dc8 <HAL_Init+0x28>)
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db0:	2003      	movs	r0, #3
 8000db2:	f000 ff5b 	bl	8001c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f808 	bl	8000dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbc:	f7ff fe42 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40022000 	.word	0x40022000

08000dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <HAL_InitTick+0x54>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <HAL_InitTick+0x58>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 ff73 	bl	8001cd6 <HAL_SYSTICK_Config>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00e      	b.n	8000e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b0f      	cmp	r3, #15
 8000dfe:	d80a      	bhi.n	8000e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e00:	2200      	movs	r2, #0
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f000 ff3b 	bl	8001c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <HAL_InitTick+0x5c>)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e000      	b.n	8000e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000004 	.word	0x20000004
 8000e24:	2000000c 	.word	0x2000000c
 8000e28:	20000008 	.word	0x20000008

08000e2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_IncTick+0x1c>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x20>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_IncTick+0x20>)
 8000e3e:	6013      	str	r3, [r2, #0]
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	200009a4 	.word	0x200009a4

08000e50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b02      	ldr	r3, [pc, #8]	; (8000e60 <HAL_GetTick+0x10>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr
 8000e60:	200009a4 	.word	0x200009a4

08000e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e6c:	f7ff fff0 	bl	8000e50 <HAL_GetTick>
 8000e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e7c:	d005      	beq.n	8000e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_Delay+0x44>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	461a      	mov	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4413      	add	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8a:	bf00      	nop
 8000e8c:	f7ff ffe0 	bl	8000e50 <HAL_GetTick>
 8000e90:	4602      	mov	r2, r0
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d8f7      	bhi.n	8000e8c <HAL_Delay+0x28>
  {
  }
}
 8000e9c:	bf00      	nop
 8000e9e:	bf00      	nop
 8000ea0:	3710      	adds	r7, #16
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000000c 	.word	0x2000000c

08000eac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0be      	b.n	800104c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d109      	bne.n	8000ef0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff f9f6 	bl	80002dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f000 fb89 	bl	8001608 <ADC_ConversionStop_Disable>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f040 8099 	bne.w	800103a <HAL_ADC_Init+0x18e>
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 8095 	bne.w	800103a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f18:	f023 0302 	bic.w	r3, r3, #2
 8000f1c:	f043 0202 	orr.w	r2, r3, #2
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7b1b      	ldrb	r3, [r3, #12]
 8000f32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f44:	d003      	beq.n	8000f4e <HAL_ADC_Init+0xa2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <HAL_ADC_Init+0xa8>
 8000f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f52:	e000      	b.n	8000f56 <HAL_ADC_Init+0xaa>
 8000f54:	2300      	movs	r3, #0
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	7d1b      	ldrb	r3, [r3, #20]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d119      	bne.n	8000f98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	7b1b      	ldrb	r3, [r3, #12]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d109      	bne.n	8000f80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	035a      	lsls	r2, r3, #13
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	e00b      	b.n	8000f98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f84:	f043 0220 	orr.w	r2, r3, #32
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_ADC_Init+0x1a8>)
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	6812      	ldr	r2, [r2, #0]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc8:	d003      	beq.n	8000fd2 <HAL_ADC_Init+0x126>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d104      	bne.n	8000fdc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	051b      	lsls	r3, r3, #20
 8000fda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	430a      	orrs	r2, r1
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689a      	ldr	r2, [r3, #8]
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_ADC_Init+0x1ac>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	68ba      	ldr	r2, [r7, #8]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d10b      	bne.n	8001018 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100a:	f023 0303 	bic.w	r3, r3, #3
 800100e:	f043 0201 	orr.w	r2, r3, #1
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001016:	e018      	b.n	800104a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f023 0312 	bic.w	r3, r3, #18
 8001020:	f043 0210 	orr.w	r2, r3, #16
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001038:	e007      	b.n	800104a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103e:	f043 0210 	orr.w	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800104a:	7dfb      	ldrb	r3, [r7, #23]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	ffe1f7fd 	.word	0xffe1f7fd
 8001058:	ff1f0efe 	.word	0xff1f0efe

0800105c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <HAL_ADC_Start+0x1a>
 8001072:	2302      	movs	r3, #2
 8001074:	e098      	b.n	80011a8 <HAL_ADC_Start+0x14c>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 fa68 	bl	8001554 <ADC_Enable>
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b00      	cmp	r3, #0
 800108c:	f040 8087 	bne.w	800119e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a41      	ldr	r2, [pc, #260]	; (80011b0 <HAL_ADC_Start+0x154>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d105      	bne.n	80010ba <HAL_ADC_Start+0x5e>
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <HAL_ADC_Start+0x158>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d115      	bne.n	80010e6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d026      	beq.n	8001122 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010dc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e4:	e01d      	b.n	8001122 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a2f      	ldr	r2, [pc, #188]	; (80011b4 <HAL_ADC_Start+0x158>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d004      	beq.n	8001106 <HAL_ADC_Start+0xaa>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a2b      	ldr	r2, [pc, #172]	; (80011b0 <HAL_ADC_Start+0x154>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d10d      	bne.n	8001122 <HAL_ADC_Start+0xc6>
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_ADC_Start+0x158>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800110e:	2b00      	cmp	r3, #0
 8001110:	d007      	beq.n	8001122 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001116:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800111a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	f023 0206 	bic.w	r2, r3, #6
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c
 800113a:	e002      	b.n	8001142 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f06f 0202 	mvn.w	r2, #2
 8001152:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800115e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001162:	d113      	bne.n	800118c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001168:	4a11      	ldr	r2, [pc, #68]	; (80011b0 <HAL_ADC_Start+0x154>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d105      	bne.n	800117a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_ADC_Start+0x158>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001176:	2b00      	cmp	r3, #0
 8001178:	d108      	bne.n	800118c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	e00c      	b.n	80011a6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	e003      	b.n	80011a6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40012800 	.word	0x40012800
 80011b4:	40012400 	.word	0x40012400

080011b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	2b20      	cmp	r3, #32
 80011cc:	d140      	bne.n	8001250 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d139      	bne.n	8001250 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	f003 0310 	and.w	r3, r3, #16
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d105      	bne.n	80011f4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001202:	d11d      	bne.n	8001240 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001208:	2b00      	cmp	r3, #0
 800120a:	d119      	bne.n	8001240 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f022 0220 	bic.w	r2, r2, #32
 800121a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d105      	bne.n	8001240 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff fb15 	bl	8000870 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f06f 0212 	mvn.w	r2, #18
 800124e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125a:	2b80      	cmp	r3, #128	; 0x80
 800125c:	d14f      	bne.n	80012fe <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b04      	cmp	r3, #4
 800126a:	d148      	bne.n	80012fe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	2b00      	cmp	r3, #0
 8001276:	d105      	bne.n	8001284 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800128e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001292:	d012      	beq.n	80012ba <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d125      	bne.n	80012ee <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80012ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80012b0:	d11d      	bne.n	80012ee <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d119      	bne.n	80012ee <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e6:	f043 0201 	orr.w	r2, r3, #1
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fb94 	bl	8001a1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f06f 020c 	mvn.w	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	2b40      	cmp	r3, #64	; 0x40
 800130a:	d114      	bne.n	8001336 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b01      	cmp	r3, #1
 8001318:	d10d      	bne.n	8001336 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f809 	bl	800133e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f06f 0201 	mvn.w	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
	...

08001364 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x20>
 8001380:	2302      	movs	r3, #2
 8001382:	e0dc      	b.n	800153e <HAL_ADC_ConfigChannel+0x1da>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b06      	cmp	r3, #6
 8001392:	d81c      	bhi.n	80013ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b05      	subs	r3, #5
 80013a6:	221f      	movs	r2, #31
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4019      	ands	r1, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685a      	ldr	r2, [r3, #4]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	3b05      	subs	r3, #5
 80013c0:	fa00 f203 	lsl.w	r2, r0, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
 80013cc:	e03c      	b.n	8001448 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	d81c      	bhi.n	8001410 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	3b23      	subs	r3, #35	; 0x23
 80013e8:	221f      	movs	r2, #31
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	4019      	ands	r1, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6818      	ldr	r0, [r3, #0]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	3b23      	subs	r3, #35	; 0x23
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	631a      	str	r2, [r3, #48]	; 0x30
 800140e:	e01b      	b.n	8001448 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b41      	subs	r3, #65	; 0x41
 8001422:	221f      	movs	r2, #31
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	4019      	ands	r1, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3b41      	subs	r3, #65	; 0x41
 800143c:	fa00 f203 	lsl.w	r2, r0, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b09      	cmp	r3, #9
 800144e:	d91c      	bls.n	800148a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68d9      	ldr	r1, [r3, #12]
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	3b1e      	subs	r3, #30
 8001462:	2207      	movs	r2, #7
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	4019      	ands	r1, r3
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	6898      	ldr	r0, [r3, #8]
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	3b1e      	subs	r3, #30
 800147c:	fa00 f203 	lsl.w	r2, r0, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	e019      	b.n	80014be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6919      	ldr	r1, [r3, #16]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	2207      	movs	r2, #7
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4019      	ands	r1, r3
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6898      	ldr	r0, [r3, #8]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	fa00 f203 	lsl.w	r2, r0, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b10      	cmp	r3, #16
 80014c4:	d003      	beq.n	80014ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80014ca:	2b11      	cmp	r3, #17
 80014cc:	d132      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a1d      	ldr	r2, [pc, #116]	; (8001548 <HAL_ADC_ConfigChannel+0x1e4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d125      	bne.n	8001524 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d126      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80014f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b10      	cmp	r3, #16
 80014fc:	d11a      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <HAL_ADC_ConfigChannel+0x1e8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <HAL_ADC_ConfigChannel+0x1ec>)
 8001504:	fba2 2303 	umull	r2, r3, r2, r3
 8001508:	0c9a      	lsrs	r2, r3, #18
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001514:	e002      	b.n	800151c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3b01      	subs	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <HAL_ADC_ConfigChannel+0x1b2>
 8001522:	e007      	b.n	8001534 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800153c:	7bfb      	ldrb	r3, [r7, #15]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40012400 	.word	0x40012400
 800154c:	20000004 	.word	0x20000004
 8001550:	431bde83 	.word	0x431bde83

08001554 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d040      	beq.n	80015f4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f042 0201 	orr.w	r2, r2, #1
 8001580:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <ADC_Enable+0xac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1f      	ldr	r2, [pc, #124]	; (8001604 <ADC_Enable+0xb0>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	0c9b      	lsrs	r3, r3, #18
 800158e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001590:	e002      	b.n	8001598 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	3b01      	subs	r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f9      	bne.n	8001592 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800159e:	f7ff fc57 	bl	8000e50 <HAL_GetTick>
 80015a2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015a4:	e01f      	b.n	80015e6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015a6:	f7ff fc53 	bl	8000e50 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d918      	bls.n	80015e6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d011      	beq.n	80015e6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	f043 0210 	orr.w	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f043 0201 	orr.w	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e007      	b.n	80015f6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d1d8      	bne.n	80015a6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000004 	.word	0x20000004
 8001604:	431bde83 	.word	0x431bde83

08001608 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b01      	cmp	r3, #1
 8001620:	d12e      	bne.n	8001680 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0201 	bic.w	r2, r2, #1
 8001630:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001632:	f7ff fc0d 	bl	8000e50 <HAL_GetTick>
 8001636:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001638:	e01b      	b.n	8001672 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800163a:	f7ff fc09 	bl	8000e50 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d914      	bls.n	8001672 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d10d      	bne.n	8001672 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	f043 0210 	orr.w	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	f043 0201 	orr.w	r2, r3, #1
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e007      	b.n	8001682 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b01      	cmp	r3, #1
 800167e:	d0dc      	beq.n	800163a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b084      	sub	sp, #16
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d127      	bne.n	80016f4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016be:	d115      	bne.n	80016ec <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d111      	bne.n	80016ec <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e4:	f043 0201 	orr.w	r2, r3, #1
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff f8bf 	bl	8000870 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80016f2:	e004      	b.n	80016fe <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	4798      	blx	r3
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff f89b 	bl	8000850 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b084      	sub	sp, #16
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7ff fe01 	bl	8001350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_ADCEx_Calibration_Start+0x1e>
 8001772:	2302      	movs	r3, #2
 8001774:	e095      	b.n	80018a2 <HAL_ADCEx_Calibration_Start+0x14a>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ff42 	bl	8001608 <ADC_ConversionStop_Disable>
 8001784:	4603      	mov	r3, r0
 8001786:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001788:	7dfb      	ldrb	r3, [r7, #23]
 800178a:	2b00      	cmp	r3, #0
 800178c:	f040 8084 	bne.w	8001898 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001794:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001798:	f023 0302 	bic.w	r3, r3, #2
 800179c:	f043 0202 	orr.w	r2, r3, #2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80017a4:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_ADCEx_Calibration_Start+0x154>)
 80017a6:	681c      	ldr	r4, [r3, #0]
 80017a8:	2002      	movs	r0, #2
 80017aa:	f001 fb4d 	bl	8002e48 <HAL_RCCEx_GetPeriphCLKFreq>
 80017ae:	4603      	mov	r3, r0
 80017b0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80017b4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80017b6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80017b8:	e002      	b.n	80017c0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	3b01      	subs	r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f9      	bne.n	80017ba <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff fec4 	bl	8001554 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0208 	orr.w	r2, r2, #8
 80017da:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80017dc:	f7ff fb38 	bl	8000e50 <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017e2:	e01b      	b.n	800181c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017e4:	f7ff fb34 	bl	8000e50 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b0a      	cmp	r3, #10
 80017f0:	d914      	bls.n	800181c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00d      	beq.n	800181c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f023 0312 	bic.w	r3, r3, #18
 8001808:	f043 0210 	orr.w	r2, r3, #16
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e042      	b.n	80018a2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1dc      	bne.n	80017e4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f042 0204 	orr.w	r2, r2, #4
 8001838:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800183a:	f7ff fb09 	bl	8000e50 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001840:	e01b      	b.n	800187a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001842:	f7ff fb05 	bl	8000e50 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b0a      	cmp	r3, #10
 800184e:	d914      	bls.n	800187a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d00d      	beq.n	800187a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	f023 0312 	bic.w	r3, r3, #18
 8001866:	f043 0210 	orr.w	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e013      	b.n	80018a2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1dc      	bne.n	8001842 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	f023 0303 	bic.w	r3, r3, #3
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	371c      	adds	r7, #28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000004 	.word	0x20000004

080018b0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b092      	sub	sp, #72	; 0x48
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 80018c2:	f107 0314 	add.w	r3, r7, #20
 80018c6:	2230      	movs	r2, #48	; 0x30
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fd5e 	bl	800338c <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80018da:	2302      	movs	r3, #2
 80018dc:	e08f      	b.n	80019fe <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80018e6:	4b48      	ldr	r3, [pc, #288]	; (8001a08 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80018e8:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018f6:	d00b      	beq.n	8001910 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f043 0220 	orr.w	r2, r3, #32
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e076      	b.n	80019fe <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7ff fe1f 	bl	8001554 <ADC_Enable>
 8001916:	4603      	mov	r3, r0
 8001918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 800191c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001920:	2b00      	cmp	r3, #0
 8001922:	d107      	bne.n	8001934 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fe13 	bl	8001554 <ADC_Enable>
 800192e:	4603      	mov	r3, r0
 8001930:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001934:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001938:	2b00      	cmp	r3, #0
 800193a:	d15a      	bne.n	80019f2 <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001940:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8001942:	4013      	ands	r3, r2
 8001944:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001962:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 800197e:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a22      	ldr	r2, [pc, #136]	; (8001a18 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 800198e:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0202 	mvn.w	r2, #2
 8001998:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019a8:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a18      	ldr	r0, [r3, #32]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	334c      	adds	r3, #76	; 0x4c
 80019b4:	4619      	mov	r1, r3
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f000 f9f3 	bl	8001da4 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80019c8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80019cc:	d108      	bne.n	80019e0 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	e00c      	b.n	80019fa <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e003      	b.n	80019fa <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3748      	adds	r7, #72	; 0x48
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40012800 	.word	0x40012800
 8001a0c:	ffeffcfe 	.word	0xffeffcfe
 8001a10:	0800168b 	.word	0x0800168b
 8001a14:	08001707 	.word	0x08001707
 8001a18:	08001723 	.word	0x08001723

08001a1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b090      	sub	sp, #64	; 0x40
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	2230      	movs	r2, #48	; 0x30
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f001 fc9f 	bl	800338c <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e032      	b.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001a64:	4b19      	ldr	r3, [pc, #100]	; (8001acc <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8001a66:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d016      	beq.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d010      	beq.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d10b      	bne.n	8001aa4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	e008      	b.n	8001ab6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f043 0220 	orr.w	r2, r3, #32
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001abe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3740      	adds	r7, #64	; 0x40
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40012800 	.word	0x40012800
 8001ad0:	40012400 	.word	0x40012400

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4906      	ldr	r1, [pc, #24]	; (8001b6c <__NVIC_EnableIRQ+0x34>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c38:	d301      	bcc.n	8001c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00f      	b.n	8001c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <SysTick_Config+0x40>)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c46:	210f      	movs	r1, #15
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f7ff ff90 	bl	8001b70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <SysTick_Config+0x40>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <SysTick_Config+0x40>)
 8001c58:	2207      	movs	r2, #7
 8001c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	e000e010 	.word	0xe000e010

08001c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff ff2d 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b086      	sub	sp, #24
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c94:	f7ff ff42 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	6978      	ldr	r0, [r7, #20]
 8001ca0:	f7ff ff90 	bl	8001bc4 <NVIC_EncodePriority>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff5f 	bl	8001b70 <__NVIC_SetPriority>
}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff35 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff ffa2 	bl	8001c28 <SysTick_Config>
 8001ce4:	4603      	mov	r3, r0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e043      	b.n	8001d8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b22      	ldr	r3, [pc, #136]	; (8001d98 <HAL_DMA_Init+0xa8>)
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a22      	ldr	r2, [pc, #136]	; (8001d9c <HAL_DMA_Init+0xac>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	091b      	lsrs	r3, r3, #4
 8001d18:	009a      	lsls	r2, r3, #2
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <HAL_DMA_Init+0xb0>)
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	bffdfff8 	.word	0xbffdfff8
 8001d9c:	cccccccd 	.word	0xcccccccd
 8001da0:	40020000 	.word	0x40020000

08001da4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_DMA_Start_IT+0x20>
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	e04a      	b.n	8001e5a <HAL_DMA_Start_IT+0xb6>
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d13a      	bne.n	8001e4c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 0201 	bic.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	68b9      	ldr	r1, [r7, #8]
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f938 	bl	8002070 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 020e 	orr.w	r2, r2, #14
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	e00f      	b.n	8001e3a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0204 	bic.w	r2, r2, #4
 8001e28:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 020a 	orr.w	r2, r2, #10
 8001e38:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f042 0201 	orr.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e005      	b.n	8001e58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
 8001e56:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	2204      	movs	r2, #4
 8001e82:	409a      	lsls	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d04f      	beq.n	8001f2c <HAL_DMA_IRQHandler+0xc8>
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d04a      	beq.n	8001f2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d107      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0204 	bic.w	r2, r2, #4
 8001eb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a66      	ldr	r2, [pc, #408]	; (8002054 <HAL_DMA_IRQHandler+0x1f0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d029      	beq.n	8001f12 <HAL_DMA_IRQHandler+0xae>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a65      	ldr	r2, [pc, #404]	; (8002058 <HAL_DMA_IRQHandler+0x1f4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d022      	beq.n	8001f0e <HAL_DMA_IRQHandler+0xaa>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a63      	ldr	r2, [pc, #396]	; (800205c <HAL_DMA_IRQHandler+0x1f8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d01a      	beq.n	8001f08 <HAL_DMA_IRQHandler+0xa4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a62      	ldr	r2, [pc, #392]	; (8002060 <HAL_DMA_IRQHandler+0x1fc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d012      	beq.n	8001f02 <HAL_DMA_IRQHandler+0x9e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a60      	ldr	r2, [pc, #384]	; (8002064 <HAL_DMA_IRQHandler+0x200>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d00a      	beq.n	8001efc <HAL_DMA_IRQHandler+0x98>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <HAL_DMA_IRQHandler+0x204>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d102      	bne.n	8001ef6 <HAL_DMA_IRQHandler+0x92>
 8001ef0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ef4:	e00e      	b.n	8001f14 <HAL_DMA_IRQHandler+0xb0>
 8001ef6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001efa:	e00b      	b.n	8001f14 <HAL_DMA_IRQHandler+0xb0>
 8001efc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f00:	e008      	b.n	8001f14 <HAL_DMA_IRQHandler+0xb0>
 8001f02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f06:	e005      	b.n	8001f14 <HAL_DMA_IRQHandler+0xb0>
 8001f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0c:	e002      	b.n	8001f14 <HAL_DMA_IRQHandler+0xb0>
 8001f0e:	2340      	movs	r3, #64	; 0x40
 8001f10:	e000      	b.n	8001f14 <HAL_DMA_IRQHandler+0xb0>
 8001f12:	2304      	movs	r3, #4
 8001f14:	4a55      	ldr	r2, [pc, #340]	; (800206c <HAL_DMA_IRQHandler+0x208>)
 8001f16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 8094 	beq.w	800204a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001f2a:	e08e      	b.n	800204a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2202      	movs	r2, #2
 8001f32:	409a      	lsls	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d056      	beq.n	8001fea <HAL_DMA_IRQHandler+0x186>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d051      	beq.n	8001fea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10b      	bne.n	8001f6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 020a 	bic.w	r2, r2, #10
 8001f62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a38      	ldr	r2, [pc, #224]	; (8002054 <HAL_DMA_IRQHandler+0x1f0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d029      	beq.n	8001fca <HAL_DMA_IRQHandler+0x166>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a37      	ldr	r2, [pc, #220]	; (8002058 <HAL_DMA_IRQHandler+0x1f4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d022      	beq.n	8001fc6 <HAL_DMA_IRQHandler+0x162>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a35      	ldr	r2, [pc, #212]	; (800205c <HAL_DMA_IRQHandler+0x1f8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01a      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x15c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a34      	ldr	r2, [pc, #208]	; (8002060 <HAL_DMA_IRQHandler+0x1fc>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d012      	beq.n	8001fba <HAL_DMA_IRQHandler+0x156>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a32      	ldr	r2, [pc, #200]	; (8002064 <HAL_DMA_IRQHandler+0x200>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00a      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x150>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a31      	ldr	r2, [pc, #196]	; (8002068 <HAL_DMA_IRQHandler+0x204>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d102      	bne.n	8001fae <HAL_DMA_IRQHandler+0x14a>
 8001fa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fac:	e00e      	b.n	8001fcc <HAL_DMA_IRQHandler+0x168>
 8001fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb2:	e00b      	b.n	8001fcc <HAL_DMA_IRQHandler+0x168>
 8001fb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb8:	e008      	b.n	8001fcc <HAL_DMA_IRQHandler+0x168>
 8001fba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fbe:	e005      	b.n	8001fcc <HAL_DMA_IRQHandler+0x168>
 8001fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fc4:	e002      	b.n	8001fcc <HAL_DMA_IRQHandler+0x168>
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e000      	b.n	8001fcc <HAL_DMA_IRQHandler+0x168>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <HAL_DMA_IRQHandler+0x208>)
 8001fce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d034      	beq.n	800204a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001fe8:	e02f      	b.n	800204a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	2208      	movs	r2, #8
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d028      	beq.n	800204c <HAL_DMA_IRQHandler+0x1e8>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 020e 	bic.w	r2, r2, #14
 8002012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	2b00      	cmp	r3, #0
 8002040:	d004      	beq.n	800204c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
    }
  }
  return;
 800204a:	bf00      	nop
 800204c:	bf00      	nop
}
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40020008 	.word	0x40020008
 8002058:	4002001c 	.word	0x4002001c
 800205c:	40020030 	.word	0x40020030
 8002060:	40020044 	.word	0x40020044
 8002064:	40020058 	.word	0x40020058
 8002068:	4002006c 	.word	0x4002006c
 800206c:	40020000 	.word	0x40020000

08002070 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	683a      	ldr	r2, [r7, #0]
 8002094:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b10      	cmp	r3, #16
 800209c:	d108      	bne.n	80020b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80020ae:	e007      	b.n	80020c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b08b      	sub	sp, #44	; 0x2c
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	e169      	b.n	80023b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020e0:	2201      	movs	r2, #1
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	f040 8158 	bne.w	80023ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	4a9a      	ldr	r2, [pc, #616]	; (800236c <HAL_GPIO_Init+0x2a0>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d05e      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002108:	4a98      	ldr	r2, [pc, #608]	; (800236c <HAL_GPIO_Init+0x2a0>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d875      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800210e:	4a98      	ldr	r2, [pc, #608]	; (8002370 <HAL_GPIO_Init+0x2a4>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d058      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002114:	4a96      	ldr	r2, [pc, #600]	; (8002370 <HAL_GPIO_Init+0x2a4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d86f      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800211a:	4a96      	ldr	r2, [pc, #600]	; (8002374 <HAL_GPIO_Init+0x2a8>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d052      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002120:	4a94      	ldr	r2, [pc, #592]	; (8002374 <HAL_GPIO_Init+0x2a8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d869      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002126:	4a94      	ldr	r2, [pc, #592]	; (8002378 <HAL_GPIO_Init+0x2ac>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d04c      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 800212c:	4a92      	ldr	r2, [pc, #584]	; (8002378 <HAL_GPIO_Init+0x2ac>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d863      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002132:	4a92      	ldr	r2, [pc, #584]	; (800237c <HAL_GPIO_Init+0x2b0>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d046      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
 8002138:	4a90      	ldr	r2, [pc, #576]	; (800237c <HAL_GPIO_Init+0x2b0>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d85d      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 800213e:	2b12      	cmp	r3, #18
 8002140:	d82a      	bhi.n	8002198 <HAL_GPIO_Init+0xcc>
 8002142:	2b12      	cmp	r3, #18
 8002144:	d859      	bhi.n	80021fa <HAL_GPIO_Init+0x12e>
 8002146:	a201      	add	r2, pc, #4	; (adr r2, 800214c <HAL_GPIO_Init+0x80>)
 8002148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214c:	080021c7 	.word	0x080021c7
 8002150:	080021a1 	.word	0x080021a1
 8002154:	080021b3 	.word	0x080021b3
 8002158:	080021f5 	.word	0x080021f5
 800215c:	080021fb 	.word	0x080021fb
 8002160:	080021fb 	.word	0x080021fb
 8002164:	080021fb 	.word	0x080021fb
 8002168:	080021fb 	.word	0x080021fb
 800216c:	080021fb 	.word	0x080021fb
 8002170:	080021fb 	.word	0x080021fb
 8002174:	080021fb 	.word	0x080021fb
 8002178:	080021fb 	.word	0x080021fb
 800217c:	080021fb 	.word	0x080021fb
 8002180:	080021fb 	.word	0x080021fb
 8002184:	080021fb 	.word	0x080021fb
 8002188:	080021fb 	.word	0x080021fb
 800218c:	080021fb 	.word	0x080021fb
 8002190:	080021a9 	.word	0x080021a9
 8002194:	080021bd 	.word	0x080021bd
 8002198:	4a79      	ldr	r2, [pc, #484]	; (8002380 <HAL_GPIO_Init+0x2b4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800219e:	e02c      	b.n	80021fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	623b      	str	r3, [r7, #32]
          break;
 80021a6:	e029      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	3304      	adds	r3, #4
 80021ae:	623b      	str	r3, [r7, #32]
          break;
 80021b0:	e024      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	3308      	adds	r3, #8
 80021b8:	623b      	str	r3, [r7, #32]
          break;
 80021ba:	e01f      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	330c      	adds	r3, #12
 80021c2:	623b      	str	r3, [r7, #32]
          break;
 80021c4:	e01a      	b.n	80021fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021ce:	2304      	movs	r3, #4
 80021d0:	623b      	str	r3, [r7, #32]
          break;
 80021d2:	e013      	b.n	80021fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021dc:	2308      	movs	r3, #8
 80021de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69fa      	ldr	r2, [r7, #28]
 80021e4:	611a      	str	r2, [r3, #16]
          break;
 80021e6:	e009      	b.n	80021fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e8:	2308      	movs	r3, #8
 80021ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	615a      	str	r2, [r3, #20]
          break;
 80021f2:	e003      	b.n	80021fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
          break;
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x130>
          break;
 80021fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2bff      	cmp	r3, #255	; 0xff
 8002200:	d801      	bhi.n	8002206 <HAL_GPIO_Init+0x13a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	e001      	b.n	800220a <HAL_GPIO_Init+0x13e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2bff      	cmp	r3, #255	; 0xff
 8002210:	d802      	bhi.n	8002218 <HAL_GPIO_Init+0x14c>
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	e002      	b.n	800221e <HAL_GPIO_Init+0x152>
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	3b08      	subs	r3, #8
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	210f      	movs	r1, #15
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	401a      	ands	r2, r3
 8002230:	6a39      	ldr	r1, [r7, #32]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	431a      	orrs	r2, r3
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80b1 	beq.w	80023ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800224c:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_GPIO_Init+0x2b8>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002264:	4a48      	ldr	r2, [pc, #288]	; (8002388 <HAL_GPIO_Init+0x2bc>)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	3302      	adds	r3, #2
 800226c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002270:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	220f      	movs	r2, #15
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4013      	ands	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a40      	ldr	r2, [pc, #256]	; (800238c <HAL_GPIO_Init+0x2c0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <HAL_GPIO_Init+0x1ec>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a3f      	ldr	r2, [pc, #252]	; (8002390 <HAL_GPIO_Init+0x2c4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d00d      	beq.n	80022b4 <HAL_GPIO_Init+0x1e8>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3e      	ldr	r2, [pc, #248]	; (8002394 <HAL_GPIO_Init+0x2c8>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <HAL_GPIO_Init+0x1e4>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3d      	ldr	r2, [pc, #244]	; (8002398 <HAL_GPIO_Init+0x2cc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_GPIO_Init+0x1e0>
 80022a8:	2303      	movs	r3, #3
 80022aa:	e006      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022ac:	2304      	movs	r3, #4
 80022ae:	e004      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e002      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_GPIO_Init+0x1ee>
 80022b8:	2300      	movs	r3, #0
 80022ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022bc:	f002 0203 	and.w	r2, r2, #3
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	4093      	lsls	r3, r2
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022ca:	492f      	ldr	r1, [pc, #188]	; (8002388 <HAL_GPIO_Init+0x2bc>)
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	089b      	lsrs	r3, r3, #2
 80022d0:	3302      	adds	r3, #2
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d006      	beq.n	80022f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	492c      	ldr	r1, [pc, #176]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	600b      	str	r3, [r1, #0]
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f2:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	4928      	ldr	r1, [pc, #160]	; (800239c <HAL_GPIO_Init+0x2d0>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800230c:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4922      	ldr	r1, [pc, #136]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
 8002318:	e006      	b.n	8002328 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	43db      	mvns	r3, r3
 8002322:	491e      	ldr	r1, [pc, #120]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002324:	4013      	ands	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d006      	beq.n	8002342 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4918      	ldr	r1, [pc, #96]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	608b      	str	r3, [r1, #8]
 8002340:	e006      	b.n	8002350 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002342:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	43db      	mvns	r3, r3
 800234a:	4914      	ldr	r1, [pc, #80]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800234c:	4013      	ands	r3, r2
 800234e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d021      	beq.n	80023a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <HAL_GPIO_Init+0x2d0>)
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	490e      	ldr	r1, [pc, #56]	; (800239c <HAL_GPIO_Init+0x2d0>)
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	60cb      	str	r3, [r1, #12]
 8002368:	e021      	b.n	80023ae <HAL_GPIO_Init+0x2e2>
 800236a:	bf00      	nop
 800236c:	10320000 	.word	0x10320000
 8002370:	10310000 	.word	0x10310000
 8002374:	10220000 	.word	0x10220000
 8002378:	10210000 	.word	0x10210000
 800237c:	10120000 	.word	0x10120000
 8002380:	10110000 	.word	0x10110000
 8002384:	40021000 	.word	0x40021000
 8002388:	40010000 	.word	0x40010000
 800238c:	40010800 	.word	0x40010800
 8002390:	40010c00 	.word	0x40010c00
 8002394:	40011000 	.word	0x40011000
 8002398:	40011400 	.word	0x40011400
 800239c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_GPIO_Init+0x304>)
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	4909      	ldr	r1, [pc, #36]	; (80023d0 <HAL_GPIO_Init+0x304>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b0:	3301      	adds	r3, #1
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f47f ae8e 	bne.w	80020e0 <HAL_GPIO_Init+0x14>
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	372c      	adds	r7, #44	; 0x2c
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
 80023f0:	e001      	b.n	80023f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	807b      	strh	r3, [r7, #2]
 800240e:	4613      	mov	r3, r2
 8002410:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002412:	787b      	ldrb	r3, [r7, #1]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002418:	887a      	ldrh	r2, [r7, #2]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800241e:	e003      	b.n	8002428 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002420:	887b      	ldrh	r3, [r7, #2]
 8002422:	041a      	lsls	r2, r3, #16
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	611a      	str	r2, [r3, #16]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002444:	887a      	ldrh	r2, [r7, #2]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	041a      	lsls	r2, r3, #16
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	43d9      	mvns	r1, r3
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	400b      	ands	r3, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]
}
 800245a:	bf00      	nop
 800245c:	3714      	adds	r7, #20
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	4013      	ands	r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f806 	bl	8002494 <HAL_GPIO_EXTI_Callback>
  }
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e272      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8087 	beq.w	80025d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024c8:	4b92      	ldr	r3, [pc, #584]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d00c      	beq.n	80024ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d4:	4b8f      	ldr	r3, [pc, #572]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d112      	bne.n	8002506 <HAL_RCC_OscConfig+0x5e>
 80024e0:	4b8c      	ldr	r3, [pc, #560]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ec:	d10b      	bne.n	8002506 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ee:	4b89      	ldr	r3, [pc, #548]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d06c      	beq.n	80025d4 <HAL_RCC_OscConfig+0x12c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d168      	bne.n	80025d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e24c      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x76>
 8002510:	4b80      	ldr	r3, [pc, #512]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a7f      	ldr	r2, [pc, #508]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e02e      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b78      	ldr	r3, [pc, #480]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a77      	ldr	r2, [pc, #476]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0xbc>
 800254a:	4b72      	ldr	r3, [pc, #456]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a71      	ldr	r2, [pc, #452]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b6f      	ldr	r3, [pc, #444]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xd4>
 8002564:	4b6b      	ldr	r3, [pc, #428]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6a      	ldr	r2, [pc, #424]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b68      	ldr	r3, [pc, #416]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a67      	ldr	r2, [pc, #412]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002584:	f7fe fc64 	bl	8000e50 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fc60 	bl	8000e50 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	; 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e200      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b5d      	ldr	r3, [pc, #372]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xe4>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe fc50 	bl	8000e50 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fc4c 	bl	8000e50 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	; 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1ec      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	4b53      	ldr	r3, [pc, #332]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x10c>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d063      	beq.n	80026aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e2:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d11c      	bne.n	8002634 <HAL_RCC_OscConfig+0x18c>
 80025fa:	4b46      	ldr	r3, [pc, #280]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d116      	bne.n	8002634 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	4b43      	ldr	r3, [pc, #268]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_RCC_OscConfig+0x176>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d001      	beq.n	800261e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e1c0      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	4939      	ldr	r1, [pc, #228]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800262e:	4313      	orrs	r3, r2
 8002630:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002632:	e03a      	b.n	80026aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800263c:	4b36      	ldr	r3, [pc, #216]	; (8002718 <HAL_RCC_OscConfig+0x270>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002642:	f7fe fc05 	bl	8000e50 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264a:	f7fe fc01 	bl	8000e50 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e1a1      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	4b2d      	ldr	r3, [pc, #180]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0f0      	beq.n	800264a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002668:	4b2a      	ldr	r3, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4927      	ldr	r1, [pc, #156]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
 800267c:	e015      	b.n	80026aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800267e:	4b26      	ldr	r3, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x270>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fbe4 	bl	8000e50 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7fe fbe0 	bl	8000e50 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e180      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d03a      	beq.n	800272c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d019      	beq.n	80026f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026be:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_RCC_OscConfig+0x274>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c4:	f7fe fbc4 	bl	8000e50 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7fe fbc0 	bl	8000e50 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e160      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCC_OscConfig+0x26c>)
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ea:	2001      	movs	r0, #1
 80026ec:	f000 fad8 	bl	8002ca0 <RCC_Delay>
 80026f0:	e01c      	b.n	800272c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_RCC_OscConfig+0x274>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7fe fbaa 	bl	8000e50 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fe:	e00f      	b.n	8002720 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe fba6 	bl	8000e50 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d908      	bls.n	8002720 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e146      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	42420000 	.word	0x42420000
 800271c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002720:	4b92      	ldr	r3, [pc, #584]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1e9      	bne.n	8002700 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 80a6 	beq.w	8002886 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273e:	4b8b      	ldr	r3, [pc, #556]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10d      	bne.n	8002766 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b88      	ldr	r3, [pc, #544]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	4a87      	ldr	r2, [pc, #540]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002754:	61d3      	str	r3, [r2, #28]
 8002756:	4b85      	ldr	r3, [pc, #532]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b82      	ldr	r3, [pc, #520]	; (8002970 <HAL_RCC_OscConfig+0x4c8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b7f      	ldr	r3, [pc, #508]	; (8002970 <HAL_RCC_OscConfig+0x4c8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a7e      	ldr	r2, [pc, #504]	; (8002970 <HAL_RCC_OscConfig+0x4c8>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe fb67 	bl	8000e50 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fe fb63 	bl	8000e50 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e103      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b75      	ldr	r3, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x4c8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x312>
 80027ac:	4b6f      	ldr	r3, [pc, #444]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a6e      	ldr	r2, [pc, #440]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	e02d      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x334>
 80027c2:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4a69      	ldr	r2, [pc, #420]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	6213      	str	r3, [r2, #32]
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	4a66      	ldr	r2, [pc, #408]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f023 0304 	bic.w	r3, r3, #4
 80027d8:	6213      	str	r3, [r2, #32]
 80027da:	e01c      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d10c      	bne.n	80027fe <HAL_RCC_OscConfig+0x356>
 80027e4:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	4a60      	ldr	r2, [pc, #384]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6213      	str	r3, [r2, #32]
 80027f0:	4b5e      	ldr	r3, [pc, #376]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4a5d      	ldr	r2, [pc, #372]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	6213      	str	r3, [r2, #32]
 80027fc:	e00b      	b.n	8002816 <HAL_RCC_OscConfig+0x36e>
 80027fe:	4b5b      	ldr	r3, [pc, #364]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	4a5a      	ldr	r2, [pc, #360]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	6213      	str	r3, [r2, #32]
 800280a:	4b58      	ldr	r3, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4a57      	ldr	r2, [pc, #348]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d015      	beq.n	800284a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe fb17 	bl	8000e50 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	e00a      	b.n	800283c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002826:	f7fe fb13 	bl	8000e50 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	f241 3288 	movw	r2, #5000	; 0x1388
 8002834:	4293      	cmp	r3, r2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0b1      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	4b4b      	ldr	r3, [pc, #300]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0ee      	beq.n	8002826 <HAL_RCC_OscConfig+0x37e>
 8002848:	e014      	b.n	8002874 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284a:	f7fe fb01 	bl	8000e50 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002852:	f7fe fafd 	bl	8000e50 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e09b      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	4b40      	ldr	r3, [pc, #256]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ee      	bne.n	8002852 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d105      	bne.n	8002886 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287a:	4b3c      	ldr	r3, [pc, #240]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	4a3b      	ldr	r2, [pc, #236]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002884:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 8087 	beq.w	800299e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002890:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d061      	beq.n	8002960 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d146      	bne.n	8002932 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a4:	4b33      	ldr	r3, [pc, #204]	; (8002974 <HAL_RCC_OscConfig+0x4cc>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe fad1 	bl	8000e50 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b2:	f7fe facd 	bl	8000e50 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e06d      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d108      	bne.n	80028ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	4921      	ldr	r1, [pc, #132]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ec:	4b1f      	ldr	r3, [pc, #124]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a19      	ldr	r1, [r3, #32]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	430b      	orrs	r3, r1
 80028fe:	491b      	ldr	r1, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002904:	4b1b      	ldr	r3, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	2201      	movs	r2, #1
 8002908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290a:	f7fe faa1 	bl	8000e50 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002912:	f7fe fa9d 	bl	8000e50 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e03d      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0x46a>
 8002930:	e035      	b.n	800299e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002932:	4b10      	ldr	r3, [pc, #64]	; (8002974 <HAL_RCC_OscConfig+0x4cc>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7fe fa8a 	bl	8000e50 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fa86 	bl	8000e50 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e026      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HAL_RCC_OscConfig+0x4c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d1f0      	bne.n	8002940 <HAL_RCC_OscConfig+0x498>
 800295e:	e01e      	b.n	800299e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e019      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
 800296c:	40021000 	.word	0x40021000
 8002970:	40007000 	.word	0x40007000
 8002974:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_OscConfig+0x500>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	429a      	cmp	r2, r3
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000

080029ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0d0      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4965      	ldr	r1, [pc, #404]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0b8      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a08:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a20:	4b53      	ldr	r3, [pc, #332]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	494d      	ldr	r1, [pc, #308]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d040      	beq.n	8002acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e07f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e073      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06b      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4936      	ldr	r1, [pc, #216]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe f9d8 	bl	8000e50 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7fe f9d4 	bl	8000e50 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e053      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d210      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4922      	ldr	r1, [pc, #136]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e032      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4916      	ldr	r1, [pc, #88]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	490e      	ldr	r1, [pc, #56]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3a:	f000 f821 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	490a      	ldr	r1, [pc, #40]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1cc>)
 8002b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1d0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f936 	bl	8000dcc <HAL_InitTick>

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08003e24 	.word	0x08003e24
 8002b78:	20000004 	.word	0x20000004
 8002b7c:	20000008 	.word	0x20000008

08002b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b80:	b490      	push	{r4, r7}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b86:	4b29      	ldr	r3, [pc, #164]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xac>)
 8002b88:	1d3c      	adds	r4, r7, #4
 8002b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b90:	f240 2301 	movw	r3, #513	; 0x201
 8002b94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x46>
 8002bbe:	e02b      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc2:	623b      	str	r3, [r7, #32]
      break;
 8002bc4:	e02b      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	0c9b      	lsrs	r3, r3, #18
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	3328      	adds	r3, #40	; 0x28
 8002bd0:	443b      	add	r3, r7
 8002bd2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bd6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d012      	beq.n	8002c08 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	0c5b      	lsrs	r3, r3, #17
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	3328      	adds	r3, #40	; 0x28
 8002bee:	443b      	add	r3, r7
 8002bf0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bf4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	4a0e      	ldr	r2, [pc, #56]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bfa:	fb03 f202 	mul.w	r2, r3, r2
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	627b      	str	r3, [r7, #36]	; 0x24
 8002c06:	e004      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	4a0b      	ldr	r2, [pc, #44]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c0c:	fb02 f303 	mul.w	r3, r2, r3
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	623b      	str	r3, [r7, #32]
      break;
 8002c16:	e002      	b.n	8002c1e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c1a:	623b      	str	r3, [r7, #32]
      break;
 8002c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3728      	adds	r7, #40	; 0x28
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc90      	pop	{r4, r7}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	08003e04 	.word	0x08003e04
 8002c30:	40021000 	.word	0x40021000
 8002c34:	007a1200 	.word	0x007a1200
 8002c38:	003d0900 	.word	0x003d0900

08002c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c40:	4b02      	ldr	r3, [pc, #8]	; (8002c4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr
 8002c4c:	20000004 	.word	0x20000004

08002c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c54:	f7ff fff2 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	0a1b      	lsrs	r3, r3, #8
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	; (8002c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000
 8002c74:	08003e34 	.word	0x08003e34

08002c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c7c:	f7ff ffde 	bl	8002c3c <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	0adb      	lsrs	r3, r3, #11
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	; (8002c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08003e34 	.word	0x08003e34

08002ca0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <RCC_Delay+0x34>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a0a      	ldr	r2, [pc, #40]	; (8002cd8 <RCC_Delay+0x38>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0a5b      	lsrs	r3, r3, #9
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cbc:	bf00      	nop
  }
  while (Delay --);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1e5a      	subs	r2, r3, #1
 8002cc2:	60fa      	str	r2, [r7, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f9      	bne.n	8002cbc <RCC_Delay+0x1c>
}
 8002cc8:	bf00      	nop
 8002cca:	bf00      	nop
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	20000004 	.word	0x20000004
 8002cd8:	10624dd3 	.word	0x10624dd3

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d07d      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d10d      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d08:	4b4c      	ldr	r3, [pc, #304]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	4a4b      	ldr	r2, [pc, #300]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d12:	61d3      	str	r3, [r2, #28]
 8002d14:	4b49      	ldr	r3, [pc, #292]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d20:	2301      	movs	r3, #1
 8002d22:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d24:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d118      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d30:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a42      	ldr	r2, [pc, #264]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3c:	f7fe f888 	bl	8000e50 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d42:	e008      	b.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d44:	f7fe f884 	bl	8000e50 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	; 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e06d      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d6a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d02e      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d027      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d80:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d88:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d90:	4b2c      	ldr	r3, [pc, #176]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d014      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da6:	f7fe f853 	bl	8000e50 <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dae:	f7fe f84f 	bl	8000e50 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e036      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0ee      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4917      	ldr	r1, [pc, #92]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	4a13      	ldr	r2, [pc, #76]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e00:	4b0e      	ldr	r3, [pc, #56]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	490b      	ldr	r1, [pc, #44]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e1e:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	4904      	ldr	r1, [pc, #16]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40007000 	.word	0x40007000
 8002e44:	42420440 	.word	0x42420440

08002e48 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b08d      	sub	sp, #52	; 0x34
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e50:	4b58      	ldr	r3, [pc, #352]	; (8002fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002e52:	f107 040c 	add.w	r4, r7, #12
 8002e56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e5c:	f240 2301 	movw	r3, #513	; 0x201
 8002e60:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
 8002e66:	2300      	movs	r3, #0
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b10      	cmp	r3, #16
 8002e7a:	d00a      	beq.n	8002e92 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b10      	cmp	r3, #16
 8002e80:	f200 808e 	bhi.w	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d049      	beq.n	8002f1e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d079      	beq.n	8002f84 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002e90:	e086      	b.n	8002fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002e92:	4b49      	ldr	r3, [pc, #292]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d07f      	beq.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	0c9b      	lsrs	r3, r3, #18
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	3330      	adds	r3, #48	; 0x30
 8002eae:	443b      	add	r3, r7
 8002eb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eb4:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d017      	beq.n	8002ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ec0:	4b3d      	ldr	r3, [pc, #244]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	0c5b      	lsrs	r3, r3, #17
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	3330      	adds	r3, #48	; 0x30
 8002ecc:	443b      	add	r3, r7
 8002ece:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00d      	beq.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002ede:	4a37      	ldr	r2, [pc, #220]	; (8002fbc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eee:	e004      	b.n	8002efa <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	4a33      	ldr	r2, [pc, #204]	; (8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f06:	d102      	bne.n	8002f0e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f0c:	e04a      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4a2c      	ldr	r2, [pc, #176]	; (8002fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f1c:	e042      	b.n	8002fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2e:	d108      	bne.n	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f40:	e01f      	b.n	8002f82 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002f5a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f60:	e00f      	b.n	8002f82 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f6c:	d11c      	bne.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002f7a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f80:	e012      	b.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002f82:	e011      	b.n	8002fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002f84:	f7ff fe78 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	0b9b      	lsrs	r3, r3, #14
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	3301      	adds	r3, #1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002f9e:	e004      	b.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002fa0:	bf00      	nop
 8002fa2:	e002      	b.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002fa4:	bf00      	nop
 8002fa6:	e000      	b.n	8002faa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002fa8:	bf00      	nop
    }
  }
  return (frequency);
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3734      	adds	r7, #52	; 0x34
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}
 8002fb4:	08003e14 	.word	0x08003e14
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	007a1200 	.word	0x007a1200
 8002fc0:	003d0900 	.word	0x003d0900
 8002fc4:	aaaaaaab 	.word	0xaaaaaaab

08002fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e03f      	b.n	800305a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fe72 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	; 0x24
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800300a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f905 	bl	800321c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691a      	ldr	r2, [r3, #16]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695a      	ldr	r2, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003030:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68da      	ldr	r2, [r3, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003040:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b08a      	sub	sp, #40	; 0x28
 8003066:	af02      	add	r7, sp, #8
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	603b      	str	r3, [r7, #0]
 800306e:	4613      	mov	r3, r2
 8003070:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b20      	cmp	r3, #32
 8003080:	d17c      	bne.n	800317c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_UART_Transmit+0x2c>
 8003088:	88fb      	ldrh	r3, [r7, #6]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e075      	b.n	800317e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_UART_Transmit+0x3e>
 800309c:	2302      	movs	r3, #2
 800309e:	e06e      	b.n	800317e <HAL_UART_Transmit+0x11c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2221      	movs	r2, #33	; 0x21
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b6:	f7fd fecb 	bl	8000e50 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d0:	d108      	bne.n	80030e4 <HAL_UART_Transmit+0x82>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e003      	b.n	80030ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030f4:	e02a      	b.n	800314c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f840 	bl	8003186 <UART_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e036      	b.n	800317e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003124:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3302      	adds	r3, #2
 800312a:	61bb      	str	r3, [r7, #24]
 800312c:	e007      	b.n	800313e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	3301      	adds	r3, #1
 800313c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1cf      	bne.n	80030f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2200      	movs	r2, #0
 800315e:	2140      	movs	r1, #64	; 0x40
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f810 	bl	8003186 <UART_WaitOnFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d001      	beq.n	8003170 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e006      	b.n	800317e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003178:	2300      	movs	r3, #0
 800317a:	e000      	b.n	800317e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003196:	e02c      	b.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d028      	beq.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80031a6:	f7fd fe53 	bl	8000e50 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d21d      	bcs.n	80031f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68da      	ldr	r2, [r3, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695a      	ldr	r2, [r3, #20]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e00f      	b.n	8003212 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4013      	ands	r3, r2
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	429a      	cmp	r2, r3
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	429a      	cmp	r2, r3
 800320e:	d0c3      	beq.n	8003198 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003256:	f023 030c 	bic.w	r3, r3, #12
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	68b9      	ldr	r1, [r7, #8]
 8003260:	430b      	orrs	r3, r1
 8003262:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a2c      	ldr	r2, [pc, #176]	; (8003330 <UART_SetConfig+0x114>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d103      	bne.n	800328c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003284:	f7ff fcf8 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	e002      	b.n	8003292 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800328c:	f7ff fce0 	bl	8002c50 <HAL_RCC_GetPCLK1Freq>
 8003290:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009a      	lsls	r2, r3, #2
 800329c:	441a      	add	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a8:	4a22      	ldr	r2, [pc, #136]	; (8003334 <UART_SetConfig+0x118>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	0119      	lsls	r1, r3, #4
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	009a      	lsls	r2, r3, #2
 80032bc:	441a      	add	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <UART_SetConfig+0x118>)
 80032ca:	fba3 0302 	umull	r0, r3, r3, r2
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2064      	movs	r0, #100	; 0x64
 80032d2:	fb00 f303 	mul.w	r3, r0, r3
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	3332      	adds	r3, #50	; 0x32
 80032dc:	4a15      	ldr	r2, [pc, #84]	; (8003334 <UART_SetConfig+0x118>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032e8:	4419      	add	r1, r3
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	009a      	lsls	r2, r3, #2
 80032f4:	441a      	add	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <UART_SetConfig+0x118>)
 8003302:	fba3 0302 	umull	r0, r3, r3, r2
 8003306:	095b      	lsrs	r3, r3, #5
 8003308:	2064      	movs	r0, #100	; 0x64
 800330a:	fb00 f303 	mul.w	r3, r0, r3
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	3332      	adds	r3, #50	; 0x32
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <UART_SetConfig+0x118>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	440a      	add	r2, r1
 8003326:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003328:	bf00      	nop
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40013800 	.word	0x40013800
 8003334:	51eb851f 	.word	0x51eb851f

08003338 <__errno>:
 8003338:	4b01      	ldr	r3, [pc, #4]	; (8003340 <__errno+0x8>)
 800333a:	6818      	ldr	r0, [r3, #0]
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	20000010 	.word	0x20000010

08003344 <__libc_init_array>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	2600      	movs	r6, #0
 8003348:	4d0c      	ldr	r5, [pc, #48]	; (800337c <__libc_init_array+0x38>)
 800334a:	4c0d      	ldr	r4, [pc, #52]	; (8003380 <__libc_init_array+0x3c>)
 800334c:	1b64      	subs	r4, r4, r5
 800334e:	10a4      	asrs	r4, r4, #2
 8003350:	42a6      	cmp	r6, r4
 8003352:	d109      	bne.n	8003368 <__libc_init_array+0x24>
 8003354:	f000 fd18 	bl	8003d88 <_init>
 8003358:	2600      	movs	r6, #0
 800335a:	4d0a      	ldr	r5, [pc, #40]	; (8003384 <__libc_init_array+0x40>)
 800335c:	4c0a      	ldr	r4, [pc, #40]	; (8003388 <__libc_init_array+0x44>)
 800335e:	1b64      	subs	r4, r4, r5
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	42a6      	cmp	r6, r4
 8003364:	d105      	bne.n	8003372 <__libc_init_array+0x2e>
 8003366:	bd70      	pop	{r4, r5, r6, pc}
 8003368:	f855 3b04 	ldr.w	r3, [r5], #4
 800336c:	4798      	blx	r3
 800336e:	3601      	adds	r6, #1
 8003370:	e7ee      	b.n	8003350 <__libc_init_array+0xc>
 8003372:	f855 3b04 	ldr.w	r3, [r5], #4
 8003376:	4798      	blx	r3
 8003378:	3601      	adds	r6, #1
 800337a:	e7f2      	b.n	8003362 <__libc_init_array+0x1e>
 800337c:	08003ea0 	.word	0x08003ea0
 8003380:	08003ea0 	.word	0x08003ea0
 8003384:	08003ea0 	.word	0x08003ea0
 8003388:	08003ea4 	.word	0x08003ea4

0800338c <memset>:
 800338c:	4603      	mov	r3, r0
 800338e:	4402      	add	r2, r0
 8003390:	4293      	cmp	r3, r2
 8003392:	d100      	bne.n	8003396 <memset+0xa>
 8003394:	4770      	bx	lr
 8003396:	f803 1b01 	strb.w	r1, [r3], #1
 800339a:	e7f9      	b.n	8003390 <memset+0x4>

0800339c <_puts_r>:
 800339c:	b570      	push	{r4, r5, r6, lr}
 800339e:	460e      	mov	r6, r1
 80033a0:	4605      	mov	r5, r0
 80033a2:	b118      	cbz	r0, 80033ac <_puts_r+0x10>
 80033a4:	6983      	ldr	r3, [r0, #24]
 80033a6:	b90b      	cbnz	r3, 80033ac <_puts_r+0x10>
 80033a8:	f000 fa44 	bl	8003834 <__sinit>
 80033ac:	69ab      	ldr	r3, [r5, #24]
 80033ae:	68ac      	ldr	r4, [r5, #8]
 80033b0:	b913      	cbnz	r3, 80033b8 <_puts_r+0x1c>
 80033b2:	4628      	mov	r0, r5
 80033b4:	f000 fa3e 	bl	8003834 <__sinit>
 80033b8:	4b2c      	ldr	r3, [pc, #176]	; (800346c <_puts_r+0xd0>)
 80033ba:	429c      	cmp	r4, r3
 80033bc:	d120      	bne.n	8003400 <_puts_r+0x64>
 80033be:	686c      	ldr	r4, [r5, #4]
 80033c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033c2:	07db      	lsls	r3, r3, #31
 80033c4:	d405      	bmi.n	80033d2 <_puts_r+0x36>
 80033c6:	89a3      	ldrh	r3, [r4, #12]
 80033c8:	0598      	lsls	r0, r3, #22
 80033ca:	d402      	bmi.n	80033d2 <_puts_r+0x36>
 80033cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033ce:	f000 facf 	bl	8003970 <__retarget_lock_acquire_recursive>
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	0719      	lsls	r1, r3, #28
 80033d6:	d51d      	bpl.n	8003414 <_puts_r+0x78>
 80033d8:	6923      	ldr	r3, [r4, #16]
 80033da:	b1db      	cbz	r3, 8003414 <_puts_r+0x78>
 80033dc:	3e01      	subs	r6, #1
 80033de:	68a3      	ldr	r3, [r4, #8]
 80033e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80033e4:	3b01      	subs	r3, #1
 80033e6:	60a3      	str	r3, [r4, #8]
 80033e8:	bb39      	cbnz	r1, 800343a <_puts_r+0x9e>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da38      	bge.n	8003460 <_puts_r+0xc4>
 80033ee:	4622      	mov	r2, r4
 80033f0:	210a      	movs	r1, #10
 80033f2:	4628      	mov	r0, r5
 80033f4:	f000 f848 	bl	8003488 <__swbuf_r>
 80033f8:	3001      	adds	r0, #1
 80033fa:	d011      	beq.n	8003420 <_puts_r+0x84>
 80033fc:	250a      	movs	r5, #10
 80033fe:	e011      	b.n	8003424 <_puts_r+0x88>
 8003400:	4b1b      	ldr	r3, [pc, #108]	; (8003470 <_puts_r+0xd4>)
 8003402:	429c      	cmp	r4, r3
 8003404:	d101      	bne.n	800340a <_puts_r+0x6e>
 8003406:	68ac      	ldr	r4, [r5, #8]
 8003408:	e7da      	b.n	80033c0 <_puts_r+0x24>
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <_puts_r+0xd8>)
 800340c:	429c      	cmp	r4, r3
 800340e:	bf08      	it	eq
 8003410:	68ec      	ldreq	r4, [r5, #12]
 8003412:	e7d5      	b.n	80033c0 <_puts_r+0x24>
 8003414:	4621      	mov	r1, r4
 8003416:	4628      	mov	r0, r5
 8003418:	f000 f888 	bl	800352c <__swsetup_r>
 800341c:	2800      	cmp	r0, #0
 800341e:	d0dd      	beq.n	80033dc <_puts_r+0x40>
 8003420:	f04f 35ff 	mov.w	r5, #4294967295
 8003424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003426:	07da      	lsls	r2, r3, #31
 8003428:	d405      	bmi.n	8003436 <_puts_r+0x9a>
 800342a:	89a3      	ldrh	r3, [r4, #12]
 800342c:	059b      	lsls	r3, r3, #22
 800342e:	d402      	bmi.n	8003436 <_puts_r+0x9a>
 8003430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003432:	f000 fa9e 	bl	8003972 <__retarget_lock_release_recursive>
 8003436:	4628      	mov	r0, r5
 8003438:	bd70      	pop	{r4, r5, r6, pc}
 800343a:	2b00      	cmp	r3, #0
 800343c:	da04      	bge.n	8003448 <_puts_r+0xac>
 800343e:	69a2      	ldr	r2, [r4, #24]
 8003440:	429a      	cmp	r2, r3
 8003442:	dc06      	bgt.n	8003452 <_puts_r+0xb6>
 8003444:	290a      	cmp	r1, #10
 8003446:	d004      	beq.n	8003452 <_puts_r+0xb6>
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	6022      	str	r2, [r4, #0]
 800344e:	7019      	strb	r1, [r3, #0]
 8003450:	e7c5      	b.n	80033de <_puts_r+0x42>
 8003452:	4622      	mov	r2, r4
 8003454:	4628      	mov	r0, r5
 8003456:	f000 f817 	bl	8003488 <__swbuf_r>
 800345a:	3001      	adds	r0, #1
 800345c:	d1bf      	bne.n	80033de <_puts_r+0x42>
 800345e:	e7df      	b.n	8003420 <_puts_r+0x84>
 8003460:	250a      	movs	r5, #10
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	6022      	str	r2, [r4, #0]
 8003468:	701d      	strb	r5, [r3, #0]
 800346a:	e7db      	b.n	8003424 <_puts_r+0x88>
 800346c:	08003e60 	.word	0x08003e60
 8003470:	08003e80 	.word	0x08003e80
 8003474:	08003e40 	.word	0x08003e40

08003478 <puts>:
 8003478:	4b02      	ldr	r3, [pc, #8]	; (8003484 <puts+0xc>)
 800347a:	4601      	mov	r1, r0
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	f7ff bf8d 	b.w	800339c <_puts_r>
 8003482:	bf00      	nop
 8003484:	20000010 	.word	0x20000010

08003488 <__swbuf_r>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	460e      	mov	r6, r1
 800348c:	4614      	mov	r4, r2
 800348e:	4605      	mov	r5, r0
 8003490:	b118      	cbz	r0, 800349a <__swbuf_r+0x12>
 8003492:	6983      	ldr	r3, [r0, #24]
 8003494:	b90b      	cbnz	r3, 800349a <__swbuf_r+0x12>
 8003496:	f000 f9cd 	bl	8003834 <__sinit>
 800349a:	4b21      	ldr	r3, [pc, #132]	; (8003520 <__swbuf_r+0x98>)
 800349c:	429c      	cmp	r4, r3
 800349e:	d12b      	bne.n	80034f8 <__swbuf_r+0x70>
 80034a0:	686c      	ldr	r4, [r5, #4]
 80034a2:	69a3      	ldr	r3, [r4, #24]
 80034a4:	60a3      	str	r3, [r4, #8]
 80034a6:	89a3      	ldrh	r3, [r4, #12]
 80034a8:	071a      	lsls	r2, r3, #28
 80034aa:	d52f      	bpl.n	800350c <__swbuf_r+0x84>
 80034ac:	6923      	ldr	r3, [r4, #16]
 80034ae:	b36b      	cbz	r3, 800350c <__swbuf_r+0x84>
 80034b0:	6923      	ldr	r3, [r4, #16]
 80034b2:	6820      	ldr	r0, [r4, #0]
 80034b4:	b2f6      	uxtb	r6, r6
 80034b6:	1ac0      	subs	r0, r0, r3
 80034b8:	6963      	ldr	r3, [r4, #20]
 80034ba:	4637      	mov	r7, r6
 80034bc:	4283      	cmp	r3, r0
 80034be:	dc04      	bgt.n	80034ca <__swbuf_r+0x42>
 80034c0:	4621      	mov	r1, r4
 80034c2:	4628      	mov	r0, r5
 80034c4:	f000 f922 	bl	800370c <_fflush_r>
 80034c8:	bb30      	cbnz	r0, 8003518 <__swbuf_r+0x90>
 80034ca:	68a3      	ldr	r3, [r4, #8]
 80034cc:	3001      	adds	r0, #1
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60a3      	str	r3, [r4, #8]
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	6022      	str	r2, [r4, #0]
 80034d8:	701e      	strb	r6, [r3, #0]
 80034da:	6963      	ldr	r3, [r4, #20]
 80034dc:	4283      	cmp	r3, r0
 80034de:	d004      	beq.n	80034ea <__swbuf_r+0x62>
 80034e0:	89a3      	ldrh	r3, [r4, #12]
 80034e2:	07db      	lsls	r3, r3, #31
 80034e4:	d506      	bpl.n	80034f4 <__swbuf_r+0x6c>
 80034e6:	2e0a      	cmp	r6, #10
 80034e8:	d104      	bne.n	80034f4 <__swbuf_r+0x6c>
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 f90d 	bl	800370c <_fflush_r>
 80034f2:	b988      	cbnz	r0, 8003518 <__swbuf_r+0x90>
 80034f4:	4638      	mov	r0, r7
 80034f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034f8:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <__swbuf_r+0x9c>)
 80034fa:	429c      	cmp	r4, r3
 80034fc:	d101      	bne.n	8003502 <__swbuf_r+0x7a>
 80034fe:	68ac      	ldr	r4, [r5, #8]
 8003500:	e7cf      	b.n	80034a2 <__swbuf_r+0x1a>
 8003502:	4b09      	ldr	r3, [pc, #36]	; (8003528 <__swbuf_r+0xa0>)
 8003504:	429c      	cmp	r4, r3
 8003506:	bf08      	it	eq
 8003508:	68ec      	ldreq	r4, [r5, #12]
 800350a:	e7ca      	b.n	80034a2 <__swbuf_r+0x1a>
 800350c:	4621      	mov	r1, r4
 800350e:	4628      	mov	r0, r5
 8003510:	f000 f80c 	bl	800352c <__swsetup_r>
 8003514:	2800      	cmp	r0, #0
 8003516:	d0cb      	beq.n	80034b0 <__swbuf_r+0x28>
 8003518:	f04f 37ff 	mov.w	r7, #4294967295
 800351c:	e7ea      	b.n	80034f4 <__swbuf_r+0x6c>
 800351e:	bf00      	nop
 8003520:	08003e60 	.word	0x08003e60
 8003524:	08003e80 	.word	0x08003e80
 8003528:	08003e40 	.word	0x08003e40

0800352c <__swsetup_r>:
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <__swsetup_r+0xcc>)
 800352e:	b570      	push	{r4, r5, r6, lr}
 8003530:	681d      	ldr	r5, [r3, #0]
 8003532:	4606      	mov	r6, r0
 8003534:	460c      	mov	r4, r1
 8003536:	b125      	cbz	r5, 8003542 <__swsetup_r+0x16>
 8003538:	69ab      	ldr	r3, [r5, #24]
 800353a:	b913      	cbnz	r3, 8003542 <__swsetup_r+0x16>
 800353c:	4628      	mov	r0, r5
 800353e:	f000 f979 	bl	8003834 <__sinit>
 8003542:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <__swsetup_r+0xd0>)
 8003544:	429c      	cmp	r4, r3
 8003546:	d10f      	bne.n	8003568 <__swsetup_r+0x3c>
 8003548:	686c      	ldr	r4, [r5, #4]
 800354a:	89a3      	ldrh	r3, [r4, #12]
 800354c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003550:	0719      	lsls	r1, r3, #28
 8003552:	d42c      	bmi.n	80035ae <__swsetup_r+0x82>
 8003554:	06dd      	lsls	r5, r3, #27
 8003556:	d411      	bmi.n	800357c <__swsetup_r+0x50>
 8003558:	2309      	movs	r3, #9
 800355a:	6033      	str	r3, [r6, #0]
 800355c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	81a3      	strh	r3, [r4, #12]
 8003566:	e03e      	b.n	80035e6 <__swsetup_r+0xba>
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <__swsetup_r+0xd4>)
 800356a:	429c      	cmp	r4, r3
 800356c:	d101      	bne.n	8003572 <__swsetup_r+0x46>
 800356e:	68ac      	ldr	r4, [r5, #8]
 8003570:	e7eb      	b.n	800354a <__swsetup_r+0x1e>
 8003572:	4b24      	ldr	r3, [pc, #144]	; (8003604 <__swsetup_r+0xd8>)
 8003574:	429c      	cmp	r4, r3
 8003576:	bf08      	it	eq
 8003578:	68ec      	ldreq	r4, [r5, #12]
 800357a:	e7e6      	b.n	800354a <__swsetup_r+0x1e>
 800357c:	0758      	lsls	r0, r3, #29
 800357e:	d512      	bpl.n	80035a6 <__swsetup_r+0x7a>
 8003580:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003582:	b141      	cbz	r1, 8003596 <__swsetup_r+0x6a>
 8003584:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003588:	4299      	cmp	r1, r3
 800358a:	d002      	beq.n	8003592 <__swsetup_r+0x66>
 800358c:	4630      	mov	r0, r6
 800358e:	f000 fa57 	bl	8003a40 <_free_r>
 8003592:	2300      	movs	r3, #0
 8003594:	6363      	str	r3, [r4, #52]	; 0x34
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800359c:	81a3      	strh	r3, [r4, #12]
 800359e:	2300      	movs	r3, #0
 80035a0:	6063      	str	r3, [r4, #4]
 80035a2:	6923      	ldr	r3, [r4, #16]
 80035a4:	6023      	str	r3, [r4, #0]
 80035a6:	89a3      	ldrh	r3, [r4, #12]
 80035a8:	f043 0308 	orr.w	r3, r3, #8
 80035ac:	81a3      	strh	r3, [r4, #12]
 80035ae:	6923      	ldr	r3, [r4, #16]
 80035b0:	b94b      	cbnz	r3, 80035c6 <__swsetup_r+0x9a>
 80035b2:	89a3      	ldrh	r3, [r4, #12]
 80035b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80035b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035bc:	d003      	beq.n	80035c6 <__swsetup_r+0x9a>
 80035be:	4621      	mov	r1, r4
 80035c0:	4630      	mov	r0, r6
 80035c2:	f000 f9fd 	bl	80039c0 <__smakebuf_r>
 80035c6:	89a0      	ldrh	r0, [r4, #12]
 80035c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035cc:	f010 0301 	ands.w	r3, r0, #1
 80035d0:	d00a      	beq.n	80035e8 <__swsetup_r+0xbc>
 80035d2:	2300      	movs	r3, #0
 80035d4:	60a3      	str	r3, [r4, #8]
 80035d6:	6963      	ldr	r3, [r4, #20]
 80035d8:	425b      	negs	r3, r3
 80035da:	61a3      	str	r3, [r4, #24]
 80035dc:	6923      	ldr	r3, [r4, #16]
 80035de:	b943      	cbnz	r3, 80035f2 <__swsetup_r+0xc6>
 80035e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80035e4:	d1ba      	bne.n	800355c <__swsetup_r+0x30>
 80035e6:	bd70      	pop	{r4, r5, r6, pc}
 80035e8:	0781      	lsls	r1, r0, #30
 80035ea:	bf58      	it	pl
 80035ec:	6963      	ldrpl	r3, [r4, #20]
 80035ee:	60a3      	str	r3, [r4, #8]
 80035f0:	e7f4      	b.n	80035dc <__swsetup_r+0xb0>
 80035f2:	2000      	movs	r0, #0
 80035f4:	e7f7      	b.n	80035e6 <__swsetup_r+0xba>
 80035f6:	bf00      	nop
 80035f8:	20000010 	.word	0x20000010
 80035fc:	08003e60 	.word	0x08003e60
 8003600:	08003e80 	.word	0x08003e80
 8003604:	08003e40 	.word	0x08003e40

08003608 <__sflush_r>:
 8003608:	898a      	ldrh	r2, [r1, #12]
 800360a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360c:	4605      	mov	r5, r0
 800360e:	0710      	lsls	r0, r2, #28
 8003610:	460c      	mov	r4, r1
 8003612:	d457      	bmi.n	80036c4 <__sflush_r+0xbc>
 8003614:	684b      	ldr	r3, [r1, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	dc04      	bgt.n	8003624 <__sflush_r+0x1c>
 800361a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	dc01      	bgt.n	8003624 <__sflush_r+0x1c>
 8003620:	2000      	movs	r0, #0
 8003622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003626:	2e00      	cmp	r6, #0
 8003628:	d0fa      	beq.n	8003620 <__sflush_r+0x18>
 800362a:	2300      	movs	r3, #0
 800362c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003630:	682f      	ldr	r7, [r5, #0]
 8003632:	602b      	str	r3, [r5, #0]
 8003634:	d032      	beq.n	800369c <__sflush_r+0x94>
 8003636:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003638:	89a3      	ldrh	r3, [r4, #12]
 800363a:	075a      	lsls	r2, r3, #29
 800363c:	d505      	bpl.n	800364a <__sflush_r+0x42>
 800363e:	6863      	ldr	r3, [r4, #4]
 8003640:	1ac0      	subs	r0, r0, r3
 8003642:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003644:	b10b      	cbz	r3, 800364a <__sflush_r+0x42>
 8003646:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003648:	1ac0      	subs	r0, r0, r3
 800364a:	2300      	movs	r3, #0
 800364c:	4602      	mov	r2, r0
 800364e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003650:	4628      	mov	r0, r5
 8003652:	6a21      	ldr	r1, [r4, #32]
 8003654:	47b0      	blx	r6
 8003656:	1c43      	adds	r3, r0, #1
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	d106      	bne.n	800366a <__sflush_r+0x62>
 800365c:	6829      	ldr	r1, [r5, #0]
 800365e:	291d      	cmp	r1, #29
 8003660:	d82c      	bhi.n	80036bc <__sflush_r+0xb4>
 8003662:	4a29      	ldr	r2, [pc, #164]	; (8003708 <__sflush_r+0x100>)
 8003664:	40ca      	lsrs	r2, r1
 8003666:	07d6      	lsls	r6, r2, #31
 8003668:	d528      	bpl.n	80036bc <__sflush_r+0xb4>
 800366a:	2200      	movs	r2, #0
 800366c:	6062      	str	r2, [r4, #4]
 800366e:	6922      	ldr	r2, [r4, #16]
 8003670:	04d9      	lsls	r1, r3, #19
 8003672:	6022      	str	r2, [r4, #0]
 8003674:	d504      	bpl.n	8003680 <__sflush_r+0x78>
 8003676:	1c42      	adds	r2, r0, #1
 8003678:	d101      	bne.n	800367e <__sflush_r+0x76>
 800367a:	682b      	ldr	r3, [r5, #0]
 800367c:	b903      	cbnz	r3, 8003680 <__sflush_r+0x78>
 800367e:	6560      	str	r0, [r4, #84]	; 0x54
 8003680:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003682:	602f      	str	r7, [r5, #0]
 8003684:	2900      	cmp	r1, #0
 8003686:	d0cb      	beq.n	8003620 <__sflush_r+0x18>
 8003688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800368c:	4299      	cmp	r1, r3
 800368e:	d002      	beq.n	8003696 <__sflush_r+0x8e>
 8003690:	4628      	mov	r0, r5
 8003692:	f000 f9d5 	bl	8003a40 <_free_r>
 8003696:	2000      	movs	r0, #0
 8003698:	6360      	str	r0, [r4, #52]	; 0x34
 800369a:	e7c2      	b.n	8003622 <__sflush_r+0x1a>
 800369c:	6a21      	ldr	r1, [r4, #32]
 800369e:	2301      	movs	r3, #1
 80036a0:	4628      	mov	r0, r5
 80036a2:	47b0      	blx	r6
 80036a4:	1c41      	adds	r1, r0, #1
 80036a6:	d1c7      	bne.n	8003638 <__sflush_r+0x30>
 80036a8:	682b      	ldr	r3, [r5, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0c4      	beq.n	8003638 <__sflush_r+0x30>
 80036ae:	2b1d      	cmp	r3, #29
 80036b0:	d001      	beq.n	80036b6 <__sflush_r+0xae>
 80036b2:	2b16      	cmp	r3, #22
 80036b4:	d101      	bne.n	80036ba <__sflush_r+0xb2>
 80036b6:	602f      	str	r7, [r5, #0]
 80036b8:	e7b2      	b.n	8003620 <__sflush_r+0x18>
 80036ba:	89a3      	ldrh	r3, [r4, #12]
 80036bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	e7ae      	b.n	8003622 <__sflush_r+0x1a>
 80036c4:	690f      	ldr	r7, [r1, #16]
 80036c6:	2f00      	cmp	r7, #0
 80036c8:	d0aa      	beq.n	8003620 <__sflush_r+0x18>
 80036ca:	0793      	lsls	r3, r2, #30
 80036cc:	bf18      	it	ne
 80036ce:	2300      	movne	r3, #0
 80036d0:	680e      	ldr	r6, [r1, #0]
 80036d2:	bf08      	it	eq
 80036d4:	694b      	ldreq	r3, [r1, #20]
 80036d6:	1bf6      	subs	r6, r6, r7
 80036d8:	600f      	str	r7, [r1, #0]
 80036da:	608b      	str	r3, [r1, #8]
 80036dc:	2e00      	cmp	r6, #0
 80036de:	dd9f      	ble.n	8003620 <__sflush_r+0x18>
 80036e0:	4633      	mov	r3, r6
 80036e2:	463a      	mov	r2, r7
 80036e4:	4628      	mov	r0, r5
 80036e6:	6a21      	ldr	r1, [r4, #32]
 80036e8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80036ec:	47e0      	blx	ip
 80036ee:	2800      	cmp	r0, #0
 80036f0:	dc06      	bgt.n	8003700 <__sflush_r+0xf8>
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
 80036f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036fc:	81a3      	strh	r3, [r4, #12]
 80036fe:	e790      	b.n	8003622 <__sflush_r+0x1a>
 8003700:	4407      	add	r7, r0
 8003702:	1a36      	subs	r6, r6, r0
 8003704:	e7ea      	b.n	80036dc <__sflush_r+0xd4>
 8003706:	bf00      	nop
 8003708:	20400001 	.word	0x20400001

0800370c <_fflush_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	690b      	ldr	r3, [r1, #16]
 8003710:	4605      	mov	r5, r0
 8003712:	460c      	mov	r4, r1
 8003714:	b913      	cbnz	r3, 800371c <_fflush_r+0x10>
 8003716:	2500      	movs	r5, #0
 8003718:	4628      	mov	r0, r5
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	b118      	cbz	r0, 8003726 <_fflush_r+0x1a>
 800371e:	6983      	ldr	r3, [r0, #24]
 8003720:	b90b      	cbnz	r3, 8003726 <_fflush_r+0x1a>
 8003722:	f000 f887 	bl	8003834 <__sinit>
 8003726:	4b14      	ldr	r3, [pc, #80]	; (8003778 <_fflush_r+0x6c>)
 8003728:	429c      	cmp	r4, r3
 800372a:	d11b      	bne.n	8003764 <_fflush_r+0x58>
 800372c:	686c      	ldr	r4, [r5, #4]
 800372e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ef      	beq.n	8003716 <_fflush_r+0xa>
 8003736:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003738:	07d0      	lsls	r0, r2, #31
 800373a:	d404      	bmi.n	8003746 <_fflush_r+0x3a>
 800373c:	0599      	lsls	r1, r3, #22
 800373e:	d402      	bmi.n	8003746 <_fflush_r+0x3a>
 8003740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003742:	f000 f915 	bl	8003970 <__retarget_lock_acquire_recursive>
 8003746:	4628      	mov	r0, r5
 8003748:	4621      	mov	r1, r4
 800374a:	f7ff ff5d 	bl	8003608 <__sflush_r>
 800374e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003750:	4605      	mov	r5, r0
 8003752:	07da      	lsls	r2, r3, #31
 8003754:	d4e0      	bmi.n	8003718 <_fflush_r+0xc>
 8003756:	89a3      	ldrh	r3, [r4, #12]
 8003758:	059b      	lsls	r3, r3, #22
 800375a:	d4dd      	bmi.n	8003718 <_fflush_r+0xc>
 800375c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800375e:	f000 f908 	bl	8003972 <__retarget_lock_release_recursive>
 8003762:	e7d9      	b.n	8003718 <_fflush_r+0xc>
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <_fflush_r+0x70>)
 8003766:	429c      	cmp	r4, r3
 8003768:	d101      	bne.n	800376e <_fflush_r+0x62>
 800376a:	68ac      	ldr	r4, [r5, #8]
 800376c:	e7df      	b.n	800372e <_fflush_r+0x22>
 800376e:	4b04      	ldr	r3, [pc, #16]	; (8003780 <_fflush_r+0x74>)
 8003770:	429c      	cmp	r4, r3
 8003772:	bf08      	it	eq
 8003774:	68ec      	ldreq	r4, [r5, #12]
 8003776:	e7da      	b.n	800372e <_fflush_r+0x22>
 8003778:	08003e60 	.word	0x08003e60
 800377c:	08003e80 	.word	0x08003e80
 8003780:	08003e40 	.word	0x08003e40

08003784 <std>:
 8003784:	2300      	movs	r3, #0
 8003786:	b510      	push	{r4, lr}
 8003788:	4604      	mov	r4, r0
 800378a:	e9c0 3300 	strd	r3, r3, [r0]
 800378e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003792:	6083      	str	r3, [r0, #8]
 8003794:	8181      	strh	r1, [r0, #12]
 8003796:	6643      	str	r3, [r0, #100]	; 0x64
 8003798:	81c2      	strh	r2, [r0, #14]
 800379a:	6183      	str	r3, [r0, #24]
 800379c:	4619      	mov	r1, r3
 800379e:	2208      	movs	r2, #8
 80037a0:	305c      	adds	r0, #92	; 0x5c
 80037a2:	f7ff fdf3 	bl	800338c <memset>
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <std+0x38>)
 80037a8:	6224      	str	r4, [r4, #32]
 80037aa:	6263      	str	r3, [r4, #36]	; 0x24
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <std+0x3c>)
 80037ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <std+0x40>)
 80037b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <std+0x44>)
 80037b6:	6323      	str	r3, [r4, #48]	; 0x30
 80037b8:	bd10      	pop	{r4, pc}
 80037ba:	bf00      	nop
 80037bc:	08003c19 	.word	0x08003c19
 80037c0:	08003c3b 	.word	0x08003c3b
 80037c4:	08003c73 	.word	0x08003c73
 80037c8:	08003c97 	.word	0x08003c97

080037cc <_cleanup_r>:
 80037cc:	4901      	ldr	r1, [pc, #4]	; (80037d4 <_cleanup_r+0x8>)
 80037ce:	f000 b8af 	b.w	8003930 <_fwalk_reent>
 80037d2:	bf00      	nop
 80037d4:	0800370d 	.word	0x0800370d

080037d8 <__sfmoreglue>:
 80037d8:	2268      	movs	r2, #104	; 0x68
 80037da:	b570      	push	{r4, r5, r6, lr}
 80037dc:	1e4d      	subs	r5, r1, #1
 80037de:	4355      	muls	r5, r2
 80037e0:	460e      	mov	r6, r1
 80037e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80037e6:	f000 f993 	bl	8003b10 <_malloc_r>
 80037ea:	4604      	mov	r4, r0
 80037ec:	b140      	cbz	r0, 8003800 <__sfmoreglue+0x28>
 80037ee:	2100      	movs	r1, #0
 80037f0:	e9c0 1600 	strd	r1, r6, [r0]
 80037f4:	300c      	adds	r0, #12
 80037f6:	60a0      	str	r0, [r4, #8]
 80037f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80037fc:	f7ff fdc6 	bl	800338c <memset>
 8003800:	4620      	mov	r0, r4
 8003802:	bd70      	pop	{r4, r5, r6, pc}

08003804 <__sfp_lock_acquire>:
 8003804:	4801      	ldr	r0, [pc, #4]	; (800380c <__sfp_lock_acquire+0x8>)
 8003806:	f000 b8b3 	b.w	8003970 <__retarget_lock_acquire_recursive>
 800380a:	bf00      	nop
 800380c:	200009a9 	.word	0x200009a9

08003810 <__sfp_lock_release>:
 8003810:	4801      	ldr	r0, [pc, #4]	; (8003818 <__sfp_lock_release+0x8>)
 8003812:	f000 b8ae 	b.w	8003972 <__retarget_lock_release_recursive>
 8003816:	bf00      	nop
 8003818:	200009a9 	.word	0x200009a9

0800381c <__sinit_lock_acquire>:
 800381c:	4801      	ldr	r0, [pc, #4]	; (8003824 <__sinit_lock_acquire+0x8>)
 800381e:	f000 b8a7 	b.w	8003970 <__retarget_lock_acquire_recursive>
 8003822:	bf00      	nop
 8003824:	200009aa 	.word	0x200009aa

08003828 <__sinit_lock_release>:
 8003828:	4801      	ldr	r0, [pc, #4]	; (8003830 <__sinit_lock_release+0x8>)
 800382a:	f000 b8a2 	b.w	8003972 <__retarget_lock_release_recursive>
 800382e:	bf00      	nop
 8003830:	200009aa 	.word	0x200009aa

08003834 <__sinit>:
 8003834:	b510      	push	{r4, lr}
 8003836:	4604      	mov	r4, r0
 8003838:	f7ff fff0 	bl	800381c <__sinit_lock_acquire>
 800383c:	69a3      	ldr	r3, [r4, #24]
 800383e:	b11b      	cbz	r3, 8003848 <__sinit+0x14>
 8003840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003844:	f7ff bff0 	b.w	8003828 <__sinit_lock_release>
 8003848:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800384c:	6523      	str	r3, [r4, #80]	; 0x50
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <__sinit+0x68>)
 8003850:	4a13      	ldr	r2, [pc, #76]	; (80038a0 <__sinit+0x6c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	62a2      	str	r2, [r4, #40]	; 0x28
 8003856:	42a3      	cmp	r3, r4
 8003858:	bf08      	it	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	4620      	mov	r0, r4
 800385e:	bf08      	it	eq
 8003860:	61a3      	streq	r3, [r4, #24]
 8003862:	f000 f81f 	bl	80038a4 <__sfp>
 8003866:	6060      	str	r0, [r4, #4]
 8003868:	4620      	mov	r0, r4
 800386a:	f000 f81b 	bl	80038a4 <__sfp>
 800386e:	60a0      	str	r0, [r4, #8]
 8003870:	4620      	mov	r0, r4
 8003872:	f000 f817 	bl	80038a4 <__sfp>
 8003876:	2200      	movs	r2, #0
 8003878:	2104      	movs	r1, #4
 800387a:	60e0      	str	r0, [r4, #12]
 800387c:	6860      	ldr	r0, [r4, #4]
 800387e:	f7ff ff81 	bl	8003784 <std>
 8003882:	2201      	movs	r2, #1
 8003884:	2109      	movs	r1, #9
 8003886:	68a0      	ldr	r0, [r4, #8]
 8003888:	f7ff ff7c 	bl	8003784 <std>
 800388c:	2202      	movs	r2, #2
 800388e:	2112      	movs	r1, #18
 8003890:	68e0      	ldr	r0, [r4, #12]
 8003892:	f7ff ff77 	bl	8003784 <std>
 8003896:	2301      	movs	r3, #1
 8003898:	61a3      	str	r3, [r4, #24]
 800389a:	e7d1      	b.n	8003840 <__sinit+0xc>
 800389c:	08003e3c 	.word	0x08003e3c
 80038a0:	080037cd 	.word	0x080037cd

080038a4 <__sfp>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	4607      	mov	r7, r0
 80038a8:	f7ff ffac 	bl	8003804 <__sfp_lock_acquire>
 80038ac:	4b1e      	ldr	r3, [pc, #120]	; (8003928 <__sfp+0x84>)
 80038ae:	681e      	ldr	r6, [r3, #0]
 80038b0:	69b3      	ldr	r3, [r6, #24]
 80038b2:	b913      	cbnz	r3, 80038ba <__sfp+0x16>
 80038b4:	4630      	mov	r0, r6
 80038b6:	f7ff ffbd 	bl	8003834 <__sinit>
 80038ba:	3648      	adds	r6, #72	; 0x48
 80038bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	d503      	bpl.n	80038cc <__sfp+0x28>
 80038c4:	6833      	ldr	r3, [r6, #0]
 80038c6:	b30b      	cbz	r3, 800390c <__sfp+0x68>
 80038c8:	6836      	ldr	r6, [r6, #0]
 80038ca:	e7f7      	b.n	80038bc <__sfp+0x18>
 80038cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038d0:	b9d5      	cbnz	r5, 8003908 <__sfp+0x64>
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <__sfp+0x88>)
 80038d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80038d8:	60e3      	str	r3, [r4, #12]
 80038da:	6665      	str	r5, [r4, #100]	; 0x64
 80038dc:	f000 f847 	bl	800396e <__retarget_lock_init_recursive>
 80038e0:	f7ff ff96 	bl	8003810 <__sfp_lock_release>
 80038e4:	2208      	movs	r2, #8
 80038e6:	4629      	mov	r1, r5
 80038e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80038ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80038f0:	6025      	str	r5, [r4, #0]
 80038f2:	61a5      	str	r5, [r4, #24]
 80038f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80038f8:	f7ff fd48 	bl	800338c <memset>
 80038fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003900:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003904:	4620      	mov	r0, r4
 8003906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003908:	3468      	adds	r4, #104	; 0x68
 800390a:	e7d9      	b.n	80038c0 <__sfp+0x1c>
 800390c:	2104      	movs	r1, #4
 800390e:	4638      	mov	r0, r7
 8003910:	f7ff ff62 	bl	80037d8 <__sfmoreglue>
 8003914:	4604      	mov	r4, r0
 8003916:	6030      	str	r0, [r6, #0]
 8003918:	2800      	cmp	r0, #0
 800391a:	d1d5      	bne.n	80038c8 <__sfp+0x24>
 800391c:	f7ff ff78 	bl	8003810 <__sfp_lock_release>
 8003920:	230c      	movs	r3, #12
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	e7ee      	b.n	8003904 <__sfp+0x60>
 8003926:	bf00      	nop
 8003928:	08003e3c 	.word	0x08003e3c
 800392c:	ffff0001 	.word	0xffff0001

08003930 <_fwalk_reent>:
 8003930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003934:	4606      	mov	r6, r0
 8003936:	4688      	mov	r8, r1
 8003938:	2700      	movs	r7, #0
 800393a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800393e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003942:	f1b9 0901 	subs.w	r9, r9, #1
 8003946:	d505      	bpl.n	8003954 <_fwalk_reent+0x24>
 8003948:	6824      	ldr	r4, [r4, #0]
 800394a:	2c00      	cmp	r4, #0
 800394c:	d1f7      	bne.n	800393e <_fwalk_reent+0xe>
 800394e:	4638      	mov	r0, r7
 8003950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003954:	89ab      	ldrh	r3, [r5, #12]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d907      	bls.n	800396a <_fwalk_reent+0x3a>
 800395a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800395e:	3301      	adds	r3, #1
 8003960:	d003      	beq.n	800396a <_fwalk_reent+0x3a>
 8003962:	4629      	mov	r1, r5
 8003964:	4630      	mov	r0, r6
 8003966:	47c0      	blx	r8
 8003968:	4307      	orrs	r7, r0
 800396a:	3568      	adds	r5, #104	; 0x68
 800396c:	e7e9      	b.n	8003942 <_fwalk_reent+0x12>

0800396e <__retarget_lock_init_recursive>:
 800396e:	4770      	bx	lr

08003970 <__retarget_lock_acquire_recursive>:
 8003970:	4770      	bx	lr

08003972 <__retarget_lock_release_recursive>:
 8003972:	4770      	bx	lr

08003974 <__swhatbuf_r>:
 8003974:	b570      	push	{r4, r5, r6, lr}
 8003976:	460e      	mov	r6, r1
 8003978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397c:	4614      	mov	r4, r2
 800397e:	2900      	cmp	r1, #0
 8003980:	461d      	mov	r5, r3
 8003982:	b096      	sub	sp, #88	; 0x58
 8003984:	da08      	bge.n	8003998 <__swhatbuf_r+0x24>
 8003986:	2200      	movs	r2, #0
 8003988:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800398c:	602a      	str	r2, [r5, #0]
 800398e:	061a      	lsls	r2, r3, #24
 8003990:	d410      	bmi.n	80039b4 <__swhatbuf_r+0x40>
 8003992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003996:	e00e      	b.n	80039b6 <__swhatbuf_r+0x42>
 8003998:	466a      	mov	r2, sp
 800399a:	f000 f9a3 	bl	8003ce4 <_fstat_r>
 800399e:	2800      	cmp	r0, #0
 80039a0:	dbf1      	blt.n	8003986 <__swhatbuf_r+0x12>
 80039a2:	9a01      	ldr	r2, [sp, #4]
 80039a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039ac:	425a      	negs	r2, r3
 80039ae:	415a      	adcs	r2, r3
 80039b0:	602a      	str	r2, [r5, #0]
 80039b2:	e7ee      	b.n	8003992 <__swhatbuf_r+0x1e>
 80039b4:	2340      	movs	r3, #64	; 0x40
 80039b6:	2000      	movs	r0, #0
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	b016      	add	sp, #88	; 0x58
 80039bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080039c0 <__smakebuf_r>:
 80039c0:	898b      	ldrh	r3, [r1, #12]
 80039c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039c4:	079d      	lsls	r5, r3, #30
 80039c6:	4606      	mov	r6, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	d507      	bpl.n	80039dc <__smakebuf_r+0x1c>
 80039cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	6123      	str	r3, [r4, #16]
 80039d4:	2301      	movs	r3, #1
 80039d6:	6163      	str	r3, [r4, #20]
 80039d8:	b002      	add	sp, #8
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	466a      	mov	r2, sp
 80039de:	ab01      	add	r3, sp, #4
 80039e0:	f7ff ffc8 	bl	8003974 <__swhatbuf_r>
 80039e4:	9900      	ldr	r1, [sp, #0]
 80039e6:	4605      	mov	r5, r0
 80039e8:	4630      	mov	r0, r6
 80039ea:	f000 f891 	bl	8003b10 <_malloc_r>
 80039ee:	b948      	cbnz	r0, 8003a04 <__smakebuf_r+0x44>
 80039f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039f4:	059a      	lsls	r2, r3, #22
 80039f6:	d4ef      	bmi.n	80039d8 <__smakebuf_r+0x18>
 80039f8:	f023 0303 	bic.w	r3, r3, #3
 80039fc:	f043 0302 	orr.w	r3, r3, #2
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	e7e3      	b.n	80039cc <__smakebuf_r+0xc>
 8003a04:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <__smakebuf_r+0x7c>)
 8003a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a08:	89a3      	ldrh	r3, [r4, #12]
 8003a0a:	6020      	str	r0, [r4, #0]
 8003a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	9b00      	ldr	r3, [sp, #0]
 8003a14:	6120      	str	r0, [r4, #16]
 8003a16:	6163      	str	r3, [r4, #20]
 8003a18:	9b01      	ldr	r3, [sp, #4]
 8003a1a:	b15b      	cbz	r3, 8003a34 <__smakebuf_r+0x74>
 8003a1c:	4630      	mov	r0, r6
 8003a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a22:	f000 f971 	bl	8003d08 <_isatty_r>
 8003a26:	b128      	cbz	r0, 8003a34 <__smakebuf_r+0x74>
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	f023 0303 	bic.w	r3, r3, #3
 8003a2e:	f043 0301 	orr.w	r3, r3, #1
 8003a32:	81a3      	strh	r3, [r4, #12]
 8003a34:	89a0      	ldrh	r0, [r4, #12]
 8003a36:	4305      	orrs	r5, r0
 8003a38:	81a5      	strh	r5, [r4, #12]
 8003a3a:	e7cd      	b.n	80039d8 <__smakebuf_r+0x18>
 8003a3c:	080037cd 	.word	0x080037cd

08003a40 <_free_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4605      	mov	r5, r0
 8003a44:	2900      	cmp	r1, #0
 8003a46:	d040      	beq.n	8003aca <_free_r+0x8a>
 8003a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a4c:	1f0c      	subs	r4, r1, #4
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	bfb8      	it	lt
 8003a52:	18e4      	addlt	r4, r4, r3
 8003a54:	f000 f97a 	bl	8003d4c <__malloc_lock>
 8003a58:	4a1c      	ldr	r2, [pc, #112]	; (8003acc <_free_r+0x8c>)
 8003a5a:	6813      	ldr	r3, [r2, #0]
 8003a5c:	b933      	cbnz	r3, 8003a6c <_free_r+0x2c>
 8003a5e:	6063      	str	r3, [r4, #4]
 8003a60:	6014      	str	r4, [r2, #0]
 8003a62:	4628      	mov	r0, r5
 8003a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a68:	f000 b976 	b.w	8003d58 <__malloc_unlock>
 8003a6c:	42a3      	cmp	r3, r4
 8003a6e:	d908      	bls.n	8003a82 <_free_r+0x42>
 8003a70:	6820      	ldr	r0, [r4, #0]
 8003a72:	1821      	adds	r1, r4, r0
 8003a74:	428b      	cmp	r3, r1
 8003a76:	bf01      	itttt	eq
 8003a78:	6819      	ldreq	r1, [r3, #0]
 8003a7a:	685b      	ldreq	r3, [r3, #4]
 8003a7c:	1809      	addeq	r1, r1, r0
 8003a7e:	6021      	streq	r1, [r4, #0]
 8003a80:	e7ed      	b.n	8003a5e <_free_r+0x1e>
 8003a82:	461a      	mov	r2, r3
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	b10b      	cbz	r3, 8003a8c <_free_r+0x4c>
 8003a88:	42a3      	cmp	r3, r4
 8003a8a:	d9fa      	bls.n	8003a82 <_free_r+0x42>
 8003a8c:	6811      	ldr	r1, [r2, #0]
 8003a8e:	1850      	adds	r0, r2, r1
 8003a90:	42a0      	cmp	r0, r4
 8003a92:	d10b      	bne.n	8003aac <_free_r+0x6c>
 8003a94:	6820      	ldr	r0, [r4, #0]
 8003a96:	4401      	add	r1, r0
 8003a98:	1850      	adds	r0, r2, r1
 8003a9a:	4283      	cmp	r3, r0
 8003a9c:	6011      	str	r1, [r2, #0]
 8003a9e:	d1e0      	bne.n	8003a62 <_free_r+0x22>
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4401      	add	r1, r0
 8003aa6:	6011      	str	r1, [r2, #0]
 8003aa8:	6053      	str	r3, [r2, #4]
 8003aaa:	e7da      	b.n	8003a62 <_free_r+0x22>
 8003aac:	d902      	bls.n	8003ab4 <_free_r+0x74>
 8003aae:	230c      	movs	r3, #12
 8003ab0:	602b      	str	r3, [r5, #0]
 8003ab2:	e7d6      	b.n	8003a62 <_free_r+0x22>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	1821      	adds	r1, r4, r0
 8003ab8:	428b      	cmp	r3, r1
 8003aba:	bf01      	itttt	eq
 8003abc:	6819      	ldreq	r1, [r3, #0]
 8003abe:	685b      	ldreq	r3, [r3, #4]
 8003ac0:	1809      	addeq	r1, r1, r0
 8003ac2:	6021      	streq	r1, [r4, #0]
 8003ac4:	6063      	str	r3, [r4, #4]
 8003ac6:	6054      	str	r4, [r2, #4]
 8003ac8:	e7cb      	b.n	8003a62 <_free_r+0x22>
 8003aca:	bd38      	pop	{r3, r4, r5, pc}
 8003acc:	200009ac 	.word	0x200009ac

08003ad0 <sbrk_aligned>:
 8003ad0:	b570      	push	{r4, r5, r6, lr}
 8003ad2:	4e0e      	ldr	r6, [pc, #56]	; (8003b0c <sbrk_aligned+0x3c>)
 8003ad4:	460c      	mov	r4, r1
 8003ad6:	6831      	ldr	r1, [r6, #0]
 8003ad8:	4605      	mov	r5, r0
 8003ada:	b911      	cbnz	r1, 8003ae2 <sbrk_aligned+0x12>
 8003adc:	f000 f88c 	bl	8003bf8 <_sbrk_r>
 8003ae0:	6030      	str	r0, [r6, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	4628      	mov	r0, r5
 8003ae6:	f000 f887 	bl	8003bf8 <_sbrk_r>
 8003aea:	1c43      	adds	r3, r0, #1
 8003aec:	d00a      	beq.n	8003b04 <sbrk_aligned+0x34>
 8003aee:	1cc4      	adds	r4, r0, #3
 8003af0:	f024 0403 	bic.w	r4, r4, #3
 8003af4:	42a0      	cmp	r0, r4
 8003af6:	d007      	beq.n	8003b08 <sbrk_aligned+0x38>
 8003af8:	1a21      	subs	r1, r4, r0
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 f87c 	bl	8003bf8 <_sbrk_r>
 8003b00:	3001      	adds	r0, #1
 8003b02:	d101      	bne.n	8003b08 <sbrk_aligned+0x38>
 8003b04:	f04f 34ff 	mov.w	r4, #4294967295
 8003b08:	4620      	mov	r0, r4
 8003b0a:	bd70      	pop	{r4, r5, r6, pc}
 8003b0c:	200009b0 	.word	0x200009b0

08003b10 <_malloc_r>:
 8003b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b14:	1ccd      	adds	r5, r1, #3
 8003b16:	f025 0503 	bic.w	r5, r5, #3
 8003b1a:	3508      	adds	r5, #8
 8003b1c:	2d0c      	cmp	r5, #12
 8003b1e:	bf38      	it	cc
 8003b20:	250c      	movcc	r5, #12
 8003b22:	2d00      	cmp	r5, #0
 8003b24:	4607      	mov	r7, r0
 8003b26:	db01      	blt.n	8003b2c <_malloc_r+0x1c>
 8003b28:	42a9      	cmp	r1, r5
 8003b2a:	d905      	bls.n	8003b38 <_malloc_r+0x28>
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	2600      	movs	r6, #0
 8003b30:	603b      	str	r3, [r7, #0]
 8003b32:	4630      	mov	r0, r6
 8003b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b38:	4e2e      	ldr	r6, [pc, #184]	; (8003bf4 <_malloc_r+0xe4>)
 8003b3a:	f000 f907 	bl	8003d4c <__malloc_lock>
 8003b3e:	6833      	ldr	r3, [r6, #0]
 8003b40:	461c      	mov	r4, r3
 8003b42:	bb34      	cbnz	r4, 8003b92 <_malloc_r+0x82>
 8003b44:	4629      	mov	r1, r5
 8003b46:	4638      	mov	r0, r7
 8003b48:	f7ff ffc2 	bl	8003ad0 <sbrk_aligned>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	4604      	mov	r4, r0
 8003b50:	d14d      	bne.n	8003bee <_malloc_r+0xde>
 8003b52:	6834      	ldr	r4, [r6, #0]
 8003b54:	4626      	mov	r6, r4
 8003b56:	2e00      	cmp	r6, #0
 8003b58:	d140      	bne.n	8003bdc <_malloc_r+0xcc>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4638      	mov	r0, r7
 8003b60:	eb04 0803 	add.w	r8, r4, r3
 8003b64:	f000 f848 	bl	8003bf8 <_sbrk_r>
 8003b68:	4580      	cmp	r8, r0
 8003b6a:	d13a      	bne.n	8003be2 <_malloc_r+0xd2>
 8003b6c:	6821      	ldr	r1, [r4, #0]
 8003b6e:	3503      	adds	r5, #3
 8003b70:	1a6d      	subs	r5, r5, r1
 8003b72:	f025 0503 	bic.w	r5, r5, #3
 8003b76:	3508      	adds	r5, #8
 8003b78:	2d0c      	cmp	r5, #12
 8003b7a:	bf38      	it	cc
 8003b7c:	250c      	movcc	r5, #12
 8003b7e:	4638      	mov	r0, r7
 8003b80:	4629      	mov	r1, r5
 8003b82:	f7ff ffa5 	bl	8003ad0 <sbrk_aligned>
 8003b86:	3001      	adds	r0, #1
 8003b88:	d02b      	beq.n	8003be2 <_malloc_r+0xd2>
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	442b      	add	r3, r5
 8003b8e:	6023      	str	r3, [r4, #0]
 8003b90:	e00e      	b.n	8003bb0 <_malloc_r+0xa0>
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	1b52      	subs	r2, r2, r5
 8003b96:	d41e      	bmi.n	8003bd6 <_malloc_r+0xc6>
 8003b98:	2a0b      	cmp	r2, #11
 8003b9a:	d916      	bls.n	8003bca <_malloc_r+0xba>
 8003b9c:	1961      	adds	r1, r4, r5
 8003b9e:	42a3      	cmp	r3, r4
 8003ba0:	6025      	str	r5, [r4, #0]
 8003ba2:	bf18      	it	ne
 8003ba4:	6059      	strne	r1, [r3, #4]
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	bf08      	it	eq
 8003baa:	6031      	streq	r1, [r6, #0]
 8003bac:	5162      	str	r2, [r4, r5]
 8003bae:	604b      	str	r3, [r1, #4]
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	f104 060b 	add.w	r6, r4, #11
 8003bb6:	f000 f8cf 	bl	8003d58 <__malloc_unlock>
 8003bba:	f026 0607 	bic.w	r6, r6, #7
 8003bbe:	1d23      	adds	r3, r4, #4
 8003bc0:	1af2      	subs	r2, r6, r3
 8003bc2:	d0b6      	beq.n	8003b32 <_malloc_r+0x22>
 8003bc4:	1b9b      	subs	r3, r3, r6
 8003bc6:	50a3      	str	r3, [r4, r2]
 8003bc8:	e7b3      	b.n	8003b32 <_malloc_r+0x22>
 8003bca:	6862      	ldr	r2, [r4, #4]
 8003bcc:	42a3      	cmp	r3, r4
 8003bce:	bf0c      	ite	eq
 8003bd0:	6032      	streq	r2, [r6, #0]
 8003bd2:	605a      	strne	r2, [r3, #4]
 8003bd4:	e7ec      	b.n	8003bb0 <_malloc_r+0xa0>
 8003bd6:	4623      	mov	r3, r4
 8003bd8:	6864      	ldr	r4, [r4, #4]
 8003bda:	e7b2      	b.n	8003b42 <_malloc_r+0x32>
 8003bdc:	4634      	mov	r4, r6
 8003bde:	6876      	ldr	r6, [r6, #4]
 8003be0:	e7b9      	b.n	8003b56 <_malloc_r+0x46>
 8003be2:	230c      	movs	r3, #12
 8003be4:	4638      	mov	r0, r7
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	f000 f8b6 	bl	8003d58 <__malloc_unlock>
 8003bec:	e7a1      	b.n	8003b32 <_malloc_r+0x22>
 8003bee:	6025      	str	r5, [r4, #0]
 8003bf0:	e7de      	b.n	8003bb0 <_malloc_r+0xa0>
 8003bf2:	bf00      	nop
 8003bf4:	200009ac 	.word	0x200009ac

08003bf8 <_sbrk_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	4d05      	ldr	r5, [pc, #20]	; (8003c14 <_sbrk_r+0x1c>)
 8003bfe:	4604      	mov	r4, r0
 8003c00:	4608      	mov	r0, r1
 8003c02:	602b      	str	r3, [r5, #0]
 8003c04:	f7fd f802 	bl	8000c0c <_sbrk>
 8003c08:	1c43      	adds	r3, r0, #1
 8003c0a:	d102      	bne.n	8003c12 <_sbrk_r+0x1a>
 8003c0c:	682b      	ldr	r3, [r5, #0]
 8003c0e:	b103      	cbz	r3, 8003c12 <_sbrk_r+0x1a>
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	bd38      	pop	{r3, r4, r5, pc}
 8003c14:	200009b4 	.word	0x200009b4

08003c18 <__sread>:
 8003c18:	b510      	push	{r4, lr}
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c20:	f000 f8a0 	bl	8003d64 <_read_r>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	bfab      	itete	ge
 8003c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8003c2c:	181b      	addge	r3, r3, r0
 8003c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c32:	bfac      	ite	ge
 8003c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c36:	81a3      	strhlt	r3, [r4, #12]
 8003c38:	bd10      	pop	{r4, pc}

08003c3a <__swrite>:
 8003c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c3e:	461f      	mov	r7, r3
 8003c40:	898b      	ldrh	r3, [r1, #12]
 8003c42:	4605      	mov	r5, r0
 8003c44:	05db      	lsls	r3, r3, #23
 8003c46:	460c      	mov	r4, r1
 8003c48:	4616      	mov	r6, r2
 8003c4a:	d505      	bpl.n	8003c58 <__swrite+0x1e>
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c54:	f000 f868 	bl	8003d28 <_lseek_r>
 8003c58:	89a3      	ldrh	r3, [r4, #12]
 8003c5a:	4632      	mov	r2, r6
 8003c5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c60:	81a3      	strh	r3, [r4, #12]
 8003c62:	4628      	mov	r0, r5
 8003c64:	463b      	mov	r3, r7
 8003c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c6e:	f000 b817 	b.w	8003ca0 <_write_r>

08003c72 <__sseek>:
 8003c72:	b510      	push	{r4, lr}
 8003c74:	460c      	mov	r4, r1
 8003c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c7a:	f000 f855 	bl	8003d28 <_lseek_r>
 8003c7e:	1c43      	adds	r3, r0, #1
 8003c80:	89a3      	ldrh	r3, [r4, #12]
 8003c82:	bf15      	itete	ne
 8003c84:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c8e:	81a3      	strheq	r3, [r4, #12]
 8003c90:	bf18      	it	ne
 8003c92:	81a3      	strhne	r3, [r4, #12]
 8003c94:	bd10      	pop	{r4, pc}

08003c96 <__sclose>:
 8003c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c9a:	f000 b813 	b.w	8003cc4 <_close_r>
	...

08003ca0 <_write_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4604      	mov	r4, r0
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	2200      	movs	r2, #0
 8003caa:	4d05      	ldr	r5, [pc, #20]	; (8003cc0 <_write_r+0x20>)
 8003cac:	602a      	str	r2, [r5, #0]
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f7fc ff5f 	bl	8000b72 <_write>
 8003cb4:	1c43      	adds	r3, r0, #1
 8003cb6:	d102      	bne.n	8003cbe <_write_r+0x1e>
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	b103      	cbz	r3, 8003cbe <_write_r+0x1e>
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	bd38      	pop	{r3, r4, r5, pc}
 8003cc0:	200009b4 	.word	0x200009b4

08003cc4 <_close_r>:
 8003cc4:	b538      	push	{r3, r4, r5, lr}
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	4d05      	ldr	r5, [pc, #20]	; (8003ce0 <_close_r+0x1c>)
 8003cca:	4604      	mov	r4, r0
 8003ccc:	4608      	mov	r0, r1
 8003cce:	602b      	str	r3, [r5, #0]
 8003cd0:	f7fc ff6b 	bl	8000baa <_close>
 8003cd4:	1c43      	adds	r3, r0, #1
 8003cd6:	d102      	bne.n	8003cde <_close_r+0x1a>
 8003cd8:	682b      	ldr	r3, [r5, #0]
 8003cda:	b103      	cbz	r3, 8003cde <_close_r+0x1a>
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	bd38      	pop	{r3, r4, r5, pc}
 8003ce0:	200009b4 	.word	0x200009b4

08003ce4 <_fstat_r>:
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	4d06      	ldr	r5, [pc, #24]	; (8003d04 <_fstat_r+0x20>)
 8003cea:	4604      	mov	r4, r0
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	602b      	str	r3, [r5, #0]
 8003cf2:	f7fc ff65 	bl	8000bc0 <_fstat>
 8003cf6:	1c43      	adds	r3, r0, #1
 8003cf8:	d102      	bne.n	8003d00 <_fstat_r+0x1c>
 8003cfa:	682b      	ldr	r3, [r5, #0]
 8003cfc:	b103      	cbz	r3, 8003d00 <_fstat_r+0x1c>
 8003cfe:	6023      	str	r3, [r4, #0]
 8003d00:	bd38      	pop	{r3, r4, r5, pc}
 8003d02:	bf00      	nop
 8003d04:	200009b4 	.word	0x200009b4

08003d08 <_isatty_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	4d05      	ldr	r5, [pc, #20]	; (8003d24 <_isatty_r+0x1c>)
 8003d0e:	4604      	mov	r4, r0
 8003d10:	4608      	mov	r0, r1
 8003d12:	602b      	str	r3, [r5, #0]
 8003d14:	f7fc ff63 	bl	8000bde <_isatty>
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	d102      	bne.n	8003d22 <_isatty_r+0x1a>
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	b103      	cbz	r3, 8003d22 <_isatty_r+0x1a>
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	bd38      	pop	{r3, r4, r5, pc}
 8003d24:	200009b4 	.word	0x200009b4

08003d28 <_lseek_r>:
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	2200      	movs	r2, #0
 8003d32:	4d05      	ldr	r5, [pc, #20]	; (8003d48 <_lseek_r+0x20>)
 8003d34:	602a      	str	r2, [r5, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f7fc ff5b 	bl	8000bf2 <_lseek>
 8003d3c:	1c43      	adds	r3, r0, #1
 8003d3e:	d102      	bne.n	8003d46 <_lseek_r+0x1e>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	b103      	cbz	r3, 8003d46 <_lseek_r+0x1e>
 8003d44:	6023      	str	r3, [r4, #0]
 8003d46:	bd38      	pop	{r3, r4, r5, pc}
 8003d48:	200009b4 	.word	0x200009b4

08003d4c <__malloc_lock>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	; (8003d54 <__malloc_lock+0x8>)
 8003d4e:	f7ff be0f 	b.w	8003970 <__retarget_lock_acquire_recursive>
 8003d52:	bf00      	nop
 8003d54:	200009a8 	.word	0x200009a8

08003d58 <__malloc_unlock>:
 8003d58:	4801      	ldr	r0, [pc, #4]	; (8003d60 <__malloc_unlock+0x8>)
 8003d5a:	f7ff be0a 	b.w	8003972 <__retarget_lock_release_recursive>
 8003d5e:	bf00      	nop
 8003d60:	200009a8 	.word	0x200009a8

08003d64 <_read_r>:
 8003d64:	b538      	push	{r3, r4, r5, lr}
 8003d66:	4604      	mov	r4, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	4d05      	ldr	r5, [pc, #20]	; (8003d84 <_read_r+0x20>)
 8003d70:	602a      	str	r2, [r5, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	f7fc fee0 	bl	8000b38 <_read>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d102      	bne.n	8003d82 <_read_r+0x1e>
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	b103      	cbz	r3, 8003d82 <_read_r+0x1e>
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	bd38      	pop	{r3, r4, r5, pc}
 8003d84:	200009b4 	.word	0x200009b4

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr


MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa48  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800ab58  0800ab58  0001ab58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b110  0800b110  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b110  0800b110  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b110  0800b110  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b110  0800b110  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b114  0800b114  0001b114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000244c  200001e8  0800b2fc  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002634  0800b2fc  00022634  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd2f  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea2  00000000  00000000  0002df3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00030de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  00031c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a308  00000000  00000000  00032940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e3e  00000000  00000000  0004cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5d5  00000000  00000000  0005fa86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec05b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f88  00000000  00000000  000ec0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab40 	.word	0x0800ab40

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800ab40 	.word	0x0800ab40

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001126:	463b      	mov	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001130:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <MX_ADC1_Init+0xd0>)
 8001132:	4a2f      	ldr	r2, [pc, #188]	; (80011f0 <MX_ADC1_Init+0xd4>)
 8001134:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <MX_ADC1_Init+0xd0>)
 8001138:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <MX_ADC1_Init+0xd0>)
 8001140:	2201      	movs	r2, #1
 8001142:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <MX_ADC1_Init+0xd0>)
 8001146:	2200      	movs	r2, #0
 8001148:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <MX_ADC1_Init+0xd0>)
 800114c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001150:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <MX_ADC1_Init+0xd0>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_ADC1_Init+0xd0>)
 800115a:	2203      	movs	r2, #3
 800115c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800115e:	4823      	ldr	r0, [pc, #140]	; (80011ec <MX_ADC1_Init+0xd0>)
 8001160:	f002 fbc4 	bl	80038ec <HAL_ADC_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 800116a:	f001 f900 	bl	800236e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800116e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001172:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_ADC1_Init+0xd0>)
 800117c:	f003 f978 	bl	8004470 <HAL_ADCEx_MultiModeConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001186:	f001 f8f2 	bl	800236e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800118e:	2301      	movs	r3, #1
 8001190:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001192:	2307      	movs	r3, #7
 8001194:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4814      	ldr	r0, [pc, #80]	; (80011ec <MX_ADC1_Init+0xd0>)
 800119c:	f002 fe02 	bl	8003da4 <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011a6:	f001 f8e2 	bl	800236e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_ADC1_Init+0xd0>)
 80011b8:	f002 fdf4 	bl	8003da4 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80011c2:	f001 f8d4 	bl	800236e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011c6:	230b      	movs	r3, #11
 80011c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80011ca:	2303      	movs	r3, #3
 80011cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_ADC1_Init+0xd0>)
 80011d4:	f002 fde6 	bl	8003da4 <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80011de:	f001 f8c6 	bl	800236e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000204 	.word	0x20000204
 80011f0:	40012400 	.word	0x40012400

080011f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011fa:	1d3b      	adds	r3, r7, #4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <MX_ADC2_Init+0xb0>)
 8001206:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <MX_ADC2_Init+0xb4>)
 8001208:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <MX_ADC2_Init+0xb0>)
 800120c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001210:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <MX_ADC2_Init+0xb0>)
 8001214:	2201      	movs	r2, #1
 8001216:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_ADC2_Init+0xb0>)
 800121a:	2200      	movs	r2, #0
 800121c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC2_Init+0xb0>)
 8001220:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001224:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC2_Init+0xb0>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC2_Init+0xb0>)
 800122e:	2203      	movs	r2, #3
 8001230:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001232:	481c      	ldr	r0, [pc, #112]	; (80012a4 <MX_ADC2_Init+0xb0>)
 8001234:	f002 fb5a 	bl	80038ec <HAL_ADC_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 800123e:	f001 f896 	bl	800236e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001242:	2301      	movs	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001246:	2301      	movs	r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800124a:	2307      	movs	r3, #7
 800124c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	4814      	ldr	r0, [pc, #80]	; (80012a4 <MX_ADC2_Init+0xb0>)
 8001254:	f002 fda6 	bl	8003da4 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800125e:	f001 f886 	bl	800236e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001262:	2308      	movs	r3, #8
 8001264:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001266:	2302      	movs	r3, #2
 8001268:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	4619      	mov	r1, r3
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC2_Init+0xb0>)
 8001270:	f002 fd98 	bl	8003da4 <HAL_ADC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800127a:	f001 f878 	bl	800236e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800127e:	230a      	movs	r3, #10
 8001280:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001282:	2303      	movs	r3, #3
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	4619      	mov	r1, r3
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <MX_ADC2_Init+0xb0>)
 800128c:	f002 fd8a 	bl	8003da4 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 8001296:	f001 f86a 	bl	800236e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000234 	.word	0x20000234
 80012a8:	40012800 	.word	0x40012800

080012ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	; 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a65      	ldr	r2, [pc, #404]	; (800145c <HAL_ADC_MspInit+0x1b0>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d168      	bne.n	800139e <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012cc:	4b64      	ldr	r3, [pc, #400]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a63      	ldr	r2, [pc, #396]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80012d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b61      	ldr	r3, [pc, #388]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	4b5e      	ldr	r3, [pc, #376]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a5d      	ldr	r2, [pc, #372]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0310 	and.w	r3, r3, #16
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fc:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	4a57      	ldr	r2, [pc, #348]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 8001302:	f043 0304 	orr.w	r3, r3, #4
 8001306:	6193      	str	r3, [r2, #24]
 8001308:	4b55      	ldr	r3, [pc, #340]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001314:	2303      	movs	r3, #3
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001318:	2303      	movs	r3, #3
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001320:	4619      	mov	r1, r3
 8001322:	4850      	ldr	r0, [pc, #320]	; (8001464 <HAL_ADC_MspInit+0x1b8>)
 8001324:	f003 fca2 	bl	8004c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001328:	2311      	movs	r3, #17
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132c:	2303      	movs	r3, #3
 800132e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001334:	4619      	mov	r1, r3
 8001336:	484c      	ldr	r0, [pc, #304]	; (8001468 <HAL_ADC_MspInit+0x1bc>)
 8001338:	f003 fc98 	bl	8004c6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800133c:	4b4b      	ldr	r3, [pc, #300]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 800133e:	4a4c      	ldr	r2, [pc, #304]	; (8001470 <HAL_ADC_MspInit+0x1c4>)
 8001340:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001342:	4b4a      	ldr	r3, [pc, #296]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 8001344:	2200      	movs	r2, #0
 8001346:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001348:	4b48      	ldr	r3, [pc, #288]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 8001356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 800135e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001362:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001364:	4b41      	ldr	r3, [pc, #260]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 8001366:	2220      	movs	r2, #32
 8001368:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800136a:	4b40      	ldr	r3, [pc, #256]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 800136c:	2200      	movs	r2, #0
 800136e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001370:	483e      	ldr	r0, [pc, #248]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 8001372:	f003 f9dd 	bl	8004730 <HAL_DMA_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 800137c:	f000 fff7 	bl	800236e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a3a      	ldr	r2, [pc, #232]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 8001384:	621a      	str	r2, [r3, #32]
 8001386:	4a39      	ldr	r2, [pc, #228]	; (800146c <HAL_ADC_MspInit+0x1c0>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2012      	movs	r0, #18
 8001392:	f003 f996 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001396:	2012      	movs	r0, #18
 8001398:	f003 f9af 	bl	80046fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800139c:	e05a      	b.n	8001454 <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a34      	ldr	r2, [pc, #208]	; (8001474 <HAL_ADC_MspInit+0x1c8>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d155      	bne.n	8001454 <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a2c      	ldr	r2, [pc, #176]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013bc:	61bb      	str	r3, [r7, #24]
 80013be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a26      	ldr	r2, [pc, #152]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0310 	and.w	r3, r3, #16
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_ADC_MspInit+0x1b4>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001408:	2303      	movs	r3, #3
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800140c:	2303      	movs	r3, #3
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001414:	4619      	mov	r1, r3
 8001416:	4813      	ldr	r0, [pc, #76]	; (8001464 <HAL_ADC_MspInit+0x1b8>)
 8001418:	f003 fc28 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800141c:	2302      	movs	r3, #2
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001420:	2303      	movs	r3, #3
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001428:	4619      	mov	r1, r3
 800142a:	480f      	ldr	r0, [pc, #60]	; (8001468 <HAL_ADC_MspInit+0x1bc>)
 800142c:	f003 fc1e 	bl	8004c6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001434:	2303      	movs	r3, #3
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143c:	4619      	mov	r1, r3
 800143e:	480e      	ldr	r0, [pc, #56]	; (8001478 <HAL_ADC_MspInit+0x1cc>)
 8001440:	f003 fc14 	bl	8004c6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2012      	movs	r0, #18
 800144a:	f003 f93a 	bl	80046c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800144e:	2012      	movs	r0, #18
 8001450:	f003 f953 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 8001454:	bf00      	nop
 8001456:	3738      	adds	r7, #56	; 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40012400 	.word	0x40012400
 8001460:	40021000 	.word	0x40021000
 8001464:	40011000 	.word	0x40011000
 8001468:	40010800 	.word	0x40010800
 800146c:	20000264 	.word	0x20000264
 8001470:	40020008 	.word	0x40020008
 8001474:	40012800 	.word	0x40012800
 8001478:	40010c00 	.word	0x40010c00

0800147c <ADC_Start>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Start(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001480:	bf00      	nop
 8001482:	480e      	ldr	r0, [pc, #56]	; (80014bc <ADC_Start+0x40>)
 8001484:	f002 fe88 	bl	8004198 <HAL_ADCEx_Calibration_Start>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f9      	bne.n	8001482 <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 800148e:	bf00      	nop
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <ADC_Start+0x44>)
 8001492:	f002 fe81 	bl	8004198 <HAL_ADCEx_Calibration_Start>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f9      	bne.n	8001490 <ADC_Start+0x14>
	HAL_Delay(10);
 800149c:	200a      	movs	r0, #10
 800149e:	f002 fa01 	bl	80038a4 <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <ADC_Start+0x44>)
 80014a4:	f002 fafa 	bl	8003a9c <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, getADC_Buffer(), (uint32_t)2 * CHANNELS);
 80014a8:	f001 fd36 	bl	8002f18 <getADC_Buffer>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2206      	movs	r2, #6
 80014b0:	4619      	mov	r1, r3
 80014b2:	4802      	ldr	r0, [pc, #8]	; (80014bc <ADC_Start+0x40>)
 80014b4:	f002 ff1c 	bl	80042f0 <HAL_ADCEx_MultiModeStart_DMA>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000204 	.word	0x20000204
 80014c0:	20000234 	.word	0x20000234

080014c4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	if(hadc)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d005      	beq.n	80014de <HAL_ADC_ConvHalfCpltCallback+0x1a>
	{
		takeData(getADC_Buffer());
 80014d2:	f001 fd21 	bl	8002f18 <getADC_Buffer>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 f877 	bl	80025cc <takeData>
	}
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	if(hadc)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		takeData(gethalfOfADC_Buffer());
 80014f4:	f001 fd1a 	bl	8002f2c <gethalfOfADC_Buffer>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 f866 	bl	80025cc <takeData>
	}
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_DMA_Init+0x38>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	4a0b      	ldr	r2, [pc, #44]	; (8001540 <MX_DMA_Init+0x38>)
 8001514:	f043 0301 	orr.w	r3, r3, #1
 8001518:	6153      	str	r3, [r2, #20]
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_DMA_Init+0x38>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	200b      	movs	r0, #11
 800152c:	f003 f8c9 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001530:	200b      	movs	r0, #11
 8001532:	f003 f8e2 	bl	80046fa <HAL_NVIC_EnableIRQ>

}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000

08001544 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <MX_GPIO_Init+0xd8>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	4a2f      	ldr	r2, [pc, #188]	; (800161c <MX_GPIO_Init+0xd8>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6193      	str	r3, [r2, #24]
 8001564:	4b2d      	ldr	r3, [pc, #180]	; (800161c <MX_GPIO_Init+0xd8>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4b2a      	ldr	r3, [pc, #168]	; (800161c <MX_GPIO_Init+0xd8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a29      	ldr	r2, [pc, #164]	; (800161c <MX_GPIO_Init+0xd8>)
 8001576:	f043 0320 	orr.w	r3, r3, #32
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <MX_GPIO_Init+0xd8>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <MX_GPIO_Init+0xd8>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a23      	ldr	r2, [pc, #140]	; (800161c <MX_GPIO_Init+0xd8>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <MX_GPIO_Init+0xd8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_GPIO_Init+0xd8>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a1d      	ldr	r2, [pc, #116]	; (800161c <MX_GPIO_Init+0xd8>)
 80015a6:	f043 0308 	orr.w	r3, r3, #8
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_GPIO_Init+0xd8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	603b      	str	r3, [r7, #0]
 80015b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80015b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_GPIO_Init+0xdc>)
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	4815      	ldr	r0, [pc, #84]	; (8001624 <MX_GPIO_Init+0xe0>)
 80015ce:	f003 fb4d 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_TX_Pin;
 80015d2:	2304      	movs	r3, #4
 80015d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4619      	mov	r1, r3
 80015e4:	4810      	ldr	r0, [pc, #64]	; (8001628 <MX_GPIO_Init+0xe4>)
 80015e6:	f003 fb41 	bl	8004c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 80015ea:	2308      	movs	r3, #8
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	480a      	ldr	r0, [pc, #40]	; (8001628 <MX_GPIO_Init+0xe4>)
 80015fe:	f003 fb35 	bl	8004c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2028      	movs	r0, #40	; 0x28
 8001608:	f003 f85b 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800160c:	2028      	movs	r0, #40	; 0x28
 800160e:	f003 f874 	bl	80046fa <HAL_NVIC_EnableIRQ>

}
 8001612:	bf00      	nop
 8001614:	3720      	adds	r7, #32
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	10110000 	.word	0x10110000
 8001624:	40011000 	.word	0x40011000
 8001628:	40010800 	.word	0x40010800

0800162c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001630:	4b13      	ldr	r3, [pc, #76]	; (8001680 <MX_I2C1_Init+0x54>)
 8001632:	4a14      	ldr	r2, [pc, #80]	; (8001684 <MX_I2C1_Init+0x58>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001636:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C1_Init+0x54>)
 8001638:	4a13      	ldr	r2, [pc, #76]	; (8001688 <MX_I2C1_Init+0x5c>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <MX_I2C1_Init+0x54>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C1_Init+0x54>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0d      	ldr	r3, [pc, #52]	; (8001680 <MX_I2C1_Init+0x54>)
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <MX_I2C1_Init+0x54>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001656:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_I2C1_Init+0x54>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <MX_I2C1_Init+0x54>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_I2C1_Init+0x54>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001668:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_I2C1_Init+0x54>)
 800166a:	f003 fcbd 	bl	8004fe8 <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001674:	f000 fe7b 	bl	800236e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  PCF8574_update();
 8001678:	f000 f8b6 	bl	80017e8 <PCF8574_update>
  /* USER CODE END I2C1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200002a8 	.word	0x200002a8
 8001684:	40005400 	.word	0x40005400
 8001688:	000186a0 	.word	0x000186a0

0800168c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_I2C_MspInit+0x90>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d132      	bne.n	8001712 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <HAL_I2C_MspInit+0x94>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <HAL_I2C_MspInit+0x94>)
 80016b2:	f043 0308 	orr.w	r3, r3, #8
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b19      	ldr	r3, [pc, #100]	; (8001720 <HAL_I2C_MspInit+0x94>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ca:	2312      	movs	r3, #18
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <HAL_I2C_MspInit+0x98>)
 80016da:	f003 fac7 	bl	8004c6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_I2C_MspInit+0x9c>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
 80016f4:	4a0c      	ldr	r2, [pc, #48]	; (8001728 <HAL_I2C_MspInit+0x9c>)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_I2C_MspInit+0x94>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_I2C_MspInit+0x94>)
 8001700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001704:	61d3      	str	r3, [r2, #28]
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_I2C_MspInit+0x94>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001712:	bf00      	nop
 8001714:	3728      	adds	r7, #40	; 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40005400 	.word	0x40005400
 8001720:	40021000 	.word	0x40021000
 8001724:	40010c00 	.word	0x40010c00
 8001728:	40010000 	.word	0x40010000

0800172c <PCF8574_turnOn>:
  }
}

/* USER CODE BEGIN 1 */
void PCF8574_turnOn(uint8_t pin)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
	PCF8574_check(pin);
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f847 	bl	80017cc <PCF8574_check>
	pinState &= (~(1 << pin));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2201      	movs	r2, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	b25b      	sxtb	r3, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	b25a      	sxtb	r2, r3
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <PCF8574_turnOn+0x3c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b25b      	sxtb	r3, r3
 8001752:	4013      	ands	r3, r2
 8001754:	b25b      	sxtb	r3, r3
 8001756:	b2da      	uxtb	r2, r3
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <PCF8574_turnOn+0x3c>)
 800175a:	701a      	strb	r2, [r3, #0]
	PCF8574_update();
 800175c:	f000 f844 	bl	80017e8 <PCF8574_update>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000000 	.word	0x20000000

0800176c <PCF8574_turnOff>:

void PCF8574_turnOff(uint8_t pin)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
	PCF8574_check(pin);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f827 	bl	80017cc <PCF8574_check>
	pinState |= (1 << pin);
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2201      	movs	r2, #1
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	b25a      	sxtb	r2, r3
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <PCF8574_turnOff+0x38>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	b25b      	sxtb	r3, r3
 800178e:	4313      	orrs	r3, r2
 8001790:	b25b      	sxtb	r3, r3
 8001792:	b2da      	uxtb	r2, r3
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <PCF8574_turnOff+0x38>)
 8001796:	701a      	strb	r2, [r3, #0]
	PCF8574_update();
 8001798:	f000 f826 	bl	80017e8 <PCF8574_update>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000000 	.word	0x20000000

080017a8 <PCF8574_setState>:
	pinState |= pins;
	PCF8574_update();
}

void PCF8574_setState(uint8_t pins)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	pinState = ~pins;
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <PCF8574_setState+0x20>)
 80017ba:	701a      	strb	r2, [r3, #0]
	PCF8574_update();
 80017bc:	f000 f814 	bl	80017e8 <PCF8574_update>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000

080017cc <PCF8574_check>:
	PCF8574_update();
}


void PCF8574_check(uint8_t pin)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
	if(pin >= 8)
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b07      	cmp	r3, #7
 80017da:	d901      	bls.n	80017e0 <PCF8574_check+0x14>
	{
		Error_Handler();
 80017dc:	f000 fdc7 	bl	800236e <Error_Handler>
	}
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <PCF8574_update>:

void PCF8574_update()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1,PCF8574_ADDRESS,(uint8_t*)&pinState,sizeof(pinState),HAL_MAX_DELAY);
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2301      	movs	r3, #1
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <PCF8574_update+0x20>)
 80017f8:	2170      	movs	r1, #112	; 0x70
 80017fa:	4804      	ldr	r0, [pc, #16]	; (800180c <PCF8574_update+0x24>)
 80017fc:	f003 fd38 	bl	8005270 <HAL_I2C_Master_Transmit>
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000
 800180c:	200002a8 	.word	0x200002a8

08001810 <PCF8574_getState>:

uint8_t PCF8574_getState()
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	return ~pinState;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <PCF8574_getState+0x14>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	43db      	mvns	r3, r3
 800181a:	b2db      	uxtb	r3, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	20000000 	.word	0x20000000

08001828 <getState>:
Setting* Cap;
Setting* Ind;
float precision;

uint8_t getState()
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	return state;
 800182c:	4b02      	ldr	r3, [pc, #8]	; (8001838 <getState+0x10>)
 800182e:	781b      	ldrb	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	20000001 	.word	0x20000001

0800183c <setState>:

void setState(uint8_t val)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	if(val == 0 || val == 1)
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <setState+0x16>
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d102      	bne.n	8001858 <setState+0x1c>
		state = val;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <setState+0x28>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	7013      	strb	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	20000001 	.word	0x20000001

08001868 <searchCompensators>:

void searchCompensators()
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af02      	add	r7, sp, #8
	precision = FLT_MAX;
 800186e:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <searchCompensators+0x140>)
 8001870:	4a4e      	ldr	r2, [pc, #312]	; (80019ac <searchCompensators+0x144>)
 8001872:	601a      	str	r2, [r3, #0]
	printf("\nStarting searching compensators\n");
 8001874:	484e      	ldr	r0, [pc, #312]	; (80019b0 <searchCompensators+0x148>)
 8001876:	f006 fa21 	bl	8007cbc <puts>
	for(int i = 0; i < 8; i++) PCF8574_turnOff(i);
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	e007      	b.n	8001890 <searchCompensators+0x28>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff71 	bl	800176c <PCF8574_turnOff>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3301      	adds	r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b07      	cmp	r3, #7
 8001894:	ddf4      	ble.n	8001880 <searchCompensators+0x18>

	for(int i = 0; i < 8; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
 800189a:	e078      	b.n	800198e <searchCompensators+0x126>
	{
		printf("%d: ",i);
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	4845      	ldr	r0, [pc, #276]	; (80019b4 <searchCompensators+0x14c>)
 80018a0:	f006 f972 	bl	8007b88 <iprintf>
		PCF8574_turnOn(i);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff3f 	bl	800172c <PCF8574_turnOn>
		HAL_Delay(500);
 80018ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018b2:	f001 fff7 	bl	80038a4 <HAL_Delay>
		if(getS(0) > 20.0f)
 80018b6:	2000      	movs	r0, #0
 80018b8:	f001 fc1c 	bl	80030f4 <getS>
 80018bc:	4603      	mov	r3, r0
 80018be:	493e      	ldr	r1, [pc, #248]	; (80019b8 <searchCompensators+0x150>)
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fbfb 	bl	80010bc <__aeabi_fcmpgt>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d04b      	beq.n	8001964 <searchCompensators+0xfc>
		{
			compensators[i] = getQ(0);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f001 fc29 	bl	8003124 <getQ>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4939      	ldr	r1, [pc, #228]	; (80019bc <searchCompensators+0x154>)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(compensators[i] > 0) printf("inductive    ");
 80018dc:	4a37      	ldr	r2, [pc, #220]	; (80019bc <searchCompensators+0x154>)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fbe7 	bl	80010bc <__aeabi_fcmpgt>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d003      	beq.n	80018fc <searchCompensators+0x94>
 80018f4:	4832      	ldr	r0, [pc, #200]	; (80019c0 <searchCompensators+0x158>)
 80018f6:	f006 f947 	bl	8007b88 <iprintf>
 80018fa:	e002      	b.n	8001902 <searchCompensators+0x9a>
			else printf("capacitive   ");
 80018fc:	4831      	ldr	r0, [pc, #196]	; (80019c4 <searchCompensators+0x15c>)
 80018fe:	f006 f943 	bl	8007b88 <iprintf>
			printf("Q:%.2f  P:%.2f\n", compensators[i], getP(0));
 8001902:	4a2e      	ldr	r2, [pc, #184]	; (80019bc <searchCompensators+0x154>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fd8c 	bl	8000428 <__aeabi_f2d>
 8001910:	4604      	mov	r4, r0
 8001912:	460d      	mov	r5, r1
 8001914:	2000      	movs	r0, #0
 8001916:	f001 fb93 	bl	8003040 <getP>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fd83 	bl	8000428 <__aeabi_f2d>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	e9cd 2300 	strd	r2, r3, [sp]
 800192a:	4622      	mov	r2, r4
 800192c:	462b      	mov	r3, r5
 800192e:	4826      	ldr	r0, [pc, #152]	; (80019c8 <searchCompensators+0x160>)
 8001930:	f006 f92a 	bl	8007b88 <iprintf>
			if(fabs(compensators[i]) < precision) precision = fabs(compensators[i]);
 8001934:	4a21      	ldr	r2, [pc, #132]	; (80019bc <searchCompensators+0x154>)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <searchCompensators+0x140>)
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fb9a 	bl	8001080 <__aeabi_fcmplt>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d011      	beq.n	8001976 <searchCompensators+0x10e>
 8001952:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <searchCompensators+0x154>)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <searchCompensators+0x140>)
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e008      	b.n	8001976 <searchCompensators+0x10e>
		}
		else
		{
			compensators[i] = 0.0f;
 8001964:	4a15      	ldr	r2, [pc, #84]	; (80019bc <searchCompensators+0x154>)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			printf("unconnected\n");
 8001970:	4816      	ldr	r0, [pc, #88]	; (80019cc <searchCompensators+0x164>)
 8001972:	f006 f9a3 	bl	8007cbc <puts>
		}
		PCF8574_turnOff(i);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fef6 	bl	800176c <PCF8574_turnOff>
		HAL_Delay(300);
 8001980:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001984:	f001 ff8e 	bl	80038a4 <HAL_Delay>
	for(int i = 0; i < 8; i++)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	2b07      	cmp	r3, #7
 8001992:	dd83      	ble.n	800189c <searchCompensators+0x34>
	}
	sendCompensatorsData();
 8001994:	f000 f81c 	bl	80019d0 <sendCompensatorsData>
	sortConfigs();
 8001998:	f000 f842 	bl	8001a20 <sortConfigs>
	printConfigs();
 800199c:	f000 f9d0 	bl	8001d40 <printConfigs>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bdb0      	pop	{r4, r5, r7, pc}
 80019a8:	2000032c 	.word	0x2000032c
 80019ac:	7f7fffff 	.word	0x7f7fffff
 80019b0:	0800ab58 	.word	0x0800ab58
 80019b4:	0800ab7c 	.word	0x0800ab7c
 80019b8:	41a00000 	.word	0x41a00000
 80019bc:	200002fc 	.word	0x200002fc
 80019c0:	0800ab84 	.word	0x0800ab84
 80019c4:	0800ab94 	.word	0x0800ab94
 80019c8:	0800aba4 	.word	0x0800aba4
 80019cc:	0800abb4 	.word	0x0800abb4

080019d0 <sendCompensatorsData>:

void sendCompensatorsData()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
	printf("@6#");
 80019d6:	480f      	ldr	r0, [pc, #60]	; (8001a14 <sendCompensatorsData+0x44>)
 80019d8:	f006 f8d6 	bl	8007b88 <iprintf>
	for(int i = 0; i < 8; i++)
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	e00e      	b.n	8001a00 <sendCompensatorsData+0x30>
	{
		printf("%.2f;",compensators[i]);
 80019e2:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <sendCompensatorsData+0x48>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd1c 	bl	8000428 <__aeabi_f2d>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4809      	ldr	r0, [pc, #36]	; (8001a1c <sendCompensatorsData+0x4c>)
 80019f6:	f006 f8c7 	bl	8007b88 <iprintf>
	for(int i = 0; i < 8; i++)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3301      	adds	r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2b07      	cmp	r3, #7
 8001a04:	dded      	ble.n	80019e2 <sendCompensatorsData+0x12>
	}
	printf("\n");
 8001a06:	200a      	movs	r0, #10
 8001a08:	f006 f8d6 	bl	8007bb8 <putchar>
}
 8001a0c:	bf00      	nop
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	0800abc0 	.word	0x0800abc0
 8001a18:	200002fc 	.word	0x200002fc
 8001a1c:	0800abc4 	.word	0x0800abc4

08001a20 <sortConfigs>:

void sortConfigs()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	freeSettings();
 8001a24:	f000 f97a 	bl	8001d1c <freeSettings>
	splitElements();
 8001a28:	f000 f802 	bl	8001a30 <splitElements>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <splitElements>:

void splitElements()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b092      	sub	sp, #72	; 0x48
 8001a34:	af00      	add	r7, sp, #0
	cap_length = 0;
 8001a36:	4b34      	ldr	r3, [pc, #208]	; (8001b08 <splitElements+0xd8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
	ind_length = 0;
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <splitElements+0xdc>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
	int capacitives[8];
	int inductives[8];
	for (int i = 0; i < 8; i++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	647b      	str	r3, [r7, #68]	; 0x44
 8001a46:	e040      	b.n	8001aca <splitElements+0x9a>
	{
		capacitives[i] = -1;
 8001a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	3348      	adds	r3, #72	; 0x48
 8001a4e:	443b      	add	r3, r7
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	f843 2c24 	str.w	r2, [r3, #-36]
		inductives[i] = -1;
 8001a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	3348      	adds	r3, #72	; 0x48
 8001a5e:	443b      	add	r3, r7
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	f843 2c44 	str.w	r2, [r3, #-68]
		if (compensators[i] > 0.0f)
 8001a68:	4a29      	ldr	r2, [pc, #164]	; (8001b10 <splitElements+0xe0>)
 8001a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fb21 	bl	80010bc <__aeabi_fcmpgt>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00a      	beq.n	8001a96 <splitElements+0x66>
		{
			inductives[ind_length++] = i;
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <splitElements+0xdc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	4921      	ldr	r1, [pc, #132]	; (8001b0c <splitElements+0xdc>)
 8001a88:	600a      	str	r2, [r1, #0]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	3348      	adds	r3, #72	; 0x48
 8001a8e:	443b      	add	r3, r7
 8001a90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a92:	f843 2c44 	str.w	r2, [r3, #-68]
		}
		if (compensators[i] < 0.0f)
 8001a96:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <splitElements+0xe0>)
 8001a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9e:	f04f 0100 	mov.w	r1, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff faec 	bl	8001080 <__aeabi_fcmplt>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00a      	beq.n	8001ac4 <splitElements+0x94>
		{
			capacitives[cap_length++] = i;
 8001aae:	4b16      	ldr	r3, [pc, #88]	; (8001b08 <splitElements+0xd8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	4914      	ldr	r1, [pc, #80]	; (8001b08 <splitElements+0xd8>)
 8001ab6:	600a      	str	r2, [r1, #0]
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	3348      	adds	r3, #72	; 0x48
 8001abc:	443b      	add	r3, r7
 8001abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ac0:	f843 2c24 	str.w	r2, [r3, #-36]
	for (int i = 0; i < 8; i++)
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	647b      	str	r3, [r7, #68]	; 0x44
 8001aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001acc:	2b07      	cmp	r3, #7
 8001ace:	ddbb      	ble.n	8001a48 <splitElements+0x18>
		}
	}

	ind_length = 1 << ind_length;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <splitElements+0xdc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <splitElements+0xdc>)
 8001adc:	6013      	str	r3, [r2, #0]
	cap_length = 1 << cap_length;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <splitElements+0xd8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <splitElements+0xd8>)
 8001aea:	6013      	str	r3, [r2, #0]
	allocSettings(capacitives, inductives);
 8001aec:	1d3a      	adds	r2, r7, #4
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f80d 	bl	8001b14 <allocSettings>
	sortSettings();
 8001afa:	f000 f877 	bl	8001bec <sortSettings>
}
 8001afe:	bf00      	nop
 8001b00:	3748      	adds	r7, #72	; 0x48
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000031c 	.word	0x2000031c
 8001b0c:	20000320 	.word	0x20000320
 8001b10:	200002fc 	.word	0x200002fc

08001b14 <allocSettings>:

void allocSettings(int capacitives[], int inductives[])
{
 8001b14:	b590      	push	{r4, r7, lr}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
	Cap = (Setting*)calloc(cap_length, sizeof(Setting));
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <allocSettings+0xc8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2108      	movs	r1, #8
 8001b24:	4618      	mov	r0, r3
 8001b26:	f005 fa87 	bl	8007038 <calloc>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <allocSettings+0xcc>)
 8001b30:	601a      	str	r2, [r3, #0]
	Ind = (Setting*)calloc(ind_length, sizeof(Setting));
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <allocSettings+0xd0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2108      	movs	r1, #8
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 fa7d 	bl	8007038 <calloc>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <allocSettings+0xd4>)
 8001b44:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < cap_length; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e01a      	b.n	8001b82 <allocSettings+0x6e>
	{
		Cap[i].aggregatedPower = calcAggregated(i, capacitives);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	b2d8      	uxtb	r0, r3
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <allocSettings+0xcc>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	18d4      	adds	r4, r2, r3
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	f000 f880 	bl	8001c60 <calcAggregated>
 8001b60:	4603      	mov	r3, r0
 8001b62:	6063      	str	r3, [r4, #4]
		Cap[i].switches = calcDirectIndex(i, capacitives);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	b2d8      	uxtb	r0, r3
 8001b68:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <allocSettings+0xcc>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	18d4      	adds	r4, r2, r3
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	f000 f8a4 	bl	8001cc0 <calcDirectIndex>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < cap_length; i++)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <allocSettings+0xc8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	dbdf      	blt.n	8001b4c <allocSettings+0x38>

	}

	for (int i = 0; i < ind_length; i++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	e01a      	b.n	8001bc8 <allocSettings+0xb4>
	{
		Ind[i].aggregatedPower = calcAggregated(i, inductives);
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	b2d8      	uxtb	r0, r3
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <allocSettings+0xd4>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	18d4      	adds	r4, r2, r3
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	f000 f85d 	bl	8001c60 <calcAggregated>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6063      	str	r3, [r4, #4]
		Ind[i].switches = calcDirectIndex(i, inductives);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	b2d8      	uxtb	r0, r3
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <allocSettings+0xd4>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	00db      	lsls	r3, r3, #3
 8001bb6:	18d4      	adds	r4, r2, r3
 8001bb8:	6839      	ldr	r1, [r7, #0]
 8001bba:	f000 f881 	bl	8001cc0 <calcDirectIndex>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < ind_length; i++)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <allocSettings+0xd0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	dbdf      	blt.n	8001b92 <allocSettings+0x7e>
	}

}
 8001bd2:	bf00      	nop
 8001bd4:	bf00      	nop
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd90      	pop	{r4, r7, pc}
 8001bdc:	2000031c 	.word	0x2000031c
 8001be0:	20000324 	.word	0x20000324
 8001be4:	20000320 	.word	0x20000320
 8001be8:	20000328 	.word	0x20000328

08001bec <sortSettings>:

void sortSettings()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	qsort(Cap, cap_length, sizeof(Setting), compareSetting);
 8001bf0:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <sortSettings+0x2c>)
 8001bf2:	6818      	ldr	r0, [r3, #0]
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <sortSettings+0x30>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <sortSettings+0x34>)
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	f006 f89d 	bl	8007d3c <qsort>
	qsort(Ind, ind_length, sizeof(Setting), compareSetting);
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <sortSettings+0x38>)
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <sortSettings+0x3c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <sortSettings+0x34>)
 8001c0e:	2208      	movs	r2, #8
 8001c10:	f006 f894 	bl	8007d3c <qsort>
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000324 	.word	0x20000324
 8001c1c:	2000031c 	.word	0x2000031c
 8001c20:	08001c2d 	.word	0x08001c2d
 8001c24:	20000328 	.word	0x20000328
 8001c28:	20000320 	.word	0x20000320

08001c2c <compareSetting>:

int compareSetting(const void* a, const void* b) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
	Setting* x = (Setting*)a;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	60fb      	str	r3, [r7, #12]
	Setting* y = (Setting*)b;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	60bb      	str	r3, [r7, #8]
	return x->aggregatedPower - y->aggregatedPower;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4619      	mov	r1, r3
 8001c48:	4610      	mov	r0, r2
 8001c4a:	f7fe ff71 	bl	8000b30 <__aeabi_fsub>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fa3d 	bl	80010d0 <__aeabi_f2iz>
 8001c56:	4603      	mov	r3, r0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <calcAggregated>:

float calcAggregated(uint8_t sw, int mixTable[])
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	6039      	str	r1, [r7, #0]
 8001c6a:	71fb      	strb	r3, [r7, #7]
	float sum = 0.0f;
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 8; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	e018      	b.n	8001caa <calcAggregated+0x4a>
	{
		if ((sw & 1) == 1)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00d      	beq.n	8001c9e <calcAggregated+0x3e>
		{
			sum += compensators[mixTable[i]];
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	; (8001cbc <calcAggregated+0x5c>)
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	4619      	mov	r1, r3
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f7fe ff4d 	bl	8000b34 <__addsf3>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	60fb      	str	r3, [r7, #12]
		}
		sw >>= 1;
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b07      	cmp	r3, #7
 8001cae:	dde3      	ble.n	8001c78 <calcAggregated+0x18>
	}
	return sum;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	200002fc 	.word	0x200002fc

08001cc0 <calcDirectIndex>:

uint8_t calcDirectIndex(uint8_t sw, int mixTable[])
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
	uint8_t direct = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	e018      	b.n	8001d08 <calcDirectIndex+0x48>
	{
		if ((sw & 1) == 1)
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00d      	beq.n	8001cfc <calcDirectIndex+0x3c>
		{
			direct |= (1 << mixTable[i]);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2201      	movs	r2, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	b25a      	sxtb	r2, r3
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	73fb      	strb	r3, [r7, #15]
		}
		sw >>= 1;
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i < 8; i++)
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	3301      	adds	r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	dde3      	ble.n	8001cd6 <calcDirectIndex+0x16>
	}
	return direct;
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
	...

08001d1c <freeSettings>:

void freeSettings()
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	free(Cap);
 8001d20:	4b05      	ldr	r3, [pc, #20]	; (8001d38 <freeSettings+0x1c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f005 f9c1 	bl	80070ac <free>
	free(Ind);
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <freeSettings+0x20>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f005 f9bc 	bl	80070ac <free>
}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000324 	.word	0x20000324
 8001d3c:	20000328 	.word	0x20000328

08001d40 <printConfigs>:

void printConfigs()
{
 8001d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d44:	b08c      	sub	sp, #48	; 0x30
 8001d46:	af08      	add	r7, sp, #32
	printf("\nAvailable configs:\nCapacitors:\n");
 8001d48:	489c      	ldr	r0, [pc, #624]	; (8001fbc <printConfigs+0x27c>)
 8001d4a:	f005 ffb7 	bl	8007cbc <puts>
	for(uint8_t i = 0; i < cap_length; i++) printf(BYTE_TO_BINARY_PATTERN":  %.2f\n", BYTE_TO_BINARY(Cap[i].switches), Cap[i].aggregatedPower);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e08d      	b.n	8001e70 <printConfigs+0x130>
 8001d54:	4b9a      	ldr	r3, [pc, #616]	; (8001fc0 <printConfigs+0x280>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4413      	add	r3, r2
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da02      	bge.n	8001d6c <printConfigs+0x2c>
 8001d66:	f04f 0831 	mov.w	r8, #49	; 0x31
 8001d6a:	e001      	b.n	8001d70 <printConfigs+0x30>
 8001d6c:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001d70:	4b93      	ldr	r3, [pc, #588]	; (8001fc0 <printConfigs+0x280>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	7bfb      	ldrb	r3, [r7, #15]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <printConfigs+0x4a>
 8001d84:	f04f 0931 	mov.w	r9, #49	; 0x31
 8001d88:	e001      	b.n	8001d8e <printConfigs+0x4e>
 8001d8a:	f04f 0930 	mov.w	r9, #48	; 0x30
 8001d8e:	4b8c      	ldr	r3, [pc, #560]	; (8001fc0 <printConfigs+0x280>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <printConfigs+0x68>
 8001da2:	f04f 0a31 	mov.w	sl, #49	; 0x31
 8001da6:	e001      	b.n	8001dac <printConfigs+0x6c>
 8001da8:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8001dac:	4b84      	ldr	r3, [pc, #528]	; (8001fc0 <printConfigs+0x280>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	f003 0310 	and.w	r3, r3, #16
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <printConfigs+0x84>
 8001dc0:	2431      	movs	r4, #49	; 0x31
 8001dc2:	e000      	b.n	8001dc6 <printConfigs+0x86>
 8001dc4:	2430      	movs	r4, #48	; 0x30
 8001dc6:	4b7e      	ldr	r3, [pc, #504]	; (8001fc0 <printConfigs+0x280>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <printConfigs+0x9e>
 8001dda:	2531      	movs	r5, #49	; 0x31
 8001ddc:	e000      	b.n	8001de0 <printConfigs+0xa0>
 8001dde:	2530      	movs	r5, #48	; 0x30
 8001de0:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <printConfigs+0x280>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <printConfigs+0xb8>
 8001df4:	2631      	movs	r6, #49	; 0x31
 8001df6:	e000      	b.n	8001dfa <printConfigs+0xba>
 8001df8:	2630      	movs	r6, #48	; 0x30
 8001dfa:	4b71      	ldr	r3, [pc, #452]	; (8001fc0 <printConfigs+0x280>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	7bfb      	ldrb	r3, [r7, #15]
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <printConfigs+0xd4>
 8001e0e:	2331      	movs	r3, #49	; 0x31
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	e001      	b.n	8001e18 <printConfigs+0xd8>
 8001e14:	2330      	movs	r3, #48	; 0x30
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <printConfigs+0x280>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <printConfigs+0xf2>
 8001e2c:	2331      	movs	r3, #49	; 0x31
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	e001      	b.n	8001e36 <printConfigs+0xf6>
 8001e32:	2330      	movs	r3, #48	; 0x30
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <printConfigs+0x280>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe faf0 	bl	8000428 <__aeabi_f2d>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	9304      	str	r3, [sp, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	9303      	str	r3, [sp, #12]
 8001e58:	9602      	str	r6, [sp, #8]
 8001e5a:	9501      	str	r5, [sp, #4]
 8001e5c:	9400      	str	r4, [sp, #0]
 8001e5e:	4653      	mov	r3, sl
 8001e60:	464a      	mov	r2, r9
 8001e62:	4641      	mov	r1, r8
 8001e64:	4857      	ldr	r0, [pc, #348]	; (8001fc4 <printConfigs+0x284>)
 8001e66:	f005 fe8f 	bl	8007b88 <iprintf>
 8001e6a:	7bfb      	ldrb	r3, [r7, #15]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <printConfigs+0x288>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	f6ff af6c 	blt.w	8001d54 <printConfigs+0x14>
	printf("Inductors:\n");
 8001e7c:	4853      	ldr	r0, [pc, #332]	; (8001fcc <printConfigs+0x28c>)
 8001e7e:	f005 ff1d 	bl	8007cbc <puts>
	for(uint8_t i = 0; i < ind_length; i++) printf(BYTE_TO_BINARY_PATTERN":  %.2f\n", BYTE_TO_BINARY(Ind[i].switches), Ind[i].aggregatedPower);
 8001e82:	2300      	movs	r3, #0
 8001e84:	73bb      	strb	r3, [r7, #14]
 8001e86:	e08d      	b.n	8001fa4 <printConfigs+0x264>
 8001e88:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <printConfigs+0x290>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	da02      	bge.n	8001ea0 <printConfigs+0x160>
 8001e9a:	f04f 0831 	mov.w	r8, #49	; 0x31
 8001e9e:	e001      	b.n	8001ea4 <printConfigs+0x164>
 8001ea0:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001ea4:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <printConfigs+0x290>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	7bbb      	ldrb	r3, [r7, #14]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <printConfigs+0x17e>
 8001eb8:	f04f 0931 	mov.w	r9, #49	; 0x31
 8001ebc:	e001      	b.n	8001ec2 <printConfigs+0x182>
 8001ebe:	f04f 0930 	mov.w	r9, #48	; 0x30
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <printConfigs+0x290>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	4413      	add	r3, r2
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <printConfigs+0x19c>
 8001ed6:	f04f 0a31 	mov.w	sl, #49	; 0x31
 8001eda:	e001      	b.n	8001ee0 <printConfigs+0x1a0>
 8001edc:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8001ee0:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <printConfigs+0x290>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <printConfigs+0x1b8>
 8001ef4:	2431      	movs	r4, #49	; 0x31
 8001ef6:	e000      	b.n	8001efa <printConfigs+0x1ba>
 8001ef8:	2430      	movs	r4, #48	; 0x30
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <printConfigs+0x290>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	7bbb      	ldrb	r3, [r7, #14]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <printConfigs+0x1d2>
 8001f0e:	2531      	movs	r5, #49	; 0x31
 8001f10:	e000      	b.n	8001f14 <printConfigs+0x1d4>
 8001f12:	2530      	movs	r5, #48	; 0x30
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <printConfigs+0x290>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	7bbb      	ldrb	r3, [r7, #14]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <printConfigs+0x1ec>
 8001f28:	2631      	movs	r6, #49	; 0x31
 8001f2a:	e000      	b.n	8001f2e <printConfigs+0x1ee>
 8001f2c:	2630      	movs	r6, #48	; 0x30
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <printConfigs+0x290>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	7bbb      	ldrb	r3, [r7, #14]
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <printConfigs+0x208>
 8001f42:	2331      	movs	r3, #49	; 0x31
 8001f44:	607b      	str	r3, [r7, #4]
 8001f46:	e001      	b.n	8001f4c <printConfigs+0x20c>
 8001f48:	2330      	movs	r3, #48	; 0x30
 8001f4a:	607b      	str	r3, [r7, #4]
 8001f4c:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <printConfigs+0x290>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	7bbb      	ldrb	r3, [r7, #14]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <printConfigs+0x226>
 8001f60:	2331      	movs	r3, #49	; 0x31
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	e001      	b.n	8001f6a <printConfigs+0x22a>
 8001f66:	2330      	movs	r3, #48	; 0x30
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <printConfigs+0x290>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fa56 	bl	8000428 <__aeabi_f2d>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	9304      	str	r3, [sp, #16]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	9602      	str	r6, [sp, #8]
 8001f8e:	9501      	str	r5, [sp, #4]
 8001f90:	9400      	str	r4, [sp, #0]
 8001f92:	4653      	mov	r3, sl
 8001f94:	464a      	mov	r2, r9
 8001f96:	4641      	mov	r1, r8
 8001f98:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <printConfigs+0x284>)
 8001f9a:	f005 fdf5 	bl	8007b88 <iprintf>
 8001f9e:	7bbb      	ldrb	r3, [r7, #14]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	73bb      	strb	r3, [r7, #14]
 8001fa4:	7bba      	ldrb	r2, [r7, #14]
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <printConfigs+0x294>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	f6ff af6c 	blt.w	8001e88 <printConfigs+0x148>
}
 8001fb0:	bf00      	nop
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fbc:	0800abcc 	.word	0x0800abcc
 8001fc0:	20000324 	.word	0x20000324
 8001fc4:	0800abec 	.word	0x0800abec
 8001fc8:	2000031c 	.word	0x2000031c
 8001fcc:	0800ac08 	.word	0x0800ac08
 8001fd0:	20000328 	.word	0x20000328
 8001fd4:	20000320 	.word	0x20000320

08001fd8 <actualCompensatedPower>:

float actualCompensatedPower()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
	uint8_t sw = PCF8574_getState();
 8001fde:	f7ff fc17 	bl	8001810 <PCF8574_getState>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	73fb      	strb	r3, [r7, #15]
	float sum = 0.0f;
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < 8; i++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	607b      	str	r3, [r7, #4]
 8001ff0:	e014      	b.n	800201c <actualCompensatedPower+0x44>
	{
		if ((sw & 1) == 1)
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <actualCompensatedPower+0x38>
		{
			sum += compensators[i];
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	; (800202c <actualCompensatedPower+0x54>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	4619      	mov	r1, r3
 8002006:	68b8      	ldr	r0, [r7, #8]
 8002008:	f7fe fd94 	bl	8000b34 <__addsf3>
 800200c:	4603      	mov	r3, r0
 800200e:	60bb      	str	r3, [r7, #8]
		}
		sw >>= 1;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 8; i++)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3301      	adds	r3, #1
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b07      	cmp	r3, #7
 8002020:	dde7      	ble.n	8001ff2 <actualCompensatedPower+0x1a>
	}
	return sum;
 8002022:	68bb      	ldr	r3, [r7, #8]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200002fc 	.word	0x200002fc

08002030 <compensate>:

void compensate()
{
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
	if(state == 0 && fabs(getQ(0)) > 2*precision)
 8002036:	4b27      	ldr	r3, [pc, #156]	; (80020d4 <compensate+0xa4>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d146      	bne.n	80020cc <compensate+0x9c>
 800203e:	2000      	movs	r0, #0
 8002040:	f001 f870 	bl	8003124 <getQ>
 8002044:	4603      	mov	r3, r0
 8002046:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <compensate+0xa8>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4619      	mov	r1, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fd6f 	bl	8000b34 <__addsf3>
 8002056:	4603      	mov	r3, r0
 8002058:	4619      	mov	r1, r3
 800205a:	4620      	mov	r0, r4
 800205c:	f7ff f82e 	bl	80010bc <__aeabi_fcmpgt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d100      	bne.n	8002068 <compensate+0x38>
			res = chooseSetting(Q,Ind, ind_length);
		}
		softSwitch(res);
		execCommand(101,0);
	}
}
 8002066:	e031      	b.n	80020cc <compensate+0x9c>
		float Q_summed = getQ(0);
 8002068:	2000      	movs	r0, #0
 800206a:	f001 f85b 	bl	8003124 <getQ>
 800206e:	60b8      	str	r0, [r7, #8]
		float Q_compensated = actualCompensatedPower();
 8002070:	f7ff ffb2 	bl	8001fd8 <actualCompensatedPower>
 8002074:	6078      	str	r0, [r7, #4]
		float Q = Q_summed - Q_compensated;
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	68b8      	ldr	r0, [r7, #8]
 800207a:	f7fe fd59 	bl	8000b30 <__aeabi_fsub>
 800207e:	4603      	mov	r3, r0
 8002080:	603b      	str	r3, [r7, #0]
		if(Q > 0)
 8002082:	f04f 0100 	mov.w	r1, #0
 8002086:	6838      	ldr	r0, [r7, #0]
 8002088:	f7ff f818 	bl	80010bc <__aeabi_fcmpgt>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <compensate+0x78>
			res = chooseSetting(Q, Cap, cap_length);
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <compensate+0xac>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <compensate+0xb0>)
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	4619      	mov	r1, r3
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f000 f825 	bl	80020ec <chooseSetting>
 80020a2:	4603      	mov	r3, r0
 80020a4:	73fb      	strb	r3, [r7, #15]
 80020a6:	e009      	b.n	80020bc <compensate+0x8c>
			res = chooseSetting(Q,Ind, ind_length);
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <compensate+0xb4>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <compensate+0xb8>)
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	6838      	ldr	r0, [r7, #0]
 80020b4:	f000 f81a 	bl	80020ec <chooseSetting>
 80020b8:	4603      	mov	r3, r0
 80020ba:	73fb      	strb	r3, [r7, #15]
		softSwitch(res);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 feae 	bl	8002e20 <softSwitch>
		execCommand(101,0);
 80020c4:	2100      	movs	r1, #0
 80020c6:	2065      	movs	r0, #101	; 0x65
 80020c8:	f000 fec0 	bl	8002e4c <execCommand>
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd90      	pop	{r4, r7, pc}
 80020d4:	20000001 	.word	0x20000001
 80020d8:	2000032c 	.word	0x2000032c
 80020dc:	20000324 	.word	0x20000324
 80020e0:	2000031c 	.word	0x2000031c
 80020e4:	20000328 	.word	0x20000328
 80020e8:	20000320 	.word	0x20000320

080020ec <chooseSetting>:

uint8_t chooseSetting(float Q, Setting* tab, int length)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
	uint8_t res = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	77fb      	strb	r3, [r7, #31]
	float diff = FLT_MAX;
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <chooseSetting+0x80>)
 80020fe:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < length; i++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e028      	b.n	8002158 <chooseSetting+0x6c>
	{
		if(fabs(Q + tab[i].aggregatedPower) < diff)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	68ba      	ldr	r2, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	68f9      	ldr	r1, [r7, #12]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fd0e 	bl	8000b34 <__addsf3>
 8002118:	4603      	mov	r3, r0
 800211a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800211e:	4619      	mov	r1, r3
 8002120:	69b8      	ldr	r0, [r7, #24]
 8002122:	f7fe ffcb 	bl	80010bc <__aeabi_fcmpgt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <chooseSetting+0x66>
		{
			res = tab[i].switches;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	77fb      	strb	r3, [r7, #31]
			diff = fabs(Q + tab[i].aggregatedPower);
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	4413      	add	r3, r2
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fcf5 	bl	8000b34 <__addsf3>
 800214a:	4603      	mov	r3, r0
 800214c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002150:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < length; i++)
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	3301      	adds	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	429a      	cmp	r2, r3
 800215e:	dbd2      	blt.n	8002106 <chooseSetting+0x1a>
		}
	}
	return res;
 8002160:	7ffb      	ldrb	r3, [r7, #31]
}
 8002162:	4618      	mov	r0, r3
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	7f7fffff 	.word	0x7f7fffff

08002170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002174:	b090      	sub	sp, #64	; 0x40
 8002176:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002178:	f001 fb32 	bl	80037e0 <HAL_Init>

  uint32_t lastGetTick;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217c:	f000 f88c 	bl	8002298 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  powerParamInit();
 8002180:	f000 f8fa 	bl	8002378 <powerParamInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002184:	f7ff f9de 	bl	8001544 <MX_GPIO_Init>
  MX_DMA_Init();
 8002188:	f7ff f9be 	bl	8001508 <MX_DMA_Init>
  MX_ADC1_Init();
 800218c:	f7fe ffc6 	bl	800111c <MX_ADC1_Init>
  MX_ADC2_Init();
 8002190:	f7ff f830 	bl	80011f4 <MX_ADC2_Init>
  MX_I2C1_Init();
 8002194:	f7ff fa4a 	bl	800162c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002198:	f001 f9e8 	bl	800356c <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800219c:	f000 f8d3 	bl	8002346 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 80021a0:	f7ff f96c 	bl	800147c <ADC_Start>
  UART_Start();
 80021a4:	f001 fa82 	bl	80036ac <UART_Start>
  HAL_Delay(1500);
 80021a8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80021ac:	f001 fb7a 	bl	80038a4 <HAL_Delay>
  CalibrateZero();
 80021b0:	f000 f956 	bl	8002460 <CalibrateZero>
  CalcRMScorection();
 80021b4:	f000 f900 	bl	80023b8 <CalcRMScorection>
  //searchCompensators();
  param = (Params*)malloc(sizeof(Params));
 80021b8:	2018      	movs	r0, #24
 80021ba:	f004 ff6f 	bl	800709c <malloc>
 80021be:	4603      	mov	r3, r0
 80021c0:	613b      	str	r3, [r7, #16]
  searchCompensators();
 80021c2:	f7ff fb51 	bl	8001868 <searchCompensators>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80021c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ca:	4830      	ldr	r0, [pc, #192]	; (800228c <main+0x11c>)
 80021cc:	f002 fed2 	bl	8004f74 <HAL_GPIO_ReadPin>
	  {

	  }

	  handleRecivedData();
 80021d0:	f001 faa2 	bl	8003718 <handleRecivedData>

	  if((HAL_GetTick()-lastGetTick)>=SHOWDATAPERIOD)
 80021d4:	f001 fb5c 	bl	8003890 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e2:	d3f0      	bcc.n	80021c6 <main+0x56>
	  {
		  getParams(param,0);
 80021e4:	2100      	movs	r1, #0
 80021e6:	6938      	ldr	r0, [r7, #16]
 80021e8:	f000 ffdc 	bl	80031a4 <getParams>
		  printf("@1#%.2f;%.2f;%.2f;%.2f;%.2f;%.2f\n",param->V ,param->I, param->P, param->Q, param->S,param->S > 20 ? param->fi : 0.0f);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f919 	bl	8000428 <__aeabi_f2d>
 80021f6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe f912 	bl	8000428 <__aeabi_f2d>
 8002204:	4604      	mov	r4, r0
 8002206:	460d      	mov	r5, r1
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f90b 	bl	8000428 <__aeabi_f2d>
 8002212:	4680      	mov	r8, r0
 8002214:	4689      	mov	r9, r1
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f904 	bl	8000428 <__aeabi_f2d>
 8002220:	4682      	mov	sl, r0
 8002222:	468b      	mov	fp, r1
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe f8fd 	bl	8000428 <__aeabi_f2d>
 800222e:	e9c7 0100 	strd	r0, r1, [r7]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	4916      	ldr	r1, [pc, #88]	; (8002290 <main+0x120>)
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe ff3f 	bl	80010bc <__aeabi_fcmpgt>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d007      	beq.n	8002254 <main+0xe4>
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f8ed 	bl	8000428 <__aeabi_f2d>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	e003      	b.n	800225c <main+0xec>
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002264:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002268:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800226c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002270:	e9cd 4500 	strd	r4, r5, [sp]
 8002274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002278:	4806      	ldr	r0, [pc, #24]	; (8002294 <main+0x124>)
 800227a:	f005 fc85 	bl	8007b88 <iprintf>
		  compensate();
 800227e:	f7ff fed7 	bl	8002030 <compensate>
		  lastGetTick=HAL_GetTick();
 8002282:	f001 fb05 	bl	8003890 <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8002288:	e79d      	b.n	80021c6 <main+0x56>
 800228a:	bf00      	nop
 800228c:	40011000 	.word	0x40011000
 8002290:	41a00000 	.word	0x41a00000
 8002294:	0800ac14 	.word	0x0800ac14

08002298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b094      	sub	sp, #80	; 0x50
 800229c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a2:	2228      	movs	r2, #40	; 0x28
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f004 ff16 	bl	80070d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	605a      	str	r2, [r3, #4]
 80022c4:	609a      	str	r2, [r3, #8]
 80022c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022c8:	2302      	movs	r3, #2
 80022ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022cc:	2301      	movs	r3, #1
 80022ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022d0:	2310      	movs	r3, #16
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022d4:	2302      	movs	r3, #2
 80022d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80022d8:	2300      	movs	r3, #0
 80022da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80022dc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80022e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fac8 	bl	800587c <HAL_RCC_OscConfig>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80022f2:	f000 f83c 	bl	800236e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022f6:	230f      	movs	r3, #15
 80022f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002306:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2102      	movs	r1, #2
 8002312:	4618      	mov	r0, r3
 8002314:	f003 fd34 	bl	8005d80 <HAL_RCC_ClockConfig>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800231e:	f000 f826 	bl	800236e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002322:	2302      	movs	r3, #2
 8002324:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8002326:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800232a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4618      	mov	r0, r3
 8002330:	f003 febe 	bl	80060b0 <HAL_RCCEx_PeriphCLKConfig>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800233a:	f000 f818 	bl	800236e <Error_Handler>
  }
}
 800233e:	bf00      	nop
 8002340:	3750      	adds	r7, #80	; 0x50
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	af00      	add	r7, sp, #0
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	200f      	movs	r0, #15
 8002350:	f002 f9b7 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002354:	200f      	movs	r0, #15
 8002356:	f002 f9d0 	bl	80046fa <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	2025      	movs	r0, #37	; 0x25
 8002360:	f002 f9af 	bl	80046c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002364:	2025      	movs	r0, #37	; 0x25
 8002366:	f002 f9c8 	bl	80046fa <HAL_NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}

0800236e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002372:	b672      	cpsid	i
}
 8002374:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002376:	e7fe      	b.n	8002376 <Error_Handler+0x8>

08002378 <powerParamInit>:
uint16_t crossingPoint[3][8];
uint8_t pinToTurnOff = 0;
uint8_t pinToTurnOn = 0;

void powerParamInit()
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
	indexCircBuffer = 0;
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <powerParamInit+0x2c>)
 800237e:	2200      	movs	r2, #0
 8002380:	801a      	strh	r2, [r3, #0]
	oversamplingIndex = 0;
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <powerParamInit+0x30>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
	correctionRMS = 1;
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <powerParamInit+0x34>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
	calibCounter = 0;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <powerParamInit+0x38>)
 8002390:	2200      	movs	r2, #0
 8002392:	801a      	strh	r2, [r3, #0]
	disableSetting = 0;
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <powerParamInit+0x3c>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	2000234c 	.word	0x2000234c
 80023a8:	2000234e 	.word	0x2000234e
 80023ac:	20002390 	.word	0x20002390
 80023b0:	20002392 	.word	0x20002392
 80023b4:	20002530 	.word	0x20002530

080023b8 <CalcRMScorection>:

void CalcRMScorection()
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
		while(indexCircBuffer!= 0);
 80023be:	bf00      	nop
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <CalcRMScorection+0x98>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1fb      	bne.n	80023c0 <CalcRMScorection+0x8>
  __ASM volatile ("cpsid i" : : : "memory");
 80023c8:	b672      	cpsid	i
}
 80023ca:	bf00      	nop
		__disable_irq();
		uint32_t timeOfBufforing = time[BUFFERSIZE-1]- time[0];
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <CalcRMScorection+0x9c>)
 80023ce:	f8d3 27fc 	ldr.w	r2, [r3, #2044]	; 0x7fc
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <CalcRMScorection+0x9c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	60fb      	str	r3, [r7, #12]
		uint32_t halfPhase = 1000000/EXPECTEDFREQ/2;
 80023da:	f242 7310 	movw	r3, #10000	; 0x2710
 80023de:	60bb      	str	r3, [r7, #8]
		uint16_t halfPeriods = timeOfBufforing/halfPhase;
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	80fb      	strh	r3, [r7, #6]
		Tinterval = halfPhase*halfPeriods;
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <CalcRMScorection+0xa0>)
 80023f6:	601a      	str	r2, [r3, #0]
		while(time[BUFFERSIZE-1-correctionRMS] > time[0] + Tinterval) correctionRMS++;
 80023f8:	e005      	b.n	8002406 <CalcRMScorection+0x4e>
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <CalcRMScorection+0xa4>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	3301      	adds	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <CalcRMScorection+0xa4>)
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <CalcRMScorection+0xa4>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800240e:	3301      	adds	r3, #1
 8002410:	4a10      	ldr	r2, [pc, #64]	; (8002454 <CalcRMScorection+0x9c>)
 8002412:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <CalcRMScorection+0x9c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	490f      	ldr	r1, [pc, #60]	; (8002458 <CalcRMScorection+0xa0>)
 800241c:	6809      	ldr	r1, [r1, #0]
 800241e:	440b      	add	r3, r1
 8002420:	429a      	cmp	r2, r3
 8002422:	d8ea      	bhi.n	80023fa <CalcRMScorection+0x42>
		Tinterval = time[BUFFERSIZE-1-correctionRMS] - time[0];
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <CalcRMScorection+0xa4>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f5c3 73ff 	rsb	r3, r3, #510	; 0x1fe
 800242c:	3301      	adds	r3, #1
 800242e:	4a09      	ldr	r2, [pc, #36]	; (8002454 <CalcRMScorection+0x9c>)
 8002430:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <CalcRMScorection+0x9c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	461a      	mov	r2, r3
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <CalcRMScorection+0xa0>)
 800243e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002440:	b662      	cpsie	i
}
 8002442:	bf00      	nop
		__enable_irq();
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	2000234c 	.word	0x2000234c
 8002454:	20001b48 	.word	0x20001b48
 8002458:	20002348 	.word	0x20002348
 800245c:	20002390 	.word	0x20002390

08002460 <CalibrateZero>:

void CalibrateZero()
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0

	printf("Starting calibration...\n");
 8002466:	4851      	ldr	r0, [pc, #324]	; (80025ac <CalibrateZero+0x14c>)
 8002468:	f005 fc28 	bl	8007cbc <puts>
	while(indexCircBuffer!= 0);
 800246c:	bf00      	nop
 800246e:	4b50      	ldr	r3, [pc, #320]	; (80025b0 <CalibrateZero+0x150>)
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1fb      	bne.n	800246e <CalibrateZero+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 8002476:	b672      	cpsid	i
}
 8002478:	bf00      	nop
	__disable_irq();

	//Vpp calibration
	int32_t min = 1 << 16, max = 0;
 800247a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	2300      	movs	r3, #0
 8002482:	60bb      	str	r3, [r7, #8]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 8002484:	2300      	movs	r3, #0
 8002486:	71fb      	strb	r3, [r7, #7]
 8002488:	e070      	b.n	800256c <CalibrateZero+0x10c>
	{
		for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 800248a:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <CalibrateZero+0x154>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	80bb      	strh	r3, [r7, #4]
 8002490:	e03f      	b.n	8002512 <CalibrateZero+0xb2>
		{
			if(max < data[i][j]) max = data[i][j];
 8002492:	88ba      	ldrh	r2, [r7, #4]
 8002494:	79f9      	ldrb	r1, [r7, #7]
 8002496:	4848      	ldr	r0, [pc, #288]	; (80025b8 <CalibrateZero+0x158>)
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	440b      	add	r3, r1
 80024a2:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80024a6:	461a      	mov	r2, r3
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4293      	cmp	r3, r2
 80024ac:	da0a      	bge.n	80024c4 <CalibrateZero+0x64>
 80024ae:	88ba      	ldrh	r2, [r7, #4]
 80024b0:	79f9      	ldrb	r1, [r7, #7]
 80024b2:	4841      	ldr	r0, [pc, #260]	; (80025b8 <CalibrateZero+0x158>)
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	440b      	add	r3, r1
 80024be:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80024c2:	60bb      	str	r3, [r7, #8]
			if(min > data[i][j]) min = data[i][j];
 80024c4:	88ba      	ldrh	r2, [r7, #4]
 80024c6:	79f9      	ldrb	r1, [r7, #7]
 80024c8:	483b      	ldr	r0, [pc, #236]	; (80025b8 <CalibrateZero+0x158>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	440b      	add	r3, r1
 80024d4:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80024d8:	461a      	mov	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	4293      	cmp	r3, r2
 80024de:	dd0a      	ble.n	80024f6 <CalibrateZero+0x96>
 80024e0:	88ba      	ldrh	r2, [r7, #4]
 80024e2:	79f9      	ldrb	r1, [r7, #7]
 80024e4:	4834      	ldr	r0, [pc, #208]	; (80025b8 <CalibrateZero+0x158>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	440b      	add	r3, r1
 80024f0:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80024f4:	60fb      	str	r3, [r7, #12]
			data[i][j] = 0;
 80024f6:	88ba      	ldrh	r2, [r7, #4]
 80024f8:	79f9      	ldrb	r1, [r7, #7]
 80024fa:	482f      	ldr	r0, [pc, #188]	; (80025b8 <CalibrateZero+0x158>)
 80024fc:	4613      	mov	r3, r2
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	4413      	add	r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	440b      	add	r3, r1
 8002506:	2200      	movs	r2, #0
 8002508:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 800250c:	88bb      	ldrh	r3, [r7, #4]
 800250e:	3301      	adds	r3, #1
 8002510:	80bb      	strh	r3, [r7, #4]
 8002512:	88bb      	ldrh	r3, [r7, #4]
 8002514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002518:	d3bb      	bcc.n	8002492 <CalibrateZero+0x32>
		}
		calibZeros[j] += (min+max)/2;
 800251a:	79fb      	ldrb	r3, [r7, #7]
 800251c:	4a27      	ldr	r2, [pc, #156]	; (80025bc <CalibrateZero+0x15c>)
 800251e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	4413      	add	r3, r2
 8002528:	0fda      	lsrs	r2, r3, #31
 800252a:	4413      	add	r3, r2
 800252c:	105b      	asrs	r3, r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	440a      	add	r2, r1
 8002534:	b291      	uxth	r1, r2
 8002536:	4a21      	ldr	r2, [pc, #132]	; (80025bc <CalibrateZero+0x15c>)
 8002538:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data[0][j] = -calibZeros[j];
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	4a1f      	ldr	r2, [pc, #124]	; (80025bc <CalibrateZero+0x15c>)
 8002540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002544:	425b      	negs	r3, r3
 8002546:	b29a      	uxth	r2, r3
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	b211      	sxth	r1, r2
 800254c:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <CalibrateZero+0x158>)
 800254e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RMS[j] = 0;
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <CalibrateZero+0x160>)
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	18d1      	adds	r1, r2, r3
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	3301      	adds	r3, #1
 800256a:	71fb      	strb	r3, [r7, #7]
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d98b      	bls.n	800248a <CalibrateZero+0x2a>
	}
	for(uint8_t j = 0; j < CHANNELS;j++)
 8002572:	2300      	movs	r3, #0
 8002574:	70fb      	strb	r3, [r7, #3]
 8002576:	e00c      	b.n	8002592 <CalibrateZero+0x132>
	{
		P[j] = 0;
 8002578:	78fb      	ldrb	r3, [r7, #3]
 800257a:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <CalibrateZero+0x164>)
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	18d1      	adds	r1, r2, r3
 8002580:	f04f 0200 	mov.w	r2, #0
 8002584:	f04f 0300 	mov.w	r3, #0
 8002588:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS;j++)
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	3301      	adds	r3, #1
 8002590:	70fb      	strb	r3, [r7, #3]
 8002592:	78fb      	ldrb	r3, [r7, #3]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d9ef      	bls.n	8002578 <CalibrateZero+0x118>
	}
	printf("Calibration completed\n");
 8002598:	480b      	ldr	r0, [pc, #44]	; (80025c8 <CalibrateZero+0x168>)
 800259a:	f005 fb8f 	bl	8007cbc <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 800259e:	b662      	cpsie	i
}
 80025a0:	bf00      	nop
	__enable_irq();
}
 80025a2:	bf00      	nop
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	0800ac38 	.word	0x0800ac38
 80025b0:	2000234c 	.word	0x2000234c
 80025b4:	20002390 	.word	0x20002390
 80025b8:	20000348 	.word	0x20000348
 80025bc:	20002350 	.word	0x20002350
 80025c0:	20002360 	.word	0x20002360
 80025c4:	20002398 	.word	0x20002398
 80025c8:	0800ac50 	.word	0x0800ac50

080025cc <takeData>:

void takeData(uint32_t* buffer)
{
 80025cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025d0:	b091      	sub	sp, #68	; 0x44
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6378      	str	r0, [r7, #52]	; 0x34
	if(oversamplingIndex == OVERSAMPLING)
 80025d6:	4baf      	ldr	r3, [pc, #700]	; (8002894 <takeData+0x2c8>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	2b08      	cmp	r3, #8
 80025dc:	f040 8225 	bne.w	8002a2a <takeData+0x45e>
	{

		oversamplingIndex = 0;
 80025e0:	4aac      	ldr	r2, [pc, #688]	; (8002894 <takeData+0x2c8>)
 80025e2:	2300      	movs	r3, #0
 80025e4:	7013      	strb	r3, [r2, #0]
		time[indexCircBuffer] = getCurrentMicros();
 80025e6:	4bac      	ldr	r3, [pc, #688]	; (8002898 <takeData+0x2cc>)
 80025e8:	881b      	ldrh	r3, [r3, #0]
 80025ea:	461c      	mov	r4, r3
 80025ec:	f000 fe38 	bl	8003260 <getCurrentMicros>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4baa      	ldr	r3, [pc, #680]	; (800289c <takeData+0x2d0>)
 80025f4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80025fe:	e036      	b.n	800266e <takeData+0xa2>
		{
			RMS[i] += data[indexCircBuffer][i]*data[indexCircBuffer][i];
 8002600:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002604:	4aa6      	ldr	r2, [pc, #664]	; (80028a0 <takeData+0x2d4>)
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800260e:	4ba2      	ldr	r3, [pc, #648]	; (8002898 <takeData+0x2cc>)
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	461c      	mov	r4, r3
 8002614:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002618:	4da2      	ldr	r5, [pc, #648]	; (80028a4 <takeData+0x2d8>)
 800261a:	4623      	mov	r3, r4
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4423      	add	r3, r4
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8002628:	461e      	mov	r6, r3
 800262a:	4b9b      	ldr	r3, [pc, #620]	; (8002898 <takeData+0x2cc>)
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	461c      	mov	r4, r3
 8002630:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002634:	4d9b      	ldr	r5, [pc, #620]	; (80028a4 <takeData+0x2d8>)
 8002636:	4623      	mov	r3, r4
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	4423      	add	r3, r4
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8002644:	fb06 f303 	mul.w	r3, r6, r3
 8002648:	17da      	asrs	r2, r3, #31
 800264a:	4698      	mov	r8, r3
 800264c:	4691      	mov	r9, r2
 800264e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002652:	eb10 0a08 	adds.w	sl, r0, r8
 8002656:	eb41 0b09 	adc.w	fp, r1, r9
 800265a:	4a91      	ldr	r2, [pc, #580]	; (80028a0 <takeData+0x2d4>)
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	e9c3 ab00 	strd	sl, fp, [r3]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8002664:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002668:	3301      	adds	r3, #1
 800266a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800266e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002672:	2b05      	cmp	r3, #5
 8002674:	d9c4      	bls.n	8002600 <takeData+0x34>
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 8002676:	2300      	movs	r3, #0
 8002678:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800267c:	e040      	b.n	8002700 <takeData+0x134>
		{
			P[i] += data[indexCircBuffer][2*i]*data[indexCircBuffer][2*i+1];
 800267e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002682:	4a89      	ldr	r2, [pc, #548]	; (80028a8 <takeData+0x2dc>)
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	e9d3 0100 	ldrd	r0, r1, [r3]
 800268c:	4b82      	ldr	r3, [pc, #520]	; (8002898 <takeData+0x2cc>)
 800268e:	881b      	ldrh	r3, [r3, #0]
 8002690:	461d      	mov	r5, r3
 8002692:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002696:	005a      	lsls	r2, r3, #1
 8002698:	4c82      	ldr	r4, [pc, #520]	; (80028a4 <takeData+0x2d8>)
 800269a:	462b      	mov	r3, r5
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	442b      	add	r3, r5
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4413      	add	r3, r2
 80026a4:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 80026a8:	461e      	mov	r6, r3
 80026aa:	4b7b      	ldr	r3, [pc, #492]	; (8002898 <takeData+0x2cc>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	461d      	mov	r5, r3
 80026b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	4c7a      	ldr	r4, [pc, #488]	; (80028a4 <takeData+0x2d8>)
 80026ba:	462b      	mov	r3, r5
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	442b      	add	r3, r5
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 80026c8:	fb06 f303 	mul.w	r3, r6, r3
 80026cc:	17da      	asrs	r2, r3, #31
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026d6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80026da:	4622      	mov	r2, r4
 80026dc:	1882      	adds	r2, r0, r2
 80026de:	623a      	str	r2, [r7, #32]
 80026e0:	462a      	mov	r2, r5
 80026e2:	eb41 0202 	adc.w	r2, r1, r2
 80026e6:	627a      	str	r2, [r7, #36]	; 0x24
 80026e8:	4a6f      	ldr	r2, [pc, #444]	; (80028a8 <takeData+0x2dc>)
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80026f2:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 80026f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80026fa:	3301      	adds	r3, #1
 80026fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8002700:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002704:	2b02      	cmp	r3, #2
 8002706:	d9ba      	bls.n	800267e <takeData+0xb2>
		}

		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8002708:	2300      	movs	r3, #0
 800270a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800270e:	e024      	b.n	800275a <takeData+0x18e>
		{
			if(data[indexCircBuffer][i]> 0) setSign(i,indexCircBuffer, 1);
 8002710:	4b61      	ldr	r3, [pc, #388]	; (8002898 <takeData+0x2cc>)
 8002712:	881b      	ldrh	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800271a:	4962      	ldr	r1, [pc, #392]	; (80028a4 <takeData+0x2d8>)
 800271c:	4603      	mov	r3, r0
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4403      	add	r3, r0
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	4413      	add	r3, r2
 8002726:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	dd08      	ble.n	8002740 <takeData+0x174>
 800272e:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <takeData+0x2cc>)
 8002730:	8819      	ldrh	r1, [r3, #0]
 8002732:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002736:	2201      	movs	r2, #1
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f9ef 	bl	8002b1c <setSign>
 800273e:	e007      	b.n	8002750 <takeData+0x184>
			else setSign(i,indexCircBuffer, 0);
 8002740:	4b55      	ldr	r3, [pc, #340]	; (8002898 <takeData+0x2cc>)
 8002742:	8819      	ldrh	r1, [r3, #0]
 8002744:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002748:	2200      	movs	r2, #0
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f9e6 	bl	8002b1c <setSign>
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8002750:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8002754:	3301      	adds	r3, #1
 8002756:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800275a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800275e:	2b05      	cmp	r3, #5
 8002760:	d9d6      	bls.n	8002710 <takeData+0x144>
		}


		for(uint8_t v_channel = 0; v_channel < CHANNELS; v_channel++)
 8002762:	2300      	movs	r3, #0
 8002764:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002768:	e07d      	b.n	8002866 <takeData+0x29a>
		{
			if(data[indexCircBuffer][2*v_channel+1]> 0)
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <takeData+0x2cc>)
 800276c:	881b      	ldrh	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	494a      	ldr	r1, [pc, #296]	; (80028a4 <takeData+0x2d8>)
 800277a:	4603      	mov	r3, r0
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4403      	add	r3, r0
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002788:	2b00      	cmp	r3, #0
 800278a:	dd62      	ble.n	8002852 <takeData+0x286>
			{
				if(positive[v_channel] == 0)
 800278c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002790:	4a46      	ldr	r2, [pc, #280]	; (80028ac <takeData+0x2e0>)
 8002792:	5cd3      	ldrb	r3, [r2, r3]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d156      	bne.n	8002846 <takeData+0x27a>
				{
					crossingPoint[v_channel][crossingIndex[v_channel]] = data[indexCircBuffer][2*v_channel] > 0 ? 1 : 0;
 8002798:	4b3f      	ldr	r3, [pc, #252]	; (8002898 <takeData+0x2cc>)
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027a2:	005a      	lsls	r2, r3, #1
 80027a4:	493f      	ldr	r1, [pc, #252]	; (80028a4 <takeData+0x2d8>)
 80027a6:	4603      	mov	r3, r0
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4403      	add	r3, r0
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bfcc      	ite	gt
 80027b8:	2301      	movgt	r3, #1
 80027ba:	2300      	movle	r3, #0
 80027bc:	b2dc      	uxtb	r4, r3
 80027be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027c2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80027c6:	493a      	ldr	r1, [pc, #232]	; (80028b0 <takeData+0x2e4>)
 80027c8:	5c8a      	ldrb	r2, [r1, r2]
 80027ca:	4610      	mov	r0, r2
 80027cc:	b2a1      	uxth	r1, r4
 80027ce:	4a39      	ldr	r2, [pc, #228]	; (80028b4 <takeData+0x2e8>)
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4403      	add	r3, r0
 80027d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					crossingIndex[v_channel] = (crossingIndex[v_channel]+1) % 8;
 80027d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027dc:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <takeData+0x2e4>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	3301      	adds	r3, #1
 80027e2:	425a      	negs	r2, r3
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	f002 0207 	and.w	r2, r2, #7
 80027ec:	bf58      	it	pl
 80027ee:	4253      	negpl	r3, r2
 80027f0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80027f4:	b2d9      	uxtb	r1, r3
 80027f6:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <takeData+0x2e4>)
 80027f8:	5499      	strb	r1, [r3, r2]
					if(v_channel == 0)
 80027fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d121      	bne.n	8002846 <takeData+0x27a>
					{
						uint8_t pins = PCF8574_getState();
 8002802:	f7ff f805 	bl	8001810 <PCF8574_getState>
 8002806:	4603      	mov	r3, r0
 8002808:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
						pins &= (~pinToTurnOff);
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <takeData+0x2ec>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b25b      	sxtb	r3, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	b25a      	sxtb	r2, r3
 8002816:	f997 3038 	ldrsb.w	r3, [r7, #56]	; 0x38
 800281a:	4013      	ands	r3, r2
 800281c:	b25b      	sxtb	r3, r3
 800281e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
						pins |= pinToTurnOn;
 8002822:	4b26      	ldr	r3, [pc, #152]	; (80028bc <takeData+0x2f0>)
 8002824:	781a      	ldrb	r2, [r3, #0]
 8002826:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800282a:	4313      	orrs	r3, r2
 800282c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
						PCF8574_setState(pins);
 8002830:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002834:	4618      	mov	r0, r3
 8002836:	f7fe ffb7 	bl	80017a8 <PCF8574_setState>
						pinToTurnOn = 0;
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <takeData+0x2f0>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
						pinToTurnOff = 0;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <takeData+0x2ec>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
					}
				}
				positive[v_channel] = 1;
 8002846:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800284a:	4a18      	ldr	r2, [pc, #96]	; (80028ac <takeData+0x2e0>)
 800284c:	2101      	movs	r1, #1
 800284e:	54d1      	strb	r1, [r2, r3]
 8002850:	e004      	b.n	800285c <takeData+0x290>
			}
			else
			{
				positive[v_channel] = 0;
 8002852:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002856:	4a15      	ldr	r2, [pc, #84]	; (80028ac <takeData+0x2e0>)
 8002858:	2100      	movs	r1, #0
 800285a:	54d1      	strb	r1, [r2, r3]
		for(uint8_t v_channel = 0; v_channel < CHANNELS; v_channel++)
 800285c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002860:	3301      	adds	r3, #1
 8002862:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8002866:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800286a:	2b02      	cmp	r3, #2
 800286c:	f67f af7d 	bls.w	800276a <takeData+0x19e>
			}
		}
		indexCircBuffer++;
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <takeData+0x2cc>)
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <takeData+0x2cc>)
 800287a:	801a      	strh	r2, [r3, #0]
		if(indexCircBuffer == BUFFERSIZE) indexCircBuffer = 0;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <takeData+0x2cc>)
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002884:	d102      	bne.n	800288c <takeData+0x2c0>
 8002886:	4b04      	ldr	r3, [pc, #16]	; (8002898 <takeData+0x2cc>)
 8002888:	2200      	movs	r2, #0
 800288a:	801a      	strh	r2, [r3, #0]
		for(uint8_t i = 0; i < CHANNELS;i++)
 800288c:	2300      	movs	r3, #0
 800288e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002892:	e060      	b.n	8002956 <takeData+0x38a>
 8002894:	2000234e 	.word	0x2000234e
 8002898:	2000234c 	.word	0x2000234c
 800289c:	20001b48 	.word	0x20001b48
 80028a0:	20002360 	.word	0x20002360
 80028a4:	20000348 	.word	0x20000348
 80028a8:	20002398 	.word	0x20002398
 80028ac:	20002534 	.word	0x20002534
 80028b0:	20002538 	.word	0x20002538
 80028b4:	2000253c 	.word	0x2000253c
 80028b8:	2000256c 	.word	0x2000256c
 80028bc:	2000256d 	.word	0x2000256d
		{
			P[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i]*data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i+1];
 80028c0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80028c4:	4a8e      	ldr	r2, [pc, #568]	; (8002b00 <takeData+0x534>)
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4413      	add	r3, r2
 80028ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ce:	4b8d      	ldr	r3, [pc, #564]	; (8002b04 <takeData+0x538>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	4b8c      	ldr	r3, [pc, #560]	; (8002b08 <takeData+0x53c>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80028e2:	005c      	lsls	r4, r3, #1
 80028e4:	4d89      	ldr	r5, [pc, #548]	; (8002b0c <takeData+0x540>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4423      	add	r3, r4
 80028f0:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80028f4:	461e      	mov	r6, r3
 80028f6:	4b83      	ldr	r3, [pc, #524]	; (8002b04 <takeData+0x538>)
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b82      	ldr	r3, [pc, #520]	; (8002b08 <takeData+0x53c>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	4413      	add	r3, r2
 8002902:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002906:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	1c5c      	adds	r4, r3, #1
 800290e:	4d7f      	ldr	r5, [pc, #508]	; (8002b0c <takeData+0x540>)
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4423      	add	r3, r4
 800291a:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 800291e:	fb06 f303 	mul.w	r3, r6, r3
 8002922:	17da      	asrs	r2, r3, #31
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	61fa      	str	r2, [r7, #28]
 8002928:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800292c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002930:	4622      	mov	r2, r4
 8002932:	1a82      	subs	r2, r0, r2
 8002934:	613a      	str	r2, [r7, #16]
 8002936:	462a      	mov	r2, r5
 8002938:	eb61 0202 	sbc.w	r2, r1, r2
 800293c:	617a      	str	r2, [r7, #20]
 800293e:	4a70      	ldr	r2, [pc, #448]	; (8002b00 <takeData+0x534>)
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	4413      	add	r3, r2
 8002944:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002948:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 800294c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002950:	3301      	adds	r3, #1
 8002952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8002956:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800295a:	2b02      	cmp	r3, #2
 800295c:	d9b0      	bls.n	80028c0 <takeData+0x2f4>
		}
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 800295e:	2300      	movs	r3, #0
 8002960:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002964:	e05d      	b.n	8002a22 <takeData+0x456>
		{
			RMS[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][i]*data[(indexCircBuffer+ correctionRMS)% BUFFERSIZE][i];
 8002966:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800296a:	4a69      	ldr	r2, [pc, #420]	; (8002b10 <takeData+0x544>)
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002974:	4b63      	ldr	r3, [pc, #396]	; (8002b04 <takeData+0x538>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <takeData+0x53c>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002984:	f897 403a 	ldrb.w	r4, [r7, #58]	; 0x3a
 8002988:	4d60      	ldr	r5, [pc, #384]	; (8002b0c <takeData+0x540>)
 800298a:	4613      	mov	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	4423      	add	r3, r4
 8002994:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8002998:	461e      	mov	r6, r3
 800299a:	4b5a      	ldr	r3, [pc, #360]	; (8002b04 <takeData+0x538>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	4b59      	ldr	r3, [pc, #356]	; (8002b08 <takeData+0x53c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4413      	add	r3, r2
 80029a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029aa:	f897 403a 	ldrb.w	r4, [r7, #58]	; 0x3a
 80029ae:	4d57      	ldr	r5, [pc, #348]	; (8002b0c <takeData+0x540>)
 80029b0:	4613      	mov	r3, r2
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	4413      	add	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	4423      	add	r3, r4
 80029ba:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80029be:	fb06 f303 	mul.w	r3, r6, r3
 80029c2:	17da      	asrs	r2, r3, #31
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	60fa      	str	r2, [r7, #12]
 80029c8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80029cc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029d0:	4622      	mov	r2, r4
 80029d2:	1a82      	subs	r2, r0, r2
 80029d4:	603a      	str	r2, [r7, #0]
 80029d6:	462a      	mov	r2, r5
 80029d8:	eb61 0202 	sbc.w	r2, r1, r2
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	4a4c      	ldr	r2, [pc, #304]	; (8002b10 <takeData+0x544>)
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80029e8:	e9c3 1200 	strd	r1, r2, [r3]
			data[indexCircBuffer][i] = -calibZeros[i];
 80029ec:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80029f0:	4a48      	ldr	r2, [pc, #288]	; (8002b14 <takeData+0x548>)
 80029f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029f6:	425b      	negs	r3, r3
 80029f8:	b299      	uxth	r1, r3
 80029fa:	4b42      	ldr	r3, [pc, #264]	; (8002b04 <takeData+0x538>)
 80029fc:	881b      	ldrh	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8002a04:	b20c      	sxth	r4, r1
 8002a06:	4941      	ldr	r1, [pc, #260]	; (8002b0c <takeData+0x540>)
 8002a08:	4603      	mov	r3, r0
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4403      	add	r3, r0
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	4622      	mov	r2, r4
 8002a14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8002a18:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8002a22:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d99d      	bls.n	8002966 <takeData+0x39a>
		}
	}

	for(uint8_t i = 0; i < CHANNELS;i++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002a30:	e057      	b.n	8002ae2 <takeData+0x516>
	{
		data[indexCircBuffer][2*i] += (uint16_t) buffer[i];
 8002a32:	4b34      	ldr	r3, [pc, #208]	; (8002b04 <takeData+0x538>)
 8002a34:	881b      	ldrh	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002a3c:	005a      	lsls	r2, r3, #1
 8002a3e:	4933      	ldr	r1, [pc, #204]	; (8002b0c <takeData+0x540>)
 8002a40:	4603      	mov	r3, r0
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4403      	add	r3, r0
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a58:	440b      	add	r3, r1
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	b299      	uxth	r1, r3
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <takeData+0x538>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002a6c:	005a      	lsls	r2, r3, #1
 8002a6e:	b20c      	sxth	r4, r1
 8002a70:	4926      	ldr	r1, [pc, #152]	; (8002b0c <takeData+0x540>)
 8002a72:	4603      	mov	r3, r0
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4403      	add	r3, r0
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		data[indexCircBuffer][2*i+1] += (uint16_t) (buffer[i] >> 16);
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <takeData+0x538>)
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	491e      	ldr	r1, [pc, #120]	; (8002b0c <takeData+0x540>)
 8002a92:	4603      	mov	r3, r0
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4403      	add	r3, r0
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002aaa:	440b      	add	r3, r1
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0c1b      	lsrs	r3, r3, #16
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	b299      	uxth	r1, r3
 8002ab6:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <takeData+0x538>)
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	b20c      	sxth	r4, r1
 8002ac6:	4911      	ldr	r1, [pc, #68]	; (8002b0c <takeData+0x540>)
 8002ac8:	4603      	mov	r3, r0
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4403      	add	r3, r0
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t i = 0; i < CHANNELS;i++)
 8002ad8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002adc:	3301      	adds	r3, #1
 8002ade:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002ae2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d9a3      	bls.n	8002a32 <takeData+0x466>
	}
	oversamplingIndex++;
 8002aea:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <takeData+0x54c>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <takeData+0x54c>)
 8002af4:	701a      	strb	r2, [r3, #0]
}
 8002af6:	bf00      	nop
 8002af8:	3744      	adds	r7, #68	; 0x44
 8002afa:	46bd      	mov	sp, r7
 8002afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b00:	20002398 	.word	0x20002398
 8002b04:	2000234c 	.word	0x2000234c
 8002b08:	20002390 	.word	0x20002390
 8002b0c:	20000348 	.word	0x20000348
 8002b10:	20002360 	.word	0x20002360
 8002b14:	20002350 	.word	0x20002350
 8002b18:	2000234e 	.word	0x2000234e

08002b1c <setSign>:

void setSign(uint8_t channel, uint16_t index,uint8_t value)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	71fb      	strb	r3, [r7, #7]
 8002b26:	460b      	mov	r3, r1
 8002b28:	80bb      	strh	r3, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	71bb      	strb	r3, [r7, #6]
	if(disableSetting != 0) return;
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <setSign+0xa4>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d13e      	bne.n	8002bb4 <setSign+0x98>
	if(value == 1)
 8002b36:	79bb      	ldrb	r3, [r7, #6]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d11c      	bne.n	8002b76 <setSign+0x5a>
	{
		sign[channel][index/8] |= (1 << (index % 8));
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	88ba      	ldrh	r2, [r7, #4]
 8002b40:	08d2      	lsrs	r2, r2, #3
 8002b42:	b290      	uxth	r0, r2
 8002b44:	4601      	mov	r1, r0
 8002b46:	4a1f      	ldr	r2, [pc, #124]	; (8002bc4 <setSign+0xa8>)
 8002b48:	019b      	lsls	r3, r3, #6
 8002b4a:	4413      	add	r3, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	b25a      	sxtb	r2, r3
 8002b52:	88bb      	ldrh	r3, [r7, #4]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	2101      	movs	r1, #1
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b25a      	sxtb	r2, r3
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	b2d1      	uxtb	r1, r2
 8002b68:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <setSign+0xa8>)
 8002b6a:	019b      	lsls	r3, r3, #6
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4403      	add	r3, r0
 8002b70:	460a      	mov	r2, r1
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	e01f      	b.n	8002bb6 <setSign+0x9a>
	}
	else
	{
		sign[channel][index/8] &= ~(1 << (index % 8));
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	88ba      	ldrh	r2, [r7, #4]
 8002b7a:	08d2      	lsrs	r2, r2, #3
 8002b7c:	b290      	uxth	r0, r2
 8002b7e:	4601      	mov	r1, r0
 8002b80:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <setSign+0xa8>)
 8002b82:	019b      	lsls	r3, r3, #6
 8002b84:	4413      	add	r3, r2
 8002b86:	440b      	add	r3, r1
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b25a      	sxtb	r2, r3
 8002b8c:	88bb      	ldrh	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f303 	lsl.w	r3, r1, r3
 8002b98:	b25b      	sxtb	r3, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b25a      	sxtb	r2, r3
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	b2d1      	uxtb	r1, r2
 8002ba6:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <setSign+0xa8>)
 8002ba8:	019b      	lsls	r3, r3, #6
 8002baa:	4413      	add	r3, r2
 8002bac:	4403      	add	r3, r0
 8002bae:	460a      	mov	r2, r1
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	e000      	b.n	8002bb6 <setSign+0x9a>
	if(disableSetting != 0) return;
 8002bb4:	bf00      	nop
	}
}
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20002530 	.word	0x20002530
 8002bc4:	200023b0 	.word	0x200023b0

08002bc8 <calcXOR>:

float calcXOR(uint8_t channel)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	71fb      	strb	r3, [r7, #7]
	disableSetting = 1;
 8002bd2:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <calcXOR+0xdc>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
	uint16_t count = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	82fb      	strh	r3, [r7, #22]
	uint16_t counter = 0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = 0; i < (BUFFERSIZE)/8; i++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	74fb      	strb	r3, [r7, #19]
 8002be4:	e02e      	b.n	8002c44 <calcXOR+0x7c>
	{
		uint8_t xor = (sign[channel*2][i]) ^ (sign[channel*2 + 1][i]);
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	005a      	lsls	r2, r3, #1
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	492e      	ldr	r1, [pc, #184]	; (8002ca8 <calcXOR+0xe0>)
 8002bee:	0192      	lsls	r2, r2, #6
 8002bf0:	440a      	add	r2, r1
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781a      	ldrb	r2, [r3, #0]
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	1c59      	adds	r1, r3, #1
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	482a      	ldr	r0, [pc, #168]	; (8002ca8 <calcXOR+0xe0>)
 8002c00:	0189      	lsls	r1, r1, #6
 8002c02:	4401      	add	r1, r0
 8002c04:	440b      	add	r3, r1
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	4053      	eors	r3, r2
 8002c0a:	74bb      	strb	r3, [r7, #18]
		while (xor > 0)
 8002c0c:	e014      	b.n	8002c38 <calcXOR+0x70>
		{
			if(counter < BUFFERSIZE - correctionRMS)
 8002c0e:	8aba      	ldrh	r2, [r7, #20]
 8002c10:	4b26      	ldr	r3, [pc, #152]	; (8002cac <calcXOR+0xe4>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	da07      	bge.n	8002c2c <calcXOR+0x64>
			{
				count += xor & 1;
 8002c1c:	7cbb      	ldrb	r3, [r7, #18]
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	8afb      	ldrh	r3, [r7, #22]
 8002c28:	4413      	add	r3, r2
 8002c2a:	82fb      	strh	r3, [r7, #22]
			}
			xor >>= 1;
 8002c2c:	7cbb      	ldrb	r3, [r7, #18]
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	74bb      	strb	r3, [r7, #18]
			counter++;
 8002c32:	8abb      	ldrh	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	82bb      	strh	r3, [r7, #20]
		while (xor > 0)
 8002c38:	7cbb      	ldrb	r3, [r7, #18]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1e7      	bne.n	8002c0e <calcXOR+0x46>
	for(uint8_t i = 0; i < (BUFFERSIZE)/8; i++)
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]
 8002c40:	3301      	adds	r3, #1
 8002c42:	74fb      	strb	r3, [r7, #19]
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	2b3f      	cmp	r3, #63	; 0x3f
 8002c48:	d9cd      	bls.n	8002be6 <calcXOR+0x1e>
		}
	}
	float angle = (float)count;
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fe f821 	bl	8000c94 <__aeabi_ui2f>
 8002c52:	4603      	mov	r3, r0
 8002c54:	60fb      	str	r3, [r7, #12]
	angle *= 180.0f;
 8002c56:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <calcXOR+0xe8>)
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7fe f873 	bl	8000d44 <__aeabi_fmul>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	60fb      	str	r3, [r7, #12]
	angle /= (BUFFERSIZE-correctionRMS);
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <calcXOR+0xe4>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe f816 	bl	8000c9c <__aeabi_i2f>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4619      	mov	r1, r3
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f7fe f919 	bl	8000eac <__aeabi_fdiv>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	60fb      	str	r3, [r7, #12]


	if(isCapacitive(channel) > 0) angle *=(-1.0f);
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 f817 	bl	8002cb4 <isCapacitive>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <calcXOR+0xcc>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002c92:	60fb      	str	r3, [r7, #12]

	disableSetting = 0;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <calcXOR+0xdc>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	701a      	strb	r2, [r3, #0]
	return angle;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20002530 	.word	0x20002530
 8002ca8:	200023b0 	.word	0x200023b0
 8002cac:	20002390 	.word	0x20002390
 8002cb0:	43340000 	.word	0x43340000

08002cb4 <isCapacitive>:

uint8_t isCapacitive(uint8_t channel)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
	int res = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 8; i++)
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	e012      	b.n	8002cee <isCapacitive+0x3a>
		{
			if(crossingPoint[channel][i] > 0) res++;
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	4910      	ldr	r1, [pc, #64]	; (8002d0c <isCapacitive+0x58>)
 8002ccc:	00da      	lsls	r2, r3, #3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <isCapacitive+0x2e>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e002      	b.n	8002ce8 <isCapacitive+0x34>
			else res--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
		for(int i = 0; i < 8; i++)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b07      	cmp	r3, #7
 8002cf2:	dde9      	ble.n	8002cc8 <isCapacitive+0x14>
		}
	return res > 0 ? 1 : 0;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bfcc      	ite	gt
 8002cfa:	2301      	movgt	r3, #1
 8002cfc:	2300      	movle	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	2000253c 	.word	0x2000253c

08002d10 <printBufforData>:


void printBufforData()
{
 8002d10:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af02      	add	r7, sp, #8
	printf("Starting printing out data...\n");
 8002d18:	4837      	ldr	r0, [pc, #220]	; (8002df8 <printBufforData+0xe8>)
 8002d1a:	f004 ffcf 	bl	8007cbc <puts>
	while(indexCircBuffer!= 0);
 8002d1e:	bf00      	nop
 8002d20:	4b36      	ldr	r3, [pc, #216]	; (8002dfc <printBufforData+0xec>)
 8002d22:	881b      	ldrh	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1fb      	bne.n	8002d20 <printBufforData+0x10>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d28:	b672      	cpsid	i
}
 8002d2a:	bf00      	nop
	__disable_irq();
	printf("t,V,I\n");
 8002d2c:	4834      	ldr	r0, [pc, #208]	; (8002e00 <printBufforData+0xf0>)
 8002d2e:	f004 ffc5 	bl	8007cbc <puts>
	printf("@3#\n");
 8002d32:	4834      	ldr	r0, [pc, #208]	; (8002e04 <printBufforData+0xf4>)
 8002d34:	f004 ffc2 	bl	8007cbc <puts>
	for(int i = correctionRMS; i < BUFFERSIZE; i++) printf("@4#%lu;%f;%f\n",time[i],((float)data[i][1])/(VOLTAGESCALE * OVERSAMPLING),((float)data[i][0])/(CURRENTSCALE * OVERSAMPLING));
 8002d38:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <printBufforData+0xf8>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	607b      	str	r3, [r7, #4]
 8002d3e:	e03f      	b.n	8002dc0 <printBufforData+0xb0>
 8002d40:	4a32      	ldr	r2, [pc, #200]	; (8002e0c <printBufforData+0xfc>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002d48:	4931      	ldr	r1, [pc, #196]	; (8002e10 <printBufforData+0x100>)
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	3302      	adds	r3, #2
 8002d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd ff9d 	bl	8000c9c <__aeabi_i2f>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fb5f 	bl	8000428 <__aeabi_f2d>
 8002d6a:	a31f      	add	r3, pc, #124	; (adr r3, 8002de8 <printBufforData+0xd8>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fcdc 	bl	800072c <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4690      	mov	r8, r2
 8002d7a:	4699      	mov	r9, r3
 8002d7c:	4924      	ldr	r1, [pc, #144]	; (8002e10 <printBufforData+0x100>)
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd ff84 	bl	8000c9c <__aeabi_i2f>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fb46 	bl	8000428 <__aeabi_f2d>
 8002d9c:	a314      	add	r3, pc, #80	; (adr r3, 8002df0 <printBufforData+0xe0>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fcc3 	bl	800072c <__aeabi_ddiv>
 8002da6:	4602      	mov	r2, r0
 8002da8:	460b      	mov	r3, r1
 8002daa:	e9cd 2300 	strd	r2, r3, [sp]
 8002dae:	4642      	mov	r2, r8
 8002db0:	464b      	mov	r3, r9
 8002db2:	4621      	mov	r1, r4
 8002db4:	4817      	ldr	r0, [pc, #92]	; (8002e14 <printBufforData+0x104>)
 8002db6:	f004 fee7 	bl	8007b88 <iprintf>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc6:	dbbb      	blt.n	8002d40 <printBufforData+0x30>
	printf("@5#\n");
 8002dc8:	4813      	ldr	r0, [pc, #76]	; (8002e18 <printBufforData+0x108>)
 8002dca:	f004 ff77 	bl	8007cbc <puts>
	printf("Printing completed\n");
 8002dce:	4813      	ldr	r0, [pc, #76]	; (8002e1c <printBufforData+0x10c>)
 8002dd0:	f004 ff74 	bl	8007cbc <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 8002dd4:	b662      	cpsie	i
}
 8002dd6:	bf00      	nop
	__enable_irq();
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8002de2:	bf00      	nop
 8002de4:	f3af 8000 	nop.w
 8002de8:	b645a1cb 	.word	0xb645a1cb
 8002dec:	40447df3 	.word	0x40447df3
 8002df0:	f5c28f5c 	.word	0xf5c28f5c
 8002df4:	4079bc28 	.word	0x4079bc28
 8002df8:	0800ac68 	.word	0x0800ac68
 8002dfc:	2000234c 	.word	0x2000234c
 8002e00:	0800ac88 	.word	0x0800ac88
 8002e04:	0800ac90 	.word	0x0800ac90
 8002e08:	20002390 	.word	0x20002390
 8002e0c:	20001b48 	.word	0x20001b48
 8002e10:	20000348 	.word	0x20000348
 8002e14:	0800ac94 	.word	0x0800ac94
 8002e18:	0800aca4 	.word	0x0800aca4
 8002e1c:	0800aca8 	.word	0x0800aca8

08002e20 <softSwitch>:
	PCF8574_check(pin);
	pinToTurnOn |= (1 << pin);
}

void softSwitch(uint8_t state)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
	pinToTurnOff = ~state;
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <softSwitch+0x24>)
 8002e32:	701a      	strb	r2, [r3, #0]
	pinToTurnOn = state;
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <softSwitch+0x28>)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	7013      	strb	r3, [r2, #0]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	2000256c 	.word	0x2000256c
 8002e48:	2000256d 	.word	0x2000256d

08002e4c <execCommand>:

void execCommand(uint8_t commandNo, uint8_t arg)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	460a      	mov	r2, r1
 8002e56:	71fb      	strb	r3, [r7, #7]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	71bb      	strb	r3, [r7, #6]
	switch(commandNo)
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	3b64      	subs	r3, #100	; 0x64
 8002e60:	2b06      	cmp	r3, #6
 8002e62:	d852      	bhi.n	8002f0a <execCommand+0xbe>
 8002e64:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <execCommand+0x20>)
 8002e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6a:	bf00      	nop
 8002e6c:	08002e89 	.word	0x08002e89
 8002e70:	08002e8f 	.word	0x08002e8f
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002ecb 	.word	0x08002ecb
 8002e7c:	08002ed1 	.word	0x08002ed1
 8002e80:	08002ed7 	.word	0x08002ed7
 8002e84:	08002f03 	.word	0x08002f03
	{
		case 100:
		{
			CalibrateZero();
 8002e88:	f7ff faea 	bl	8002460 <CalibrateZero>
			break;
 8002e8c:	e03d      	b.n	8002f0a <execCommand+0xbe>
		}
		case 101:
		{
			printf("@2#%u;%u\n",PCF8574_getState(), getState());
 8002e8e:	f7fe fcbf 	bl	8001810 <PCF8574_getState>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461c      	mov	r4, r3
 8002e96:	f7fe fcc7 	bl	8001828 <getState>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	481c      	ldr	r0, [pc, #112]	; (8002f14 <execCommand+0xc8>)
 8002ea2:	f004 fe71 	bl	8007b88 <iprintf>
			break;
 8002ea6:	e030      	b.n	8002f0a <execCommand+0xbe>
		}
		case 102:
		{
			setState(arg);
 8002ea8:	79bb      	ldrb	r3, [r7, #6]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fe fcc6 	bl	800183c <setState>
			printf("@2#%u;%u\n",PCF8574_getState(), getState());
 8002eb0:	f7fe fcae 	bl	8001810 <PCF8574_getState>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	f7fe fcb6 	bl	8001828 <getState>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	4814      	ldr	r0, [pc, #80]	; (8002f14 <execCommand+0xc8>)
 8002ec4:	f004 fe60 	bl	8007b88 <iprintf>
			break;
 8002ec8:	e01f      	b.n	8002f0a <execCommand+0xbe>
		}
		case 103:
		{
			sendCompensatorsData();
 8002eca:	f7fe fd81 	bl	80019d0 <sendCompensatorsData>
			break;
 8002ece:	e01c      	b.n	8002f0a <execCommand+0xbe>
		}
		case 104:
		{
			printBufforData();
 8002ed0:	f7ff ff1e 	bl	8002d10 <printBufforData>
			break;
 8002ed4:	e019      	b.n	8002f0a <execCommand+0xbe>
		}
		case 105:
		{
			if(getState() == 1)
 8002ed6:	f7fe fca7 	bl	8001828 <getState>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d113      	bne.n	8002f08 <execCommand+0xbc>
			{
				PCF8574_setState(arg);
 8002ee0:	79bb      	ldrb	r3, [r7, #6]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fc60 	bl	80017a8 <PCF8574_setState>
				printf("@2#%u;%u\n",PCF8574_getState(), getState());
 8002ee8:	f7fe fc92 	bl	8001810 <PCF8574_getState>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461c      	mov	r4, r3
 8002ef0:	f7fe fc9a 	bl	8001828 <getState>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4621      	mov	r1, r4
 8002efa:	4806      	ldr	r0, [pc, #24]	; (8002f14 <execCommand+0xc8>)
 8002efc:	f004 fe44 	bl	8007b88 <iprintf>
			}
			break;
 8002f00:	e002      	b.n	8002f08 <execCommand+0xbc>
		}
		case 106:
		{
			searchCompensators();
 8002f02:	f7fe fcb1 	bl	8001868 <searchCompensators>
			break;
 8002f06:	e000      	b.n	8002f0a <execCommand+0xbe>
			break;
 8002f08:	bf00      	nop
		}

	}
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd90      	pop	{r4, r7, pc}
 8002f12:	bf00      	nop
 8002f14:	0800acbc 	.word	0x0800acbc

08002f18 <getADC_Buffer>:

uint32_t* getADC_Buffer()
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
	return ADC_Buffer;
 8002f1c:	4b02      	ldr	r3, [pc, #8]	; (8002f28 <getADC_Buffer+0x10>)
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000330 	.word	0x20000330

08002f2c <gethalfOfADC_Buffer>:

uint32_t* gethalfOfADC_Buffer()
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
	return halfOfADC_Buffer;
 8002f30:	4b02      	ldr	r3, [pc, #8]	; (8002f3c <gethalfOfADC_Buffer+0x10>)
 8002f32:	681b      	ldr	r3, [r3, #0]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr
 8002f3c:	20000004 	.word	0x20000004

08002f40 <getV>:

float getV(uint8_t channel)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
	return sqrt(((float)RMS[2*channel+1])/(BUFFERSIZE - correctionRMS)) / (VOLTAGESCALE * OVERSAMPLING);
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	3301      	adds	r3, #1
 8002f50:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <getV+0x78>)
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f7fd feab 	bl	8000cb8 <__aeabi_ul2f>
 8002f62:	4604      	mov	r4, r0
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <getV+0x7c>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fe95 	bl	8000c9c <__aeabi_i2f>
 8002f72:	4603      	mov	r3, r0
 8002f74:	4619      	mov	r1, r3
 8002f76:	4620      	mov	r0, r4
 8002f78:	f7fd ff98 	bl	8000eac <__aeabi_fdiv>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd fa52 	bl	8000428 <__aeabi_f2d>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4610      	mov	r0, r2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	f007 fd04 	bl	800a998 <sqrt>
 8002f90:	a307      	add	r3, pc, #28	; (adr r3, 8002fb0 <getV+0x70>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd fbc9 	bl	800072c <__aeabi_ddiv>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	f7fd fd71 	bl	8000a88 <__aeabi_d2f>
 8002fa6:	4603      	mov	r3, r0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}
 8002fb0:	b645a1cb 	.word	0xb645a1cb
 8002fb4:	40447df3 	.word	0x40447df3
 8002fb8:	20002360 	.word	0x20002360
 8002fbc:	20002390 	.word	0x20002390

08002fc0 <getI>:

float getI(uint8_t channel)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
	return sqrt(((float)RMS[2*channel])/(BUFFERSIZE - correctionRMS)) / (CURRENTSCALE * OVERSAMPLING);
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <getI+0x78>)
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd8:	4610      	mov	r0, r2
 8002fda:	4619      	mov	r1, r3
 8002fdc:	f7fd fe6c 	bl	8000cb8 <__aeabi_ul2f>
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <getI+0x7c>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fe56 	bl	8000c9c <__aeabi_i2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4620      	mov	r0, r4
 8002ff6:	f7fd ff59 	bl	8000eac <__aeabi_fdiv>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7fd fa13 	bl	8000428 <__aeabi_f2d>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f007 fcc5 	bl	800a998 <sqrt>
 800300e:	a308      	add	r3, pc, #32	; (adr r3, 8003030 <getI+0x70>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f7fd fb8a 	bl	800072c <__aeabi_ddiv>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4610      	mov	r0, r2
 800301e:	4619      	mov	r1, r3
 8003020:	f7fd fd32 	bl	8000a88 <__aeabi_d2f>
 8003024:	4603      	mov	r3, r0
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bd90      	pop	{r4, r7, pc}
 800302e:	bf00      	nop
 8003030:	f5c28f5c 	.word	0xf5c28f5c
 8003034:	4079bc28 	.word	0x4079bc28
 8003038:	20002360 	.word	0x20002360
 800303c:	20002390 	.word	0x20002390

08003040 <getP>:

float getP(uint8_t channel)
{
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
	return P[channel] /((BUFFERSIZE - correctionRMS) * VOLTAGESCALE * CURRENTSCALE * OVERSAMPLING * OVERSAMPLING);
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	4a26      	ldr	r2, [pc, #152]	; (80030e8 <getP+0xa8>)
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fa0f 	bl	800047c <__aeabi_l2d>
 800305e:	4604      	mov	r4, r0
 8003060:	460d      	mov	r5, r1
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <getP+0xac>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd f9ca 	bl	8000404 <__aeabi_i2d>
 8003070:	a319      	add	r3, pc, #100	; (adr r3, 80030d8 <getP+0x98>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f7fd fa2f 	bl	80004d8 <__aeabi_dmul>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4610      	mov	r0, r2
 8003080:	4619      	mov	r1, r3
 8003082:	a317      	add	r3, pc, #92	; (adr r3, 80030e0 <getP+0xa0>)
 8003084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003088:	f7fd fa26 	bl	80004d8 <__aeabi_dmul>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4610      	mov	r0, r2
 8003092:	4619      	mov	r1, r3
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <getP+0xb0>)
 800309a:	f7fd fa1d 	bl	80004d8 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <getP+0xb0>)
 80030ac:	f7fd fa14 	bl	80004d8 <__aeabi_dmul>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4620      	mov	r0, r4
 80030b6:	4629      	mov	r1, r5
 80030b8:	f7fd fb38 	bl	800072c <__aeabi_ddiv>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	f7fd fce0 	bl	8000a88 <__aeabi_d2f>
 80030c8:	4603      	mov	r3, r0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3708      	adds	r7, #8
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bdb0      	pop	{r4, r5, r7, pc}
 80030d2:	bf00      	nop
 80030d4:	f3af 8000 	nop.w
 80030d8:	b645a1cb 	.word	0xb645a1cb
 80030dc:	40147df3 	.word	0x40147df3
 80030e0:	f5c28f5c 	.word	0xf5c28f5c
 80030e4:	4049bc28 	.word	0x4049bc28
 80030e8:	20002398 	.word	0x20002398
 80030ec:	20002390 	.word	0x20002390
 80030f0:	40200000 	.word	0x40200000

080030f4 <getS>:

float getS(uint8_t channel)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
	return getV(channel) * getI(channel);
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff1d 	bl	8002f40 <getV>
 8003106:	4604      	mov	r4, r0
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ff58 	bl	8002fc0 <getI>
 8003110:	4603      	mov	r3, r0
 8003112:	4619      	mov	r1, r3
 8003114:	4620      	mov	r0, r4
 8003116:	f7fd fe15 	bl	8000d44 <__aeabi_fmul>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bd90      	pop	{r4, r7, pc}

08003124 <getQ>:

float getQ(uint8_t channel)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	float P = getP(channel);
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff85 	bl	8003040 <getP>
 8003136:	6138      	str	r0, [r7, #16]
	float S = getS(channel);
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffda 	bl	80030f4 <getS>
 8003140:	60f8      	str	r0, [r7, #12]
	float Q = sqrt(S*S-P*P);
 8003142:	68f9      	ldr	r1, [r7, #12]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f7fd fdfd 	bl	8000d44 <__aeabi_fmul>
 800314a:	4603      	mov	r3, r0
 800314c:	461c      	mov	r4, r3
 800314e:	6939      	ldr	r1, [r7, #16]
 8003150:	6938      	ldr	r0, [r7, #16]
 8003152:	f7fd fdf7 	bl	8000d44 <__aeabi_fmul>
 8003156:	4603      	mov	r3, r0
 8003158:	4619      	mov	r1, r3
 800315a:	4620      	mov	r0, r4
 800315c:	f7fd fce8 	bl	8000b30 <__aeabi_fsub>
 8003160:	4603      	mov	r3, r0
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f960 	bl	8000428 <__aeabi_f2d>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	f007 fc12 	bl	800a998 <sqrt>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	f7fd fc84 	bl	8000a88 <__aeabi_d2f>
 8003180:	4603      	mov	r3, r0
 8003182:	617b      	str	r3, [r7, #20]
	if(isCapacitive(channel) > 0) Q *=(-1.0f);
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff fd94 	bl	8002cb4 <isCapacitive>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <getQ+0x76>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003198:	617b      	str	r3, [r7, #20]
	return Q;
 800319a:	697b      	ldr	r3, [r7, #20]
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}

080031a4 <getParams>:

void getParams(Params* p, uint8_t channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]

	p->V = getV(channel);
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fec4 	bl	8002f40 <getV>
 80031b8:	4602      	mov	r2, r0
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]
	p->I = getI(channel);
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fefd 	bl	8002fc0 <getI>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	605a      	str	r2, [r3, #4]
	p->P = getP(channel);
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff ff36 	bl	8003040 <getP>
 80031d4:	4602      	mov	r2, r0
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
	p->S = getS(channel);
 80031da:	78fb      	ldrb	r3, [r7, #3]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff89 	bl	80030f4 <getS>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	60da      	str	r2, [r3, #12]
	p->Q = getQ(channel);
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff ff9a 	bl	8003124 <getQ>
 80031f0:	4602      	mov	r2, r0
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	611a      	str	r2, [r3, #16]
	p->fi = calcXOR(channel);
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff fce5 	bl	8002bc8 <calcXOR>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	615a      	str	r2, [r3, #20]
	return;
 8003204:	bf00      	nop
}
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <LL_SYSTICK_IsActiveCounterFlag>:
#include "stm32f1xx_hal.h"

int __io_putchar(int ch);

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr
 800322c:	e000e010 	.word	0xe000e010

08003230 <__io_putchar>:
 */
#include "smart_common.h"
#include "usart.h"

int __io_putchar(int ch)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b0a      	cmp	r3, #10
 800323c:	d102      	bne.n	8003244 <__io_putchar+0x14>
    __io_putchar('\r');
 800323e:	200d      	movs	r0, #13
 8003240:	f7ff fff6 	bl	8003230 <__io_putchar>
  }

  HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8003244:	1d39      	adds	r1, r7, #4
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	2201      	movs	r2, #1
 800324c:	4803      	ldr	r0, [pc, #12]	; (800325c <__io_putchar+0x2c>)
 800324e:	f003 f8f2 	bl	8006436 <HAL_UART_Transmit>
  return 1;
 8003252:	2301      	movs	r3, #1
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	20002598 	.word	0x20002598

08003260 <getCurrentMicros>:

uint32_t getCurrentMicros(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 8003266:	f7ff ffd1 	bl	800320c <LL_SYSTICK_IsActiveCounterFlag>
  uint32_t m = HAL_GetTick();
 800326a:	f000 fb11 	bl	8003890 <HAL_GetTick>
 800326e:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <getCurrentMicros+0x60>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	3301      	adds	r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <getCurrentMicros+0x60>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 8003282:	f7ff ffc3 	bl	800320c <LL_SYSTICK_IsActiveCounterFlag>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d007      	beq.n	800329c <getCurrentMicros+0x3c>
    m = HAL_GetTick();
 800328c:	f000 fb00 	bl	8003890 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 8003292:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <getCurrentMicros+0x60>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80032a2:	fb03 f202 	mul.w	r2, r3, r2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80032ac:	fb03 f101 	mul.w	r1, r3, r1
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b6:	4413      	add	r3, r2
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	e000e010 	.word	0xe000e010

080032c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032ca:	4b15      	ldr	r3, [pc, #84]	; (8003320 <HAL_MspInit+0x5c>)
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	4a14      	ldr	r2, [pc, #80]	; (8003320 <HAL_MspInit+0x5c>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	6193      	str	r3, [r2, #24]
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <HAL_MspInit+0x5c>)
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032e2:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <HAL_MspInit+0x5c>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <HAL_MspInit+0x5c>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ec:	61d3      	str	r3, [r2, #28]
 80032ee:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <HAL_MspInit+0x5c>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_MspInit+0x60>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <HAL_MspInit+0x60>)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr
 8003320:	40021000 	.word	0x40021000
 8003324:	40010000 	.word	0x40010000

08003328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800332c:	e7fe      	b.n	800332c <NMI_Handler+0x4>

0800332e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003332:	e7fe      	b.n	8003332 <HardFault_Handler+0x4>

08003334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003338:	e7fe      	b.n	8003338 <MemManage_Handler+0x4>

0800333a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800333e:	e7fe      	b.n	800333e <BusFault_Handler+0x4>

08003340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003344:	e7fe      	b.n	8003344 <UsageFault_Handler+0x4>

08003346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003352:	b480      	push	{r7}
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	bc80      	pop	{r7}
 800335c:	4770      	bx	lr

0800335e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003362:	bf00      	nop
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336e:	f000 fa7d 	bl	800386c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <DMA1_Channel1_IRQHandler+0x10>)
 800337e:	f001 fb41 	bl	8004a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000264 	.word	0x20000264

0800338c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <DMA1_Channel5_IRQHandler+0x10>)
 8003392:	f001 fb37 	bl	8004a04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200025dc 	.word	0x200025dc

080033a0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80033a4:	4803      	ldr	r0, [pc, #12]	; (80033b4 <ADC1_2_IRQHandler+0x14>)
 80033a6:	f000 fc27 	bl	8003bf8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80033aa:	4803      	ldr	r0, [pc, #12]	; (80033b8 <ADC1_2_IRQHandler+0x18>)
 80033ac:	f000 fc24 	bl	8003bf8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	20000204 	.word	0x20000204
 80033b8:	20000234 	.word	0x20000234

080033bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <USART1_IRQHandler+0x10>)
 80033c2:	f003 f919 	bl	80065f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20002598 	.word	0x20002598

080033d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80033d8:	f001 fde4 	bl	8004fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
	return 1;
 80033e4:	2301      	movs	r3, #1
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr

080033ee <_kill>:

int _kill(int pid, int sig)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80033f8:	f003 fe26 	bl	8007048 <__errno>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2216      	movs	r2, #22
 8003400:	601a      	str	r2, [r3, #0]
	return -1;
 8003402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <_exit>:

void _exit (int status)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003416:	f04f 31ff 	mov.w	r1, #4294967295
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffe7 	bl	80033ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8003420:	e7fe      	b.n	8003420 <_exit+0x12>

08003422 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e00a      	b.n	800344a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003434:	f3af 8000 	nop.w
 8003438:	4601      	mov	r1, r0
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	60ba      	str	r2, [r7, #8]
 8003440:	b2ca      	uxtb	r2, r1
 8003442:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	3301      	adds	r3, #1
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	429a      	cmp	r2, r3
 8003450:	dbf0      	blt.n	8003434 <_read+0x12>
	}

return len;
 8003452:	687b      	ldr	r3, [r7, #4]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3718      	adds	r7, #24
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e009      	b.n	8003482 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	1c5a      	adds	r2, r3, #1
 8003472:	60ba      	str	r2, [r7, #8]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff feda 	bl	8003230 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3301      	adds	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	429a      	cmp	r2, r3
 8003488:	dbf1      	blt.n	800346e <_write+0x12>
	}
	return len;
 800348a:	687b      	ldr	r3, [r7, #4]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3718      	adds	r7, #24
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <_close>:

int _close(int file)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	return -1;
 800349c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034ba:	605a      	str	r2, [r3, #4]
	return 0;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <_isatty>:

int _isatty(int file)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	return 1;
 80034d0:	2301      	movs	r3, #1
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr

080034dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
	return 0;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr

080034f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034fc:	4a14      	ldr	r2, [pc, #80]	; (8003550 <_sbrk+0x5c>)
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <_sbrk+0x60>)
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003508:	4b13      	ldr	r3, [pc, #76]	; (8003558 <_sbrk+0x64>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d102      	bne.n	8003516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <_sbrk+0x64>)
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <_sbrk+0x68>)
 8003514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <_sbrk+0x64>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d207      	bcs.n	8003534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003524:	f003 fd90 	bl	8007048 <__errno>
 8003528:	4603      	mov	r3, r0
 800352a:	220c      	movs	r2, #12
 800352c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800352e:	f04f 33ff 	mov.w	r3, #4294967295
 8003532:	e009      	b.n	8003548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <_sbrk+0x64>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <_sbrk+0x64>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4413      	add	r3, r2
 8003542:	4a05      	ldr	r2, [pc, #20]	; (8003558 <_sbrk+0x64>)
 8003544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003546:	68fb      	ldr	r3, [r7, #12]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	20005000 	.word	0x20005000
 8003554:	00000400 	.word	0x00000400
 8003558:	20002570 	.word	0x20002570
 800355c:	20002638 	.word	0x20002638

08003560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003570:	4b11      	ldr	r3, [pc, #68]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 8003572:	4a12      	ldr	r2, [pc, #72]	; (80035bc <MX_USART1_UART_Init+0x50>)
 8003574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 8003578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800357c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800357e:	4b0e      	ldr	r3, [pc, #56]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003584:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 8003586:	2200      	movs	r2, #0
 8003588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800358a:	4b0b      	ldr	r3, [pc, #44]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 800358c:	2200      	movs	r2, #0
 800358e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003590:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 8003592:	220c      	movs	r2, #12
 8003594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 8003598:	2200      	movs	r2, #0
 800359a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80035a2:	4805      	ldr	r0, [pc, #20]	; (80035b8 <MX_USART1_UART_Init+0x4c>)
 80035a4:	f002 fefa 	bl	800639c <HAL_UART_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80035ae:	f7fe fede 	bl	800236e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20002598 	.word	0x20002598
 80035bc:	40013800 	.word	0x40013800

080035c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a2f      	ldr	r2, [pc, #188]	; (8003698 <HAL_UART_MspInit+0xd8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d157      	bne.n	8003690 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035e0:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_UART_MspInit+0xdc>)
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	4a2d      	ldr	r2, [pc, #180]	; (800369c <HAL_UART_MspInit+0xdc>)
 80035e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ea:	6193      	str	r3, [r2, #24]
 80035ec:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_UART_MspInit+0xdc>)
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f8:	4b28      	ldr	r3, [pc, #160]	; (800369c <HAL_UART_MspInit+0xdc>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	4a27      	ldr	r2, [pc, #156]	; (800369c <HAL_UART_MspInit+0xdc>)
 80035fe:	f043 0304 	orr.w	r3, r3, #4
 8003602:	6193      	str	r3, [r2, #24]
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <HAL_UART_MspInit+0xdc>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	60bb      	str	r3, [r7, #8]
 800360e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003614:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800361a:	2303      	movs	r3, #3
 800361c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361e:	f107 0310 	add.w	r3, r7, #16
 8003622:	4619      	mov	r1, r3
 8003624:	481e      	ldr	r0, [pc, #120]	; (80036a0 <HAL_UART_MspInit+0xe0>)
 8003626:	f001 fb21 	bl	8004c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800362a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f107 0310 	add.w	r3, r7, #16
 800363c:	4619      	mov	r1, r3
 800363e:	4818      	ldr	r0, [pc, #96]	; (80036a0 <HAL_UART_MspInit+0xe0>)
 8003640:	f001 fb14 	bl	8004c6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 8003646:	4a18      	ldr	r2, [pc, #96]	; (80036a8 <HAL_UART_MspInit+0xe8>)
 8003648:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364a:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 800364c:	2200      	movs	r2, #0
 800364e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003650:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 8003658:	2280      	movs	r2, #128	; 0x80
 800365a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 800365e:	2200      	movs	r2, #0
 8003660:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 8003664:	2200      	movs	r2, #0
 8003666:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 800366a:	2200      	movs	r2, #0
 800366c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 8003670:	2200      	movs	r2, #0
 8003672:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003674:	480b      	ldr	r0, [pc, #44]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 8003676:	f001 f85b 	bl	8004730 <HAL_DMA_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003680:	f7fe fe75 	bl	800236e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 8003688:	639a      	str	r2, [r3, #56]	; 0x38
 800368a:	4a06      	ldr	r2, [pc, #24]	; (80036a4 <HAL_UART_MspInit+0xe4>)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003690:	bf00      	nop
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40013800 	.word	0x40013800
 800369c:	40021000 	.word	0x40021000
 80036a0:	40010800 	.word	0x40010800
 80036a4:	200025dc 	.word	0x200025dc
 80036a8:	40020058 	.word	0x40020058

080036ac <UART_Start>:
  }
}

/* USER CODE BEGIN 1 */
void UART_Start()
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, received, 16);
 80036b0:	2210      	movs	r2, #16
 80036b2:	4903      	ldr	r1, [pc, #12]	; (80036c0 <UART_Start+0x14>)
 80036b4:	4803      	ldr	r0, [pc, #12]	; (80036c4 <UART_Start+0x18>)
 80036b6:	f002 ff50 	bl	800655a <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20002574 	.word	0x20002574
 80036c4:	20002598 	.word	0x20002598

080036c8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	460b      	mov	r3, r1
 80036d2:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	; (8003704 <HAL_UARTEx_RxEventCallback+0x3c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d10e      	bne.n	80036fc <HAL_UARTEx_RxEventCallback+0x34>
	{
	    memcpy(command,received,Size);
 80036de:	887b      	ldrh	r3, [r7, #2]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4909      	ldr	r1, [pc, #36]	; (8003708 <HAL_UARTEx_RxEventCallback+0x40>)
 80036e4:	4809      	ldr	r0, [pc, #36]	; (800370c <HAL_UARTEx_RxEventCallback+0x44>)
 80036e6:	f003 fce9 	bl	80070bc <memcpy>
		command_size = Size;
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b08      	ldr	r3, [pc, #32]	; (8003710 <HAL_UARTEx_RxEventCallback+0x48>)
 80036f0:	701a      	strb	r2, [r3, #0]
	    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, received, 16);
 80036f2:	2210      	movs	r2, #16
 80036f4:	4904      	ldr	r1, [pc, #16]	; (8003708 <HAL_UARTEx_RxEventCallback+0x40>)
 80036f6:	4807      	ldr	r0, [pc, #28]	; (8003714 <HAL_UARTEx_RxEventCallback+0x4c>)
 80036f8:	f002 ff2f 	bl	800655a <HAL_UARTEx_ReceiveToIdle_DMA>
	    //printf("%d:%s\n",Size,received);
	}
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40013800 	.word	0x40013800
 8003708:	20002574 	.word	0x20002574
 800370c:	20002584 	.word	0x20002584
 8003710:	20002594 	.word	0x20002594
 8003714:	20002598 	.word	0x20002598

08003718 <handleRecivedData>:

void handleRecivedData()
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
	unsigned int commandNo, arg = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	603b      	str	r3, [r7, #0]
	if(command_size > 0)
 8003722:	4b18      	ldr	r3, [pc, #96]	; (8003784 <handleRecivedData+0x6c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d029      	beq.n	800377e <handleRecivedData+0x66>
	{
		if(command[0] == '@' && command[4] == '#')
 800372a:	4b17      	ldr	r3, [pc, #92]	; (8003788 <handleRecivedData+0x70>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d120      	bne.n	8003774 <handleRecivedData+0x5c>
 8003732:	4b15      	ldr	r3, [pc, #84]	; (8003788 <handleRecivedData+0x70>)
 8003734:	791b      	ldrb	r3, [r3, #4]
 8003736:	2b23      	cmp	r3, #35	; 0x23
 8003738:	d11c      	bne.n	8003774 <handleRecivedData+0x5c>
		{
			if(command_size == 10) sscanf((char*)command,"@%u#%u#",&commandNo,&arg);
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <handleRecivedData+0x6c>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b0a      	cmp	r3, #10
 8003740:	d106      	bne.n	8003750 <handleRecivedData+0x38>
 8003742:	463b      	mov	r3, r7
 8003744:	1d3a      	adds	r2, r7, #4
 8003746:	4911      	ldr	r1, [pc, #68]	; (800378c <handleRecivedData+0x74>)
 8003748:	480f      	ldr	r0, [pc, #60]	; (8003788 <handleRecivedData+0x70>)
 800374a:	f004 fc59 	bl	8008000 <siscanf>
 800374e:	e009      	b.n	8003764 <handleRecivedData+0x4c>
			else if(command_size == 6) sscanf((char*)command,"@%u#",&commandNo);
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <handleRecivedData+0x6c>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b06      	cmp	r3, #6
 8003756:	d111      	bne.n	800377c <handleRecivedData+0x64>
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	461a      	mov	r2, r3
 800375c:	490c      	ldr	r1, [pc, #48]	; (8003790 <handleRecivedData+0x78>)
 800375e:	480a      	ldr	r0, [pc, #40]	; (8003788 <handleRecivedData+0x70>)
 8003760:	f004 fc4e 	bl	8008000 <siscanf>
			else return;

			execCommand((uint8_t)commandNo,(uint8_t)arg);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	4611      	mov	r1, r2
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fb6c 	bl	8002e4c <execCommand>
		}
		command_size = 0;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <handleRecivedData+0x6c>)
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
 800377a:	e000      	b.n	800377e <handleRecivedData+0x66>
			else return;
 800377c:	bf00      	nop
	}
}
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20002594 	.word	0x20002594
 8003788:	20002584 	.word	0x20002584
 800378c:	0800acc8 	.word	0x0800acc8
 8003790:	0800acd0 	.word	0x0800acd0

08003794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003794:	480c      	ldr	r0, [pc, #48]	; (80037c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003796:	490d      	ldr	r1, [pc, #52]	; (80037cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003798:	4a0d      	ldr	r2, [pc, #52]	; (80037d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800379a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800379c:	e002      	b.n	80037a4 <LoopCopyDataInit>

0800379e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800379e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037a2:	3304      	adds	r3, #4

080037a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037a8:	d3f9      	bcc.n	800379e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037ac:	4c0a      	ldr	r4, [pc, #40]	; (80037d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037b0:	e001      	b.n	80037b6 <LoopFillZerobss>

080037b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037b4:	3204      	adds	r2, #4

080037b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037b8:	d3fb      	bcc.n	80037b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037ba:	f7ff fed1 	bl	8003560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037be:	f003 fc49 	bl	8007054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037c2:	f7fe fcd5 	bl	8002170 <main>
  bx lr
 80037c6:	4770      	bx	lr
  ldr r0, =_sdata
 80037c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037cc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80037d0:	0800b118 	.word	0x0800b118
  ldr r2, =_sbss
 80037d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80037d8:	20002634 	.word	0x20002634

080037dc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037dc:	e7fe      	b.n	80037dc <CAN1_RX1_IRQHandler>
	...

080037e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <HAL_Init+0x28>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a07      	ldr	r2, [pc, #28]	; (8003808 <HAL_Init+0x28>)
 80037ea:	f043 0310 	orr.w	r3, r3, #16
 80037ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f0:	2003      	movs	r0, #3
 80037f2:	f000 ff5b 	bl	80046ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037f6:	2000      	movs	r0, #0
 80037f8:	f000 f808 	bl	800380c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037fc:	f7ff fd62 	bl	80032c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40022000 	.word	0x40022000

0800380c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_InitTick+0x54>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_InitTick+0x58>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003822:	fbb3 f3f1 	udiv	r3, r3, r1
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	4618      	mov	r0, r3
 800382c:	f000 ff73 	bl	8004716 <HAL_SYSTICK_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00e      	b.n	8003858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d80a      	bhi.n	8003856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003840:	2200      	movs	r2, #0
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	f000 ff3b 	bl	80046c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800384c:	4a06      	ldr	r2, [pc, #24]	; (8003868 <HAL_InitTick+0x5c>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	20000008 	.word	0x20000008
 8003864:	20000010 	.word	0x20000010
 8003868:	2000000c 	.word	0x2000000c

0800386c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_IncTick+0x1c>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_IncTick+0x20>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4413      	add	r3, r2
 800387c:	4a03      	ldr	r2, [pc, #12]	; (800388c <HAL_IncTick+0x20>)
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr
 8003888:	20000010 	.word	0x20000010
 800388c:	20002620 	.word	0x20002620

08003890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return uwTick;
 8003894:	4b02      	ldr	r3, [pc, #8]	; (80038a0 <HAL_GetTick+0x10>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	20002620 	.word	0x20002620

080038a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038ac:	f7ff fff0 	bl	8003890 <HAL_GetTick>
 80038b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038bc:	d005      	beq.n	80038ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038be:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <HAL_Delay+0x44>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	461a      	mov	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ca:	bf00      	nop
 80038cc:	f7ff ffe0 	bl	8003890 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d8f7      	bhi.n	80038cc <HAL_Delay+0x28>
  {
  }
}
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000010 	.word	0x20000010

080038ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0be      	b.n	8003a8c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d109      	bne.n	8003930 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd fcbe 	bl	80012ac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fb89 	bl	8004048 <ADC_ConversionStop_Disable>
 8003936:	4603      	mov	r3, r0
 8003938:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	f003 0310 	and.w	r3, r3, #16
 8003942:	2b00      	cmp	r3, #0
 8003944:	f040 8099 	bne.w	8003a7a <HAL_ADC_Init+0x18e>
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f040 8095 	bne.w	8003a7a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003958:	f023 0302 	bic.w	r3, r3, #2
 800395c:	f043 0202 	orr.w	r2, r3, #2
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800396c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	7b1b      	ldrb	r3, [r3, #12]
 8003972:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003974:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4313      	orrs	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003984:	d003      	beq.n	800398e <HAL_ADC_Init+0xa2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d102      	bne.n	8003994 <HAL_ADC_Init+0xa8>
 800398e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003992:	e000      	b.n	8003996 <HAL_ADC_Init+0xaa>
 8003994:	2300      	movs	r3, #0
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	7d1b      	ldrb	r3, [r3, #20]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d119      	bne.n	80039d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	7b1b      	ldrb	r3, [r3, #12]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	035a      	lsls	r2, r3, #13
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	e00b      	b.n	80039d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <HAL_ADC_Init+0x1a8>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a08:	d003      	beq.n	8003a12 <HAL_ADC_Init+0x126>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d104      	bne.n	8003a1c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	051b      	lsls	r3, r3, #20
 8003a1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	4b18      	ldr	r3, [pc, #96]	; (8003a98 <HAL_ADC_Init+0x1ac>)
 8003a38:	4013      	ands	r3, r2
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d10b      	bne.n	8003a58 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	f043 0201 	orr.w	r2, r3, #1
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a56:	e018      	b.n	8003a8a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5c:	f023 0312 	bic.w	r3, r3, #18
 8003a60:	f043 0210 	orr.w	r2, r3, #16
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	f043 0201 	orr.w	r2, r3, #1
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003a78:	e007      	b.n	8003a8a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	f043 0210 	orr.w	r2, r3, #16
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	ffe1f7fd 	.word	0xffe1f7fd
 8003a98:	ff1f0efe 	.word	0xff1f0efe

08003a9c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_ADC_Start+0x1a>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e098      	b.n	8003be8 <HAL_ADC_Start+0x14c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa68 	bl	8003f94 <ADC_Enable>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f040 8087 	bne.w	8003bde <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad8:	f023 0301 	bic.w	r3, r3, #1
 8003adc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a41      	ldr	r2, [pc, #260]	; (8003bf0 <HAL_ADC_Start+0x154>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d105      	bne.n	8003afa <HAL_ADC_Start+0x5e>
 8003aee:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <HAL_ADC_Start+0x158>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d115      	bne.n	8003b26 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d026      	beq.n	8003b62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b24:	e01d      	b.n	8003b62 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <HAL_ADC_Start+0x158>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_ADC_Start+0xaa>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a2b      	ldr	r2, [pc, #172]	; (8003bf0 <HAL_ADC_Start+0x154>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d10d      	bne.n	8003b62 <HAL_ADC_Start+0xc6>
 8003b46:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_ADC_Start+0x158>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d007      	beq.n	8003b62 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f023 0206 	bic.w	r2, r3, #6
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b7a:	e002      	b.n	8003b82 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f06f 0202 	mvn.w	r2, #2
 8003b92:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003b9e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003ba2:	d113      	bne.n	8003bcc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003ba8:	4a11      	ldr	r2, [pc, #68]	; (8003bf0 <HAL_ADC_Start+0x154>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d105      	bne.n	8003bba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <HAL_ADC_Start+0x158>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d108      	bne.n	8003bcc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003bc8:	609a      	str	r2, [r3, #8]
 8003bca:	e00c      	b.n	8003be6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	e003      	b.n	8003be6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40012800 	.word	0x40012800
 8003bf4:	40012400 	.word	0x40012400

08003bf8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d140      	bne.n	8003c90 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d139      	bne.n	8003c90 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003c3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003c42:	d11d      	bne.n	8003c80 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d119      	bne.n	8003c80 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0220 	bic.w	r2, r2, #32
 8003c5a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d105      	bne.n	8003c80 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c78:	f043 0201 	orr.w	r2, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd fc30 	bl	80014e6 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0212 	mvn.w	r2, #18
 8003c8e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b80      	cmp	r3, #128	; 0x80
 8003c9c:	d14f      	bne.n	8003d3e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d148      	bne.n	8003d3e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003cce:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003cd2:	d012      	beq.n	8003cfa <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d125      	bne.n	8003d2e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003cec:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003cf0:	d11d      	bne.n	8003d2e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d119      	bne.n	8003d2e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d08:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d105      	bne.n	8003d2e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	f043 0201 	orr.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fb94 	bl	800445c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f06f 020c 	mvn.w	r2, #12
 8003d3c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d114      	bne.n	8003d76 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d10d      	bne.n	8003d76 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f809 	bl	8003d7e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f06f 0201 	mvn.w	r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bc80      	pop	{r7}
 8003d8e:	4770      	bx	lr

08003d90 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bc80      	pop	{r7}
 8003da0:	4770      	bx	lr
	...

08003da4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x20>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e0dc      	b.n	8003f7e <HAL_ADC_ConfigChannel+0x1da>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d81c      	bhi.n	8003e0e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	3b05      	subs	r3, #5
 8003de6:	221f      	movs	r2, #31
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43db      	mvns	r3, r3
 8003dee:	4019      	ands	r1, r3
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	3b05      	subs	r3, #5
 8003e00:	fa00 f203 	lsl.w	r2, r0, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	635a      	str	r2, [r3, #52]	; 0x34
 8003e0c:	e03c      	b.n	8003e88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d81c      	bhi.n	8003e50 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	3b23      	subs	r3, #35	; 0x23
 8003e28:	221f      	movs	r2, #31
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	4019      	ands	r1, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	3b23      	subs	r3, #35	; 0x23
 8003e42:	fa00 f203 	lsl.w	r2, r0, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8003e4e:	e01b      	b.n	8003e88 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	3b41      	subs	r3, #65	; 0x41
 8003e62:	221f      	movs	r2, #31
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	4019      	ands	r1, r3
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	3b41      	subs	r3, #65	; 0x41
 8003e7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	d91c      	bls.n	8003eca <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68d9      	ldr	r1, [r3, #12]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3b1e      	subs	r3, #30
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	4019      	ands	r1, r3
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6898      	ldr	r0, [r3, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	4413      	add	r3, r2
 8003eba:	3b1e      	subs	r3, #30
 8003ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	60da      	str	r2, [r3, #12]
 8003ec8:	e019      	b.n	8003efe <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6919      	ldr	r1, [r3, #16]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	2207      	movs	r2, #7
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	4019      	ands	r1, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	6898      	ldr	r0, [r3, #8]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	4413      	add	r3, r2
 8003ef2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b10      	cmp	r3, #16
 8003f04:	d003      	beq.n	8003f0e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003f0a:	2b11      	cmp	r3, #17
 8003f0c:	d132      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_ADC_ConfigChannel+0x1e4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d125      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d126      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003f34:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b10      	cmp	r3, #16
 8003f3c:	d11a      	bne.n	8003f74 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f3e:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <HAL_ADC_ConfigChannel+0x1e8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <HAL_ADC_ConfigChannel+0x1ec>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	0c9a      	lsrs	r2, r3, #18
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f54:	e002      	b.n	8003f5c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f9      	bne.n	8003f56 <HAL_ADC_ConfigChannel+0x1b2>
 8003f62:	e007      	b.n	8003f74 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	40012400 	.word	0x40012400
 8003f8c:	20000008 	.word	0x20000008
 8003f90:	431bde83 	.word	0x431bde83

08003f94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d040      	beq.n	8004034 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 0201 	orr.w	r2, r2, #1
 8003fc0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <ADC_Enable+0xac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1f      	ldr	r2, [pc, #124]	; (8004044 <ADC_Enable+0xb0>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	0c9b      	lsrs	r3, r3, #18
 8003fce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fd0:	e002      	b.n	8003fd8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f9      	bne.n	8003fd2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003fde:	f7ff fc57 	bl	8003890 <HAL_GetTick>
 8003fe2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003fe4:	e01f      	b.n	8004026 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fe6:	f7ff fc53 	bl	8003890 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d918      	bls.n	8004026 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d011      	beq.n	8004026 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	f043 0210 	orr.w	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e007      	b.n	8004036 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b01      	cmp	r3, #1
 8004032:	d1d8      	bne.n	8003fe6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000008 	.word	0x20000008
 8004044:	431bde83 	.word	0x431bde83

08004048 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d12e      	bne.n	80040c0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0201 	bic.w	r2, r2, #1
 8004070:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004072:	f7ff fc0d 	bl	8003890 <HAL_GetTick>
 8004076:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004078:	e01b      	b.n	80040b2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800407a:	f7ff fc09 	bl	8003890 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d914      	bls.n	80040b2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b01      	cmp	r3, #1
 8004094:	d10d      	bne.n	80040b2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	f043 0210 	orr.w	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a6:	f043 0201 	orr.w	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e007      	b.n	80040c2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d0dc      	beq.n	800407a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d127      	bne.n	8004134 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80040fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80040fe:	d115      	bne.n	800412c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004104:	2b00      	cmp	r3, #0
 8004106:	d111      	bne.n	800412c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f043 0201 	orr.w	r2, r3, #1
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7fd f9da 	bl	80014e6 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004132:	e004      	b.n	800413e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	4798      	blx	r3
}
 800413e:	bf00      	nop
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f7fd f9b5 	bl	80014c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800415a:	bf00      	nop
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004180:	f043 0204 	orr.w	r2, r3, #4
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff fe01 	bl	8003d90 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <HAL_ADCEx_Calibration_Start+0x1e>
 80041b2:	2302      	movs	r3, #2
 80041b4:	e095      	b.n	80042e2 <HAL_ADCEx_Calibration_Start+0x14a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7ff ff42 	bl	8004048 <ADC_ConversionStop_Disable>
 80041c4:	4603      	mov	r3, r0
 80041c6:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 8084 	bne.w	80042d8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80041d8:	f023 0302 	bic.w	r3, r3, #2
 80041dc:	f043 0202 	orr.w	r2, r3, #2
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80041e4:	4b41      	ldr	r3, [pc, #260]	; (80042ec <HAL_ADCEx_Calibration_Start+0x154>)
 80041e6:	681c      	ldr	r4, [r3, #0]
 80041e8:	2002      	movs	r0, #2
 80041ea:	f002 f817 	bl	800621c <HAL_RCCEx_GetPeriphCLKFreq>
 80041ee:	4603      	mov	r3, r0
 80041f0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80041f4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80041f6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80041f8:	e002      	b.n	8004200 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f9      	bne.n	80041fa <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f7ff fec4 	bl	8003f94 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f042 0208 	orr.w	r2, r2, #8
 800421a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800421c:	f7ff fb38 	bl	8003890 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004222:	e01b      	b.n	800425c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004224:	f7ff fb34 	bl	8003890 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b0a      	cmp	r3, #10
 8004230:	d914      	bls.n	800425c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00d      	beq.n	800425c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004244:	f023 0312 	bic.w	r3, r3, #18
 8004248:	f043 0210 	orr.w	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e042      	b.n	80042e2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1dc      	bne.n	8004224 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f042 0204 	orr.w	r2, r2, #4
 8004278:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800427a:	f7ff fb09 	bl	8003890 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004280:	e01b      	b.n	80042ba <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004282:	f7ff fb05 	bl	8003890 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b0a      	cmp	r3, #10
 800428e:	d914      	bls.n	80042ba <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00d      	beq.n	80042ba <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a2:	f023 0312 	bic.w	r3, r3, #18
 80042a6:	f043 0210 	orr.w	r2, r3, #16
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e013      	b.n	80042e2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1dc      	bne.n	8004282 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	f023 0303 	bic.w	r3, r3, #3
 80042d0:	f043 0201 	orr.w	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd90      	pop	{r4, r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000008 	.word	0x20000008

080042f0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b092      	sub	sp, #72	; 0x48
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 8004302:	f107 0314 	add.w	r3, r7, #20
 8004306:	2230      	movs	r2, #48	; 0x30
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f002 fee4 	bl	80070d8 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800431a:	2302      	movs	r3, #2
 800431c:	e08f      	b.n	800443e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004326:	4b48      	ldr	r3, [pc, #288]	; (8004448 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8004328:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004332:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004336:	d00b      	beq.n	8004350 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e076      	b.n	800443e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f7ff fe1f 	bl	8003f94 <ADC_Enable>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 800435c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004360:	2b00      	cmp	r3, #0
 8004362:	d107      	bne.n	8004374 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8004364:	f107 0314 	add.w	r3, r7, #20
 8004368:	4618      	mov	r0, r3
 800436a:	f7ff fe13 	bl	8003f94 <ADC_Enable>
 800436e:	4603      	mov	r3, r0
 8004370:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004378:	2b00      	cmp	r3, #0
 800437a:	d15a      	bne.n	8004432 <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8004382:	4013      	ands	r3, r2
 8004384:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004396:	2b00      	cmp	r3, #0
 8004398:	d007      	beq.n	80043aa <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4a24      	ldr	r2, [pc, #144]	; (8004450 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 80043be:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	4a23      	ldr	r2, [pc, #140]	; (8004454 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 80043c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0202 	mvn.w	r2, #2
 80043d8:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e8:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a18      	ldr	r0, [r3, #32]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	334c      	adds	r3, #76	; 0x4c
 80043f4:	4619      	mov	r1, r3
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f000 f9f3 	bl	80047e4 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004408:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800440c:	d108      	bne.n	8004420 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800441c:	609a      	str	r2, [r3, #8]
 800441e:	e00c      	b.n	800443a <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	689a      	ldr	r2, [r3, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	e003      	b.n	800443a <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800443a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800443e:	4618      	mov	r0, r3
 8004440:	3748      	adds	r7, #72	; 0x48
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40012800 	.word	0x40012800
 800444c:	ffeffcfe 	.word	0xffeffcfe
 8004450:	080040cb 	.word	0x080040cb
 8004454:	08004147 	.word	0x08004147
 8004458:	08004163 	.word	0x08004163

0800445c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr
	...

08004470 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b090      	sub	sp, #64	; 0x40
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8004480:	f107 030c 	add.w	r3, r7, #12
 8004484:	2230      	movs	r2, #48	; 0x30
 8004486:	2100      	movs	r1, #0
 8004488:	4618      	mov	r0, r3
 800448a:	f002 fe25 	bl	80070d8 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8004498:	2302      	movs	r3, #2
 800449a:	e032      	b.n	8004502 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044a4:	4b19      	ldr	r3, [pc, #100]	; (800450c <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 80044a6:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d016      	beq.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d010      	beq.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d10b      	bne.n	80044e4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	e008      	b.n	80044f6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80044fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8004502:	4618      	mov	r0, r3
 8004504:	3740      	adds	r7, #64	; 0x40
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40012800 	.word	0x40012800
 8004510:	40012400 	.word	0x40012400

08004514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004530:	4013      	ands	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800453c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004546:	4a04      	ldr	r2, [pc, #16]	; (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	60d3      	str	r3, [r2, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <__NVIC_GetPriorityGrouping+0x18>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 0307 	and.w	r3, r3, #7
}
 800456a:	4618      	mov	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	db0b      	blt.n	80045a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	4906      	ldr	r1, [pc, #24]	; (80045ac <__NVIC_EnableIRQ+0x34>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2001      	movs	r0, #1
 800459a:	fa00 f202 	lsl.w	r2, r0, r2
 800459e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr
 80045ac:	e000e100 	.word	0xe000e100

080045b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	6039      	str	r1, [r7, #0]
 80045ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	db0a      	blt.n	80045da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	b2da      	uxtb	r2, r3
 80045c8:	490c      	ldr	r1, [pc, #48]	; (80045fc <__NVIC_SetPriority+0x4c>)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	0112      	lsls	r2, r2, #4
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	440b      	add	r3, r1
 80045d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045d8:	e00a      	b.n	80045f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	b2da      	uxtb	r2, r3
 80045de:	4908      	ldr	r1, [pc, #32]	; (8004600 <__NVIC_SetPriority+0x50>)
 80045e0:	79fb      	ldrb	r3, [r7, #7]
 80045e2:	f003 030f 	and.w	r3, r3, #15
 80045e6:	3b04      	subs	r3, #4
 80045e8:	0112      	lsls	r2, r2, #4
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	440b      	add	r3, r1
 80045ee:	761a      	strb	r2, [r3, #24]
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000e100 	.word	0xe000e100
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	; 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f1c3 0307 	rsb	r3, r3, #7
 800461e:	2b04      	cmp	r3, #4
 8004620:	bf28      	it	cs
 8004622:	2304      	movcs	r3, #4
 8004624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3304      	adds	r3, #4
 800462a:	2b06      	cmp	r3, #6
 800462c:	d902      	bls.n	8004634 <NVIC_EncodePriority+0x30>
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	3b03      	subs	r3, #3
 8004632:	e000      	b.n	8004636 <NVIC_EncodePriority+0x32>
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	f04f 32ff 	mov.w	r2, #4294967295
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43da      	mvns	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	401a      	ands	r2, r3
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800464c:	f04f 31ff 	mov.w	r1, #4294967295
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	fa01 f303 	lsl.w	r3, r1, r3
 8004656:	43d9      	mvns	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800465c:	4313      	orrs	r3, r2
         );
}
 800465e:	4618      	mov	r0, r3
 8004660:	3724      	adds	r7, #36	; 0x24
 8004662:	46bd      	mov	sp, r7
 8004664:	bc80      	pop	{r7}
 8004666:	4770      	bx	lr

08004668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3b01      	subs	r3, #1
 8004674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004678:	d301      	bcc.n	800467e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800467a:	2301      	movs	r3, #1
 800467c:	e00f      	b.n	800469e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800467e:	4a0a      	ldr	r2, [pc, #40]	; (80046a8 <SysTick_Config+0x40>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004686:	210f      	movs	r1, #15
 8004688:	f04f 30ff 	mov.w	r0, #4294967295
 800468c:	f7ff ff90 	bl	80045b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <SysTick_Config+0x40>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004696:	4b04      	ldr	r3, [pc, #16]	; (80046a8 <SysTick_Config+0x40>)
 8004698:	2207      	movs	r2, #7
 800469a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	e000e010 	.word	0xe000e010

080046ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff ff2d 	bl	8004514 <__NVIC_SetPriorityGrouping>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	4603      	mov	r3, r0
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046d4:	f7ff ff42 	bl	800455c <__NVIC_GetPriorityGrouping>
 80046d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	6978      	ldr	r0, [r7, #20]
 80046e0:	f7ff ff90 	bl	8004604 <NVIC_EncodePriority>
 80046e4:	4602      	mov	r2, r0
 80046e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff5f 	bl	80045b0 <__NVIC_SetPriority>
}
 80046f2:	bf00      	nop
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	4603      	mov	r3, r0
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004708:	4618      	mov	r0, r3
 800470a:	f7ff ff35 	bl	8004578 <__NVIC_EnableIRQ>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7ff ffa2 	bl	8004668 <SysTick_Config>
 8004724:	4603      	mov	r3, r0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e043      	b.n	80047ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <HAL_DMA_Init+0xa8>)
 800474e:	4413      	add	r3, r2
 8004750:	4a22      	ldr	r2, [pc, #136]	; (80047dc <HAL_DMA_Init+0xac>)
 8004752:	fba2 2303 	umull	r2, r3, r2, r3
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	009a      	lsls	r2, r3, #2
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <HAL_DMA_Init+0xb0>)
 8004762:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800477a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800477e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	bffdfff8 	.word	0xbffdfff8
 80047dc:	cccccccd 	.word	0xcccccccd
 80047e0:	40020000 	.word	0x40020000

080047e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_DMA_Start_IT+0x20>
 8004800:	2302      	movs	r3, #2
 8004802:	e04a      	b.n	800489a <HAL_DMA_Start_IT+0xb6>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004812:	2b01      	cmp	r3, #1
 8004814:	d13a      	bne.n	800488c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f022 0201 	bic.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f9e8 	bl	8004c10 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 020e 	orr.w	r2, r2, #14
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e00f      	b.n	800487a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 0204 	bic.w	r2, r2, #4
 8004868:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 020a 	orr.w	r2, r2, #10
 8004878:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e005      	b.n	8004898 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004898:	7dfb      	ldrb	r3, [r7, #23]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b085      	sub	sp, #20
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d008      	beq.n	80048ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2204      	movs	r2, #4
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e020      	b.n	800490c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 020e 	bic.w	r2, r2, #14
 80048d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0201 	bic.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	2101      	movs	r1, #1
 80048f4:	fa01 f202 	lsl.w	r2, r1, r2
 80048f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800490a:	7bfb      	ldrb	r3, [r7, #15]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
	...

08004918 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2300      	movs	r3, #0
 8004922:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800492a:	2b02      	cmp	r3, #2
 800492c:	d005      	beq.n	800493a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2204      	movs	r2, #4
 8004932:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
 8004938:	e051      	b.n	80049de <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f022 020e 	bic.w	r2, r2, #14
 8004948:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f022 0201 	bic.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <HAL_DMA_Abort_IT+0xd0>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d029      	beq.n	80049b8 <HAL_DMA_Abort_IT+0xa0>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a20      	ldr	r2, [pc, #128]	; (80049ec <HAL_DMA_Abort_IT+0xd4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d022      	beq.n	80049b4 <HAL_DMA_Abort_IT+0x9c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a1f      	ldr	r2, [pc, #124]	; (80049f0 <HAL_DMA_Abort_IT+0xd8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d01a      	beq.n	80049ae <HAL_DMA_Abort_IT+0x96>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1d      	ldr	r2, [pc, #116]	; (80049f4 <HAL_DMA_Abort_IT+0xdc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d012      	beq.n	80049a8 <HAL_DMA_Abort_IT+0x90>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <HAL_DMA_Abort_IT+0xe0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d00a      	beq.n	80049a2 <HAL_DMA_Abort_IT+0x8a>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <HAL_DMA_Abort_IT+0xe4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d102      	bne.n	800499c <HAL_DMA_Abort_IT+0x84>
 8004996:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800499a:	e00e      	b.n	80049ba <HAL_DMA_Abort_IT+0xa2>
 800499c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049a0:	e00b      	b.n	80049ba <HAL_DMA_Abort_IT+0xa2>
 80049a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80049a6:	e008      	b.n	80049ba <HAL_DMA_Abort_IT+0xa2>
 80049a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049ac:	e005      	b.n	80049ba <HAL_DMA_Abort_IT+0xa2>
 80049ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049b2:	e002      	b.n	80049ba <HAL_DMA_Abort_IT+0xa2>
 80049b4:	2310      	movs	r3, #16
 80049b6:	e000      	b.n	80049ba <HAL_DMA_Abort_IT+0xa2>
 80049b8:	2301      	movs	r3, #1
 80049ba:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <HAL_DMA_Abort_IT+0xe8>)
 80049bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
    } 
  }
  return status;
 80049de:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40020008 	.word	0x40020008
 80049ec:	4002001c 	.word	0x4002001c
 80049f0:	40020030 	.word	0x40020030
 80049f4:	40020044 	.word	0x40020044
 80049f8:	40020058 	.word	0x40020058
 80049fc:	4002006c 	.word	0x4002006c
 8004a00:	40020000 	.word	0x40020000

08004a04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	2204      	movs	r2, #4
 8004a22:	409a      	lsls	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d04f      	beq.n	8004acc <HAL_DMA_IRQHandler+0xc8>
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0304 	and.w	r3, r3, #4
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d04a      	beq.n	8004acc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d107      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a66      	ldr	r2, [pc, #408]	; (8004bf4 <HAL_DMA_IRQHandler+0x1f0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d029      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0xae>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a65      	ldr	r2, [pc, #404]	; (8004bf8 <HAL_DMA_IRQHandler+0x1f4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d022      	beq.n	8004aae <HAL_DMA_IRQHandler+0xaa>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a63      	ldr	r2, [pc, #396]	; (8004bfc <HAL_DMA_IRQHandler+0x1f8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01a      	beq.n	8004aa8 <HAL_DMA_IRQHandler+0xa4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a62      	ldr	r2, [pc, #392]	; (8004c00 <HAL_DMA_IRQHandler+0x1fc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d012      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x9e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a60      	ldr	r2, [pc, #384]	; (8004c04 <HAL_DMA_IRQHandler+0x200>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00a      	beq.n	8004a9c <HAL_DMA_IRQHandler+0x98>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a5f      	ldr	r2, [pc, #380]	; (8004c08 <HAL_DMA_IRQHandler+0x204>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d102      	bne.n	8004a96 <HAL_DMA_IRQHandler+0x92>
 8004a90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a94:	e00e      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xb0>
 8004a96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004a9a:	e00b      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xb0>
 8004a9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004aa0:	e008      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xb0>
 8004aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aa6:	e005      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xb0>
 8004aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aac:	e002      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xb0>
 8004aae:	2340      	movs	r3, #64	; 0x40
 8004ab0:	e000      	b.n	8004ab4 <HAL_DMA_IRQHandler+0xb0>
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	4a55      	ldr	r2, [pc, #340]	; (8004c0c <HAL_DMA_IRQHandler+0x208>)
 8004ab6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8094 	beq.w	8004bea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004aca:	e08e      	b.n	8004bea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d056      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x186>
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d051      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 020a 	bic.w	r2, r2, #10
 8004b02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <HAL_DMA_IRQHandler+0x1f0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d029      	beq.n	8004b6a <HAL_DMA_IRQHandler+0x166>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a37      	ldr	r2, [pc, #220]	; (8004bf8 <HAL_DMA_IRQHandler+0x1f4>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d022      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x162>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a35      	ldr	r2, [pc, #212]	; (8004bfc <HAL_DMA_IRQHandler+0x1f8>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d01a      	beq.n	8004b60 <HAL_DMA_IRQHandler+0x15c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a34      	ldr	r2, [pc, #208]	; (8004c00 <HAL_DMA_IRQHandler+0x1fc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d012      	beq.n	8004b5a <HAL_DMA_IRQHandler+0x156>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a32      	ldr	r2, [pc, #200]	; (8004c04 <HAL_DMA_IRQHandler+0x200>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00a      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x150>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a31      	ldr	r2, [pc, #196]	; (8004c08 <HAL_DMA_IRQHandler+0x204>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d102      	bne.n	8004b4e <HAL_DMA_IRQHandler+0x14a>
 8004b48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b4c:	e00e      	b.n	8004b6c <HAL_DMA_IRQHandler+0x168>
 8004b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b52:	e00b      	b.n	8004b6c <HAL_DMA_IRQHandler+0x168>
 8004b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b58:	e008      	b.n	8004b6c <HAL_DMA_IRQHandler+0x168>
 8004b5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b5e:	e005      	b.n	8004b6c <HAL_DMA_IRQHandler+0x168>
 8004b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b64:	e002      	b.n	8004b6c <HAL_DMA_IRQHandler+0x168>
 8004b66:	2320      	movs	r3, #32
 8004b68:	e000      	b.n	8004b6c <HAL_DMA_IRQHandler+0x168>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	4a27      	ldr	r2, [pc, #156]	; (8004c0c <HAL_DMA_IRQHandler+0x208>)
 8004b6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d034      	beq.n	8004bea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004b88:	e02f      	b.n	8004bea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2208      	movs	r2, #8
 8004b90:	409a      	lsls	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d028      	beq.n	8004bec <HAL_DMA_IRQHandler+0x1e8>
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d023      	beq.n	8004bec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 020e 	bic.w	r2, r2, #14
 8004bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d004      	beq.n	8004bec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
    }
  }
  return;
 8004bea:	bf00      	nop
 8004bec:	bf00      	nop
}
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40020008 	.word	0x40020008
 8004bf8:	4002001c 	.word	0x4002001c
 8004bfc:	40020030 	.word	0x40020030
 8004c00:	40020044 	.word	0x40020044
 8004c04:	40020058 	.word	0x40020058
 8004c08:	4002006c 	.word	0x4002006c
 8004c0c:	40020000 	.word	0x40020000

08004c10 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c26:	2101      	movs	r1, #1
 8004c28:	fa01 f202 	lsl.w	r2, r1, r2
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	683a      	ldr	r2, [r7, #0]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d108      	bne.n	8004c50 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c4e:	e007      	b.n	8004c60 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	60da      	str	r2, [r3, #12]
}
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
	...

08004c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b08b      	sub	sp, #44	; 0x2c
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c76:	2300      	movs	r3, #0
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c7e:	e169      	b.n	8004f54 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004c80:	2201      	movs	r2, #1
 8004c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	f040 8158 	bne.w	8004f4e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	4a9a      	ldr	r2, [pc, #616]	; (8004f0c <HAL_GPIO_Init+0x2a0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d05e      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004ca8:	4a98      	ldr	r2, [pc, #608]	; (8004f0c <HAL_GPIO_Init+0x2a0>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d875      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cae:	4a98      	ldr	r2, [pc, #608]	; (8004f10 <HAL_GPIO_Init+0x2a4>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d058      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004cb4:	4a96      	ldr	r2, [pc, #600]	; (8004f10 <HAL_GPIO_Init+0x2a4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d86f      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cba:	4a96      	ldr	r2, [pc, #600]	; (8004f14 <HAL_GPIO_Init+0x2a8>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d052      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004cc0:	4a94      	ldr	r2, [pc, #592]	; (8004f14 <HAL_GPIO_Init+0x2a8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d869      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cc6:	4a94      	ldr	r2, [pc, #592]	; (8004f18 <HAL_GPIO_Init+0x2ac>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d04c      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004ccc:	4a92      	ldr	r2, [pc, #584]	; (8004f18 <HAL_GPIO_Init+0x2ac>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d863      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cd2:	4a92      	ldr	r2, [pc, #584]	; (8004f1c <HAL_GPIO_Init+0x2b0>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d046      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
 8004cd8:	4a90      	ldr	r2, [pc, #576]	; (8004f1c <HAL_GPIO_Init+0x2b0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d85d      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004cde:	2b12      	cmp	r3, #18
 8004ce0:	d82a      	bhi.n	8004d38 <HAL_GPIO_Init+0xcc>
 8004ce2:	2b12      	cmp	r3, #18
 8004ce4:	d859      	bhi.n	8004d9a <HAL_GPIO_Init+0x12e>
 8004ce6:	a201      	add	r2, pc, #4	; (adr r2, 8004cec <HAL_GPIO_Init+0x80>)
 8004ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cec:	08004d67 	.word	0x08004d67
 8004cf0:	08004d41 	.word	0x08004d41
 8004cf4:	08004d53 	.word	0x08004d53
 8004cf8:	08004d95 	.word	0x08004d95
 8004cfc:	08004d9b 	.word	0x08004d9b
 8004d00:	08004d9b 	.word	0x08004d9b
 8004d04:	08004d9b 	.word	0x08004d9b
 8004d08:	08004d9b 	.word	0x08004d9b
 8004d0c:	08004d9b 	.word	0x08004d9b
 8004d10:	08004d9b 	.word	0x08004d9b
 8004d14:	08004d9b 	.word	0x08004d9b
 8004d18:	08004d9b 	.word	0x08004d9b
 8004d1c:	08004d9b 	.word	0x08004d9b
 8004d20:	08004d9b 	.word	0x08004d9b
 8004d24:	08004d9b 	.word	0x08004d9b
 8004d28:	08004d9b 	.word	0x08004d9b
 8004d2c:	08004d9b 	.word	0x08004d9b
 8004d30:	08004d49 	.word	0x08004d49
 8004d34:	08004d5d 	.word	0x08004d5d
 8004d38:	4a79      	ldr	r2, [pc, #484]	; (8004f20 <HAL_GPIO_Init+0x2b4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d013      	beq.n	8004d66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004d3e:	e02c      	b.n	8004d9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	623b      	str	r3, [r7, #32]
          break;
 8004d46:	e029      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	623b      	str	r3, [r7, #32]
          break;
 8004d50:	e024      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	3308      	adds	r3, #8
 8004d58:	623b      	str	r3, [r7, #32]
          break;
 8004d5a:	e01f      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	330c      	adds	r3, #12
 8004d62:	623b      	str	r3, [r7, #32]
          break;
 8004d64:	e01a      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004d6e:	2304      	movs	r3, #4
 8004d70:	623b      	str	r3, [r7, #32]
          break;
 8004d72:	e013      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d105      	bne.n	8004d88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	611a      	str	r2, [r3, #16]
          break;
 8004d86:	e009      	b.n	8004d9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004d88:	2308      	movs	r3, #8
 8004d8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69fa      	ldr	r2, [r7, #28]
 8004d90:	615a      	str	r2, [r3, #20]
          break;
 8004d92:	e003      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004d94:	2300      	movs	r3, #0
 8004d96:	623b      	str	r3, [r7, #32]
          break;
 8004d98:	e000      	b.n	8004d9c <HAL_GPIO_Init+0x130>
          break;
 8004d9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	2bff      	cmp	r3, #255	; 0xff
 8004da0:	d801      	bhi.n	8004da6 <HAL_GPIO_Init+0x13a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	e001      	b.n	8004daa <HAL_GPIO_Init+0x13e>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3304      	adds	r3, #4
 8004daa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2bff      	cmp	r3, #255	; 0xff
 8004db0:	d802      	bhi.n	8004db8 <HAL_GPIO_Init+0x14c>
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	e002      	b.n	8004dbe <HAL_GPIO_Init+0x152>
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	3b08      	subs	r3, #8
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	210f      	movs	r1, #15
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	401a      	ands	r2, r3
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80b1 	beq.w	8004f4e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004dec:	4b4d      	ldr	r3, [pc, #308]	; (8004f24 <HAL_GPIO_Init+0x2b8>)
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	4a4c      	ldr	r2, [pc, #304]	; (8004f24 <HAL_GPIO_Init+0x2b8>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6193      	str	r3, [r2, #24]
 8004df8:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <HAL_GPIO_Init+0x2b8>)
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	f003 0301 	and.w	r3, r3, #1
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004e04:	4a48      	ldr	r2, [pc, #288]	; (8004f28 <HAL_GPIO_Init+0x2bc>)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	3302      	adds	r3, #2
 8004e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e14:	f003 0303 	and.w	r3, r3, #3
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	220f      	movs	r2, #15
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a40      	ldr	r2, [pc, #256]	; (8004f2c <HAL_GPIO_Init+0x2c0>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <HAL_GPIO_Init+0x1ec>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a3f      	ldr	r2, [pc, #252]	; (8004f30 <HAL_GPIO_Init+0x2c4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00d      	beq.n	8004e54 <HAL_GPIO_Init+0x1e8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a3e      	ldr	r2, [pc, #248]	; (8004f34 <HAL_GPIO_Init+0x2c8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d007      	beq.n	8004e50 <HAL_GPIO_Init+0x1e4>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a3d      	ldr	r2, [pc, #244]	; (8004f38 <HAL_GPIO_Init+0x2cc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d101      	bne.n	8004e4c <HAL_GPIO_Init+0x1e0>
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e006      	b.n	8004e5a <HAL_GPIO_Init+0x1ee>
 8004e4c:	2304      	movs	r3, #4
 8004e4e:	e004      	b.n	8004e5a <HAL_GPIO_Init+0x1ee>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e002      	b.n	8004e5a <HAL_GPIO_Init+0x1ee>
 8004e54:	2301      	movs	r3, #1
 8004e56:	e000      	b.n	8004e5a <HAL_GPIO_Init+0x1ee>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5c:	f002 0203 	and.w	r2, r2, #3
 8004e60:	0092      	lsls	r2, r2, #2
 8004e62:	4093      	lsls	r3, r2
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004e6a:	492f      	ldr	r1, [pc, #188]	; (8004f28 <HAL_GPIO_Init+0x2bc>)
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	3302      	adds	r3, #2
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d006      	beq.n	8004e92 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004e84:	4b2d      	ldr	r3, [pc, #180]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	492c      	ldr	r1, [pc, #176]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]
 8004e90:	e006      	b.n	8004ea0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004e92:	4b2a      	ldr	r3, [pc, #168]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	4928      	ldr	r1, [pc, #160]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d006      	beq.n	8004eba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004eac:	4b23      	ldr	r3, [pc, #140]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4922      	ldr	r1, [pc, #136]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	604b      	str	r3, [r1, #4]
 8004eb8:	e006      	b.n	8004ec8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	491e      	ldr	r1, [pc, #120]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d006      	beq.n	8004ee2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	4918      	ldr	r1, [pc, #96]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	608b      	str	r3, [r1, #8]
 8004ee0:	e006      	b.n	8004ef0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004ee2:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	4914      	ldr	r1, [pc, #80]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d021      	beq.n	8004f40 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004efc:	4b0f      	ldr	r3, [pc, #60]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	490e      	ldr	r1, [pc, #56]	; (8004f3c <HAL_GPIO_Init+0x2d0>)
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60cb      	str	r3, [r1, #12]
 8004f08:	e021      	b.n	8004f4e <HAL_GPIO_Init+0x2e2>
 8004f0a:	bf00      	nop
 8004f0c:	10320000 	.word	0x10320000
 8004f10:	10310000 	.word	0x10310000
 8004f14:	10220000 	.word	0x10220000
 8004f18:	10210000 	.word	0x10210000
 8004f1c:	10120000 	.word	0x10120000
 8004f20:	10110000 	.word	0x10110000
 8004f24:	40021000 	.word	0x40021000
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40010800 	.word	0x40010800
 8004f30:	40010c00 	.word	0x40010c00
 8004f34:	40011000 	.word	0x40011000
 8004f38:	40011400 	.word	0x40011400
 8004f3c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <HAL_GPIO_Init+0x304>)
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	4909      	ldr	r1, [pc, #36]	; (8004f70 <HAL_GPIO_Init+0x304>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	3301      	adds	r3, #1
 8004f52:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f47f ae8e 	bne.w	8004c80 <HAL_GPIO_Init+0x14>
  }
}
 8004f64:	bf00      	nop
 8004f66:	bf00      	nop
 8004f68:	372c      	adds	r7, #44	; 0x2c
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	40010400 	.word	0x40010400

08004f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	887b      	ldrh	r3, [r7, #2]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
 8004f90:	e001      	b.n	8004f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f92:	2300      	movs	r3, #0
 8004f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	4603      	mov	r3, r0
 8004fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004fae:	4b08      	ldr	r3, [pc, #32]	; (8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	88fb      	ldrh	r3, [r7, #6]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d006      	beq.n	8004fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fba:	4a05      	ldr	r2, [pc, #20]	; (8004fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fbc:	88fb      	ldrh	r3, [r7, #6]
 8004fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f806 	bl	8004fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fc8:	bf00      	nop
 8004fca:	3708      	adds	r7, #8
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	4603      	mov	r3, r0
 8004fdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e12b      	b.n	8005252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d106      	bne.n	8005014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fc fb3c 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2224      	movs	r2, #36	; 0x24
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800503a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800504a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800504c:	f000 ffea 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 8005050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	4a81      	ldr	r2, [pc, #516]	; (800525c <HAL_I2C_Init+0x274>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d807      	bhi.n	800506c <HAL_I2C_Init+0x84>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4a80      	ldr	r2, [pc, #512]	; (8005260 <HAL_I2C_Init+0x278>)
 8005060:	4293      	cmp	r3, r2
 8005062:	bf94      	ite	ls
 8005064:	2301      	movls	r3, #1
 8005066:	2300      	movhi	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	e006      	b.n	800507a <HAL_I2C_Init+0x92>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a7d      	ldr	r2, [pc, #500]	; (8005264 <HAL_I2C_Init+0x27c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	bf94      	ite	ls
 8005074:	2301      	movls	r3, #1
 8005076:	2300      	movhi	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e0e7      	b.n	8005252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a78      	ldr	r2, [pc, #480]	; (8005268 <HAL_I2C_Init+0x280>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	0c9b      	lsrs	r3, r3, #18
 800508c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	4a6a      	ldr	r2, [pc, #424]	; (800525c <HAL_I2C_Init+0x274>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d802      	bhi.n	80050bc <HAL_I2C_Init+0xd4>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	3301      	adds	r3, #1
 80050ba:	e009      	b.n	80050d0 <HAL_I2C_Init+0xe8>
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	4a69      	ldr	r2, [pc, #420]	; (800526c <HAL_I2C_Init+0x284>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	099b      	lsrs	r3, r3, #6
 80050ce:	3301      	adds	r3, #1
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69db      	ldr	r3, [r3, #28]
 80050de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80050e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	495c      	ldr	r1, [pc, #368]	; (800525c <HAL_I2C_Init+0x274>)
 80050ec:	428b      	cmp	r3, r1
 80050ee:	d819      	bhi.n	8005124 <HAL_I2C_Init+0x13c>
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	1e59      	subs	r1, r3, #1
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80050fe:	1c59      	adds	r1, r3, #1
 8005100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005104:	400b      	ands	r3, r1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_I2C_Init+0x138>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	1e59      	subs	r1, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	fbb1 f3f3 	udiv	r3, r1, r3
 8005118:	3301      	adds	r3, #1
 800511a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800511e:	e051      	b.n	80051c4 <HAL_I2C_Init+0x1dc>
 8005120:	2304      	movs	r3, #4
 8005122:	e04f      	b.n	80051c4 <HAL_I2C_Init+0x1dc>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d111      	bne.n	8005150 <HAL_I2C_Init+0x168>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	1e58      	subs	r0, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6859      	ldr	r1, [r3, #4]
 8005134:	460b      	mov	r3, r1
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	440b      	add	r3, r1
 800513a:	fbb0 f3f3 	udiv	r3, r0, r3
 800513e:	3301      	adds	r3, #1
 8005140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	e012      	b.n	8005176 <HAL_I2C_Init+0x18e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	1e58      	subs	r0, r3, #1
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6859      	ldr	r1, [r3, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	0099      	lsls	r1, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	fbb0 f3f3 	udiv	r3, r0, r3
 8005166:	3301      	adds	r3, #1
 8005168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_I2C_Init+0x196>
 800517a:	2301      	movs	r3, #1
 800517c:	e022      	b.n	80051c4 <HAL_I2C_Init+0x1dc>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10e      	bne.n	80051a4 <HAL_I2C_Init+0x1bc>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1e58      	subs	r0, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6859      	ldr	r1, [r3, #4]
 800518e:	460b      	mov	r3, r1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	440b      	add	r3, r1
 8005194:	fbb0 f3f3 	udiv	r3, r0, r3
 8005198:	3301      	adds	r3, #1
 800519a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800519e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051a2:	e00f      	b.n	80051c4 <HAL_I2C_Init+0x1dc>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1e58      	subs	r0, r3, #1
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	440b      	add	r3, r1
 80051b2:	0099      	lsls	r1, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80051ba:	3301      	adds	r3, #1
 80051bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	6809      	ldr	r1, [r1, #0]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69da      	ldr	r2, [r3, #28]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	431a      	orrs	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80051f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6911      	ldr	r1, [r2, #16]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	68d2      	ldr	r2, [r2, #12]
 80051fe:	4311      	orrs	r1, r2
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	6812      	ldr	r2, [r2, #0]
 8005204:	430b      	orrs	r3, r1
 8005206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	000186a0 	.word	0x000186a0
 8005260:	001e847f 	.word	0x001e847f
 8005264:	003d08ff 	.word	0x003d08ff
 8005268:	431bde83 	.word	0x431bde83
 800526c:	10624dd3 	.word	0x10624dd3

08005270 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b088      	sub	sp, #32
 8005274:	af02      	add	r7, sp, #8
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	607a      	str	r2, [r7, #4]
 800527a:	461a      	mov	r2, r3
 800527c:	460b      	mov	r3, r1
 800527e:	817b      	strh	r3, [r7, #10]
 8005280:	4613      	mov	r3, r2
 8005282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005284:	f7fe fb04 	bl	8003890 <HAL_GetTick>
 8005288:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b20      	cmp	r3, #32
 8005294:	f040 80e0 	bne.w	8005458 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	2319      	movs	r3, #25
 800529e:	2201      	movs	r2, #1
 80052a0:	4970      	ldr	r1, [pc, #448]	; (8005464 <HAL_I2C_Master_Transmit+0x1f4>)
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f000 f964 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80052ae:	2302      	movs	r3, #2
 80052b0:	e0d3      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_I2C_Master_Transmit+0x50>
 80052bc:	2302      	movs	r3, #2
 80052be:	e0cc      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d007      	beq.n	80052e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2221      	movs	r2, #33	; 0x21
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2210      	movs	r2, #16
 8005302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	893a      	ldrh	r2, [r7, #8]
 8005316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4a50      	ldr	r2, [pc, #320]	; (8005468 <HAL_I2C_Master_Transmit+0x1f8>)
 8005326:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005328:	8979      	ldrh	r1, [r7, #10]
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f89c 	bl	800546c <I2C_MasterRequestWrite>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e08d      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005354:	e066      	b.n	8005424 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	6a39      	ldr	r1, [r7, #32]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f9de 	bl	800571c <I2C_WaitOnTXEFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	2b04      	cmp	r3, #4
 800536c:	d107      	bne.n	800537e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800537c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06b      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005386:	781a      	ldrb	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d11b      	bne.n	80053f8 <HAL_I2C_Master_Transmit+0x188>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d017      	beq.n	80053f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	6a39      	ldr	r1, [r7, #32]
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 f9ce 	bl	800579e <I2C_WaitOnBTFFlagUntilTimeout>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00d      	beq.n	8005424 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	2b04      	cmp	r3, #4
 800540e:	d107      	bne.n	8005420 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e01a      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	d194      	bne.n	8005356 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3718      	adds	r7, #24
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	00100002 	.word	0x00100002
 8005468:	ffff0000 	.word	0xffff0000

0800546c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	607a      	str	r2, [r7, #4]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	460b      	mov	r3, r1
 800547a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005480:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b08      	cmp	r3, #8
 8005486:	d006      	beq.n	8005496 <I2C_MasterRequestWrite+0x2a>
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d003      	beq.n	8005496 <I2C_MasterRequestWrite+0x2a>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005494:	d108      	bne.n	80054a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e00b      	b.n	80054c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	2b12      	cmp	r3, #18
 80054ae:	d107      	bne.n	80054c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f84f 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00d      	beq.n	80054f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d103      	bne.n	80054f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e035      	b.n	8005560 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054fc:	d108      	bne.n	8005510 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054fe:	897b      	ldrh	r3, [r7, #10]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800550c:	611a      	str	r2, [r3, #16]
 800550e:	e01b      	b.n	8005548 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005510:	897b      	ldrh	r3, [r7, #10]
 8005512:	11db      	asrs	r3, r3, #7
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 0306 	and.w	r3, r3, #6
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f063 030f 	orn	r3, r3, #15
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	490e      	ldr	r1, [pc, #56]	; (8005568 <I2C_MasterRequestWrite+0xfc>)
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f875 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e010      	b.n	8005560 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800553e:	897b      	ldrh	r3, [r7, #10]
 8005540:	b2da      	uxtb	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4907      	ldr	r1, [pc, #28]	; (800556c <I2C_MasterRequestWrite+0x100>)
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f865 	bl	800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d001      	beq.n	800555e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	00010008 	.word	0x00010008
 800556c:	00010002 	.word	0x00010002

08005570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005580:	e025      	b.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d021      	beq.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fe f981 	bl	8003890 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e023      	b.n	8005616 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10d      	bne.n	80055f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bf0c      	ite	eq
 80055ea:	2301      	moveq	r3, #1
 80055ec:	2300      	movne	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	461a      	mov	r2, r3
 80055f2:	e00c      	b.n	800560e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	43da      	mvns	r2, r3
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4013      	ands	r3, r2
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	bf0c      	ite	eq
 8005606:	2301      	moveq	r3, #1
 8005608:	2300      	movne	r3, #0
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	79fb      	ldrb	r3, [r7, #7]
 8005610:	429a      	cmp	r2, r3
 8005612:	d0b6      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800562c:	e051      	b.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695b      	ldr	r3, [r3, #20]
 8005634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800563c:	d123      	bne.n	8005686 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800564c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005656:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	f043 0204 	orr.w	r2, r3, #4
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e046      	b.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d021      	beq.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fe f8ff 	bl	8003890 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d116      	bne.n	80056d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2220      	movs	r2, #32
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	f043 0220 	orr.w	r2, r3, #32
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2200      	movs	r2, #0
 80056ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e020      	b.n	8005714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10c      	bne.n	80056f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	43da      	mvns	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e00b      	b.n	800570e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	43da      	mvns	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	b29b      	uxth	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d18d      	bne.n	800562e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005728:	e02d      	b.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f000 f878 	bl	8005820 <I2C_IsAcknowledgeFailed>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e02d      	b.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005740:	d021      	beq.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005742:	f7fe f8a5 	bl	8003890 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	d302      	bcc.n	8005758 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d116      	bne.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e007      	b.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	2b80      	cmp	r3, #128	; 0x80
 8005792:	d1ca      	bne.n	800572a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	60f8      	str	r0, [r7, #12]
 80057a6:	60b9      	str	r1, [r7, #8]
 80057a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057aa:	e02d      	b.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f837 	bl	8005820 <I2C_IsAcknowledgeFailed>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e02d      	b.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c2:	d021      	beq.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c4:	f7fe f864 	bl	8003890 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d302      	bcc.n	80057da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d116      	bne.n	8005808 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e007      	b.n	8005818 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d1ca      	bne.n	80057ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005836:	d11b      	bne.n	8005870 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005840:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	f043 0204 	orr.w	r2, r3, #4
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e000      	b.n	8005872 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	bc80      	pop	{r7}
 800587a:	4770      	bx	lr

0800587c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e272      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0301 	and.w	r3, r3, #1
 8005896:	2b00      	cmp	r3, #0
 8005898:	f000 8087 	beq.w	80059aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800589c:	4b92      	ldr	r3, [pc, #584]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f003 030c 	and.w	r3, r3, #12
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d00c      	beq.n	80058c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80058a8:	4b8f      	ldr	r3, [pc, #572]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	f003 030c 	and.w	r3, r3, #12
 80058b0:	2b08      	cmp	r3, #8
 80058b2:	d112      	bne.n	80058da <HAL_RCC_OscConfig+0x5e>
 80058b4:	4b8c      	ldr	r3, [pc, #560]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c0:	d10b      	bne.n	80058da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c2:	4b89      	ldr	r3, [pc, #548]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d06c      	beq.n	80059a8 <HAL_RCC_OscConfig+0x12c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d168      	bne.n	80059a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e24c      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e2:	d106      	bne.n	80058f2 <HAL_RCC_OscConfig+0x76>
 80058e4:	4b80      	ldr	r3, [pc, #512]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a7f      	ldr	r2, [pc, #508]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e02e      	b.n	8005950 <HAL_RCC_OscConfig+0xd4>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10c      	bne.n	8005914 <HAL_RCC_OscConfig+0x98>
 80058fa:	4b7b      	ldr	r3, [pc, #492]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a7a      	ldr	r2, [pc, #488]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	4b78      	ldr	r3, [pc, #480]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a77      	ldr	r2, [pc, #476]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800590c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005910:	6013      	str	r3, [r2, #0]
 8005912:	e01d      	b.n	8005950 <HAL_RCC_OscConfig+0xd4>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800591c:	d10c      	bne.n	8005938 <HAL_RCC_OscConfig+0xbc>
 800591e:	4b72      	ldr	r3, [pc, #456]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a71      	ldr	r2, [pc, #452]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005928:	6013      	str	r3, [r2, #0]
 800592a:	4b6f      	ldr	r3, [pc, #444]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a6e      	ldr	r2, [pc, #440]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e00b      	b.n	8005950 <HAL_RCC_OscConfig+0xd4>
 8005938:	4b6b      	ldr	r3, [pc, #428]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a6a      	ldr	r2, [pc, #424]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800593e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	4b68      	ldr	r3, [pc, #416]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a67      	ldr	r2, [pc, #412]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800594a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800594e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d013      	beq.n	8005980 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005958:	f7fd ff9a 	bl	8003890 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005960:	f7fd ff96 	bl	8003890 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b64      	cmp	r3, #100	; 0x64
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e200      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005972:	4b5d      	ldr	r3, [pc, #372]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCC_OscConfig+0xe4>
 800597e:	e014      	b.n	80059aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005980:	f7fd ff86 	bl	8003890 <HAL_GetTick>
 8005984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005986:	e008      	b.n	800599a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005988:	f7fd ff82 	bl	8003890 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	2b64      	cmp	r3, #100	; 0x64
 8005994:	d901      	bls.n	800599a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e1ec      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800599a:	4b53      	ldr	r3, [pc, #332]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1f0      	bne.n	8005988 <HAL_RCC_OscConfig+0x10c>
 80059a6:	e000      	b.n	80059aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d063      	beq.n	8005a7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059b6:	4b4c      	ldr	r3, [pc, #304]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059c2:	4b49      	ldr	r3, [pc, #292]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d11c      	bne.n	8005a08 <HAL_RCC_OscConfig+0x18c>
 80059ce:	4b46      	ldr	r3, [pc, #280]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d116      	bne.n	8005a08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059da:	4b43      	ldr	r3, [pc, #268]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_RCC_OscConfig+0x176>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d001      	beq.n	80059f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e1c0      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059f2:	4b3d      	ldr	r3, [pc, #244]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4939      	ldr	r1, [pc, #228]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a06:	e03a      	b.n	8005a7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d020      	beq.n	8005a52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a10:	4b36      	ldr	r3, [pc, #216]	; (8005aec <HAL_RCC_OscConfig+0x270>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a16:	f7fd ff3b 	bl	8003890 <HAL_GetTick>
 8005a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1c:	e008      	b.n	8005a30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a1e:	f7fd ff37 	bl	8003890 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e1a1      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a30:	4b2d      	ldr	r3, [pc, #180]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f0      	beq.n	8005a1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	4927      	ldr	r1, [pc, #156]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	600b      	str	r3, [r1, #0]
 8005a50:	e015      	b.n	8005a7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a52:	4b26      	ldr	r3, [pc, #152]	; (8005aec <HAL_RCC_OscConfig+0x270>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a58:	f7fd ff1a 	bl	8003890 <HAL_GetTick>
 8005a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a60:	f7fd ff16 	bl	8003890 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e180      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a72:	4b1d      	ldr	r3, [pc, #116]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d03a      	beq.n	8005b00 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d019      	beq.n	8005ac6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a92:	4b17      	ldr	r3, [pc, #92]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005a94:	2201      	movs	r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a98:	f7fd fefa 	bl	8003890 <HAL_GetTick>
 8005a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005aa0:	f7fd fef6 	bl	8003890 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e160      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <HAL_RCC_OscConfig+0x26c>)
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005abe:	2001      	movs	r0, #1
 8005ac0:	f000 fad8 	bl	8006074 <RCC_Delay>
 8005ac4:	e01c      	b.n	8005b00 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ac6:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <HAL_RCC_OscConfig+0x274>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005acc:	f7fd fee0 	bl	8003890 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ad2:	e00f      	b.n	8005af4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ad4:	f7fd fedc 	bl	8003890 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d908      	bls.n	8005af4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e146      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
 8005ae6:	bf00      	nop
 8005ae8:	40021000 	.word	0x40021000
 8005aec:	42420000 	.word	0x42420000
 8005af0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005af4:	4b92      	ldr	r3, [pc, #584]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e9      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 80a6 	beq.w	8005c5a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b12:	4b8b      	ldr	r3, [pc, #556]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d10d      	bne.n	8005b3a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b1e:	4b88      	ldr	r3, [pc, #544]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	4a87      	ldr	r2, [pc, #540]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b28:	61d3      	str	r3, [r2, #28]
 8005b2a:	4b85      	ldr	r3, [pc, #532]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b36:	2301      	movs	r3, #1
 8005b38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b3a:	4b82      	ldr	r3, [pc, #520]	; (8005d44 <HAL_RCC_OscConfig+0x4c8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d118      	bne.n	8005b78 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b46:	4b7f      	ldr	r3, [pc, #508]	; (8005d44 <HAL_RCC_OscConfig+0x4c8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a7e      	ldr	r2, [pc, #504]	; (8005d44 <HAL_RCC_OscConfig+0x4c8>)
 8005b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b52:	f7fd fe9d 	bl	8003890 <HAL_GetTick>
 8005b56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b58:	e008      	b.n	8005b6c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b5a:	f7fd fe99 	bl	8003890 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	2b64      	cmp	r3, #100	; 0x64
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e103      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b6c:	4b75      	ldr	r3, [pc, #468]	; (8005d44 <HAL_RCC_OscConfig+0x4c8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d0f0      	beq.n	8005b5a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCC_OscConfig+0x312>
 8005b80:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	4a6e      	ldr	r2, [pc, #440]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	6213      	str	r3, [r2, #32]
 8005b8c:	e02d      	b.n	8005bea <HAL_RCC_OscConfig+0x36e>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10c      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x334>
 8005b96:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	4a69      	ldr	r2, [pc, #420]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	6213      	str	r3, [r2, #32]
 8005ba2:	4b67      	ldr	r3, [pc, #412]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	4a66      	ldr	r2, [pc, #408]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	6213      	str	r3, [r2, #32]
 8005bae:	e01c      	b.n	8005bea <HAL_RCC_OscConfig+0x36e>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	d10c      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x356>
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	4a60      	ldr	r2, [pc, #384]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bbe:	f043 0304 	orr.w	r3, r3, #4
 8005bc2:	6213      	str	r3, [r2, #32]
 8005bc4:	4b5e      	ldr	r3, [pc, #376]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bc6:	6a1b      	ldr	r3, [r3, #32]
 8005bc8:	4a5d      	ldr	r2, [pc, #372]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bca:	f043 0301 	orr.w	r3, r3, #1
 8005bce:	6213      	str	r3, [r2, #32]
 8005bd0:	e00b      	b.n	8005bea <HAL_RCC_OscConfig+0x36e>
 8005bd2:	4b5b      	ldr	r3, [pc, #364]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	4a5a      	ldr	r2, [pc, #360]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005bd8:	f023 0301 	bic.w	r3, r3, #1
 8005bdc:	6213      	str	r3, [r2, #32]
 8005bde:	4b58      	ldr	r3, [pc, #352]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	4a57      	ldr	r2, [pc, #348]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005be4:	f023 0304 	bic.w	r3, r3, #4
 8005be8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d015      	beq.n	8005c1e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bf2:	f7fd fe4d 	bl	8003890 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005bf8:	e00a      	b.n	8005c10 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfa:	f7fd fe49 	bl	8003890 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e0b1      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c10:	4b4b      	ldr	r3, [pc, #300]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0ee      	beq.n	8005bfa <HAL_RCC_OscConfig+0x37e>
 8005c1c:	e014      	b.n	8005c48 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1e:	f7fd fe37 	bl	8003890 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c24:	e00a      	b.n	8005c3c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c26:	f7fd fe33 	bl	8003890 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e09b      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c3c:	4b40      	ldr	r3, [pc, #256]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1ee      	bne.n	8005c26 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d105      	bne.n	8005c5a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4e:	4b3c      	ldr	r3, [pc, #240]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	4a3b      	ldr	r2, [pc, #236]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c58:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8087 	beq.w	8005d72 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d061      	beq.n	8005d34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d146      	bne.n	8005d06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c78:	4b33      	ldr	r3, [pc, #204]	; (8005d48 <HAL_RCC_OscConfig+0x4cc>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7e:	f7fd fe07 	bl	8003890 <HAL_GetTick>
 8005c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c84:	e008      	b.n	8005c98 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c86:	f7fd fe03 	bl	8003890 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d901      	bls.n	8005c98 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e06d      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c98:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1f0      	bne.n	8005c86 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cac:	d108      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	4921      	ldr	r1, [pc, #132]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cc0:	4b1f      	ldr	r3, [pc, #124]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a19      	ldr	r1, [r3, #32]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	491b      	ldr	r1, [pc, #108]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <HAL_RCC_OscConfig+0x4cc>)
 8005cda:	2201      	movs	r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cde:	f7fd fdd7 	bl	8003890 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce6:	f7fd fdd3 	bl	8003890 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e03d      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x46a>
 8005d04:	e035      	b.n	8005d72 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d06:	4b10      	ldr	r3, [pc, #64]	; (8005d48 <HAL_RCC_OscConfig+0x4cc>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d0c:	f7fd fdc0 	bl	8003890 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fd fdbc 	bl	8003890 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e026      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005d26:	4b06      	ldr	r3, [pc, #24]	; (8005d40 <HAL_RCC_OscConfig+0x4c4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x498>
 8005d32:	e01e      	b.n	8005d72 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d107      	bne.n	8005d4c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e019      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40007000 	.word	0x40007000
 8005d48:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005d4c:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <HAL_RCC_OscConfig+0x500>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d106      	bne.n	8005d6e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3718      	adds	r7, #24
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	40021000 	.word	0x40021000

08005d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0d0      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d94:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d910      	bls.n	8005dc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b67      	ldr	r3, [pc, #412]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 0207 	bic.w	r2, r3, #7
 8005daa:	4965      	ldr	r1, [pc, #404]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	4b63      	ldr	r3, [pc, #396]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d001      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0b8      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0302 	and.w	r3, r3, #2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d020      	beq.n	8005e12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d005      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ddc:	4b59      	ldr	r3, [pc, #356]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4a58      	ldr	r2, [pc, #352]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005de2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005de6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d005      	beq.n	8005e00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005df4:	4b53      	ldr	r3, [pc, #332]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4a52      	ldr	r2, [pc, #328]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005dfa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005dfe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e00:	4b50      	ldr	r3, [pc, #320]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	494d      	ldr	r1, [pc, #308]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0301 	and.w	r3, r3, #1
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d040      	beq.n	8005ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d107      	bne.n	8005e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e26:	4b47      	ldr	r3, [pc, #284]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d115      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e07f      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d107      	bne.n	8005e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e3e:	4b41      	ldr	r3, [pc, #260]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e073      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4e:	4b3d      	ldr	r3, [pc, #244]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d101      	bne.n	8005e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e06b      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005e5e:	4b39      	ldr	r3, [pc, #228]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f023 0203 	bic.w	r2, r3, #3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4936      	ldr	r1, [pc, #216]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e70:	f7fd fd0e 	bl	8003890 <HAL_GetTick>
 8005e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e76:	e00a      	b.n	8005e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e78:	f7fd fd0a 	bl	8003890 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e053      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e8e:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f003 020c 	and.w	r2, r3, #12
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d1eb      	bne.n	8005e78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ea0:	4b27      	ldr	r3, [pc, #156]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	683a      	ldr	r2, [r7, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d210      	bcs.n	8005ed0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eae:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f023 0207 	bic.w	r2, r3, #7
 8005eb6:	4922      	ldr	r1, [pc, #136]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ebe:	4b20      	ldr	r3, [pc, #128]	; (8005f40 <HAL_RCC_ClockConfig+0x1c0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d001      	beq.n	8005ed0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e032      	b.n	8005f36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0304 	and.w	r3, r3, #4
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d008      	beq.n	8005eee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005edc:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4916      	ldr	r1, [pc, #88]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0308 	and.w	r3, r3, #8
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005efa:	4b12      	ldr	r3, [pc, #72]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	490e      	ldr	r1, [pc, #56]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f0e:	f000 f821 	bl	8005f54 <HAL_RCC_GetSysClockFreq>
 8005f12:	4602      	mov	r2, r0
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <HAL_RCC_ClockConfig+0x1c4>)
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	490a      	ldr	r1, [pc, #40]	; (8005f48 <HAL_RCC_ClockConfig+0x1c8>)
 8005f20:	5ccb      	ldrb	r3, [r1, r3]
 8005f22:	fa22 f303 	lsr.w	r3, r2, r3
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <HAL_RCC_ClockConfig+0x1cc>)
 8005f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005f2a:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_ClockConfig+0x1d0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fd fc6c 	bl	800380c <HAL_InitTick>

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40022000 	.word	0x40022000
 8005f44:	40021000 	.word	0x40021000
 8005f48:	0800ad04 	.word	0x0800ad04
 8005f4c:	20000008 	.word	0x20000008
 8005f50:	2000000c 	.word	0x2000000c

08005f54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f54:	b490      	push	{r4, r7}
 8005f56:	b08a      	sub	sp, #40	; 0x28
 8005f58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005f5a:	4b29      	ldr	r3, [pc, #164]	; (8006000 <HAL_RCC_GetSysClockFreq+0xac>)
 8005f5c:	1d3c      	adds	r4, r7, #4
 8005f5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005f60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005f64:	f240 2301 	movw	r3, #513	; 0x201
 8005f68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61fb      	str	r3, [r7, #28]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005f7e:	4b21      	ldr	r3, [pc, #132]	; (8006004 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f003 030c 	and.w	r3, r3, #12
 8005f8a:	2b04      	cmp	r3, #4
 8005f8c:	d002      	beq.n	8005f94 <HAL_RCC_GetSysClockFreq+0x40>
 8005f8e:	2b08      	cmp	r3, #8
 8005f90:	d003      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0x46>
 8005f92:	e02b      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005f94:	4b1c      	ldr	r3, [pc, #112]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005f96:	623b      	str	r3, [r7, #32]
      break;
 8005f98:	e02b      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	0c9b      	lsrs	r3, r3, #18
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	3328      	adds	r3, #40	; 0x28
 8005fa4:	443b      	add	r3, r7
 8005fa6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005faa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d012      	beq.n	8005fdc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005fb6:	4b13      	ldr	r3, [pc, #76]	; (8006004 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	0c5b      	lsrs	r3, r3, #17
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	3328      	adds	r3, #40	; 0x28
 8005fc2:	443b      	add	r3, r7
 8005fc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005fc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005fce:	fb03 f202 	mul.w	r2, r3, r2
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fda:	e004      	b.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	4a0b      	ldr	r2, [pc, #44]	; (800600c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	623b      	str	r3, [r7, #32]
      break;
 8005fea:	e002      	b.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005fee:	623b      	str	r3, [r7, #32]
      break;
 8005ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ff2:	6a3b      	ldr	r3, [r7, #32]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3728      	adds	r7, #40	; 0x28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc90      	pop	{r4, r7}
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	0800acd8 	.word	0x0800acd8
 8006004:	40021000 	.word	0x40021000
 8006008:	007a1200 	.word	0x007a1200
 800600c:	003d0900 	.word	0x003d0900

08006010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006014:	4b02      	ldr	r3, [pc, #8]	; (8006020 <HAL_RCC_GetHCLKFreq+0x10>)
 8006016:	681b      	ldr	r3, [r3, #0]
}
 8006018:	4618      	mov	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	20000008 	.word	0x20000008

08006024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006028:	f7ff fff2 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 800602c:	4602      	mov	r2, r0
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	f003 0307 	and.w	r3, r3, #7
 8006038:	4903      	ldr	r1, [pc, #12]	; (8006048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800603a:	5ccb      	ldrb	r3, [r1, r3]
 800603c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd80      	pop	{r7, pc}
 8006044:	40021000 	.word	0x40021000
 8006048:	0800ad14 	.word	0x0800ad14

0800604c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006050:	f7ff ffde 	bl	8006010 <HAL_RCC_GetHCLKFreq>
 8006054:	4602      	mov	r2, r0
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	0adb      	lsrs	r3, r3, #11
 800605c:	f003 0307 	and.w	r3, r3, #7
 8006060:	4903      	ldr	r1, [pc, #12]	; (8006070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006062:	5ccb      	ldrb	r3, [r1, r3]
 8006064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006068:	4618      	mov	r0, r3
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40021000 	.word	0x40021000
 8006070:	0800ad14 	.word	0x0800ad14

08006074 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <RCC_Delay+0x34>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <RCC_Delay+0x38>)
 8006082:	fba2 2303 	umull	r2, r3, r2, r3
 8006086:	0a5b      	lsrs	r3, r3, #9
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	fb02 f303 	mul.w	r3, r2, r3
 800608e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006090:	bf00      	nop
  }
  while (Delay --);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1e5a      	subs	r2, r3, #1
 8006096:	60fa      	str	r2, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f9      	bne.n	8006090 <RCC_Delay+0x1c>
}
 800609c:	bf00      	nop
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bc80      	pop	{r7}
 80060a6:	4770      	bx	lr
 80060a8:	20000008 	.word	0x20000008
 80060ac:	10624dd3 	.word	0x10624dd3

080060b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	2300      	movs	r3, #0
 80060be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d07d      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80060cc:	2300      	movs	r3, #0
 80060ce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060d0:	4b4f      	ldr	r3, [pc, #316]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d10d      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060dc:	4b4c      	ldr	r3, [pc, #304]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060de:	69db      	ldr	r3, [r3, #28]
 80060e0:	4a4b      	ldr	r2, [pc, #300]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e6:	61d3      	str	r3, [r2, #28]
 80060e8:	4b49      	ldr	r3, [pc, #292]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f8:	4b46      	ldr	r3, [pc, #280]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d118      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006104:	4b43      	ldr	r3, [pc, #268]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a42      	ldr	r2, [pc, #264]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800610a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800610e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006110:	f7fd fbbe 	bl	8003890 <HAL_GetTick>
 8006114:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006116:	e008      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006118:	f7fd fbba 	bl	8003890 <HAL_GetTick>
 800611c:	4602      	mov	r2, r0
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	2b64      	cmp	r3, #100	; 0x64
 8006124:	d901      	bls.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e06d      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612a:	4b3a      	ldr	r3, [pc, #232]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0f0      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006136:	4b36      	ldr	r3, [pc, #216]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d02e      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	429a      	cmp	r2, r3
 8006152:	d027      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006154:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006156:	6a1b      	ldr	r3, [r3, #32]
 8006158:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800615e:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006164:	4b2c      	ldr	r3, [pc, #176]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006166:	2200      	movs	r2, #0
 8006168:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800616a:	4a29      	ldr	r2, [pc, #164]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d014      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800617a:	f7fd fb89 	bl	8003890 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006180:	e00a      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006182:	f7fd fb85 	bl	8003890 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006190:	4293      	cmp	r3, r2
 8006192:	d901      	bls.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006194:	2303      	movs	r3, #3
 8006196:	e036      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006198:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0ee      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a4:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4917      	ldr	r1, [pc, #92]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d105      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061bc:	4b14      	ldr	r3, [pc, #80]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	4a13      	ldr	r2, [pc, #76]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d008      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061d4:	4b0e      	ldr	r3, [pc, #56]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	490b      	ldr	r1, [pc, #44]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f2:	4b07      	ldr	r3, [pc, #28]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	4904      	ldr	r1, [pc, #16]	; (8006210 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006200:	4313      	orrs	r3, r2
 8006202:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	40021000 	.word	0x40021000
 8006214:	40007000 	.word	0x40007000
 8006218:	42420440 	.word	0x42420440

0800621c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800621c:	b590      	push	{r4, r7, lr}
 800621e:	b08d      	sub	sp, #52	; 0x34
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006224:	4b58      	ldr	r3, [pc, #352]	; (8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8006226:	f107 040c 	add.w	r4, r7, #12
 800622a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800622c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006230:	f240 2301 	movw	r3, #513	; 0x201
 8006234:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
 800623a:	2300      	movs	r3, #0
 800623c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800623e:	2300      	movs	r3, #0
 8006240:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	2300      	movs	r3, #0
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2b10      	cmp	r3, #16
 800624e:	d00a      	beq.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b10      	cmp	r3, #16
 8006254:	f200 808e 	bhi.w	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d049      	beq.n	80062f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d079      	beq.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006264:	e086      	b.n	8006374 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8006266:	4b49      	ldr	r3, [pc, #292]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800626c:	4b47      	ldr	r3, [pc, #284]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d07f      	beq.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	0c9b      	lsrs	r3, r3, #18
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	3330      	adds	r3, #48	; 0x30
 8006282:	443b      	add	r3, r7
 8006284:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006288:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006290:	2b00      	cmp	r3, #0
 8006292:	d017      	beq.n	80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006294:	4b3d      	ldr	r3, [pc, #244]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	0c5b      	lsrs	r3, r3, #17
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	3330      	adds	r3, #48	; 0x30
 80062a0:	443b      	add	r3, r7
 80062a2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80062a6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80062b2:	4a37      	ldr	r2, [pc, #220]	; (8006390 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	fb02 f303 	mul.w	r3, r2, r3
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c2:	e004      	b.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	4a33      	ldr	r2, [pc, #204]	; (8006394 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80062ce:	4b2f      	ldr	r3, [pc, #188]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062da:	d102      	bne.n	80062e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80062dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062e0:	e04a      	b.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80062e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80062e8:	fba2 2303 	umull	r2, r3, r2, r3
 80062ec:	085b      	lsrs	r3, r3, #1
 80062ee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062f0:	e042      	b.n	8006378 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80062f2:	4b26      	ldr	r3, [pc, #152]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006302:	d108      	bne.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 800630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006312:	62bb      	str	r3, [r7, #40]	; 0x28
 8006314:	e01f      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006320:	d109      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8006322:	4b1a      	ldr	r3, [pc, #104]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 800632e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28
 8006334:	e00f      	b.n	8006356 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800633c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006340:	d11c      	bne.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d016      	beq.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 800634e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006352:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006354:	e012      	b.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8006356:	e011      	b.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006358:	f7ff fe78 	bl	800604c <HAL_RCC_GetPCLK2Freq>
 800635c:	4602      	mov	r2, r0
 800635e:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	0b9b      	lsrs	r3, r3, #14
 8006364:	f003 0303 	and.w	r3, r3, #3
 8006368:	3301      	adds	r3, #1
 800636a:	005b      	lsls	r3, r3, #1
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006372:	e004      	b.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006374:	bf00      	nop
 8006376:	e002      	b.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8006378:	bf00      	nop
 800637a:	e000      	b.n	800637e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800637c:	bf00      	nop
    }
  }
  return (frequency);
 800637e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006380:	4618      	mov	r0, r3
 8006382:	3734      	adds	r7, #52	; 0x34
 8006384:	46bd      	mov	sp, r7
 8006386:	bd90      	pop	{r4, r7, pc}
 8006388:	0800ace8 	.word	0x0800ace8
 800638c:	40021000 	.word	0x40021000
 8006390:	007a1200 	.word	0x007a1200
 8006394:	003d0900 	.word	0x003d0900
 8006398:	aaaaaaab 	.word	0xaaaaaaab

0800639c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b082      	sub	sp, #8
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d101      	bne.n	80063ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e03f      	b.n	800642e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fd f8fc 	bl	80035c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2224      	movs	r2, #36	; 0x24
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fd9b 	bl	8006f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695a      	ldr	r2, [r3, #20]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	; 0x28
 800643a:	af02      	add	r7, sp, #8
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	60b9      	str	r1, [r7, #8]
 8006440:	603b      	str	r3, [r7, #0]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b20      	cmp	r3, #32
 8006454:	d17c      	bne.n	8006550 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <HAL_UART_Transmit+0x2c>
 800645c:	88fb      	ldrh	r3, [r7, #6]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e075      	b.n	8006552 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_UART_Transmit+0x3e>
 8006470:	2302      	movs	r3, #2
 8006472:	e06e      	b.n	8006552 <HAL_UART_Transmit+0x11c>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2221      	movs	r2, #33	; 0x21
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648a:	f7fd fa01 	bl	8003890 <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a4:	d108      	bne.n	80064b8 <HAL_UART_Transmit+0x82>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	e003      	b.n	80064c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064c8:	e02a      	b.n	8006520 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2200      	movs	r2, #0
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 fb0d 	bl	8006af4 <UART_WaitOnFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e036      	b.n	8006552 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	3302      	adds	r3, #2
 80064fe:	61bb      	str	r3, [r7, #24]
 8006500:	e007      	b.n	8006512 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	781a      	ldrb	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	3301      	adds	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1cf      	bne.n	80064ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	2140      	movs	r1, #64	; 0x40
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fadd 	bl	8006af4 <UART_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e006      	b.n	8006552 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e000      	b.n	8006552 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006550:	2302      	movs	r3, #2
  }
}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b086      	sub	sp, #24
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	4613      	mov	r3, r2
 8006566:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b20      	cmp	r3, #32
 8006572:	d13c      	bne.n	80065ee <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d002      	beq.n	8006580 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800657a:	88fb      	ldrh	r3, [r7, #6]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e035      	b.n	80065f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800658e:	2302      	movs	r3, #2
 8006590:	e02e      	b.n	80065f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2201      	movs	r2, #1
 800659e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68b9      	ldr	r1, [r7, #8]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 faee 	bl	8006b88 <UART_Start_Receive_DMA>
 80065ac:	4603      	mov	r3, r0
 80065ae:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80065b0:	7dfb      	ldrb	r3, [r7, #23]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d119      	bne.n	80065ea <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d113      	bne.n	80065e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065be:	2300      	movs	r3, #0
 80065c0:	613b      	str	r3, [r7, #16]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	613b      	str	r3, [r7, #16]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	613b      	str	r3, [r7, #16]
 80065d2:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0210 	orr.w	r2, r2, #16
 80065e2:	60da      	str	r2, [r3, #12]
 80065e4:	e001      	b.n	80065ea <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	e000      	b.n	80065f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80065ee:	2302      	movs	r3, #2
  }
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006618:	2300      	movs	r3, #0
 800661a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10d      	bne.n	800664a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	f003 0320 	and.w	r3, r3, #32
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_UART_IRQHandler+0x52>
 8006638:	6a3b      	ldr	r3, [r7, #32]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fbc0 	bl	8006dc8 <UART_Receive_IT>
      return;
 8006648:	e17b      	b.n	8006942 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80b1 	beq.w	80067b4 <HAL_UART_IRQHandler+0x1bc>
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d105      	bne.n	8006668 <HAL_UART_IRQHandler+0x70>
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80a6 	beq.w	80067b4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_UART_IRQHandler+0x90>
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006680:	f043 0201 	orr.w	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <HAL_UART_IRQHandler+0xb0>
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	f043 0202 	orr.w	r2, r3, #2
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00a      	beq.n	80066c8 <HAL_UART_IRQHandler+0xd0>
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c0:	f043 0204 	orr.w	r2, r3, #4
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <HAL_UART_IRQHandler+0xfa>
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <HAL_UART_IRQHandler+0xee>
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d005      	beq.n	80066f2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	f043 0208 	orr.w	r2, r3, #8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 811e 	beq.w	8006938 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <HAL_UART_IRQHandler+0x11e>
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	f003 0320 	and.w	r3, r3, #32
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fb59 	bl	8006dc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	bf14      	ite	ne
 8006724:	2301      	movne	r3, #1
 8006726:	2300      	moveq	r3, #0
 8006728:	b2db      	uxtb	r3, r3
 800672a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <HAL_UART_IRQHandler+0x146>
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d031      	beq.n	80067a2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa9b 	bl	8006c7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b00      	cmp	r3, #0
 8006750:	d023      	beq.n	800679a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	695a      	ldr	r2, [r3, #20]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006760:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	2b00      	cmp	r3, #0
 8006768:	d013      	beq.n	8006792 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676e:	4a76      	ldr	r2, [pc, #472]	; (8006948 <HAL_UART_IRQHandler+0x350>)
 8006770:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	4618      	mov	r0, r3
 8006778:	f7fe f8ce 	bl	8004918 <HAL_DMA_Abort_IT>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d016      	beq.n	80067b0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	e00e      	b.n	80067b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f8f5 	bl	8006982 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	e00a      	b.n	80067b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f8f1 	bl	8006982 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a0:	e006      	b.n	80067b0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f8ed 	bl	8006982 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80067ae:	e0c3      	b.n	8006938 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b0:	bf00      	nop
    return;
 80067b2:	e0c1      	b.n	8006938 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	f040 80a1 	bne.w	8006900 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	f003 0310 	and.w	r3, r3, #16
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 809b 	beq.w	8006900 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	f003 0310 	and.w	r3, r3, #16
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	f000 8095 	beq.w	8006900 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	695b      	ldr	r3, [r3, #20]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04e      	beq.n	8006898 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006804:	8a3b      	ldrh	r3, [r7, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8098 	beq.w	800693c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006810:	8a3a      	ldrh	r2, [r7, #16]
 8006812:	429a      	cmp	r2, r3
 8006814:	f080 8092 	bcs.w	800693c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	8a3a      	ldrh	r2, [r7, #16]
 800681c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	2b20      	cmp	r3, #32
 8006826:	d02b      	beq.n	8006880 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006836:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695a      	ldr	r2, [r3, #20]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0201 	bic.w	r2, r2, #1
 8006846:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	695a      	ldr	r2, [r3, #20]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006856:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0210 	bic.w	r2, r2, #16
 8006874:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	4618      	mov	r0, r3
 800687c:	f7fe f811 	bl	80048a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006888:	b29b      	uxth	r3, r3
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	b29b      	uxth	r3, r3
 800688e:	4619      	mov	r1, r3
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7fc ff19 	bl	80036c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006896:	e051      	b.n	800693c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d047      	beq.n	8006940 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80068b0:	8a7b      	ldrh	r3, [r7, #18]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d044      	beq.n	8006940 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68da      	ldr	r2, [r3, #12]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80068c4:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0210 	bic.w	r2, r2, #16
 80068f2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068f4:	8a7b      	ldrh	r3, [r7, #18]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fc fee5 	bl	80036c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80068fe:	e01f      	b.n	8006940 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d008      	beq.n	800691c <HAL_UART_IRQHandler+0x324>
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f9f0 	bl	8006cfa <UART_Transmit_IT>
    return;
 800691a:	e012      	b.n	8006942 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00d      	beq.n	8006942 <HAL_UART_IRQHandler+0x34a>
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fa31 	bl	8006d98 <UART_EndTransmit_IT>
    return;
 8006936:	e004      	b.n	8006942 <HAL_UART_IRQHandler+0x34a>
    return;
 8006938:	bf00      	nop
 800693a:	e002      	b.n	8006942 <HAL_UART_IRQHandler+0x34a>
      return;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <HAL_UART_IRQHandler+0x34a>
      return;
 8006940:	bf00      	nop
  }
}
 8006942:	3728      	adds	r7, #40	; 0x28
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	08006cd3 	.word	0x08006cd3

0800694c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr

0800695e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800695e:	b480      	push	{r7}
 8006960:	b083      	sub	sp, #12
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	bc80      	pop	{r7}
 800696e:	4770      	bx	lr

08006970 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	bc80      	pop	{r7}
 8006980:	4770      	bx	lr

08006982 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr

08006994 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d12a      	bne.n	8006a06 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069c4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695a      	ldr	r2, [r3, #20]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	695a      	ldr	r2, [r3, #20]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d107      	bne.n	8006a06 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68da      	ldr	r2, [r3, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0210 	bic.w	r2, r2, #16
 8006a04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d106      	bne.n	8006a1c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a12:	4619      	mov	r1, r3
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f7fc fe57 	bl	80036c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a1a:	e002      	b.n	8006a22 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff ff9e 	bl	800695e <HAL_UART_RxCpltCallback>
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d108      	bne.n	8006a52 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4619      	mov	r1, r3
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7fc fe3c 	bl	80036c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a50:	e002      	b.n	8006a58 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f7ff ff8c 	bl	8006970 <HAL_UART_RxHalfCpltCallback>
}
 8006a58:	bf00      	nop
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	bf14      	ite	ne
 8006a80:	2301      	movne	r3, #1
 8006a82:	2300      	moveq	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b21      	cmp	r3, #33	; 0x21
 8006a92:	d108      	bne.n	8006aa6 <UART_DMAError+0x46>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006aa0:	68b8      	ldr	r0, [r7, #8]
 8006aa2:	f000 f8d5 	bl	8006c50 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	695b      	ldr	r3, [r3, #20]
 8006aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b22      	cmp	r3, #34	; 0x22
 8006ac6:	d108      	bne.n	8006ada <UART_DMAError+0x7a>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006ad4:	68b8      	ldr	r0, [r7, #8]
 8006ad6:	f000 f8d0 	bl	8006c7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f043 0210 	orr.w	r2, r3, #16
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ae6:	68b8      	ldr	r0, [r7, #8]
 8006ae8:	f7ff ff4b 	bl	8006982 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b04:	e02c      	b.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0c:	d028      	beq.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d007      	beq.n	8006b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b14:	f7fc febc 	bl	8003890 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d21d      	bcs.n	8006b60 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006b32:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e00f      	b.n	8006b80 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4013      	ands	r3, r2
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	bf0c      	ite	eq
 8006b70:	2301      	moveq	r3, #1
 8006b72:	2300      	movne	r3, #0
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d0c3      	beq.n	8006b06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	4613      	mov	r3, r2
 8006b94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2222      	movs	r2, #34	; 0x22
 8006bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	4a23      	ldr	r2, [pc, #140]	; (8006c44 <UART_Start_Receive_DMA+0xbc>)
 8006bb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	4a22      	ldr	r2, [pc, #136]	; (8006c48 <UART_Start_Receive_DMA+0xc0>)
 8006bbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	4a21      	ldr	r2, [pc, #132]	; (8006c4c <UART_Start_Receive_DMA+0xc4>)
 8006bc6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	2200      	movs	r2, #0
 8006bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006bd0:	f107 0308 	add.w	r3, r7, #8
 8006bd4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3304      	adds	r3, #4
 8006be0:	4619      	mov	r1, r3
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	f7fd fdfc 	bl	80047e4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006bec:	2300      	movs	r3, #0
 8006bee:	613b      	str	r3, [r7, #16]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	613b      	str	r3, [r7, #16]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c18:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	695a      	ldr	r2, [r3, #20]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 0201 	orr.w	r2, r2, #1
 8006c28:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695a      	ldr	r2, [r3, #20]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c38:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	08006995 	.word	0x08006995
 8006c48:	08006a2b 	.word	0x08006a2b
 8006c4c:	08006a61 	.word	0x08006a61

08006c50 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68da      	ldr	r2, [r3, #12]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006c66:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006c70:	bf00      	nop
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bc80      	pop	{r7}
 8006c78:	4770      	bx	lr

08006c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c90:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	695a      	ldr	r2, [r3, #20]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0201 	bic.w	r2, r2, #1
 8006ca0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d107      	bne.n	8006cba <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68da      	ldr	r2, [r3, #12]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f022 0210 	bic.w	r2, r2, #16
 8006cb8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr

08006cd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b084      	sub	sp, #16
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fe48 	bl	8006982 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cf2:	bf00      	nop
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b21      	cmp	r3, #33	; 0x21
 8006d0c:	d13e      	bne.n	8006d8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d16:	d114      	bne.n	8006d42 <UART_Transmit_IT+0x48>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d110      	bne.n	8006d42 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	1c9a      	adds	r2, r3, #2
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	621a      	str	r2, [r3, #32]
 8006d40:	e008      	b.n	8006d54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	1c59      	adds	r1, r3, #1
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6211      	str	r1, [r2, #32]
 8006d4c:	781a      	ldrb	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	4619      	mov	r1, r3
 8006d62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10f      	bne.n	8006d88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68da      	ldr	r2, [r3, #12]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e000      	b.n	8006d8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d8c:	2302      	movs	r3, #2
  }
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fdc7 	bl	800694c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b22      	cmp	r3, #34	; 0x22
 8006dda:	f040 8099 	bne.w	8006f10 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006de6:	d117      	bne.n	8006e18 <UART_Receive_IT+0x50>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d113      	bne.n	8006e18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e10:	1c9a      	adds	r2, r3, #2
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	629a      	str	r2, [r3, #40]	; 0x28
 8006e16:	e026      	b.n	8006e66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e1c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2a:	d007      	beq.n	8006e3c <UART_Receive_IT+0x74>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10a      	bne.n	8006e4a <UART_Receive_IT+0x82>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	701a      	strb	r2, [r3, #0]
 8006e48:	e008      	b.n	8006e5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	4619      	mov	r1, r3
 8006e74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d148      	bne.n	8006f0c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f022 0220 	bic.w	r2, r2, #32
 8006e88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695a      	ldr	r2, [r3, #20]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0201 	bic.w	r2, r2, #1
 8006ea8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d123      	bne.n	8006f02 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0210 	bic.w	r2, r2, #16
 8006ece:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b10      	cmp	r3, #16
 8006edc:	d10a      	bne.n	8006ef4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ede:	2300      	movs	r3, #0
 8006ee0:	60fb      	str	r3, [r7, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fc fbe4 	bl	80036c8 <HAL_UARTEx_RxEventCallback>
 8006f00:	e002      	b.n	8006f08 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7ff fd2b 	bl	800695e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e002      	b.n	8006f12 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	e000      	b.n	8006f12 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006f10:	2302      	movs	r3, #2
  }
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3718      	adds	r7, #24
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	689a      	ldr	r2, [r3, #8]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006f56:	f023 030c 	bic.w	r3, r3, #12
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	430b      	orrs	r3, r1
 8006f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	699a      	ldr	r2, [r3, #24]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a2c      	ldr	r2, [pc, #176]	; (8007030 <UART_SetConfig+0x114>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d103      	bne.n	8006f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f84:	f7ff f862 	bl	800604c <HAL_RCC_GetPCLK2Freq>
 8006f88:	60f8      	str	r0, [r7, #12]
 8006f8a:	e002      	b.n	8006f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f8c:	f7ff f84a 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 8006f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009a      	lsls	r2, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa8:	4a22      	ldr	r2, [pc, #136]	; (8007034 <UART_SetConfig+0x118>)
 8006faa:	fba2 2303 	umull	r2, r3, r2, r3
 8006fae:	095b      	lsrs	r3, r3, #5
 8006fb0:	0119      	lsls	r1, r3, #4
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	009a      	lsls	r2, r3, #2
 8006fbc:	441a      	add	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <UART_SetConfig+0x118>)
 8006fca:	fba3 0302 	umull	r0, r3, r3, r2
 8006fce:	095b      	lsrs	r3, r3, #5
 8006fd0:	2064      	movs	r0, #100	; 0x64
 8006fd2:	fb00 f303 	mul.w	r3, r0, r3
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	3332      	adds	r3, #50	; 0x32
 8006fdc:	4a15      	ldr	r2, [pc, #84]	; (8007034 <UART_SetConfig+0x118>)
 8006fde:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe2:	095b      	lsrs	r3, r3, #5
 8006fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe8:	4419      	add	r1, r3
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009a      	lsls	r2, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8007000:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <UART_SetConfig+0x118>)
 8007002:	fba3 0302 	umull	r0, r3, r3, r2
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	2064      	movs	r0, #100	; 0x64
 800700a:	fb00 f303 	mul.w	r3, r0, r3
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	3332      	adds	r3, #50	; 0x32
 8007014:	4a07      	ldr	r2, [pc, #28]	; (8007034 <UART_SetConfig+0x118>)
 8007016:	fba2 2303 	umull	r2, r3, r2, r3
 800701a:	095b      	lsrs	r3, r3, #5
 800701c:	f003 020f 	and.w	r2, r3, #15
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	440a      	add	r2, r1
 8007026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40013800 	.word	0x40013800
 8007034:	51eb851f 	.word	0x51eb851f

08007038 <calloc>:
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <calloc+0xc>)
 800703a:	460a      	mov	r2, r1
 800703c:	4601      	mov	r1, r0
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	f000 b852 	b.w	80070e8 <_calloc_r>
 8007044:	20000014 	.word	0x20000014

08007048 <__errno>:
 8007048:	4b01      	ldr	r3, [pc, #4]	; (8007050 <__errno+0x8>)
 800704a:	6818      	ldr	r0, [r3, #0]
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	20000014 	.word	0x20000014

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	2600      	movs	r6, #0
 8007058:	4d0c      	ldr	r5, [pc, #48]	; (800708c <__libc_init_array+0x38>)
 800705a:	4c0d      	ldr	r4, [pc, #52]	; (8007090 <__libc_init_array+0x3c>)
 800705c:	1b64      	subs	r4, r4, r5
 800705e:	10a4      	asrs	r4, r4, #2
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	f003 fd6c 	bl	800ab40 <_init>
 8007068:	2600      	movs	r6, #0
 800706a:	4d0a      	ldr	r5, [pc, #40]	; (8007094 <__libc_init_array+0x40>)
 800706c:	4c0a      	ldr	r4, [pc, #40]	; (8007098 <__libc_init_array+0x44>)
 800706e:	1b64      	subs	r4, r4, r5
 8007070:	10a4      	asrs	r4, r4, #2
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	0800b110 	.word	0x0800b110
 8007090:	0800b110 	.word	0x0800b110
 8007094:	0800b110 	.word	0x0800b110
 8007098:	0800b114 	.word	0x0800b114

0800709c <malloc>:
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <malloc+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f000 b89d 	b.w	80071e0 <_malloc_r>
 80070a6:	bf00      	nop
 80070a8:	20000014 	.word	0x20000014

080070ac <free>:
 80070ac:	4b02      	ldr	r3, [pc, #8]	; (80070b8 <free+0xc>)
 80070ae:	4601      	mov	r1, r0
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	f000 b82d 	b.w	8007110 <_free_r>
 80070b6:	bf00      	nop
 80070b8:	20000014 	.word	0x20000014

080070bc <memcpy>:
 80070bc:	440a      	add	r2, r1
 80070be:	4291      	cmp	r1, r2
 80070c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c4:	d100      	bne.n	80070c8 <memcpy+0xc>
 80070c6:	4770      	bx	lr
 80070c8:	b510      	push	{r4, lr}
 80070ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ce:	4291      	cmp	r1, r2
 80070d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070d4:	d1f9      	bne.n	80070ca <memcpy+0xe>
 80070d6:	bd10      	pop	{r4, pc}

080070d8 <memset>:
 80070d8:	4603      	mov	r3, r0
 80070da:	4402      	add	r2, r0
 80070dc:	4293      	cmp	r3, r2
 80070de:	d100      	bne.n	80070e2 <memset+0xa>
 80070e0:	4770      	bx	lr
 80070e2:	f803 1b01 	strb.w	r1, [r3], #1
 80070e6:	e7f9      	b.n	80070dc <memset+0x4>

080070e8 <_calloc_r>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	fba1 5402 	umull	r5, r4, r1, r2
 80070ee:	b934      	cbnz	r4, 80070fe <_calloc_r+0x16>
 80070f0:	4629      	mov	r1, r5
 80070f2:	f000 f875 	bl	80071e0 <_malloc_r>
 80070f6:	4606      	mov	r6, r0
 80070f8:	b928      	cbnz	r0, 8007106 <_calloc_r+0x1e>
 80070fa:	4630      	mov	r0, r6
 80070fc:	bd70      	pop	{r4, r5, r6, pc}
 80070fe:	220c      	movs	r2, #12
 8007100:	2600      	movs	r6, #0
 8007102:	6002      	str	r2, [r0, #0]
 8007104:	e7f9      	b.n	80070fa <_calloc_r+0x12>
 8007106:	462a      	mov	r2, r5
 8007108:	4621      	mov	r1, r4
 800710a:	f7ff ffe5 	bl	80070d8 <memset>
 800710e:	e7f4      	b.n	80070fa <_calloc_r+0x12>

08007110 <_free_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4605      	mov	r5, r0
 8007114:	2900      	cmp	r1, #0
 8007116:	d040      	beq.n	800719a <_free_r+0x8a>
 8007118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800711c:	1f0c      	subs	r4, r1, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	bfb8      	it	lt
 8007122:	18e4      	addlt	r4, r4, r3
 8007124:	f002 f97c 	bl	8009420 <__malloc_lock>
 8007128:	4a1c      	ldr	r2, [pc, #112]	; (800719c <_free_r+0x8c>)
 800712a:	6813      	ldr	r3, [r2, #0]
 800712c:	b933      	cbnz	r3, 800713c <_free_r+0x2c>
 800712e:	6063      	str	r3, [r4, #4]
 8007130:	6014      	str	r4, [r2, #0]
 8007132:	4628      	mov	r0, r5
 8007134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007138:	f002 b978 	b.w	800942c <__malloc_unlock>
 800713c:	42a3      	cmp	r3, r4
 800713e:	d908      	bls.n	8007152 <_free_r+0x42>
 8007140:	6820      	ldr	r0, [r4, #0]
 8007142:	1821      	adds	r1, r4, r0
 8007144:	428b      	cmp	r3, r1
 8007146:	bf01      	itttt	eq
 8007148:	6819      	ldreq	r1, [r3, #0]
 800714a:	685b      	ldreq	r3, [r3, #4]
 800714c:	1809      	addeq	r1, r1, r0
 800714e:	6021      	streq	r1, [r4, #0]
 8007150:	e7ed      	b.n	800712e <_free_r+0x1e>
 8007152:	461a      	mov	r2, r3
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	b10b      	cbz	r3, 800715c <_free_r+0x4c>
 8007158:	42a3      	cmp	r3, r4
 800715a:	d9fa      	bls.n	8007152 <_free_r+0x42>
 800715c:	6811      	ldr	r1, [r2, #0]
 800715e:	1850      	adds	r0, r2, r1
 8007160:	42a0      	cmp	r0, r4
 8007162:	d10b      	bne.n	800717c <_free_r+0x6c>
 8007164:	6820      	ldr	r0, [r4, #0]
 8007166:	4401      	add	r1, r0
 8007168:	1850      	adds	r0, r2, r1
 800716a:	4283      	cmp	r3, r0
 800716c:	6011      	str	r1, [r2, #0]
 800716e:	d1e0      	bne.n	8007132 <_free_r+0x22>
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	4401      	add	r1, r0
 8007176:	6011      	str	r1, [r2, #0]
 8007178:	6053      	str	r3, [r2, #4]
 800717a:	e7da      	b.n	8007132 <_free_r+0x22>
 800717c:	d902      	bls.n	8007184 <_free_r+0x74>
 800717e:	230c      	movs	r3, #12
 8007180:	602b      	str	r3, [r5, #0]
 8007182:	e7d6      	b.n	8007132 <_free_r+0x22>
 8007184:	6820      	ldr	r0, [r4, #0]
 8007186:	1821      	adds	r1, r4, r0
 8007188:	428b      	cmp	r3, r1
 800718a:	bf01      	itttt	eq
 800718c:	6819      	ldreq	r1, [r3, #0]
 800718e:	685b      	ldreq	r3, [r3, #4]
 8007190:	1809      	addeq	r1, r1, r0
 8007192:	6021      	streq	r1, [r4, #0]
 8007194:	6063      	str	r3, [r4, #4]
 8007196:	6054      	str	r4, [r2, #4]
 8007198:	e7cb      	b.n	8007132 <_free_r+0x22>
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20002624 	.word	0x20002624

080071a0 <sbrk_aligned>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	4e0e      	ldr	r6, [pc, #56]	; (80071dc <sbrk_aligned+0x3c>)
 80071a4:	460c      	mov	r4, r1
 80071a6:	6831      	ldr	r1, [r6, #0]
 80071a8:	4605      	mov	r5, r0
 80071aa:	b911      	cbnz	r1, 80071b2 <sbrk_aligned+0x12>
 80071ac:	f000 ff18 	bl	8007fe0 <_sbrk_r>
 80071b0:	6030      	str	r0, [r6, #0]
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 ff13 	bl	8007fe0 <_sbrk_r>
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	d00a      	beq.n	80071d4 <sbrk_aligned+0x34>
 80071be:	1cc4      	adds	r4, r0, #3
 80071c0:	f024 0403 	bic.w	r4, r4, #3
 80071c4:	42a0      	cmp	r0, r4
 80071c6:	d007      	beq.n	80071d8 <sbrk_aligned+0x38>
 80071c8:	1a21      	subs	r1, r4, r0
 80071ca:	4628      	mov	r0, r5
 80071cc:	f000 ff08 	bl	8007fe0 <_sbrk_r>
 80071d0:	3001      	adds	r0, #1
 80071d2:	d101      	bne.n	80071d8 <sbrk_aligned+0x38>
 80071d4:	f04f 34ff 	mov.w	r4, #4294967295
 80071d8:	4620      	mov	r0, r4
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	20002628 	.word	0x20002628

080071e0 <_malloc_r>:
 80071e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e4:	1ccd      	adds	r5, r1, #3
 80071e6:	f025 0503 	bic.w	r5, r5, #3
 80071ea:	3508      	adds	r5, #8
 80071ec:	2d0c      	cmp	r5, #12
 80071ee:	bf38      	it	cc
 80071f0:	250c      	movcc	r5, #12
 80071f2:	2d00      	cmp	r5, #0
 80071f4:	4607      	mov	r7, r0
 80071f6:	db01      	blt.n	80071fc <_malloc_r+0x1c>
 80071f8:	42a9      	cmp	r1, r5
 80071fa:	d905      	bls.n	8007208 <_malloc_r+0x28>
 80071fc:	230c      	movs	r3, #12
 80071fe:	2600      	movs	r6, #0
 8007200:	603b      	str	r3, [r7, #0]
 8007202:	4630      	mov	r0, r6
 8007204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007208:	4e2e      	ldr	r6, [pc, #184]	; (80072c4 <_malloc_r+0xe4>)
 800720a:	f002 f909 	bl	8009420 <__malloc_lock>
 800720e:	6833      	ldr	r3, [r6, #0]
 8007210:	461c      	mov	r4, r3
 8007212:	bb34      	cbnz	r4, 8007262 <_malloc_r+0x82>
 8007214:	4629      	mov	r1, r5
 8007216:	4638      	mov	r0, r7
 8007218:	f7ff ffc2 	bl	80071a0 <sbrk_aligned>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	4604      	mov	r4, r0
 8007220:	d14d      	bne.n	80072be <_malloc_r+0xde>
 8007222:	6834      	ldr	r4, [r6, #0]
 8007224:	4626      	mov	r6, r4
 8007226:	2e00      	cmp	r6, #0
 8007228:	d140      	bne.n	80072ac <_malloc_r+0xcc>
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	4631      	mov	r1, r6
 800722e:	4638      	mov	r0, r7
 8007230:	eb04 0803 	add.w	r8, r4, r3
 8007234:	f000 fed4 	bl	8007fe0 <_sbrk_r>
 8007238:	4580      	cmp	r8, r0
 800723a:	d13a      	bne.n	80072b2 <_malloc_r+0xd2>
 800723c:	6821      	ldr	r1, [r4, #0]
 800723e:	3503      	adds	r5, #3
 8007240:	1a6d      	subs	r5, r5, r1
 8007242:	f025 0503 	bic.w	r5, r5, #3
 8007246:	3508      	adds	r5, #8
 8007248:	2d0c      	cmp	r5, #12
 800724a:	bf38      	it	cc
 800724c:	250c      	movcc	r5, #12
 800724e:	4638      	mov	r0, r7
 8007250:	4629      	mov	r1, r5
 8007252:	f7ff ffa5 	bl	80071a0 <sbrk_aligned>
 8007256:	3001      	adds	r0, #1
 8007258:	d02b      	beq.n	80072b2 <_malloc_r+0xd2>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	442b      	add	r3, r5
 800725e:	6023      	str	r3, [r4, #0]
 8007260:	e00e      	b.n	8007280 <_malloc_r+0xa0>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	1b52      	subs	r2, r2, r5
 8007266:	d41e      	bmi.n	80072a6 <_malloc_r+0xc6>
 8007268:	2a0b      	cmp	r2, #11
 800726a:	d916      	bls.n	800729a <_malloc_r+0xba>
 800726c:	1961      	adds	r1, r4, r5
 800726e:	42a3      	cmp	r3, r4
 8007270:	6025      	str	r5, [r4, #0]
 8007272:	bf18      	it	ne
 8007274:	6059      	strne	r1, [r3, #4]
 8007276:	6863      	ldr	r3, [r4, #4]
 8007278:	bf08      	it	eq
 800727a:	6031      	streq	r1, [r6, #0]
 800727c:	5162      	str	r2, [r4, r5]
 800727e:	604b      	str	r3, [r1, #4]
 8007280:	4638      	mov	r0, r7
 8007282:	f104 060b 	add.w	r6, r4, #11
 8007286:	f002 f8d1 	bl	800942c <__malloc_unlock>
 800728a:	f026 0607 	bic.w	r6, r6, #7
 800728e:	1d23      	adds	r3, r4, #4
 8007290:	1af2      	subs	r2, r6, r3
 8007292:	d0b6      	beq.n	8007202 <_malloc_r+0x22>
 8007294:	1b9b      	subs	r3, r3, r6
 8007296:	50a3      	str	r3, [r4, r2]
 8007298:	e7b3      	b.n	8007202 <_malloc_r+0x22>
 800729a:	6862      	ldr	r2, [r4, #4]
 800729c:	42a3      	cmp	r3, r4
 800729e:	bf0c      	ite	eq
 80072a0:	6032      	streq	r2, [r6, #0]
 80072a2:	605a      	strne	r2, [r3, #4]
 80072a4:	e7ec      	b.n	8007280 <_malloc_r+0xa0>
 80072a6:	4623      	mov	r3, r4
 80072a8:	6864      	ldr	r4, [r4, #4]
 80072aa:	e7b2      	b.n	8007212 <_malloc_r+0x32>
 80072ac:	4634      	mov	r4, r6
 80072ae:	6876      	ldr	r6, [r6, #4]
 80072b0:	e7b9      	b.n	8007226 <_malloc_r+0x46>
 80072b2:	230c      	movs	r3, #12
 80072b4:	4638      	mov	r0, r7
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	f002 f8b8 	bl	800942c <__malloc_unlock>
 80072bc:	e7a1      	b.n	8007202 <_malloc_r+0x22>
 80072be:	6025      	str	r5, [r4, #0]
 80072c0:	e7de      	b.n	8007280 <_malloc_r+0xa0>
 80072c2:	bf00      	nop
 80072c4:	20002624 	.word	0x20002624

080072c8 <__cvt>:
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ce:	461f      	mov	r7, r3
 80072d0:	bfbb      	ittet	lt
 80072d2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80072d6:	461f      	movlt	r7, r3
 80072d8:	2300      	movge	r3, #0
 80072da:	232d      	movlt	r3, #45	; 0x2d
 80072dc:	b088      	sub	sp, #32
 80072de:	4614      	mov	r4, r2
 80072e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80072e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80072e4:	7013      	strb	r3, [r2, #0]
 80072e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80072ec:	f023 0820 	bic.w	r8, r3, #32
 80072f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072f4:	d005      	beq.n	8007302 <__cvt+0x3a>
 80072f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072fa:	d100      	bne.n	80072fe <__cvt+0x36>
 80072fc:	3501      	adds	r5, #1
 80072fe:	2302      	movs	r3, #2
 8007300:	e000      	b.n	8007304 <__cvt+0x3c>
 8007302:	2303      	movs	r3, #3
 8007304:	aa07      	add	r2, sp, #28
 8007306:	9204      	str	r2, [sp, #16]
 8007308:	aa06      	add	r2, sp, #24
 800730a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800730e:	e9cd 3500 	strd	r3, r5, [sp]
 8007312:	4622      	mov	r2, r4
 8007314:	463b      	mov	r3, r7
 8007316:	f001 f853 	bl	80083c0 <_dtoa_r>
 800731a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800731e:	4606      	mov	r6, r0
 8007320:	d102      	bne.n	8007328 <__cvt+0x60>
 8007322:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007324:	07db      	lsls	r3, r3, #31
 8007326:	d522      	bpl.n	800736e <__cvt+0xa6>
 8007328:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800732c:	eb06 0905 	add.w	r9, r6, r5
 8007330:	d110      	bne.n	8007354 <__cvt+0x8c>
 8007332:	7833      	ldrb	r3, [r6, #0]
 8007334:	2b30      	cmp	r3, #48	; 0x30
 8007336:	d10a      	bne.n	800734e <__cvt+0x86>
 8007338:	2200      	movs	r2, #0
 800733a:	2300      	movs	r3, #0
 800733c:	4620      	mov	r0, r4
 800733e:	4639      	mov	r1, r7
 8007340:	f7f9 fb32 	bl	80009a8 <__aeabi_dcmpeq>
 8007344:	b918      	cbnz	r0, 800734e <__cvt+0x86>
 8007346:	f1c5 0501 	rsb	r5, r5, #1
 800734a:	f8ca 5000 	str.w	r5, [sl]
 800734e:	f8da 3000 	ldr.w	r3, [sl]
 8007352:	4499      	add	r9, r3
 8007354:	2200      	movs	r2, #0
 8007356:	2300      	movs	r3, #0
 8007358:	4620      	mov	r0, r4
 800735a:	4639      	mov	r1, r7
 800735c:	f7f9 fb24 	bl	80009a8 <__aeabi_dcmpeq>
 8007360:	b108      	cbz	r0, 8007366 <__cvt+0x9e>
 8007362:	f8cd 901c 	str.w	r9, [sp, #28]
 8007366:	2230      	movs	r2, #48	; 0x30
 8007368:	9b07      	ldr	r3, [sp, #28]
 800736a:	454b      	cmp	r3, r9
 800736c:	d307      	bcc.n	800737e <__cvt+0xb6>
 800736e:	4630      	mov	r0, r6
 8007370:	9b07      	ldr	r3, [sp, #28]
 8007372:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007374:	1b9b      	subs	r3, r3, r6
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	b008      	add	sp, #32
 800737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737e:	1c59      	adds	r1, r3, #1
 8007380:	9107      	str	r1, [sp, #28]
 8007382:	701a      	strb	r2, [r3, #0]
 8007384:	e7f0      	b.n	8007368 <__cvt+0xa0>

08007386 <__exponent>:
 8007386:	4603      	mov	r3, r0
 8007388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800738a:	2900      	cmp	r1, #0
 800738c:	f803 2b02 	strb.w	r2, [r3], #2
 8007390:	bfb6      	itet	lt
 8007392:	222d      	movlt	r2, #45	; 0x2d
 8007394:	222b      	movge	r2, #43	; 0x2b
 8007396:	4249      	neglt	r1, r1
 8007398:	2909      	cmp	r1, #9
 800739a:	7042      	strb	r2, [r0, #1]
 800739c:	dd2b      	ble.n	80073f6 <__exponent+0x70>
 800739e:	f10d 0407 	add.w	r4, sp, #7
 80073a2:	46a4      	mov	ip, r4
 80073a4:	270a      	movs	r7, #10
 80073a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80073aa:	460a      	mov	r2, r1
 80073ac:	46a6      	mov	lr, r4
 80073ae:	fb07 1516 	mls	r5, r7, r6, r1
 80073b2:	2a63      	cmp	r2, #99	; 0x63
 80073b4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80073b8:	4631      	mov	r1, r6
 80073ba:	f104 34ff 	add.w	r4, r4, #4294967295
 80073be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073c2:	dcf0      	bgt.n	80073a6 <__exponent+0x20>
 80073c4:	3130      	adds	r1, #48	; 0x30
 80073c6:	f1ae 0502 	sub.w	r5, lr, #2
 80073ca:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073ce:	4629      	mov	r1, r5
 80073d0:	1c44      	adds	r4, r0, #1
 80073d2:	4561      	cmp	r1, ip
 80073d4:	d30a      	bcc.n	80073ec <__exponent+0x66>
 80073d6:	f10d 0209 	add.w	r2, sp, #9
 80073da:	eba2 020e 	sub.w	r2, r2, lr
 80073de:	4565      	cmp	r5, ip
 80073e0:	bf88      	it	hi
 80073e2:	2200      	movhi	r2, #0
 80073e4:	4413      	add	r3, r2
 80073e6:	1a18      	subs	r0, r3, r0
 80073e8:	b003      	add	sp, #12
 80073ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073f0:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073f4:	e7ed      	b.n	80073d2 <__exponent+0x4c>
 80073f6:	2330      	movs	r3, #48	; 0x30
 80073f8:	3130      	adds	r1, #48	; 0x30
 80073fa:	7083      	strb	r3, [r0, #2]
 80073fc:	70c1      	strb	r1, [r0, #3]
 80073fe:	1d03      	adds	r3, r0, #4
 8007400:	e7f1      	b.n	80073e6 <__exponent+0x60>
	...

08007404 <_printf_float>:
 8007404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007408:	b091      	sub	sp, #68	; 0x44
 800740a:	460c      	mov	r4, r1
 800740c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007410:	4616      	mov	r6, r2
 8007412:	461f      	mov	r7, r3
 8007414:	4605      	mov	r5, r0
 8007416:	f001 ff75 	bl	8009304 <_localeconv_r>
 800741a:	6803      	ldr	r3, [r0, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	9309      	str	r3, [sp, #36]	; 0x24
 8007420:	f7f8 fe96 	bl	8000150 <strlen>
 8007424:	2300      	movs	r3, #0
 8007426:	930e      	str	r3, [sp, #56]	; 0x38
 8007428:	f8d8 3000 	ldr.w	r3, [r8]
 800742c:	900a      	str	r0, [sp, #40]	; 0x28
 800742e:	3307      	adds	r3, #7
 8007430:	f023 0307 	bic.w	r3, r3, #7
 8007434:	f103 0208 	add.w	r2, r3, #8
 8007438:	f894 9018 	ldrb.w	r9, [r4, #24]
 800743c:	f8d4 b000 	ldr.w	fp, [r4]
 8007440:	f8c8 2000 	str.w	r2, [r8]
 8007444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007448:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800744c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007450:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007454:	930b      	str	r3, [sp, #44]	; 0x2c
 8007456:	f04f 32ff 	mov.w	r2, #4294967295
 800745a:	4640      	mov	r0, r8
 800745c:	4b9c      	ldr	r3, [pc, #624]	; (80076d0 <_printf_float+0x2cc>)
 800745e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007460:	f7f9 fad4 	bl	8000a0c <__aeabi_dcmpun>
 8007464:	bb70      	cbnz	r0, 80074c4 <_printf_float+0xc0>
 8007466:	f04f 32ff 	mov.w	r2, #4294967295
 800746a:	4640      	mov	r0, r8
 800746c:	4b98      	ldr	r3, [pc, #608]	; (80076d0 <_printf_float+0x2cc>)
 800746e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007470:	f7f9 faae 	bl	80009d0 <__aeabi_dcmple>
 8007474:	bb30      	cbnz	r0, 80074c4 <_printf_float+0xc0>
 8007476:	2200      	movs	r2, #0
 8007478:	2300      	movs	r3, #0
 800747a:	4640      	mov	r0, r8
 800747c:	4651      	mov	r1, sl
 800747e:	f7f9 fa9d 	bl	80009bc <__aeabi_dcmplt>
 8007482:	b110      	cbz	r0, 800748a <_printf_float+0x86>
 8007484:	232d      	movs	r3, #45	; 0x2d
 8007486:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800748a:	4b92      	ldr	r3, [pc, #584]	; (80076d4 <_printf_float+0x2d0>)
 800748c:	4892      	ldr	r0, [pc, #584]	; (80076d8 <_printf_float+0x2d4>)
 800748e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007492:	bf94      	ite	ls
 8007494:	4698      	movls	r8, r3
 8007496:	4680      	movhi	r8, r0
 8007498:	2303      	movs	r3, #3
 800749a:	f04f 0a00 	mov.w	sl, #0
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	f02b 0304 	bic.w	r3, fp, #4
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	4633      	mov	r3, r6
 80074a8:	4621      	mov	r1, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	9700      	str	r7, [sp, #0]
 80074ae:	aa0f      	add	r2, sp, #60	; 0x3c
 80074b0:	f000 f9d4 	bl	800785c <_printf_common>
 80074b4:	3001      	adds	r0, #1
 80074b6:	f040 8090 	bne.w	80075da <_printf_float+0x1d6>
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	b011      	add	sp, #68	; 0x44
 80074c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c4:	4642      	mov	r2, r8
 80074c6:	4653      	mov	r3, sl
 80074c8:	4640      	mov	r0, r8
 80074ca:	4651      	mov	r1, sl
 80074cc:	f7f9 fa9e 	bl	8000a0c <__aeabi_dcmpun>
 80074d0:	b148      	cbz	r0, 80074e6 <_printf_float+0xe2>
 80074d2:	f1ba 0f00 	cmp.w	sl, #0
 80074d6:	bfb8      	it	lt
 80074d8:	232d      	movlt	r3, #45	; 0x2d
 80074da:	4880      	ldr	r0, [pc, #512]	; (80076dc <_printf_float+0x2d8>)
 80074dc:	bfb8      	it	lt
 80074de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074e2:	4b7f      	ldr	r3, [pc, #508]	; (80076e0 <_printf_float+0x2dc>)
 80074e4:	e7d3      	b.n	800748e <_printf_float+0x8a>
 80074e6:	6863      	ldr	r3, [r4, #4]
 80074e8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	d142      	bne.n	8007576 <_printf_float+0x172>
 80074f0:	2306      	movs	r3, #6
 80074f2:	6063      	str	r3, [r4, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	9206      	str	r2, [sp, #24]
 80074f8:	aa0e      	add	r2, sp, #56	; 0x38
 80074fa:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80074fe:	aa0d      	add	r2, sp, #52	; 0x34
 8007500:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007504:	9203      	str	r2, [sp, #12]
 8007506:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800750a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	6863      	ldr	r3, [r4, #4]
 8007512:	4642      	mov	r2, r8
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4628      	mov	r0, r5
 8007518:	4653      	mov	r3, sl
 800751a:	910b      	str	r1, [sp, #44]	; 0x2c
 800751c:	f7ff fed4 	bl	80072c8 <__cvt>
 8007520:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007522:	4680      	mov	r8, r0
 8007524:	2947      	cmp	r1, #71	; 0x47
 8007526:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007528:	d108      	bne.n	800753c <_printf_float+0x138>
 800752a:	1cc8      	adds	r0, r1, #3
 800752c:	db02      	blt.n	8007534 <_printf_float+0x130>
 800752e:	6863      	ldr	r3, [r4, #4]
 8007530:	4299      	cmp	r1, r3
 8007532:	dd40      	ble.n	80075b6 <_printf_float+0x1b2>
 8007534:	f1a9 0902 	sub.w	r9, r9, #2
 8007538:	fa5f f989 	uxtb.w	r9, r9
 800753c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007540:	d81f      	bhi.n	8007582 <_printf_float+0x17e>
 8007542:	464a      	mov	r2, r9
 8007544:	3901      	subs	r1, #1
 8007546:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800754a:	910d      	str	r1, [sp, #52]	; 0x34
 800754c:	f7ff ff1b 	bl	8007386 <__exponent>
 8007550:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007552:	4682      	mov	sl, r0
 8007554:	1813      	adds	r3, r2, r0
 8007556:	2a01      	cmp	r2, #1
 8007558:	6123      	str	r3, [r4, #16]
 800755a:	dc02      	bgt.n	8007562 <_printf_float+0x15e>
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	07d2      	lsls	r2, r2, #31
 8007560:	d501      	bpl.n	8007566 <_printf_float+0x162>
 8007562:	3301      	adds	r3, #1
 8007564:	6123      	str	r3, [r4, #16]
 8007566:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800756a:	2b00      	cmp	r3, #0
 800756c:	d09b      	beq.n	80074a6 <_printf_float+0xa2>
 800756e:	232d      	movs	r3, #45	; 0x2d
 8007570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007574:	e797      	b.n	80074a6 <_printf_float+0xa2>
 8007576:	2947      	cmp	r1, #71	; 0x47
 8007578:	d1bc      	bne.n	80074f4 <_printf_float+0xf0>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1ba      	bne.n	80074f4 <_printf_float+0xf0>
 800757e:	2301      	movs	r3, #1
 8007580:	e7b7      	b.n	80074f2 <_printf_float+0xee>
 8007582:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007586:	d118      	bne.n	80075ba <_printf_float+0x1b6>
 8007588:	2900      	cmp	r1, #0
 800758a:	6863      	ldr	r3, [r4, #4]
 800758c:	dd0b      	ble.n	80075a6 <_printf_float+0x1a2>
 800758e:	6121      	str	r1, [r4, #16]
 8007590:	b913      	cbnz	r3, 8007598 <_printf_float+0x194>
 8007592:	6822      	ldr	r2, [r4, #0]
 8007594:	07d0      	lsls	r0, r2, #31
 8007596:	d502      	bpl.n	800759e <_printf_float+0x19a>
 8007598:	3301      	adds	r3, #1
 800759a:	440b      	add	r3, r1
 800759c:	6123      	str	r3, [r4, #16]
 800759e:	f04f 0a00 	mov.w	sl, #0
 80075a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80075a4:	e7df      	b.n	8007566 <_printf_float+0x162>
 80075a6:	b913      	cbnz	r3, 80075ae <_printf_float+0x1aa>
 80075a8:	6822      	ldr	r2, [r4, #0]
 80075aa:	07d2      	lsls	r2, r2, #31
 80075ac:	d501      	bpl.n	80075b2 <_printf_float+0x1ae>
 80075ae:	3302      	adds	r3, #2
 80075b0:	e7f4      	b.n	800759c <_printf_float+0x198>
 80075b2:	2301      	movs	r3, #1
 80075b4:	e7f2      	b.n	800759c <_printf_float+0x198>
 80075b6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80075ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075bc:	4299      	cmp	r1, r3
 80075be:	db05      	blt.n	80075cc <_printf_float+0x1c8>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	6121      	str	r1, [r4, #16]
 80075c4:	07d8      	lsls	r0, r3, #31
 80075c6:	d5ea      	bpl.n	800759e <_printf_float+0x19a>
 80075c8:	1c4b      	adds	r3, r1, #1
 80075ca:	e7e7      	b.n	800759c <_printf_float+0x198>
 80075cc:	2900      	cmp	r1, #0
 80075ce:	bfcc      	ite	gt
 80075d0:	2201      	movgt	r2, #1
 80075d2:	f1c1 0202 	rsble	r2, r1, #2
 80075d6:	4413      	add	r3, r2
 80075d8:	e7e0      	b.n	800759c <_printf_float+0x198>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	055a      	lsls	r2, r3, #21
 80075de:	d407      	bmi.n	80075f0 <_printf_float+0x1ec>
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	4642      	mov	r2, r8
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	d12b      	bne.n	8007646 <_printf_float+0x242>
 80075ee:	e764      	b.n	80074ba <_printf_float+0xb6>
 80075f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075f4:	f240 80dd 	bls.w	80077b2 <_printf_float+0x3ae>
 80075f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075fc:	2200      	movs	r2, #0
 80075fe:	2300      	movs	r3, #0
 8007600:	f7f9 f9d2 	bl	80009a8 <__aeabi_dcmpeq>
 8007604:	2800      	cmp	r0, #0
 8007606:	d033      	beq.n	8007670 <_printf_float+0x26c>
 8007608:	2301      	movs	r3, #1
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	4a35      	ldr	r2, [pc, #212]	; (80076e4 <_printf_float+0x2e0>)
 8007610:	47b8      	blx	r7
 8007612:	3001      	adds	r0, #1
 8007614:	f43f af51 	beq.w	80074ba <_printf_float+0xb6>
 8007618:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800761c:	429a      	cmp	r2, r3
 800761e:	db02      	blt.n	8007626 <_printf_float+0x222>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	07d8      	lsls	r0, r3, #31
 8007624:	d50f      	bpl.n	8007646 <_printf_float+0x242>
 8007626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800762a:	4631      	mov	r1, r6
 800762c:	4628      	mov	r0, r5
 800762e:	47b8      	blx	r7
 8007630:	3001      	adds	r0, #1
 8007632:	f43f af42 	beq.w	80074ba <_printf_float+0xb6>
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	f104 091a 	add.w	r9, r4, #26
 800763e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007640:	3b01      	subs	r3, #1
 8007642:	4543      	cmp	r3, r8
 8007644:	dc09      	bgt.n	800765a <_printf_float+0x256>
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	079b      	lsls	r3, r3, #30
 800764a:	f100 8102 	bmi.w	8007852 <_printf_float+0x44e>
 800764e:	68e0      	ldr	r0, [r4, #12]
 8007650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007652:	4298      	cmp	r0, r3
 8007654:	bfb8      	it	lt
 8007656:	4618      	movlt	r0, r3
 8007658:	e731      	b.n	80074be <_printf_float+0xba>
 800765a:	2301      	movs	r3, #1
 800765c:	464a      	mov	r2, r9
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	47b8      	blx	r7
 8007664:	3001      	adds	r0, #1
 8007666:	f43f af28 	beq.w	80074ba <_printf_float+0xb6>
 800766a:	f108 0801 	add.w	r8, r8, #1
 800766e:	e7e6      	b.n	800763e <_printf_float+0x23a>
 8007670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007672:	2b00      	cmp	r3, #0
 8007674:	dc38      	bgt.n	80076e8 <_printf_float+0x2e4>
 8007676:	2301      	movs	r3, #1
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <_printf_float+0x2e0>)
 800767e:	47b8      	blx	r7
 8007680:	3001      	adds	r0, #1
 8007682:	f43f af1a 	beq.w	80074ba <_printf_float+0xb6>
 8007686:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800768a:	4313      	orrs	r3, r2
 800768c:	d102      	bne.n	8007694 <_printf_float+0x290>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	07d9      	lsls	r1, r3, #31
 8007692:	d5d8      	bpl.n	8007646 <_printf_float+0x242>
 8007694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f af0b 	beq.w	80074ba <_printf_float+0xb6>
 80076a4:	f04f 0900 	mov.w	r9, #0
 80076a8:	f104 0a1a 	add.w	sl, r4, #26
 80076ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ae:	425b      	negs	r3, r3
 80076b0:	454b      	cmp	r3, r9
 80076b2:	dc01      	bgt.n	80076b8 <_printf_float+0x2b4>
 80076b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076b6:	e794      	b.n	80075e2 <_printf_float+0x1de>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4652      	mov	r2, sl
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f aef9 	beq.w	80074ba <_printf_float+0xb6>
 80076c8:	f109 0901 	add.w	r9, r9, #1
 80076cc:	e7ee      	b.n	80076ac <_printf_float+0x2a8>
 80076ce:	bf00      	nop
 80076d0:	7fefffff 	.word	0x7fefffff
 80076d4:	0800ad20 	.word	0x0800ad20
 80076d8:	0800ad24 	.word	0x0800ad24
 80076dc:	0800ad2c 	.word	0x0800ad2c
 80076e0:	0800ad28 	.word	0x0800ad28
 80076e4:	0800afb1 	.word	0x0800afb1
 80076e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ec:	429a      	cmp	r2, r3
 80076ee:	bfa8      	it	ge
 80076f0:	461a      	movge	r2, r3
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	4691      	mov	r9, r2
 80076f6:	dc37      	bgt.n	8007768 <_printf_float+0x364>
 80076f8:	f04f 0b00 	mov.w	fp, #0
 80076fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007700:	f104 021a 	add.w	r2, r4, #26
 8007704:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007708:	ebaa 0309 	sub.w	r3, sl, r9
 800770c:	455b      	cmp	r3, fp
 800770e:	dc33      	bgt.n	8007778 <_printf_float+0x374>
 8007710:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007714:	429a      	cmp	r2, r3
 8007716:	db3b      	blt.n	8007790 <_printf_float+0x38c>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	07da      	lsls	r2, r3, #31
 800771c:	d438      	bmi.n	8007790 <_printf_float+0x38c>
 800771e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007720:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007722:	eba3 020a 	sub.w	r2, r3, sl
 8007726:	eba3 0901 	sub.w	r9, r3, r1
 800772a:	4591      	cmp	r9, r2
 800772c:	bfa8      	it	ge
 800772e:	4691      	movge	r9, r2
 8007730:	f1b9 0f00 	cmp.w	r9, #0
 8007734:	dc34      	bgt.n	80077a0 <_printf_float+0x39c>
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773e:	f104 0a1a 	add.w	sl, r4, #26
 8007742:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	eba3 0309 	sub.w	r3, r3, r9
 800774c:	4543      	cmp	r3, r8
 800774e:	f77f af7a 	ble.w	8007646 <_printf_float+0x242>
 8007752:	2301      	movs	r3, #1
 8007754:	4652      	mov	r2, sl
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	f43f aeac 	beq.w	80074ba <_printf_float+0xb6>
 8007762:	f108 0801 	add.w	r8, r8, #1
 8007766:	e7ec      	b.n	8007742 <_printf_float+0x33e>
 8007768:	4613      	mov	r3, r2
 800776a:	4631      	mov	r1, r6
 800776c:	4642      	mov	r2, r8
 800776e:	4628      	mov	r0, r5
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	d1c0      	bne.n	80076f8 <_printf_float+0x2f4>
 8007776:	e6a0      	b.n	80074ba <_printf_float+0xb6>
 8007778:	2301      	movs	r3, #1
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	f43f ae99 	beq.w	80074ba <_printf_float+0xb6>
 8007788:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800778a:	f10b 0b01 	add.w	fp, fp, #1
 800778e:	e7b9      	b.n	8007704 <_printf_float+0x300>
 8007790:	4631      	mov	r1, r6
 8007792:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	d1bf      	bne.n	800771e <_printf_float+0x31a>
 800779e:	e68c      	b.n	80074ba <_printf_float+0xb6>
 80077a0:	464b      	mov	r3, r9
 80077a2:	4631      	mov	r1, r6
 80077a4:	4628      	mov	r0, r5
 80077a6:	eb08 020a 	add.w	r2, r8, sl
 80077aa:	47b8      	blx	r7
 80077ac:	3001      	adds	r0, #1
 80077ae:	d1c2      	bne.n	8007736 <_printf_float+0x332>
 80077b0:	e683      	b.n	80074ba <_printf_float+0xb6>
 80077b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077b4:	2a01      	cmp	r2, #1
 80077b6:	dc01      	bgt.n	80077bc <_printf_float+0x3b8>
 80077b8:	07db      	lsls	r3, r3, #31
 80077ba:	d537      	bpl.n	800782c <_printf_float+0x428>
 80077bc:	2301      	movs	r3, #1
 80077be:	4642      	mov	r2, r8
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	f43f ae77 	beq.w	80074ba <_printf_float+0xb6>
 80077cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f ae6f 	beq.w	80074ba <_printf_float+0xb6>
 80077dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077e0:	2200      	movs	r2, #0
 80077e2:	2300      	movs	r3, #0
 80077e4:	f7f9 f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 80077e8:	b9d8      	cbnz	r0, 8007822 <_printf_float+0x41e>
 80077ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077ec:	f108 0201 	add.w	r2, r8, #1
 80077f0:	3b01      	subs	r3, #1
 80077f2:	4631      	mov	r1, r6
 80077f4:	4628      	mov	r0, r5
 80077f6:	47b8      	blx	r7
 80077f8:	3001      	adds	r0, #1
 80077fa:	d10e      	bne.n	800781a <_printf_float+0x416>
 80077fc:	e65d      	b.n	80074ba <_printf_float+0xb6>
 80077fe:	2301      	movs	r3, #1
 8007800:	464a      	mov	r2, r9
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	f43f ae56 	beq.w	80074ba <_printf_float+0xb6>
 800780e:	f108 0801 	add.w	r8, r8, #1
 8007812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007814:	3b01      	subs	r3, #1
 8007816:	4543      	cmp	r3, r8
 8007818:	dcf1      	bgt.n	80077fe <_printf_float+0x3fa>
 800781a:	4653      	mov	r3, sl
 800781c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007820:	e6e0      	b.n	80075e4 <_printf_float+0x1e0>
 8007822:	f04f 0800 	mov.w	r8, #0
 8007826:	f104 091a 	add.w	r9, r4, #26
 800782a:	e7f2      	b.n	8007812 <_printf_float+0x40e>
 800782c:	2301      	movs	r3, #1
 800782e:	4642      	mov	r2, r8
 8007830:	e7df      	b.n	80077f2 <_printf_float+0x3ee>
 8007832:	2301      	movs	r3, #1
 8007834:	464a      	mov	r2, r9
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	f43f ae3c 	beq.w	80074ba <_printf_float+0xb6>
 8007842:	f108 0801 	add.w	r8, r8, #1
 8007846:	68e3      	ldr	r3, [r4, #12]
 8007848:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800784a:	1a5b      	subs	r3, r3, r1
 800784c:	4543      	cmp	r3, r8
 800784e:	dcf0      	bgt.n	8007832 <_printf_float+0x42e>
 8007850:	e6fd      	b.n	800764e <_printf_float+0x24a>
 8007852:	f04f 0800 	mov.w	r8, #0
 8007856:	f104 0919 	add.w	r9, r4, #25
 800785a:	e7f4      	b.n	8007846 <_printf_float+0x442>

0800785c <_printf_common>:
 800785c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007860:	4616      	mov	r6, r2
 8007862:	4699      	mov	r9, r3
 8007864:	688a      	ldr	r2, [r1, #8]
 8007866:	690b      	ldr	r3, [r1, #16]
 8007868:	4607      	mov	r7, r0
 800786a:	4293      	cmp	r3, r2
 800786c:	bfb8      	it	lt
 800786e:	4613      	movlt	r3, r2
 8007870:	6033      	str	r3, [r6, #0]
 8007872:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007876:	460c      	mov	r4, r1
 8007878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800787c:	b10a      	cbz	r2, 8007882 <_printf_common+0x26>
 800787e:	3301      	adds	r3, #1
 8007880:	6033      	str	r3, [r6, #0]
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	0699      	lsls	r1, r3, #26
 8007886:	bf42      	ittt	mi
 8007888:	6833      	ldrmi	r3, [r6, #0]
 800788a:	3302      	addmi	r3, #2
 800788c:	6033      	strmi	r3, [r6, #0]
 800788e:	6825      	ldr	r5, [r4, #0]
 8007890:	f015 0506 	ands.w	r5, r5, #6
 8007894:	d106      	bne.n	80078a4 <_printf_common+0x48>
 8007896:	f104 0a19 	add.w	sl, r4, #25
 800789a:	68e3      	ldr	r3, [r4, #12]
 800789c:	6832      	ldr	r2, [r6, #0]
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	dc28      	bgt.n	80078f6 <_printf_common+0x9a>
 80078a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078a8:	1e13      	subs	r3, r2, #0
 80078aa:	6822      	ldr	r2, [r4, #0]
 80078ac:	bf18      	it	ne
 80078ae:	2301      	movne	r3, #1
 80078b0:	0692      	lsls	r2, r2, #26
 80078b2:	d42d      	bmi.n	8007910 <_printf_common+0xb4>
 80078b4:	4649      	mov	r1, r9
 80078b6:	4638      	mov	r0, r7
 80078b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078bc:	47c0      	blx	r8
 80078be:	3001      	adds	r0, #1
 80078c0:	d020      	beq.n	8007904 <_printf_common+0xa8>
 80078c2:	6823      	ldr	r3, [r4, #0]
 80078c4:	68e5      	ldr	r5, [r4, #12]
 80078c6:	f003 0306 	and.w	r3, r3, #6
 80078ca:	2b04      	cmp	r3, #4
 80078cc:	bf18      	it	ne
 80078ce:	2500      	movne	r5, #0
 80078d0:	6832      	ldr	r2, [r6, #0]
 80078d2:	f04f 0600 	mov.w	r6, #0
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	bf08      	it	eq
 80078da:	1aad      	subeq	r5, r5, r2
 80078dc:	6922      	ldr	r2, [r4, #16]
 80078de:	bf08      	it	eq
 80078e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e4:	4293      	cmp	r3, r2
 80078e6:	bfc4      	itt	gt
 80078e8:	1a9b      	subgt	r3, r3, r2
 80078ea:	18ed      	addgt	r5, r5, r3
 80078ec:	341a      	adds	r4, #26
 80078ee:	42b5      	cmp	r5, r6
 80078f0:	d11a      	bne.n	8007928 <_printf_common+0xcc>
 80078f2:	2000      	movs	r0, #0
 80078f4:	e008      	b.n	8007908 <_printf_common+0xac>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	4649      	mov	r1, r9
 80078fc:	4638      	mov	r0, r7
 80078fe:	47c0      	blx	r8
 8007900:	3001      	adds	r0, #1
 8007902:	d103      	bne.n	800790c <_printf_common+0xb0>
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790c:	3501      	adds	r5, #1
 800790e:	e7c4      	b.n	800789a <_printf_common+0x3e>
 8007910:	2030      	movs	r0, #48	; 0x30
 8007912:	18e1      	adds	r1, r4, r3
 8007914:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800791e:	4422      	add	r2, r4
 8007920:	3302      	adds	r3, #2
 8007922:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007926:	e7c5      	b.n	80078b4 <_printf_common+0x58>
 8007928:	2301      	movs	r3, #1
 800792a:	4622      	mov	r2, r4
 800792c:	4649      	mov	r1, r9
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	3001      	adds	r0, #1
 8007934:	d0e6      	beq.n	8007904 <_printf_common+0xa8>
 8007936:	3601      	adds	r6, #1
 8007938:	e7d9      	b.n	80078ee <_printf_common+0x92>
	...

0800793c <_printf_i>:
 800793c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007940:	7e0f      	ldrb	r7, [r1, #24]
 8007942:	4691      	mov	r9, r2
 8007944:	2f78      	cmp	r7, #120	; 0x78
 8007946:	4680      	mov	r8, r0
 8007948:	460c      	mov	r4, r1
 800794a:	469a      	mov	sl, r3
 800794c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800794e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007952:	d807      	bhi.n	8007964 <_printf_i+0x28>
 8007954:	2f62      	cmp	r7, #98	; 0x62
 8007956:	d80a      	bhi.n	800796e <_printf_i+0x32>
 8007958:	2f00      	cmp	r7, #0
 800795a:	f000 80d9 	beq.w	8007b10 <_printf_i+0x1d4>
 800795e:	2f58      	cmp	r7, #88	; 0x58
 8007960:	f000 80a4 	beq.w	8007aac <_printf_i+0x170>
 8007964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800796c:	e03a      	b.n	80079e4 <_printf_i+0xa8>
 800796e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007972:	2b15      	cmp	r3, #21
 8007974:	d8f6      	bhi.n	8007964 <_printf_i+0x28>
 8007976:	a101      	add	r1, pc, #4	; (adr r1, 800797c <_printf_i+0x40>)
 8007978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800797c:	080079d5 	.word	0x080079d5
 8007980:	080079e9 	.word	0x080079e9
 8007984:	08007965 	.word	0x08007965
 8007988:	08007965 	.word	0x08007965
 800798c:	08007965 	.word	0x08007965
 8007990:	08007965 	.word	0x08007965
 8007994:	080079e9 	.word	0x080079e9
 8007998:	08007965 	.word	0x08007965
 800799c:	08007965 	.word	0x08007965
 80079a0:	08007965 	.word	0x08007965
 80079a4:	08007965 	.word	0x08007965
 80079a8:	08007af7 	.word	0x08007af7
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007ad9 	.word	0x08007ad9
 80079b4:	08007965 	.word	0x08007965
 80079b8:	08007965 	.word	0x08007965
 80079bc:	08007b19 	.word	0x08007b19
 80079c0:	08007965 	.word	0x08007965
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007965 	.word	0x08007965
 80079cc:	08007965 	.word	0x08007965
 80079d0:	08007ae1 	.word	0x08007ae1
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0a4      	b.n	8007b32 <_printf_i+0x1f6>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	6829      	ldr	r1, [r5, #0]
 80079ec:	0606      	lsls	r6, r0, #24
 80079ee:	f101 0304 	add.w	r3, r1, #4
 80079f2:	d50a      	bpl.n	8007a0a <_printf_i+0xce>
 80079f4:	680e      	ldr	r6, [r1, #0]
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xc8>
 80079fc:	232d      	movs	r3, #45	; 0x2d
 80079fe:	4276      	negs	r6, r6
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	230a      	movs	r3, #10
 8007a06:	485e      	ldr	r0, [pc, #376]	; (8007b80 <_printf_i+0x244>)
 8007a08:	e019      	b.n	8007a3e <_printf_i+0x102>
 8007a0a:	680e      	ldr	r6, [r1, #0]
 8007a0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a10:	602b      	str	r3, [r5, #0]
 8007a12:	bf18      	it	ne
 8007a14:	b236      	sxthne	r6, r6
 8007a16:	e7ef      	b.n	80079f8 <_printf_i+0xbc>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	1d19      	adds	r1, r3, #4
 8007a1e:	6029      	str	r1, [r5, #0]
 8007a20:	0601      	lsls	r1, r0, #24
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0xec>
 8007a24:	681e      	ldr	r6, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0xf2>
 8007a28:	0646      	lsls	r6, r0, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0xe8>
 8007a2c:	881e      	ldrh	r6, [r3, #0]
 8007a2e:	2f6f      	cmp	r7, #111	; 0x6f
 8007a30:	bf0c      	ite	eq
 8007a32:	2308      	moveq	r3, #8
 8007a34:	230a      	movne	r3, #10
 8007a36:	4852      	ldr	r0, [pc, #328]	; (8007b80 <_printf_i+0x244>)
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a3e:	6865      	ldr	r5, [r4, #4]
 8007a40:	2d00      	cmp	r5, #0
 8007a42:	bfa8      	it	ge
 8007a44:	6821      	ldrge	r1, [r4, #0]
 8007a46:	60a5      	str	r5, [r4, #8]
 8007a48:	bfa4      	itt	ge
 8007a4a:	f021 0104 	bicge.w	r1, r1, #4
 8007a4e:	6021      	strge	r1, [r4, #0]
 8007a50:	b90e      	cbnz	r6, 8007a56 <_printf_i+0x11a>
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	d04d      	beq.n	8007af2 <_printf_i+0x1b6>
 8007a56:	4615      	mov	r5, r2
 8007a58:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a5c:	fb03 6711 	mls	r7, r3, r1, r6
 8007a60:	5dc7      	ldrb	r7, [r0, r7]
 8007a62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a66:	4637      	mov	r7, r6
 8007a68:	42bb      	cmp	r3, r7
 8007a6a:	460e      	mov	r6, r1
 8007a6c:	d9f4      	bls.n	8007a58 <_printf_i+0x11c>
 8007a6e:	2b08      	cmp	r3, #8
 8007a70:	d10b      	bne.n	8007a8a <_printf_i+0x14e>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	07de      	lsls	r6, r3, #31
 8007a76:	d508      	bpl.n	8007a8a <_printf_i+0x14e>
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	6861      	ldr	r1, [r4, #4]
 8007a7c:	4299      	cmp	r1, r3
 8007a7e:	bfde      	ittt	le
 8007a80:	2330      	movle	r3, #48	; 0x30
 8007a82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a8a:	1b52      	subs	r2, r2, r5
 8007a8c:	6122      	str	r2, [r4, #16]
 8007a8e:	464b      	mov	r3, r9
 8007a90:	4621      	mov	r1, r4
 8007a92:	4640      	mov	r0, r8
 8007a94:	f8cd a000 	str.w	sl, [sp]
 8007a98:	aa03      	add	r2, sp, #12
 8007a9a:	f7ff fedf 	bl	800785c <_printf_common>
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d14c      	bne.n	8007b3c <_printf_i+0x200>
 8007aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa6:	b004      	add	sp, #16
 8007aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aac:	4834      	ldr	r0, [pc, #208]	; (8007b80 <_printf_i+0x244>)
 8007aae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ab2:	6829      	ldr	r1, [r5, #0]
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	f851 6b04 	ldr.w	r6, [r1], #4
 8007aba:	6029      	str	r1, [r5, #0]
 8007abc:	061d      	lsls	r5, r3, #24
 8007abe:	d514      	bpl.n	8007aea <_printf_i+0x1ae>
 8007ac0:	07df      	lsls	r7, r3, #31
 8007ac2:	bf44      	itt	mi
 8007ac4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac8:	6023      	strmi	r3, [r4, #0]
 8007aca:	b91e      	cbnz	r6, 8007ad4 <_printf_i+0x198>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	f023 0320 	bic.w	r3, r3, #32
 8007ad2:	6023      	str	r3, [r4, #0]
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	e7af      	b.n	8007a38 <_printf_i+0xfc>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	f043 0320 	orr.w	r3, r3, #32
 8007ade:	6023      	str	r3, [r4, #0]
 8007ae0:	2378      	movs	r3, #120	; 0x78
 8007ae2:	4828      	ldr	r0, [pc, #160]	; (8007b84 <_printf_i+0x248>)
 8007ae4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ae8:	e7e3      	b.n	8007ab2 <_printf_i+0x176>
 8007aea:	0659      	lsls	r1, r3, #25
 8007aec:	bf48      	it	mi
 8007aee:	b2b6      	uxthmi	r6, r6
 8007af0:	e7e6      	b.n	8007ac0 <_printf_i+0x184>
 8007af2:	4615      	mov	r5, r2
 8007af4:	e7bb      	b.n	8007a6e <_printf_i+0x132>
 8007af6:	682b      	ldr	r3, [r5, #0]
 8007af8:	6826      	ldr	r6, [r4, #0]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6961      	ldr	r1, [r4, #20]
 8007afe:	6028      	str	r0, [r5, #0]
 8007b00:	0635      	lsls	r5, r6, #24
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	d501      	bpl.n	8007b0a <_printf_i+0x1ce>
 8007b06:	6019      	str	r1, [r3, #0]
 8007b08:	e002      	b.n	8007b10 <_printf_i+0x1d4>
 8007b0a:	0670      	lsls	r0, r6, #25
 8007b0c:	d5fb      	bpl.n	8007b06 <_printf_i+0x1ca>
 8007b0e:	8019      	strh	r1, [r3, #0]
 8007b10:	2300      	movs	r3, #0
 8007b12:	4615      	mov	r5, r2
 8007b14:	6123      	str	r3, [r4, #16]
 8007b16:	e7ba      	b.n	8007a8e <_printf_i+0x152>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	1d1a      	adds	r2, r3, #4
 8007b1e:	602a      	str	r2, [r5, #0]
 8007b20:	681d      	ldr	r5, [r3, #0]
 8007b22:	6862      	ldr	r2, [r4, #4]
 8007b24:	4628      	mov	r0, r5
 8007b26:	f001 fc6d 	bl	8009404 <memchr>
 8007b2a:	b108      	cbz	r0, 8007b30 <_printf_i+0x1f4>
 8007b2c:	1b40      	subs	r0, r0, r5
 8007b2e:	6060      	str	r0, [r4, #4]
 8007b30:	6863      	ldr	r3, [r4, #4]
 8007b32:	6123      	str	r3, [r4, #16]
 8007b34:	2300      	movs	r3, #0
 8007b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b3a:	e7a8      	b.n	8007a8e <_printf_i+0x152>
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	6923      	ldr	r3, [r4, #16]
 8007b44:	47d0      	blx	sl
 8007b46:	3001      	adds	r0, #1
 8007b48:	d0ab      	beq.n	8007aa2 <_printf_i+0x166>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	079b      	lsls	r3, r3, #30
 8007b4e:	d413      	bmi.n	8007b78 <_printf_i+0x23c>
 8007b50:	68e0      	ldr	r0, [r4, #12]
 8007b52:	9b03      	ldr	r3, [sp, #12]
 8007b54:	4298      	cmp	r0, r3
 8007b56:	bfb8      	it	lt
 8007b58:	4618      	movlt	r0, r3
 8007b5a:	e7a4      	b.n	8007aa6 <_printf_i+0x16a>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4632      	mov	r2, r6
 8007b60:	4649      	mov	r1, r9
 8007b62:	4640      	mov	r0, r8
 8007b64:	47d0      	blx	sl
 8007b66:	3001      	adds	r0, #1
 8007b68:	d09b      	beq.n	8007aa2 <_printf_i+0x166>
 8007b6a:	3501      	adds	r5, #1
 8007b6c:	68e3      	ldr	r3, [r4, #12]
 8007b6e:	9903      	ldr	r1, [sp, #12]
 8007b70:	1a5b      	subs	r3, r3, r1
 8007b72:	42ab      	cmp	r3, r5
 8007b74:	dcf2      	bgt.n	8007b5c <_printf_i+0x220>
 8007b76:	e7eb      	b.n	8007b50 <_printf_i+0x214>
 8007b78:	2500      	movs	r5, #0
 8007b7a:	f104 0619 	add.w	r6, r4, #25
 8007b7e:	e7f5      	b.n	8007b6c <_printf_i+0x230>
 8007b80:	0800ad30 	.word	0x0800ad30
 8007b84:	0800ad41 	.word	0x0800ad41

08007b88 <iprintf>:
 8007b88:	b40f      	push	{r0, r1, r2, r3}
 8007b8a:	4b0a      	ldr	r3, [pc, #40]	; (8007bb4 <iprintf+0x2c>)
 8007b8c:	b513      	push	{r0, r1, r4, lr}
 8007b8e:	681c      	ldr	r4, [r3, #0]
 8007b90:	b124      	cbz	r4, 8007b9c <iprintf+0x14>
 8007b92:	69a3      	ldr	r3, [r4, #24]
 8007b94:	b913      	cbnz	r3, 8007b9c <iprintf+0x14>
 8007b96:	4620      	mov	r0, r4
 8007b98:	f001 fb16 	bl	80091c8 <__sinit>
 8007b9c:	ab05      	add	r3, sp, #20
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	9a04      	ldr	r2, [sp, #16]
 8007ba2:	68a1      	ldr	r1, [r4, #8]
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	f002 f9c5 	bl	8009f34 <_vfiprintf_r>
 8007baa:	b002      	add	sp, #8
 8007bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb0:	b004      	add	sp, #16
 8007bb2:	4770      	bx	lr
 8007bb4:	20000014 	.word	0x20000014

08007bb8 <putchar>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4b08      	ldr	r3, [pc, #32]	; (8007bdc <putchar+0x24>)
 8007bbc:	4605      	mov	r5, r0
 8007bbe:	681c      	ldr	r4, [r3, #0]
 8007bc0:	b124      	cbz	r4, 8007bcc <putchar+0x14>
 8007bc2:	69a3      	ldr	r3, [r4, #24]
 8007bc4:	b913      	cbnz	r3, 8007bcc <putchar+0x14>
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f001 fafe 	bl	80091c8 <__sinit>
 8007bcc:	4629      	mov	r1, r5
 8007bce:	4620      	mov	r0, r4
 8007bd0:	68a2      	ldr	r2, [r4, #8]
 8007bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bd6:	f002 bc2f 	b.w	800a438 <_putc_r>
 8007bda:	bf00      	nop
 8007bdc:	20000014 	.word	0x20000014

08007be0 <_puts_r>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	460e      	mov	r6, r1
 8007be4:	4605      	mov	r5, r0
 8007be6:	b118      	cbz	r0, 8007bf0 <_puts_r+0x10>
 8007be8:	6983      	ldr	r3, [r0, #24]
 8007bea:	b90b      	cbnz	r3, 8007bf0 <_puts_r+0x10>
 8007bec:	f001 faec 	bl	80091c8 <__sinit>
 8007bf0:	69ab      	ldr	r3, [r5, #24]
 8007bf2:	68ac      	ldr	r4, [r5, #8]
 8007bf4:	b913      	cbnz	r3, 8007bfc <_puts_r+0x1c>
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f001 fae6 	bl	80091c8 <__sinit>
 8007bfc:	4b2c      	ldr	r3, [pc, #176]	; (8007cb0 <_puts_r+0xd0>)
 8007bfe:	429c      	cmp	r4, r3
 8007c00:	d120      	bne.n	8007c44 <_puts_r+0x64>
 8007c02:	686c      	ldr	r4, [r5, #4]
 8007c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c06:	07db      	lsls	r3, r3, #31
 8007c08:	d405      	bmi.n	8007c16 <_puts_r+0x36>
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	0598      	lsls	r0, r3, #22
 8007c0e:	d402      	bmi.n	8007c16 <_puts_r+0x36>
 8007c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c12:	f001 fb7c 	bl	800930e <__retarget_lock_acquire_recursive>
 8007c16:	89a3      	ldrh	r3, [r4, #12]
 8007c18:	0719      	lsls	r1, r3, #28
 8007c1a:	d51d      	bpl.n	8007c58 <_puts_r+0x78>
 8007c1c:	6923      	ldr	r3, [r4, #16]
 8007c1e:	b1db      	cbz	r3, 8007c58 <_puts_r+0x78>
 8007c20:	3e01      	subs	r6, #1
 8007c22:	68a3      	ldr	r3, [r4, #8]
 8007c24:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	60a3      	str	r3, [r4, #8]
 8007c2c:	bb39      	cbnz	r1, 8007c7e <_puts_r+0x9e>
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	da38      	bge.n	8007ca4 <_puts_r+0xc4>
 8007c32:	4622      	mov	r2, r4
 8007c34:	210a      	movs	r1, #10
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 fa52 	bl	80080e0 <__swbuf_r>
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d011      	beq.n	8007c64 <_puts_r+0x84>
 8007c40:	250a      	movs	r5, #10
 8007c42:	e011      	b.n	8007c68 <_puts_r+0x88>
 8007c44:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <_puts_r+0xd4>)
 8007c46:	429c      	cmp	r4, r3
 8007c48:	d101      	bne.n	8007c4e <_puts_r+0x6e>
 8007c4a:	68ac      	ldr	r4, [r5, #8]
 8007c4c:	e7da      	b.n	8007c04 <_puts_r+0x24>
 8007c4e:	4b1a      	ldr	r3, [pc, #104]	; (8007cb8 <_puts_r+0xd8>)
 8007c50:	429c      	cmp	r4, r3
 8007c52:	bf08      	it	eq
 8007c54:	68ec      	ldreq	r4, [r5, #12]
 8007c56:	e7d5      	b.n	8007c04 <_puts_r+0x24>
 8007c58:	4621      	mov	r1, r4
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f000 faa4 	bl	80081a8 <__swsetup_r>
 8007c60:	2800      	cmp	r0, #0
 8007c62:	d0dd      	beq.n	8007c20 <_puts_r+0x40>
 8007c64:	f04f 35ff 	mov.w	r5, #4294967295
 8007c68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c6a:	07da      	lsls	r2, r3, #31
 8007c6c:	d405      	bmi.n	8007c7a <_puts_r+0x9a>
 8007c6e:	89a3      	ldrh	r3, [r4, #12]
 8007c70:	059b      	lsls	r3, r3, #22
 8007c72:	d402      	bmi.n	8007c7a <_puts_r+0x9a>
 8007c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c76:	f001 fb4b 	bl	8009310 <__retarget_lock_release_recursive>
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	bd70      	pop	{r4, r5, r6, pc}
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	da04      	bge.n	8007c8c <_puts_r+0xac>
 8007c82:	69a2      	ldr	r2, [r4, #24]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	dc06      	bgt.n	8007c96 <_puts_r+0xb6>
 8007c88:	290a      	cmp	r1, #10
 8007c8a:	d004      	beq.n	8007c96 <_puts_r+0xb6>
 8007c8c:	6823      	ldr	r3, [r4, #0]
 8007c8e:	1c5a      	adds	r2, r3, #1
 8007c90:	6022      	str	r2, [r4, #0]
 8007c92:	7019      	strb	r1, [r3, #0]
 8007c94:	e7c5      	b.n	8007c22 <_puts_r+0x42>
 8007c96:	4622      	mov	r2, r4
 8007c98:	4628      	mov	r0, r5
 8007c9a:	f000 fa21 	bl	80080e0 <__swbuf_r>
 8007c9e:	3001      	adds	r0, #1
 8007ca0:	d1bf      	bne.n	8007c22 <_puts_r+0x42>
 8007ca2:	e7df      	b.n	8007c64 <_puts_r+0x84>
 8007ca4:	250a      	movs	r5, #10
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	6022      	str	r2, [r4, #0]
 8007cac:	701d      	strb	r5, [r3, #0]
 8007cae:	e7db      	b.n	8007c68 <_puts_r+0x88>
 8007cb0:	0800ae04 	.word	0x0800ae04
 8007cb4:	0800ae24 	.word	0x0800ae24
 8007cb8:	0800ade4 	.word	0x0800ade4

08007cbc <puts>:
 8007cbc:	4b02      	ldr	r3, [pc, #8]	; (8007cc8 <puts+0xc>)
 8007cbe:	4601      	mov	r1, r0
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	f7ff bf8d 	b.w	8007be0 <_puts_r>
 8007cc6:	bf00      	nop
 8007cc8:	20000014 	.word	0x20000014

08007ccc <swapfunc>:
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	b510      	push	{r4, lr}
 8007cd0:	d00a      	beq.n	8007ce8 <swapfunc+0x1c>
 8007cd2:	0892      	lsrs	r2, r2, #2
 8007cd4:	6803      	ldr	r3, [r0, #0]
 8007cd6:	680c      	ldr	r4, [r1, #0]
 8007cd8:	3a01      	subs	r2, #1
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	f840 4b04 	str.w	r4, [r0], #4
 8007ce0:	f841 3b04 	str.w	r3, [r1], #4
 8007ce4:	dcf6      	bgt.n	8007cd4 <swapfunc+0x8>
 8007ce6:	bd10      	pop	{r4, pc}
 8007ce8:	4402      	add	r2, r0
 8007cea:	780c      	ldrb	r4, [r1, #0]
 8007cec:	7803      	ldrb	r3, [r0, #0]
 8007cee:	f800 4b01 	strb.w	r4, [r0], #1
 8007cf2:	f801 3b01 	strb.w	r3, [r1], #1
 8007cf6:	1a13      	subs	r3, r2, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dcf6      	bgt.n	8007cea <swapfunc+0x1e>
 8007cfc:	e7f3      	b.n	8007ce6 <swapfunc+0x1a>

08007cfe <med3.constprop.0>:
 8007cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d00:	460c      	mov	r4, r1
 8007d02:	4615      	mov	r5, r2
 8007d04:	4607      	mov	r7, r0
 8007d06:	461e      	mov	r6, r3
 8007d08:	4798      	blx	r3
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	4629      	mov	r1, r5
 8007d0e:	4620      	mov	r0, r4
 8007d10:	da0a      	bge.n	8007d28 <med3.constprop.0+0x2a>
 8007d12:	47b0      	blx	r6
 8007d14:	2800      	cmp	r0, #0
 8007d16:	db05      	blt.n	8007d24 <med3.constprop.0+0x26>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	47b0      	blx	r6
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	db0a      	blt.n	8007d38 <med3.constprop.0+0x3a>
 8007d22:	463c      	mov	r4, r7
 8007d24:	4620      	mov	r0, r4
 8007d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d28:	47b0      	blx	r6
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	dcfa      	bgt.n	8007d24 <med3.constprop.0+0x26>
 8007d2e:	4629      	mov	r1, r5
 8007d30:	4638      	mov	r0, r7
 8007d32:	47b0      	blx	r6
 8007d34:	2800      	cmp	r0, #0
 8007d36:	dbf4      	blt.n	8007d22 <med3.constprop.0+0x24>
 8007d38:	462c      	mov	r4, r5
 8007d3a:	e7f3      	b.n	8007d24 <med3.constprop.0+0x26>

08007d3c <qsort>:
 8007d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d40:	469a      	mov	sl, r3
 8007d42:	ea40 0302 	orr.w	r3, r0, r2
 8007d46:	079b      	lsls	r3, r3, #30
 8007d48:	4606      	mov	r6, r0
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	b097      	sub	sp, #92	; 0x5c
 8007d4e:	d11a      	bne.n	8007d86 <qsort+0x4a>
 8007d50:	f1b2 0804 	subs.w	r8, r2, #4
 8007d54:	bf18      	it	ne
 8007d56:	f04f 0801 	movne.w	r8, #1
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9302      	str	r3, [sp, #8]
 8007d5e:	fb04 f701 	mul.w	r7, r4, r1
 8007d62:	1933      	adds	r3, r6, r4
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	2906      	cmp	r1, #6
 8007d68:	eb06 0307 	add.w	r3, r6, r7
 8007d6c:	9303      	str	r3, [sp, #12]
 8007d6e:	d82a      	bhi.n	8007dc6 <qsort+0x8a>
 8007d70:	9b01      	ldr	r3, [sp, #4]
 8007d72:	9a03      	ldr	r2, [sp, #12]
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d310      	bcc.n	8007d9a <qsort+0x5e>
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 811f 	bne.w	8007fbe <qsort+0x282>
 8007d80:	b017      	add	sp, #92	; 0x5c
 8007d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d86:	f04f 0802 	mov.w	r8, #2
 8007d8a:	e7e6      	b.n	8007d5a <qsort+0x1e>
 8007d8c:	4643      	mov	r3, r8
 8007d8e:	4622      	mov	r2, r4
 8007d90:	4639      	mov	r1, r7
 8007d92:	4628      	mov	r0, r5
 8007d94:	f7ff ff9a 	bl	8007ccc <swapfunc>
 8007d98:	e00e      	b.n	8007db8 <qsort+0x7c>
 8007d9a:	9d01      	ldr	r5, [sp, #4]
 8007d9c:	e00d      	b.n	8007dba <qsort+0x7e>
 8007d9e:	1b2f      	subs	r7, r5, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	4638      	mov	r0, r7
 8007da4:	47d0      	blx	sl
 8007da6:	2800      	cmp	r0, #0
 8007da8:	dd09      	ble.n	8007dbe <qsort+0x82>
 8007daa:	f1b8 0f00 	cmp.w	r8, #0
 8007dae:	d1ed      	bne.n	8007d8c <qsort+0x50>
 8007db0:	682b      	ldr	r3, [r5, #0]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	602a      	str	r2, [r5, #0]
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	463d      	mov	r5, r7
 8007dba:	42ae      	cmp	r6, r5
 8007dbc:	d3ef      	bcc.n	8007d9e <qsort+0x62>
 8007dbe:	9b01      	ldr	r3, [sp, #4]
 8007dc0:	4423      	add	r3, r4
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	e7d4      	b.n	8007d70 <qsort+0x34>
 8007dc6:	ea4f 0951 	mov.w	r9, r1, lsr #1
 8007dca:	1b3f      	subs	r7, r7, r4
 8007dcc:	2907      	cmp	r1, #7
 8007dce:	fb04 6909 	mla	r9, r4, r9, r6
 8007dd2:	4437      	add	r7, r6
 8007dd4:	d022      	beq.n	8007e1c <qsort+0xe0>
 8007dd6:	2928      	cmp	r1, #40	; 0x28
 8007dd8:	d945      	bls.n	8007e66 <qsort+0x12a>
 8007dda:	08c9      	lsrs	r1, r1, #3
 8007ddc:	fb04 f501 	mul.w	r5, r4, r1
 8007de0:	4653      	mov	r3, sl
 8007de2:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8007de6:	1971      	adds	r1, r6, r5
 8007de8:	4630      	mov	r0, r6
 8007dea:	f7ff ff88 	bl	8007cfe <med3.constprop.0>
 8007dee:	4649      	mov	r1, r9
 8007df0:	eb09 0205 	add.w	r2, r9, r5
 8007df4:	4653      	mov	r3, sl
 8007df6:	4683      	mov	fp, r0
 8007df8:	1b48      	subs	r0, r1, r5
 8007dfa:	f7ff ff80 	bl	8007cfe <med3.constprop.0>
 8007dfe:	463a      	mov	r2, r7
 8007e00:	4681      	mov	r9, r0
 8007e02:	4653      	mov	r3, sl
 8007e04:	1b79      	subs	r1, r7, r5
 8007e06:	eba7 0045 	sub.w	r0, r7, r5, lsl #1
 8007e0a:	f7ff ff78 	bl	8007cfe <med3.constprop.0>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	4649      	mov	r1, r9
 8007e12:	4653      	mov	r3, sl
 8007e14:	4658      	mov	r0, fp
 8007e16:	f7ff ff72 	bl	8007cfe <med3.constprop.0>
 8007e1a:	4681      	mov	r9, r0
 8007e1c:	f1b8 0f00 	cmp.w	r8, #0
 8007e20:	d124      	bne.n	8007e6c <qsort+0x130>
 8007e22:	6833      	ldr	r3, [r6, #0]
 8007e24:	f8d9 2000 	ldr.w	r2, [r9]
 8007e28:	6032      	str	r2, [r6, #0]
 8007e2a:	f8c9 3000 	str.w	r3, [r9]
 8007e2e:	eb06 0b04 	add.w	fp, r6, r4
 8007e32:	46b9      	mov	r9, r7
 8007e34:	465d      	mov	r5, fp
 8007e36:	2300      	movs	r3, #0
 8007e38:	45bb      	cmp	fp, r7
 8007e3a:	d835      	bhi.n	8007ea8 <qsort+0x16c>
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	4658      	mov	r0, fp
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	47d0      	blx	sl
 8007e44:	2800      	cmp	r0, #0
 8007e46:	9b04      	ldr	r3, [sp, #16]
 8007e48:	dc3e      	bgt.n	8007ec8 <qsort+0x18c>
 8007e4a:	d10a      	bne.n	8007e62 <qsort+0x126>
 8007e4c:	f1b8 0f00 	cmp.w	r8, #0
 8007e50:	d113      	bne.n	8007e7a <qsort+0x13e>
 8007e52:	682b      	ldr	r3, [r5, #0]
 8007e54:	f8db 2000 	ldr.w	r2, [fp]
 8007e58:	602a      	str	r2, [r5, #0]
 8007e5a:	f8cb 3000 	str.w	r3, [fp]
 8007e5e:	4425      	add	r5, r4
 8007e60:	2301      	movs	r3, #1
 8007e62:	44a3      	add	fp, r4
 8007e64:	e7e8      	b.n	8007e38 <qsort+0xfc>
 8007e66:	463a      	mov	r2, r7
 8007e68:	46b3      	mov	fp, r6
 8007e6a:	e7d1      	b.n	8007e10 <qsort+0xd4>
 8007e6c:	4643      	mov	r3, r8
 8007e6e:	4622      	mov	r2, r4
 8007e70:	4649      	mov	r1, r9
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ff2a 	bl	8007ccc <swapfunc>
 8007e78:	e7d9      	b.n	8007e2e <qsort+0xf2>
 8007e7a:	4643      	mov	r3, r8
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4659      	mov	r1, fp
 8007e80:	4628      	mov	r0, r5
 8007e82:	f7ff ff23 	bl	8007ccc <swapfunc>
 8007e86:	e7ea      	b.n	8007e5e <qsort+0x122>
 8007e88:	d10b      	bne.n	8007ea2 <qsort+0x166>
 8007e8a:	f1b8 0f00 	cmp.w	r8, #0
 8007e8e:	d114      	bne.n	8007eba <qsort+0x17e>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	f8d9 2000 	ldr.w	r2, [r9]
 8007e96:	603a      	str	r2, [r7, #0]
 8007e98:	f8c9 3000 	str.w	r3, [r9]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	eba9 0904 	sub.w	r9, r9, r4
 8007ea2:	9f04      	ldr	r7, [sp, #16]
 8007ea4:	45bb      	cmp	fp, r7
 8007ea6:	d90f      	bls.n	8007ec8 <qsort+0x18c>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d143      	bne.n	8007f34 <qsort+0x1f8>
 8007eac:	9b01      	ldr	r3, [sp, #4]
 8007eae:	9a03      	ldr	r2, [sp, #12]
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	f4bf af61 	bcs.w	8007d78 <qsort+0x3c>
 8007eb6:	9d01      	ldr	r5, [sp, #4]
 8007eb8:	e036      	b.n	8007f28 <qsort+0x1ec>
 8007eba:	4643      	mov	r3, r8
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	f7ff ff03 	bl	8007ccc <swapfunc>
 8007ec6:	e7e9      	b.n	8007e9c <qsort+0x160>
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4638      	mov	r0, r7
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	47d0      	blx	sl
 8007ed0:	1b3b      	subs	r3, r7, r4
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	9304      	str	r3, [sp, #16]
 8007ed6:	9b05      	ldr	r3, [sp, #20]
 8007ed8:	dad6      	bge.n	8007e88 <qsort+0x14c>
 8007eda:	f1b8 0f00 	cmp.w	r8, #0
 8007ede:	d006      	beq.n	8007eee <qsort+0x1b2>
 8007ee0:	4643      	mov	r3, r8
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	4658      	mov	r0, fp
 8007ee8:	f7ff fef0 	bl	8007ccc <swapfunc>
 8007eec:	e005      	b.n	8007efa <qsort+0x1be>
 8007eee:	f8db 3000 	ldr.w	r3, [fp]
 8007ef2:	683a      	ldr	r2, [r7, #0]
 8007ef4:	f8cb 2000 	str.w	r2, [fp]
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	9f04      	ldr	r7, [sp, #16]
 8007efc:	e7b0      	b.n	8007e60 <qsort+0x124>
 8007efe:	4643      	mov	r3, r8
 8007f00:	4622      	mov	r2, r4
 8007f02:	4639      	mov	r1, r7
 8007f04:	4628      	mov	r0, r5
 8007f06:	f7ff fee1 	bl	8007ccc <swapfunc>
 8007f0a:	e00c      	b.n	8007f26 <qsort+0x1ea>
 8007f0c:	1b2f      	subs	r7, r5, r4
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4638      	mov	r0, r7
 8007f12:	47d0      	blx	sl
 8007f14:	2800      	cmp	r0, #0
 8007f16:	dd09      	ble.n	8007f2c <qsort+0x1f0>
 8007f18:	f1b8 0f00 	cmp.w	r8, #0
 8007f1c:	d1ef      	bne.n	8007efe <qsort+0x1c2>
 8007f1e:	682b      	ldr	r3, [r5, #0]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	602a      	str	r2, [r5, #0]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	463d      	mov	r5, r7
 8007f28:	42ae      	cmp	r6, r5
 8007f2a:	d3ef      	bcc.n	8007f0c <qsort+0x1d0>
 8007f2c:	9b01      	ldr	r3, [sp, #4]
 8007f2e:	4423      	add	r3, r4
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	e7bb      	b.n	8007eac <qsort+0x170>
 8007f34:	ebab 0305 	sub.w	r3, fp, r5
 8007f38:	1baa      	subs	r2, r5, r6
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	bfa8      	it	ge
 8007f3e:	461a      	movge	r2, r3
 8007f40:	9301      	str	r3, [sp, #4]
 8007f42:	b12a      	cbz	r2, 8007f50 <qsort+0x214>
 8007f44:	4643      	mov	r3, r8
 8007f46:	4630      	mov	r0, r6
 8007f48:	ebab 0102 	sub.w	r1, fp, r2
 8007f4c:	f7ff febe 	bl	8007ccc <swapfunc>
 8007f50:	9b03      	ldr	r3, [sp, #12]
 8007f52:	eba9 0707 	sub.w	r7, r9, r7
 8007f56:	eba3 0209 	sub.w	r2, r3, r9
 8007f5a:	1b12      	subs	r2, r2, r4
 8007f5c:	42ba      	cmp	r2, r7
 8007f5e:	bf28      	it	cs
 8007f60:	463a      	movcs	r2, r7
 8007f62:	b12a      	cbz	r2, 8007f70 <qsort+0x234>
 8007f64:	9903      	ldr	r1, [sp, #12]
 8007f66:	4643      	mov	r3, r8
 8007f68:	4658      	mov	r0, fp
 8007f6a:	1a89      	subs	r1, r1, r2
 8007f6c:	f7ff feae 	bl	8007ccc <swapfunc>
 8007f70:	9d01      	ldr	r5, [sp, #4]
 8007f72:	9b03      	ldr	r3, [sp, #12]
 8007f74:	42af      	cmp	r7, r5
 8007f76:	eba3 0007 	sub.w	r0, r3, r7
 8007f7a:	d904      	bls.n	8007f86 <qsort+0x24a>
 8007f7c:	4633      	mov	r3, r6
 8007f7e:	4606      	mov	r6, r0
 8007f80:	4618      	mov	r0, r3
 8007f82:	463d      	mov	r5, r7
 8007f84:	9f01      	ldr	r7, [sp, #4]
 8007f86:	42a7      	cmp	r7, r4
 8007f88:	d923      	bls.n	8007fd2 <qsort+0x296>
 8007f8a:	9b02      	ldr	r3, [sp, #8]
 8007f8c:	fbb7 f1f4 	udiv	r1, r7, r4
 8007f90:	2b07      	cmp	r3, #7
 8007f92:	d80e      	bhi.n	8007fb2 <qsort+0x276>
 8007f94:	fbb5 f5f4 	udiv	r5, r5, r4
 8007f98:	9a02      	ldr	r2, [sp, #8]
 8007f9a:	ab16      	add	r3, sp, #88	; 0x58
 8007f9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa0:	f843 6c40 	str.w	r6, [r3, #-64]
 8007fa4:	f843 5c3c 	str.w	r5, [r3, #-60]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	3301      	adds	r3, #1
 8007fac:	9302      	str	r3, [sp, #8]
 8007fae:	4606      	mov	r6, r0
 8007fb0:	e6d5      	b.n	8007d5e <qsort+0x22>
 8007fb2:	4653      	mov	r3, sl
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	f7ff fec1 	bl	8007d3c <qsort>
 8007fba:	42a5      	cmp	r5, r4
 8007fbc:	d80c      	bhi.n	8007fd8 <qsort+0x29c>
 8007fbe:	9b02      	ldr	r3, [sp, #8]
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	9302      	str	r3, [sp, #8]
 8007fc4:	9a02      	ldr	r2, [sp, #8]
 8007fc6:	ab16      	add	r3, sp, #88	; 0x58
 8007fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fcc:	e953 0110 	ldrd	r0, r1, [r3, #-64]	; 0x40
 8007fd0:	e7ed      	b.n	8007fae <qsort+0x272>
 8007fd2:	42a5      	cmp	r5, r4
 8007fd4:	f67f aed0 	bls.w	8007d78 <qsort+0x3c>
 8007fd8:	fbb5 f1f4 	udiv	r1, r5, r4
 8007fdc:	4630      	mov	r0, r6
 8007fde:	e7e6      	b.n	8007fae <qsort+0x272>

08007fe0 <_sbrk_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4d05      	ldr	r5, [pc, #20]	; (8007ffc <_sbrk_r+0x1c>)
 8007fe6:	4604      	mov	r4, r0
 8007fe8:	4608      	mov	r0, r1
 8007fea:	602b      	str	r3, [r5, #0]
 8007fec:	f7fb fa82 	bl	80034f4 <_sbrk>
 8007ff0:	1c43      	adds	r3, r0, #1
 8007ff2:	d102      	bne.n	8007ffa <_sbrk_r+0x1a>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	b103      	cbz	r3, 8007ffa <_sbrk_r+0x1a>
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	20002630 	.word	0x20002630

08008000 <siscanf>:
 8008000:	b40e      	push	{r1, r2, r3}
 8008002:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008006:	b530      	push	{r4, r5, lr}
 8008008:	b09c      	sub	sp, #112	; 0x70
 800800a:	ac1f      	add	r4, sp, #124	; 0x7c
 800800c:	f854 5b04 	ldr.w	r5, [r4], #4
 8008010:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008014:	9002      	str	r0, [sp, #8]
 8008016:	9006      	str	r0, [sp, #24]
 8008018:	f7f8 f89a 	bl	8000150 <strlen>
 800801c:	4b0b      	ldr	r3, [pc, #44]	; (800804c <siscanf+0x4c>)
 800801e:	9003      	str	r0, [sp, #12]
 8008020:	930b      	str	r3, [sp, #44]	; 0x2c
 8008022:	2300      	movs	r3, #0
 8008024:	930f      	str	r3, [sp, #60]	; 0x3c
 8008026:	9314      	str	r3, [sp, #80]	; 0x50
 8008028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800802c:	9007      	str	r0, [sp, #28]
 800802e:	4808      	ldr	r0, [pc, #32]	; (8008050 <siscanf+0x50>)
 8008030:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008034:	462a      	mov	r2, r5
 8008036:	4623      	mov	r3, r4
 8008038:	a902      	add	r1, sp, #8
 800803a:	6800      	ldr	r0, [r0, #0]
 800803c:	9401      	str	r4, [sp, #4]
 800803e:	f001 fdd7 	bl	8009bf0 <__ssvfiscanf_r>
 8008042:	b01c      	add	sp, #112	; 0x70
 8008044:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008048:	b003      	add	sp, #12
 800804a:	4770      	bx	lr
 800804c:	08008077 	.word	0x08008077
 8008050:	20000014 	.word	0x20000014

08008054 <__sread>:
 8008054:	b510      	push	{r4, lr}
 8008056:	460c      	mov	r4, r1
 8008058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805c:	f002 fa34 	bl	800a4c8 <_read_r>
 8008060:	2800      	cmp	r0, #0
 8008062:	bfab      	itete	ge
 8008064:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008066:	89a3      	ldrhlt	r3, [r4, #12]
 8008068:	181b      	addge	r3, r3, r0
 800806a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800806e:	bfac      	ite	ge
 8008070:	6563      	strge	r3, [r4, #84]	; 0x54
 8008072:	81a3      	strhlt	r3, [r4, #12]
 8008074:	bd10      	pop	{r4, pc}

08008076 <__seofread>:
 8008076:	2000      	movs	r0, #0
 8008078:	4770      	bx	lr

0800807a <__swrite>:
 800807a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807e:	461f      	mov	r7, r3
 8008080:	898b      	ldrh	r3, [r1, #12]
 8008082:	4605      	mov	r5, r0
 8008084:	05db      	lsls	r3, r3, #23
 8008086:	460c      	mov	r4, r1
 8008088:	4616      	mov	r6, r2
 800808a:	d505      	bpl.n	8008098 <__swrite+0x1e>
 800808c:	2302      	movs	r3, #2
 800808e:	2200      	movs	r2, #0
 8008090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008094:	f001 f93e 	bl	8009314 <_lseek_r>
 8008098:	89a3      	ldrh	r3, [r4, #12]
 800809a:	4632      	mov	r2, r6
 800809c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	4628      	mov	r0, r5
 80080a4:	463b      	mov	r3, r7
 80080a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080ae:	f000 b869 	b.w	8008184 <_write_r>

080080b2 <__sseek>:
 80080b2:	b510      	push	{r4, lr}
 80080b4:	460c      	mov	r4, r1
 80080b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ba:	f001 f92b 	bl	8009314 <_lseek_r>
 80080be:	1c43      	adds	r3, r0, #1
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	bf15      	itete	ne
 80080c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80080c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80080ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80080ce:	81a3      	strheq	r3, [r4, #12]
 80080d0:	bf18      	it	ne
 80080d2:	81a3      	strhne	r3, [r4, #12]
 80080d4:	bd10      	pop	{r4, pc}

080080d6 <__sclose>:
 80080d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080da:	f000 b8d3 	b.w	8008284 <_close_r>
	...

080080e0 <__swbuf_r>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	460e      	mov	r6, r1
 80080e4:	4614      	mov	r4, r2
 80080e6:	4605      	mov	r5, r0
 80080e8:	b118      	cbz	r0, 80080f2 <__swbuf_r+0x12>
 80080ea:	6983      	ldr	r3, [r0, #24]
 80080ec:	b90b      	cbnz	r3, 80080f2 <__swbuf_r+0x12>
 80080ee:	f001 f86b 	bl	80091c8 <__sinit>
 80080f2:	4b21      	ldr	r3, [pc, #132]	; (8008178 <__swbuf_r+0x98>)
 80080f4:	429c      	cmp	r4, r3
 80080f6:	d12b      	bne.n	8008150 <__swbuf_r+0x70>
 80080f8:	686c      	ldr	r4, [r5, #4]
 80080fa:	69a3      	ldr	r3, [r4, #24]
 80080fc:	60a3      	str	r3, [r4, #8]
 80080fe:	89a3      	ldrh	r3, [r4, #12]
 8008100:	071a      	lsls	r2, r3, #28
 8008102:	d52f      	bpl.n	8008164 <__swbuf_r+0x84>
 8008104:	6923      	ldr	r3, [r4, #16]
 8008106:	b36b      	cbz	r3, 8008164 <__swbuf_r+0x84>
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	6820      	ldr	r0, [r4, #0]
 800810c:	b2f6      	uxtb	r6, r6
 800810e:	1ac0      	subs	r0, r0, r3
 8008110:	6963      	ldr	r3, [r4, #20]
 8008112:	4637      	mov	r7, r6
 8008114:	4283      	cmp	r3, r0
 8008116:	dc04      	bgt.n	8008122 <__swbuf_r+0x42>
 8008118:	4621      	mov	r1, r4
 800811a:	4628      	mov	r0, r5
 800811c:	f000 ffc0 	bl	80090a0 <_fflush_r>
 8008120:	bb30      	cbnz	r0, 8008170 <__swbuf_r+0x90>
 8008122:	68a3      	ldr	r3, [r4, #8]
 8008124:	3001      	adds	r0, #1
 8008126:	3b01      	subs	r3, #1
 8008128:	60a3      	str	r3, [r4, #8]
 800812a:	6823      	ldr	r3, [r4, #0]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	6022      	str	r2, [r4, #0]
 8008130:	701e      	strb	r6, [r3, #0]
 8008132:	6963      	ldr	r3, [r4, #20]
 8008134:	4283      	cmp	r3, r0
 8008136:	d004      	beq.n	8008142 <__swbuf_r+0x62>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	07db      	lsls	r3, r3, #31
 800813c:	d506      	bpl.n	800814c <__swbuf_r+0x6c>
 800813e:	2e0a      	cmp	r6, #10
 8008140:	d104      	bne.n	800814c <__swbuf_r+0x6c>
 8008142:	4621      	mov	r1, r4
 8008144:	4628      	mov	r0, r5
 8008146:	f000 ffab 	bl	80090a0 <_fflush_r>
 800814a:	b988      	cbnz	r0, 8008170 <__swbuf_r+0x90>
 800814c:	4638      	mov	r0, r7
 800814e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008150:	4b0a      	ldr	r3, [pc, #40]	; (800817c <__swbuf_r+0x9c>)
 8008152:	429c      	cmp	r4, r3
 8008154:	d101      	bne.n	800815a <__swbuf_r+0x7a>
 8008156:	68ac      	ldr	r4, [r5, #8]
 8008158:	e7cf      	b.n	80080fa <__swbuf_r+0x1a>
 800815a:	4b09      	ldr	r3, [pc, #36]	; (8008180 <__swbuf_r+0xa0>)
 800815c:	429c      	cmp	r4, r3
 800815e:	bf08      	it	eq
 8008160:	68ec      	ldreq	r4, [r5, #12]
 8008162:	e7ca      	b.n	80080fa <__swbuf_r+0x1a>
 8008164:	4621      	mov	r1, r4
 8008166:	4628      	mov	r0, r5
 8008168:	f000 f81e 	bl	80081a8 <__swsetup_r>
 800816c:	2800      	cmp	r0, #0
 800816e:	d0cb      	beq.n	8008108 <__swbuf_r+0x28>
 8008170:	f04f 37ff 	mov.w	r7, #4294967295
 8008174:	e7ea      	b.n	800814c <__swbuf_r+0x6c>
 8008176:	bf00      	nop
 8008178:	0800ae04 	.word	0x0800ae04
 800817c:	0800ae24 	.word	0x0800ae24
 8008180:	0800ade4 	.word	0x0800ade4

08008184 <_write_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4604      	mov	r4, r0
 8008188:	4608      	mov	r0, r1
 800818a:	4611      	mov	r1, r2
 800818c:	2200      	movs	r2, #0
 800818e:	4d05      	ldr	r5, [pc, #20]	; (80081a4 <_write_r+0x20>)
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7fb f962 	bl	800345c <_write>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_write_r+0x1e>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_write_r+0x1e>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20002630 	.word	0x20002630

080081a8 <__swsetup_r>:
 80081a8:	4b32      	ldr	r3, [pc, #200]	; (8008274 <__swsetup_r+0xcc>)
 80081aa:	b570      	push	{r4, r5, r6, lr}
 80081ac:	681d      	ldr	r5, [r3, #0]
 80081ae:	4606      	mov	r6, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	b125      	cbz	r5, 80081be <__swsetup_r+0x16>
 80081b4:	69ab      	ldr	r3, [r5, #24]
 80081b6:	b913      	cbnz	r3, 80081be <__swsetup_r+0x16>
 80081b8:	4628      	mov	r0, r5
 80081ba:	f001 f805 	bl	80091c8 <__sinit>
 80081be:	4b2e      	ldr	r3, [pc, #184]	; (8008278 <__swsetup_r+0xd0>)
 80081c0:	429c      	cmp	r4, r3
 80081c2:	d10f      	bne.n	80081e4 <__swsetup_r+0x3c>
 80081c4:	686c      	ldr	r4, [r5, #4]
 80081c6:	89a3      	ldrh	r3, [r4, #12]
 80081c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081cc:	0719      	lsls	r1, r3, #28
 80081ce:	d42c      	bmi.n	800822a <__swsetup_r+0x82>
 80081d0:	06dd      	lsls	r5, r3, #27
 80081d2:	d411      	bmi.n	80081f8 <__swsetup_r+0x50>
 80081d4:	2309      	movs	r3, #9
 80081d6:	6033      	str	r3, [r6, #0]
 80081d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081dc:	f04f 30ff 	mov.w	r0, #4294967295
 80081e0:	81a3      	strh	r3, [r4, #12]
 80081e2:	e03e      	b.n	8008262 <__swsetup_r+0xba>
 80081e4:	4b25      	ldr	r3, [pc, #148]	; (800827c <__swsetup_r+0xd4>)
 80081e6:	429c      	cmp	r4, r3
 80081e8:	d101      	bne.n	80081ee <__swsetup_r+0x46>
 80081ea:	68ac      	ldr	r4, [r5, #8]
 80081ec:	e7eb      	b.n	80081c6 <__swsetup_r+0x1e>
 80081ee:	4b24      	ldr	r3, [pc, #144]	; (8008280 <__swsetup_r+0xd8>)
 80081f0:	429c      	cmp	r4, r3
 80081f2:	bf08      	it	eq
 80081f4:	68ec      	ldreq	r4, [r5, #12]
 80081f6:	e7e6      	b.n	80081c6 <__swsetup_r+0x1e>
 80081f8:	0758      	lsls	r0, r3, #29
 80081fa:	d512      	bpl.n	8008222 <__swsetup_r+0x7a>
 80081fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081fe:	b141      	cbz	r1, 8008212 <__swsetup_r+0x6a>
 8008200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008204:	4299      	cmp	r1, r3
 8008206:	d002      	beq.n	800820e <__swsetup_r+0x66>
 8008208:	4630      	mov	r0, r6
 800820a:	f7fe ff81 	bl	8007110 <_free_r>
 800820e:	2300      	movs	r3, #0
 8008210:	6363      	str	r3, [r4, #52]	; 0x34
 8008212:	89a3      	ldrh	r3, [r4, #12]
 8008214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008218:	81a3      	strh	r3, [r4, #12]
 800821a:	2300      	movs	r3, #0
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	6923      	ldr	r3, [r4, #16]
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f043 0308 	orr.w	r3, r3, #8
 8008228:	81a3      	strh	r3, [r4, #12]
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	b94b      	cbnz	r3, 8008242 <__swsetup_r+0x9a>
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008238:	d003      	beq.n	8008242 <__swsetup_r+0x9a>
 800823a:	4621      	mov	r1, r4
 800823c:	4630      	mov	r0, r6
 800823e:	f001 f8a1 	bl	8009384 <__smakebuf_r>
 8008242:	89a0      	ldrh	r0, [r4, #12]
 8008244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008248:	f010 0301 	ands.w	r3, r0, #1
 800824c:	d00a      	beq.n	8008264 <__swsetup_r+0xbc>
 800824e:	2300      	movs	r3, #0
 8008250:	60a3      	str	r3, [r4, #8]
 8008252:	6963      	ldr	r3, [r4, #20]
 8008254:	425b      	negs	r3, r3
 8008256:	61a3      	str	r3, [r4, #24]
 8008258:	6923      	ldr	r3, [r4, #16]
 800825a:	b943      	cbnz	r3, 800826e <__swsetup_r+0xc6>
 800825c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008260:	d1ba      	bne.n	80081d8 <__swsetup_r+0x30>
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	0781      	lsls	r1, r0, #30
 8008266:	bf58      	it	pl
 8008268:	6963      	ldrpl	r3, [r4, #20]
 800826a:	60a3      	str	r3, [r4, #8]
 800826c:	e7f4      	b.n	8008258 <__swsetup_r+0xb0>
 800826e:	2000      	movs	r0, #0
 8008270:	e7f7      	b.n	8008262 <__swsetup_r+0xba>
 8008272:	bf00      	nop
 8008274:	20000014 	.word	0x20000014
 8008278:	0800ae04 	.word	0x0800ae04
 800827c:	0800ae24 	.word	0x0800ae24
 8008280:	0800ade4 	.word	0x0800ade4

08008284 <_close_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	2300      	movs	r3, #0
 8008288:	4d05      	ldr	r5, [pc, #20]	; (80082a0 <_close_r+0x1c>)
 800828a:	4604      	mov	r4, r0
 800828c:	4608      	mov	r0, r1
 800828e:	602b      	str	r3, [r5, #0]
 8008290:	f7fb f900 	bl	8003494 <_close>
 8008294:	1c43      	adds	r3, r0, #1
 8008296:	d102      	bne.n	800829e <_close_r+0x1a>
 8008298:	682b      	ldr	r3, [r5, #0]
 800829a:	b103      	cbz	r3, 800829e <_close_r+0x1a>
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	bd38      	pop	{r3, r4, r5, pc}
 80082a0:	20002630 	.word	0x20002630

080082a4 <quorem>:
 80082a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	6903      	ldr	r3, [r0, #16]
 80082aa:	690c      	ldr	r4, [r1, #16]
 80082ac:	4607      	mov	r7, r0
 80082ae:	42a3      	cmp	r3, r4
 80082b0:	f2c0 8082 	blt.w	80083b8 <quorem+0x114>
 80082b4:	3c01      	subs	r4, #1
 80082b6:	f100 0514 	add.w	r5, r0, #20
 80082ba:	f101 0814 	add.w	r8, r1, #20
 80082be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082cc:	3301      	adds	r3, #1
 80082ce:	429a      	cmp	r2, r3
 80082d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80082d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80082d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082dc:	d331      	bcc.n	8008342 <quorem+0x9e>
 80082de:	f04f 0e00 	mov.w	lr, #0
 80082e2:	4640      	mov	r0, r8
 80082e4:	46ac      	mov	ip, r5
 80082e6:	46f2      	mov	sl, lr
 80082e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80082ec:	b293      	uxth	r3, r2
 80082ee:	fb06 e303 	mla	r3, r6, r3, lr
 80082f2:	0c12      	lsrs	r2, r2, #16
 80082f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	fb06 e202 	mla	r2, r6, r2, lr
 80082fe:	ebaa 0303 	sub.w	r3, sl, r3
 8008302:	f8dc a000 	ldr.w	sl, [ip]
 8008306:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800830a:	fa1f fa8a 	uxth.w	sl, sl
 800830e:	4453      	add	r3, sl
 8008310:	f8dc a000 	ldr.w	sl, [ip]
 8008314:	b292      	uxth	r2, r2
 8008316:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800831a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800831e:	b29b      	uxth	r3, r3
 8008320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008324:	4581      	cmp	r9, r0
 8008326:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800832a:	f84c 3b04 	str.w	r3, [ip], #4
 800832e:	d2db      	bcs.n	80082e8 <quorem+0x44>
 8008330:	f855 300b 	ldr.w	r3, [r5, fp]
 8008334:	b92b      	cbnz	r3, 8008342 <quorem+0x9e>
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	3b04      	subs	r3, #4
 800833a:	429d      	cmp	r5, r3
 800833c:	461a      	mov	r2, r3
 800833e:	d32f      	bcc.n	80083a0 <quorem+0xfc>
 8008340:	613c      	str	r4, [r7, #16]
 8008342:	4638      	mov	r0, r7
 8008344:	f001 faf6 	bl	8009934 <__mcmp>
 8008348:	2800      	cmp	r0, #0
 800834a:	db25      	blt.n	8008398 <quorem+0xf4>
 800834c:	4628      	mov	r0, r5
 800834e:	f04f 0c00 	mov.w	ip, #0
 8008352:	3601      	adds	r6, #1
 8008354:	f858 1b04 	ldr.w	r1, [r8], #4
 8008358:	f8d0 e000 	ldr.w	lr, [r0]
 800835c:	b28b      	uxth	r3, r1
 800835e:	ebac 0303 	sub.w	r3, ip, r3
 8008362:	fa1f f28e 	uxth.w	r2, lr
 8008366:	4413      	add	r3, r2
 8008368:	0c0a      	lsrs	r2, r1, #16
 800836a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800836e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008372:	b29b      	uxth	r3, r3
 8008374:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008378:	45c1      	cmp	r9, r8
 800837a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800837e:	f840 3b04 	str.w	r3, [r0], #4
 8008382:	d2e7      	bcs.n	8008354 <quorem+0xb0>
 8008384:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008388:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800838c:	b922      	cbnz	r2, 8008398 <quorem+0xf4>
 800838e:	3b04      	subs	r3, #4
 8008390:	429d      	cmp	r5, r3
 8008392:	461a      	mov	r2, r3
 8008394:	d30a      	bcc.n	80083ac <quorem+0x108>
 8008396:	613c      	str	r4, [r7, #16]
 8008398:	4630      	mov	r0, r6
 800839a:	b003      	add	sp, #12
 800839c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083a0:	6812      	ldr	r2, [r2, #0]
 80083a2:	3b04      	subs	r3, #4
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	d1cb      	bne.n	8008340 <quorem+0x9c>
 80083a8:	3c01      	subs	r4, #1
 80083aa:	e7c6      	b.n	800833a <quorem+0x96>
 80083ac:	6812      	ldr	r2, [r2, #0]
 80083ae:	3b04      	subs	r3, #4
 80083b0:	2a00      	cmp	r2, #0
 80083b2:	d1f0      	bne.n	8008396 <quorem+0xf2>
 80083b4:	3c01      	subs	r4, #1
 80083b6:	e7eb      	b.n	8008390 <quorem+0xec>
 80083b8:	2000      	movs	r0, #0
 80083ba:	e7ee      	b.n	800839a <quorem+0xf6>
 80083bc:	0000      	movs	r0, r0
	...

080083c0 <_dtoa_r>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	4616      	mov	r6, r2
 80083c6:	461f      	mov	r7, r3
 80083c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80083ca:	b099      	sub	sp, #100	; 0x64
 80083cc:	4605      	mov	r5, r0
 80083ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80083d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80083d6:	b974      	cbnz	r4, 80083f6 <_dtoa_r+0x36>
 80083d8:	2010      	movs	r0, #16
 80083da:	f7fe fe5f 	bl	800709c <malloc>
 80083de:	4602      	mov	r2, r0
 80083e0:	6268      	str	r0, [r5, #36]	; 0x24
 80083e2:	b920      	cbnz	r0, 80083ee <_dtoa_r+0x2e>
 80083e4:	21ea      	movs	r1, #234	; 0xea
 80083e6:	4ba8      	ldr	r3, [pc, #672]	; (8008688 <_dtoa_r+0x2c8>)
 80083e8:	48a8      	ldr	r0, [pc, #672]	; (800868c <_dtoa_r+0x2cc>)
 80083ea:	f002 f9e1 	bl	800a7b0 <__assert_func>
 80083ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083f2:	6004      	str	r4, [r0, #0]
 80083f4:	60c4      	str	r4, [r0, #12]
 80083f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80083f8:	6819      	ldr	r1, [r3, #0]
 80083fa:	b151      	cbz	r1, 8008412 <_dtoa_r+0x52>
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	2301      	movs	r3, #1
 8008400:	4093      	lsls	r3, r2
 8008402:	604a      	str	r2, [r1, #4]
 8008404:	608b      	str	r3, [r1, #8]
 8008406:	4628      	mov	r0, r5
 8008408:	f001 f856 	bl	80094b8 <_Bfree>
 800840c:	2200      	movs	r2, #0
 800840e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	1e3b      	subs	r3, r7, #0
 8008414:	bfaf      	iteee	ge
 8008416:	2300      	movge	r3, #0
 8008418:	2201      	movlt	r2, #1
 800841a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800841e:	9305      	strlt	r3, [sp, #20]
 8008420:	bfa8      	it	ge
 8008422:	f8c8 3000 	strge.w	r3, [r8]
 8008426:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800842a:	4b99      	ldr	r3, [pc, #612]	; (8008690 <_dtoa_r+0x2d0>)
 800842c:	bfb8      	it	lt
 800842e:	f8c8 2000 	strlt.w	r2, [r8]
 8008432:	ea33 0309 	bics.w	r3, r3, r9
 8008436:	d119      	bne.n	800846c <_dtoa_r+0xac>
 8008438:	f242 730f 	movw	r3, #9999	; 0x270f
 800843c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008444:	4333      	orrs	r3, r6
 8008446:	f000 857f 	beq.w	8008f48 <_dtoa_r+0xb88>
 800844a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800844c:	b953      	cbnz	r3, 8008464 <_dtoa_r+0xa4>
 800844e:	4b91      	ldr	r3, [pc, #580]	; (8008694 <_dtoa_r+0x2d4>)
 8008450:	e022      	b.n	8008498 <_dtoa_r+0xd8>
 8008452:	4b91      	ldr	r3, [pc, #580]	; (8008698 <_dtoa_r+0x2d8>)
 8008454:	9303      	str	r3, [sp, #12]
 8008456:	3308      	adds	r3, #8
 8008458:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800845a:	6013      	str	r3, [r2, #0]
 800845c:	9803      	ldr	r0, [sp, #12]
 800845e:	b019      	add	sp, #100	; 0x64
 8008460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008464:	4b8b      	ldr	r3, [pc, #556]	; (8008694 <_dtoa_r+0x2d4>)
 8008466:	9303      	str	r3, [sp, #12]
 8008468:	3303      	adds	r3, #3
 800846a:	e7f5      	b.n	8008458 <_dtoa_r+0x98>
 800846c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008470:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	f7f8 fa94 	bl	80009a8 <__aeabi_dcmpeq>
 8008480:	4680      	mov	r8, r0
 8008482:	b158      	cbz	r0, 800849c <_dtoa_r+0xdc>
 8008484:	2301      	movs	r3, #1
 8008486:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008488:	6013      	str	r3, [r2, #0]
 800848a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8558 	beq.w	8008f42 <_dtoa_r+0xb82>
 8008492:	4882      	ldr	r0, [pc, #520]	; (800869c <_dtoa_r+0x2dc>)
 8008494:	6018      	str	r0, [r3, #0]
 8008496:	1e43      	subs	r3, r0, #1
 8008498:	9303      	str	r3, [sp, #12]
 800849a:	e7df      	b.n	800845c <_dtoa_r+0x9c>
 800849c:	ab16      	add	r3, sp, #88	; 0x58
 800849e:	9301      	str	r3, [sp, #4]
 80084a0:	ab17      	add	r3, sp, #92	; 0x5c
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	4628      	mov	r0, r5
 80084a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80084aa:	f001 faeb 	bl	8009a84 <__d2b>
 80084ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084b2:	4683      	mov	fp, r0
 80084b4:	2c00      	cmp	r4, #0
 80084b6:	d07f      	beq.n	80085b8 <_dtoa_r+0x1f8>
 80084b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80084c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80084ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80084ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80084d2:	2200      	movs	r2, #0
 80084d4:	4b72      	ldr	r3, [pc, #456]	; (80086a0 <_dtoa_r+0x2e0>)
 80084d6:	f7f7 fe47 	bl	8000168 <__aeabi_dsub>
 80084da:	a365      	add	r3, pc, #404	; (adr r3, 8008670 <_dtoa_r+0x2b0>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f7f7 fffa 	bl	80004d8 <__aeabi_dmul>
 80084e4:	a364      	add	r3, pc, #400	; (adr r3, 8008678 <_dtoa_r+0x2b8>)
 80084e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ea:	f7f7 fe3f 	bl	800016c <__adddf3>
 80084ee:	4606      	mov	r6, r0
 80084f0:	4620      	mov	r0, r4
 80084f2:	460f      	mov	r7, r1
 80084f4:	f7f7 ff86 	bl	8000404 <__aeabi_i2d>
 80084f8:	a361      	add	r3, pc, #388	; (adr r3, 8008680 <_dtoa_r+0x2c0>)
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	f7f7 ffeb 	bl	80004d8 <__aeabi_dmul>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	4630      	mov	r0, r6
 8008508:	4639      	mov	r1, r7
 800850a:	f7f7 fe2f 	bl	800016c <__adddf3>
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	f7f8 fa91 	bl	8000a38 <__aeabi_d2iz>
 8008516:	2200      	movs	r2, #0
 8008518:	4682      	mov	sl, r0
 800851a:	2300      	movs	r3, #0
 800851c:	4630      	mov	r0, r6
 800851e:	4639      	mov	r1, r7
 8008520:	f7f8 fa4c 	bl	80009bc <__aeabi_dcmplt>
 8008524:	b148      	cbz	r0, 800853a <_dtoa_r+0x17a>
 8008526:	4650      	mov	r0, sl
 8008528:	f7f7 ff6c 	bl	8000404 <__aeabi_i2d>
 800852c:	4632      	mov	r2, r6
 800852e:	463b      	mov	r3, r7
 8008530:	f7f8 fa3a 	bl	80009a8 <__aeabi_dcmpeq>
 8008534:	b908      	cbnz	r0, 800853a <_dtoa_r+0x17a>
 8008536:	f10a 3aff 	add.w	sl, sl, #4294967295
 800853a:	f1ba 0f16 	cmp.w	sl, #22
 800853e:	d858      	bhi.n	80085f2 <_dtoa_r+0x232>
 8008540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008544:	4b57      	ldr	r3, [pc, #348]	; (80086a4 <_dtoa_r+0x2e4>)
 8008546:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800854a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800854e:	f7f8 fa35 	bl	80009bc <__aeabi_dcmplt>
 8008552:	2800      	cmp	r0, #0
 8008554:	d04f      	beq.n	80085f6 <_dtoa_r+0x236>
 8008556:	2300      	movs	r3, #0
 8008558:	f10a 3aff 	add.w	sl, sl, #4294967295
 800855c:	930f      	str	r3, [sp, #60]	; 0x3c
 800855e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008560:	1b1c      	subs	r4, r3, r4
 8008562:	1e63      	subs	r3, r4, #1
 8008564:	9309      	str	r3, [sp, #36]	; 0x24
 8008566:	bf49      	itett	mi
 8008568:	f1c4 0301 	rsbmi	r3, r4, #1
 800856c:	2300      	movpl	r3, #0
 800856e:	9306      	strmi	r3, [sp, #24]
 8008570:	2300      	movmi	r3, #0
 8008572:	bf54      	ite	pl
 8008574:	9306      	strpl	r3, [sp, #24]
 8008576:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008578:	f1ba 0f00 	cmp.w	sl, #0
 800857c:	db3d      	blt.n	80085fa <_dtoa_r+0x23a>
 800857e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008580:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008584:	4453      	add	r3, sl
 8008586:	9309      	str	r3, [sp, #36]	; 0x24
 8008588:	2300      	movs	r3, #0
 800858a:	930a      	str	r3, [sp, #40]	; 0x28
 800858c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800858e:	2b09      	cmp	r3, #9
 8008590:	f200 808c 	bhi.w	80086ac <_dtoa_r+0x2ec>
 8008594:	2b05      	cmp	r3, #5
 8008596:	bfc4      	itt	gt
 8008598:	3b04      	subgt	r3, #4
 800859a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800859c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800859e:	bfc8      	it	gt
 80085a0:	2400      	movgt	r4, #0
 80085a2:	f1a3 0302 	sub.w	r3, r3, #2
 80085a6:	bfd8      	it	le
 80085a8:	2401      	movle	r4, #1
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	f200 808a 	bhi.w	80086c4 <_dtoa_r+0x304>
 80085b0:	e8df f003 	tbb	[pc, r3]
 80085b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80085b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80085bc:	441c      	add	r4, r3
 80085be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	bfc3      	ittte	gt
 80085c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80085ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80085ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80085d2:	f1c3 0320 	rsble	r3, r3, #32
 80085d6:	bfc6      	itte	gt
 80085d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80085dc:	4318      	orrgt	r0, r3
 80085de:	fa06 f003 	lslle.w	r0, r6, r3
 80085e2:	f7f7 feff 	bl	80003e4 <__aeabi_ui2d>
 80085e6:	2301      	movs	r3, #1
 80085e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80085ec:	3c01      	subs	r4, #1
 80085ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80085f0:	e76f      	b.n	80084d2 <_dtoa_r+0x112>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e7b2      	b.n	800855c <_dtoa_r+0x19c>
 80085f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80085f8:	e7b1      	b.n	800855e <_dtoa_r+0x19e>
 80085fa:	9b06      	ldr	r3, [sp, #24]
 80085fc:	eba3 030a 	sub.w	r3, r3, sl
 8008600:	9306      	str	r3, [sp, #24]
 8008602:	f1ca 0300 	rsb	r3, sl, #0
 8008606:	930a      	str	r3, [sp, #40]	; 0x28
 8008608:	2300      	movs	r3, #0
 800860a:	930e      	str	r3, [sp, #56]	; 0x38
 800860c:	e7be      	b.n	800858c <_dtoa_r+0x1cc>
 800860e:	2300      	movs	r3, #0
 8008610:	930b      	str	r3, [sp, #44]	; 0x2c
 8008612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008614:	2b00      	cmp	r3, #0
 8008616:	dc58      	bgt.n	80086ca <_dtoa_r+0x30a>
 8008618:	f04f 0901 	mov.w	r9, #1
 800861c:	464b      	mov	r3, r9
 800861e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008622:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008626:	2200      	movs	r2, #0
 8008628:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800862a:	6042      	str	r2, [r0, #4]
 800862c:	2204      	movs	r2, #4
 800862e:	f102 0614 	add.w	r6, r2, #20
 8008632:	429e      	cmp	r6, r3
 8008634:	6841      	ldr	r1, [r0, #4]
 8008636:	d94e      	bls.n	80086d6 <_dtoa_r+0x316>
 8008638:	4628      	mov	r0, r5
 800863a:	f000 fefd 	bl	8009438 <_Balloc>
 800863e:	9003      	str	r0, [sp, #12]
 8008640:	2800      	cmp	r0, #0
 8008642:	d14c      	bne.n	80086de <_dtoa_r+0x31e>
 8008644:	4602      	mov	r2, r0
 8008646:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800864a:	4b17      	ldr	r3, [pc, #92]	; (80086a8 <_dtoa_r+0x2e8>)
 800864c:	e6cc      	b.n	80083e8 <_dtoa_r+0x28>
 800864e:	2301      	movs	r3, #1
 8008650:	e7de      	b.n	8008610 <_dtoa_r+0x250>
 8008652:	2300      	movs	r3, #0
 8008654:	930b      	str	r3, [sp, #44]	; 0x2c
 8008656:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008658:	eb0a 0903 	add.w	r9, sl, r3
 800865c:	f109 0301 	add.w	r3, r9, #1
 8008660:	2b01      	cmp	r3, #1
 8008662:	9308      	str	r3, [sp, #32]
 8008664:	bfb8      	it	lt
 8008666:	2301      	movlt	r3, #1
 8008668:	e7dd      	b.n	8008626 <_dtoa_r+0x266>
 800866a:	2301      	movs	r3, #1
 800866c:	e7f2      	b.n	8008654 <_dtoa_r+0x294>
 800866e:	bf00      	nop
 8008670:	636f4361 	.word	0x636f4361
 8008674:	3fd287a7 	.word	0x3fd287a7
 8008678:	8b60c8b3 	.word	0x8b60c8b3
 800867c:	3fc68a28 	.word	0x3fc68a28
 8008680:	509f79fb 	.word	0x509f79fb
 8008684:	3fd34413 	.word	0x3fd34413
 8008688:	0800ad5f 	.word	0x0800ad5f
 800868c:	0800ad76 	.word	0x0800ad76
 8008690:	7ff00000 	.word	0x7ff00000
 8008694:	0800ad5b 	.word	0x0800ad5b
 8008698:	0800ad52 	.word	0x0800ad52
 800869c:	0800afb2 	.word	0x0800afb2
 80086a0:	3ff80000 	.word	0x3ff80000
 80086a4:	0800aec8 	.word	0x0800aec8
 80086a8:	0800add1 	.word	0x0800add1
 80086ac:	2401      	movs	r4, #1
 80086ae:	2300      	movs	r3, #0
 80086b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80086b2:	9322      	str	r3, [sp, #136]	; 0x88
 80086b4:	f04f 39ff 	mov.w	r9, #4294967295
 80086b8:	2200      	movs	r2, #0
 80086ba:	2312      	movs	r3, #18
 80086bc:	f8cd 9020 	str.w	r9, [sp, #32]
 80086c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80086c2:	e7b0      	b.n	8008626 <_dtoa_r+0x266>
 80086c4:	2301      	movs	r3, #1
 80086c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80086c8:	e7f4      	b.n	80086b4 <_dtoa_r+0x2f4>
 80086ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80086ce:	464b      	mov	r3, r9
 80086d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80086d4:	e7a7      	b.n	8008626 <_dtoa_r+0x266>
 80086d6:	3101      	adds	r1, #1
 80086d8:	6041      	str	r1, [r0, #4]
 80086da:	0052      	lsls	r2, r2, #1
 80086dc:	e7a7      	b.n	800862e <_dtoa_r+0x26e>
 80086de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086e0:	9a03      	ldr	r2, [sp, #12]
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	2b0e      	cmp	r3, #14
 80086e8:	f200 80a8 	bhi.w	800883c <_dtoa_r+0x47c>
 80086ec:	2c00      	cmp	r4, #0
 80086ee:	f000 80a5 	beq.w	800883c <_dtoa_r+0x47c>
 80086f2:	f1ba 0f00 	cmp.w	sl, #0
 80086f6:	dd34      	ble.n	8008762 <_dtoa_r+0x3a2>
 80086f8:	4a9a      	ldr	r2, [pc, #616]	; (8008964 <_dtoa_r+0x5a4>)
 80086fa:	f00a 030f 	and.w	r3, sl, #15
 80086fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008702:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008706:	e9d3 3400 	ldrd	r3, r4, [r3]
 800870a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800870e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008712:	d016      	beq.n	8008742 <_dtoa_r+0x382>
 8008714:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008718:	4b93      	ldr	r3, [pc, #588]	; (8008968 <_dtoa_r+0x5a8>)
 800871a:	2703      	movs	r7, #3
 800871c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008720:	f7f8 f804 	bl	800072c <__aeabi_ddiv>
 8008724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008728:	f004 040f 	and.w	r4, r4, #15
 800872c:	4e8e      	ldr	r6, [pc, #568]	; (8008968 <_dtoa_r+0x5a8>)
 800872e:	b954      	cbnz	r4, 8008746 <_dtoa_r+0x386>
 8008730:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008738:	f7f7 fff8 	bl	800072c <__aeabi_ddiv>
 800873c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008740:	e029      	b.n	8008796 <_dtoa_r+0x3d6>
 8008742:	2702      	movs	r7, #2
 8008744:	e7f2      	b.n	800872c <_dtoa_r+0x36c>
 8008746:	07e1      	lsls	r1, r4, #31
 8008748:	d508      	bpl.n	800875c <_dtoa_r+0x39c>
 800874a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800874e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008752:	f7f7 fec1 	bl	80004d8 <__aeabi_dmul>
 8008756:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800875a:	3701      	adds	r7, #1
 800875c:	1064      	asrs	r4, r4, #1
 800875e:	3608      	adds	r6, #8
 8008760:	e7e5      	b.n	800872e <_dtoa_r+0x36e>
 8008762:	f000 80a5 	beq.w	80088b0 <_dtoa_r+0x4f0>
 8008766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800876a:	f1ca 0400 	rsb	r4, sl, #0
 800876e:	4b7d      	ldr	r3, [pc, #500]	; (8008964 <_dtoa_r+0x5a4>)
 8008770:	f004 020f 	and.w	r2, r4, #15
 8008774:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800877c:	f7f7 feac 	bl	80004d8 <__aeabi_dmul>
 8008780:	2702      	movs	r7, #2
 8008782:	2300      	movs	r3, #0
 8008784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008788:	4e77      	ldr	r6, [pc, #476]	; (8008968 <_dtoa_r+0x5a8>)
 800878a:	1124      	asrs	r4, r4, #4
 800878c:	2c00      	cmp	r4, #0
 800878e:	f040 8084 	bne.w	800889a <_dtoa_r+0x4da>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1d2      	bne.n	800873c <_dtoa_r+0x37c>
 8008796:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 808b 	beq.w	80088b4 <_dtoa_r+0x4f4>
 800879e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80087a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80087a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087aa:	2200      	movs	r2, #0
 80087ac:	4b6f      	ldr	r3, [pc, #444]	; (800896c <_dtoa_r+0x5ac>)
 80087ae:	f7f8 f905 	bl	80009bc <__aeabi_dcmplt>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d07e      	beq.n	80088b4 <_dtoa_r+0x4f4>
 80087b6:	9b08      	ldr	r3, [sp, #32]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d07b      	beq.n	80088b4 <_dtoa_r+0x4f4>
 80087bc:	f1b9 0f00 	cmp.w	r9, #0
 80087c0:	dd38      	ble.n	8008834 <_dtoa_r+0x474>
 80087c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087c6:	2200      	movs	r2, #0
 80087c8:	4b69      	ldr	r3, [pc, #420]	; (8008970 <_dtoa_r+0x5b0>)
 80087ca:	f7f7 fe85 	bl	80004d8 <__aeabi_dmul>
 80087ce:	464c      	mov	r4, r9
 80087d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80087d8:	3701      	adds	r7, #1
 80087da:	4638      	mov	r0, r7
 80087dc:	f7f7 fe12 	bl	8000404 <__aeabi_i2d>
 80087e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e4:	f7f7 fe78 	bl	80004d8 <__aeabi_dmul>
 80087e8:	2200      	movs	r2, #0
 80087ea:	4b62      	ldr	r3, [pc, #392]	; (8008974 <_dtoa_r+0x5b4>)
 80087ec:	f7f7 fcbe 	bl	800016c <__adddf3>
 80087f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80087f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087f8:	9611      	str	r6, [sp, #68]	; 0x44
 80087fa:	2c00      	cmp	r4, #0
 80087fc:	d15d      	bne.n	80088ba <_dtoa_r+0x4fa>
 80087fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008802:	2200      	movs	r2, #0
 8008804:	4b5c      	ldr	r3, [pc, #368]	; (8008978 <_dtoa_r+0x5b8>)
 8008806:	f7f7 fcaf 	bl	8000168 <__aeabi_dsub>
 800880a:	4602      	mov	r2, r0
 800880c:	460b      	mov	r3, r1
 800880e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008812:	4633      	mov	r3, r6
 8008814:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008816:	f7f8 f8ef 	bl	80009f8 <__aeabi_dcmpgt>
 800881a:	2800      	cmp	r0, #0
 800881c:	f040 829c 	bne.w	8008d58 <_dtoa_r+0x998>
 8008820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008824:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008826:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800882a:	f7f8 f8c7 	bl	80009bc <__aeabi_dcmplt>
 800882e:	2800      	cmp	r0, #0
 8008830:	f040 8290 	bne.w	8008d54 <_dtoa_r+0x994>
 8008834:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008838:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800883c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800883e:	2b00      	cmp	r3, #0
 8008840:	f2c0 8152 	blt.w	8008ae8 <_dtoa_r+0x728>
 8008844:	f1ba 0f0e 	cmp.w	sl, #14
 8008848:	f300 814e 	bgt.w	8008ae8 <_dtoa_r+0x728>
 800884c:	4b45      	ldr	r3, [pc, #276]	; (8008964 <_dtoa_r+0x5a4>)
 800884e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008852:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008856:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800885a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800885c:	2b00      	cmp	r3, #0
 800885e:	f280 80db 	bge.w	8008a18 <_dtoa_r+0x658>
 8008862:	9b08      	ldr	r3, [sp, #32]
 8008864:	2b00      	cmp	r3, #0
 8008866:	f300 80d7 	bgt.w	8008a18 <_dtoa_r+0x658>
 800886a:	f040 8272 	bne.w	8008d52 <_dtoa_r+0x992>
 800886e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008872:	2200      	movs	r2, #0
 8008874:	4b40      	ldr	r3, [pc, #256]	; (8008978 <_dtoa_r+0x5b8>)
 8008876:	f7f7 fe2f 	bl	80004d8 <__aeabi_dmul>
 800887a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800887e:	f7f8 f8b1 	bl	80009e4 <__aeabi_dcmpge>
 8008882:	9c08      	ldr	r4, [sp, #32]
 8008884:	4626      	mov	r6, r4
 8008886:	2800      	cmp	r0, #0
 8008888:	f040 8248 	bne.w	8008d1c <_dtoa_r+0x95c>
 800888c:	2331      	movs	r3, #49	; 0x31
 800888e:	9f03      	ldr	r7, [sp, #12]
 8008890:	f10a 0a01 	add.w	sl, sl, #1
 8008894:	f807 3b01 	strb.w	r3, [r7], #1
 8008898:	e244      	b.n	8008d24 <_dtoa_r+0x964>
 800889a:	07e2      	lsls	r2, r4, #31
 800889c:	d505      	bpl.n	80088aa <_dtoa_r+0x4ea>
 800889e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80088a2:	f7f7 fe19 	bl	80004d8 <__aeabi_dmul>
 80088a6:	2301      	movs	r3, #1
 80088a8:	3701      	adds	r7, #1
 80088aa:	1064      	asrs	r4, r4, #1
 80088ac:	3608      	adds	r6, #8
 80088ae:	e76d      	b.n	800878c <_dtoa_r+0x3cc>
 80088b0:	2702      	movs	r7, #2
 80088b2:	e770      	b.n	8008796 <_dtoa_r+0x3d6>
 80088b4:	46d0      	mov	r8, sl
 80088b6:	9c08      	ldr	r4, [sp, #32]
 80088b8:	e78f      	b.n	80087da <_dtoa_r+0x41a>
 80088ba:	9903      	ldr	r1, [sp, #12]
 80088bc:	4b29      	ldr	r3, [pc, #164]	; (8008964 <_dtoa_r+0x5a4>)
 80088be:	4421      	add	r1, r4
 80088c0:	9112      	str	r1, [sp, #72]	; 0x48
 80088c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80088c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80088cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80088d0:	2900      	cmp	r1, #0
 80088d2:	d055      	beq.n	8008980 <_dtoa_r+0x5c0>
 80088d4:	2000      	movs	r0, #0
 80088d6:	4929      	ldr	r1, [pc, #164]	; (800897c <_dtoa_r+0x5bc>)
 80088d8:	f7f7 ff28 	bl	800072c <__aeabi_ddiv>
 80088dc:	463b      	mov	r3, r7
 80088de:	4632      	mov	r2, r6
 80088e0:	f7f7 fc42 	bl	8000168 <__aeabi_dsub>
 80088e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80088e8:	9f03      	ldr	r7, [sp, #12]
 80088ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088ee:	f7f8 f8a3 	bl	8000a38 <__aeabi_d2iz>
 80088f2:	4604      	mov	r4, r0
 80088f4:	f7f7 fd86 	bl	8000404 <__aeabi_i2d>
 80088f8:	4602      	mov	r2, r0
 80088fa:	460b      	mov	r3, r1
 80088fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008900:	f7f7 fc32 	bl	8000168 <__aeabi_dsub>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	3430      	adds	r4, #48	; 0x30
 800890a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800890e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008912:	f807 4b01 	strb.w	r4, [r7], #1
 8008916:	f7f8 f851 	bl	80009bc <__aeabi_dcmplt>
 800891a:	2800      	cmp	r0, #0
 800891c:	d174      	bne.n	8008a08 <_dtoa_r+0x648>
 800891e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008922:	2000      	movs	r0, #0
 8008924:	4911      	ldr	r1, [pc, #68]	; (800896c <_dtoa_r+0x5ac>)
 8008926:	f7f7 fc1f 	bl	8000168 <__aeabi_dsub>
 800892a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800892e:	f7f8 f845 	bl	80009bc <__aeabi_dcmplt>
 8008932:	2800      	cmp	r0, #0
 8008934:	f040 80b7 	bne.w	8008aa6 <_dtoa_r+0x6e6>
 8008938:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800893a:	429f      	cmp	r7, r3
 800893c:	f43f af7a 	beq.w	8008834 <_dtoa_r+0x474>
 8008940:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008944:	2200      	movs	r2, #0
 8008946:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <_dtoa_r+0x5b0>)
 8008948:	f7f7 fdc6 	bl	80004d8 <__aeabi_dmul>
 800894c:	2200      	movs	r2, #0
 800894e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008956:	4b06      	ldr	r3, [pc, #24]	; (8008970 <_dtoa_r+0x5b0>)
 8008958:	f7f7 fdbe 	bl	80004d8 <__aeabi_dmul>
 800895c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008960:	e7c3      	b.n	80088ea <_dtoa_r+0x52a>
 8008962:	bf00      	nop
 8008964:	0800aec8 	.word	0x0800aec8
 8008968:	0800aea0 	.word	0x0800aea0
 800896c:	3ff00000 	.word	0x3ff00000
 8008970:	40240000 	.word	0x40240000
 8008974:	401c0000 	.word	0x401c0000
 8008978:	40140000 	.word	0x40140000
 800897c:	3fe00000 	.word	0x3fe00000
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f7 fda8 	bl	80004d8 <__aeabi_dmul>
 8008988:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800898a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800898e:	9c03      	ldr	r4, [sp, #12]
 8008990:	9314      	str	r3, [sp, #80]	; 0x50
 8008992:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008996:	f7f8 f84f 	bl	8000a38 <__aeabi_d2iz>
 800899a:	9015      	str	r0, [sp, #84]	; 0x54
 800899c:	f7f7 fd32 	bl	8000404 <__aeabi_i2d>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089a8:	f7f7 fbde 	bl	8000168 <__aeabi_dsub>
 80089ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80089ae:	4606      	mov	r6, r0
 80089b0:	3330      	adds	r3, #48	; 0x30
 80089b2:	f804 3b01 	strb.w	r3, [r4], #1
 80089b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089b8:	460f      	mov	r7, r1
 80089ba:	429c      	cmp	r4, r3
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	d124      	bne.n	8008a0c <_dtoa_r+0x64c>
 80089c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089c6:	4bb0      	ldr	r3, [pc, #704]	; (8008c88 <_dtoa_r+0x8c8>)
 80089c8:	f7f7 fbd0 	bl	800016c <__adddf3>
 80089cc:	4602      	mov	r2, r0
 80089ce:	460b      	mov	r3, r1
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f8 f810 	bl	80009f8 <__aeabi_dcmpgt>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d163      	bne.n	8008aa4 <_dtoa_r+0x6e4>
 80089dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089e0:	2000      	movs	r0, #0
 80089e2:	49a9      	ldr	r1, [pc, #676]	; (8008c88 <_dtoa_r+0x8c8>)
 80089e4:	f7f7 fbc0 	bl	8000168 <__aeabi_dsub>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4630      	mov	r0, r6
 80089ee:	4639      	mov	r1, r7
 80089f0:	f7f7 ffe4 	bl	80009bc <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	f43f af1d 	beq.w	8008834 <_dtoa_r+0x474>
 80089fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80089fc:	1e7b      	subs	r3, r7, #1
 80089fe:	9314      	str	r3, [sp, #80]	; 0x50
 8008a00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008a04:	2b30      	cmp	r3, #48	; 0x30
 8008a06:	d0f8      	beq.n	80089fa <_dtoa_r+0x63a>
 8008a08:	46c2      	mov	sl, r8
 8008a0a:	e03b      	b.n	8008a84 <_dtoa_r+0x6c4>
 8008a0c:	4b9f      	ldr	r3, [pc, #636]	; (8008c8c <_dtoa_r+0x8cc>)
 8008a0e:	f7f7 fd63 	bl	80004d8 <__aeabi_dmul>
 8008a12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a16:	e7bc      	b.n	8008992 <_dtoa_r+0x5d2>
 8008a18:	9f03      	ldr	r7, [sp, #12]
 8008a1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008a1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a22:	4640      	mov	r0, r8
 8008a24:	4649      	mov	r1, r9
 8008a26:	f7f7 fe81 	bl	800072c <__aeabi_ddiv>
 8008a2a:	f7f8 f805 	bl	8000a38 <__aeabi_d2iz>
 8008a2e:	4604      	mov	r4, r0
 8008a30:	f7f7 fce8 	bl	8000404 <__aeabi_i2d>
 8008a34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a38:	f7f7 fd4e 	bl	80004d8 <__aeabi_dmul>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f7f7 fb90 	bl	8000168 <__aeabi_dsub>
 8008a48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008a4c:	f807 6b01 	strb.w	r6, [r7], #1
 8008a50:	9e03      	ldr	r6, [sp, #12]
 8008a52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008a56:	1bbe      	subs	r6, r7, r6
 8008a58:	45b4      	cmp	ip, r6
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	d136      	bne.n	8008ace <_dtoa_r+0x70e>
 8008a60:	f7f7 fb84 	bl	800016c <__adddf3>
 8008a64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a68:	4680      	mov	r8, r0
 8008a6a:	4689      	mov	r9, r1
 8008a6c:	f7f7 ffc4 	bl	80009f8 <__aeabi_dcmpgt>
 8008a70:	bb58      	cbnz	r0, 8008aca <_dtoa_r+0x70a>
 8008a72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f7f7 ff95 	bl	80009a8 <__aeabi_dcmpeq>
 8008a7e:	b108      	cbz	r0, 8008a84 <_dtoa_r+0x6c4>
 8008a80:	07e1      	lsls	r1, r4, #31
 8008a82:	d422      	bmi.n	8008aca <_dtoa_r+0x70a>
 8008a84:	4628      	mov	r0, r5
 8008a86:	4659      	mov	r1, fp
 8008a88:	f000 fd16 	bl	80094b8 <_Bfree>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	703b      	strb	r3, [r7, #0]
 8008a90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a92:	f10a 0001 	add.w	r0, sl, #1
 8008a96:	6018      	str	r0, [r3, #0]
 8008a98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f43f acde 	beq.w	800845c <_dtoa_r+0x9c>
 8008aa0:	601f      	str	r7, [r3, #0]
 8008aa2:	e4db      	b.n	800845c <_dtoa_r+0x9c>
 8008aa4:	4627      	mov	r7, r4
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	461f      	mov	r7, r3
 8008aaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aae:	2a39      	cmp	r2, #57	; 0x39
 8008ab0:	d107      	bne.n	8008ac2 <_dtoa_r+0x702>
 8008ab2:	9a03      	ldr	r2, [sp, #12]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d1f7      	bne.n	8008aa8 <_dtoa_r+0x6e8>
 8008ab8:	2230      	movs	r2, #48	; 0x30
 8008aba:	9903      	ldr	r1, [sp, #12]
 8008abc:	f108 0801 	add.w	r8, r8, #1
 8008ac0:	700a      	strb	r2, [r1, #0]
 8008ac2:	781a      	ldrb	r2, [r3, #0]
 8008ac4:	3201      	adds	r2, #1
 8008ac6:	701a      	strb	r2, [r3, #0]
 8008ac8:	e79e      	b.n	8008a08 <_dtoa_r+0x648>
 8008aca:	46d0      	mov	r8, sl
 8008acc:	e7eb      	b.n	8008aa6 <_dtoa_r+0x6e6>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	4b6e      	ldr	r3, [pc, #440]	; (8008c8c <_dtoa_r+0x8cc>)
 8008ad2:	f7f7 fd01 	bl	80004d8 <__aeabi_dmul>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4680      	mov	r8, r0
 8008adc:	4689      	mov	r9, r1
 8008ade:	f7f7 ff63 	bl	80009a8 <__aeabi_dcmpeq>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d09b      	beq.n	8008a1e <_dtoa_r+0x65e>
 8008ae6:	e7cd      	b.n	8008a84 <_dtoa_r+0x6c4>
 8008ae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008aea:	2a00      	cmp	r2, #0
 8008aec:	f000 80d0 	beq.w	8008c90 <_dtoa_r+0x8d0>
 8008af0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008af2:	2a01      	cmp	r2, #1
 8008af4:	f300 80ae 	bgt.w	8008c54 <_dtoa_r+0x894>
 8008af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008afa:	2a00      	cmp	r2, #0
 8008afc:	f000 80a6 	beq.w	8008c4c <_dtoa_r+0x88c>
 8008b00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b06:	9f06      	ldr	r7, [sp, #24]
 8008b08:	9a06      	ldr	r2, [sp, #24]
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	441a      	add	r2, r3
 8008b0e:	9206      	str	r2, [sp, #24]
 8008b10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b12:	4628      	mov	r0, r5
 8008b14:	441a      	add	r2, r3
 8008b16:	9209      	str	r2, [sp, #36]	; 0x24
 8008b18:	f000 fd84 	bl	8009624 <__i2b>
 8008b1c:	4606      	mov	r6, r0
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	dd0c      	ble.n	8008b3c <_dtoa_r+0x77c>
 8008b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	dd09      	ble.n	8008b3c <_dtoa_r+0x77c>
 8008b28:	42bb      	cmp	r3, r7
 8008b2a:	bfa8      	it	ge
 8008b2c:	463b      	movge	r3, r7
 8008b2e:	9a06      	ldr	r2, [sp, #24]
 8008b30:	1aff      	subs	r7, r7, r3
 8008b32:	1ad2      	subs	r2, r2, r3
 8008b34:	9206      	str	r2, [sp, #24]
 8008b36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b3e:	b1f3      	cbz	r3, 8008b7e <_dtoa_r+0x7be>
 8008b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	f000 80a8 	beq.w	8008c98 <_dtoa_r+0x8d8>
 8008b48:	2c00      	cmp	r4, #0
 8008b4a:	dd10      	ble.n	8008b6e <_dtoa_r+0x7ae>
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	4622      	mov	r2, r4
 8008b50:	4628      	mov	r0, r5
 8008b52:	f000 fe25 	bl	80097a0 <__pow5mult>
 8008b56:	465a      	mov	r2, fp
 8008b58:	4601      	mov	r1, r0
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	4628      	mov	r0, r5
 8008b5e:	f000 fd77 	bl	8009650 <__multiply>
 8008b62:	4680      	mov	r8, r0
 8008b64:	4659      	mov	r1, fp
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fca6 	bl	80094b8 <_Bfree>
 8008b6c:	46c3      	mov	fp, r8
 8008b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b70:	1b1a      	subs	r2, r3, r4
 8008b72:	d004      	beq.n	8008b7e <_dtoa_r+0x7be>
 8008b74:	4659      	mov	r1, fp
 8008b76:	4628      	mov	r0, r5
 8008b78:	f000 fe12 	bl	80097a0 <__pow5mult>
 8008b7c:	4683      	mov	fp, r0
 8008b7e:	2101      	movs	r1, #1
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 fd4f 	bl	8009624 <__i2b>
 8008b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b88:	4604      	mov	r4, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f340 8086 	ble.w	8008c9c <_dtoa_r+0x8dc>
 8008b90:	461a      	mov	r2, r3
 8008b92:	4601      	mov	r1, r0
 8008b94:	4628      	mov	r0, r5
 8008b96:	f000 fe03 	bl	80097a0 <__pow5mult>
 8008b9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b9c:	4604      	mov	r4, r0
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	dd7f      	ble.n	8008ca2 <_dtoa_r+0x8e2>
 8008ba2:	f04f 0800 	mov.w	r8, #0
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bac:	6918      	ldr	r0, [r3, #16]
 8008bae:	f000 fceb 	bl	8009588 <__hi0bits>
 8008bb2:	f1c0 0020 	rsb	r0, r0, #32
 8008bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb8:	4418      	add	r0, r3
 8008bba:	f010 001f 	ands.w	r0, r0, #31
 8008bbe:	f000 8092 	beq.w	8008ce6 <_dtoa_r+0x926>
 8008bc2:	f1c0 0320 	rsb	r3, r0, #32
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	f340 808a 	ble.w	8008ce0 <_dtoa_r+0x920>
 8008bcc:	f1c0 001c 	rsb	r0, r0, #28
 8008bd0:	9b06      	ldr	r3, [sp, #24]
 8008bd2:	4407      	add	r7, r0
 8008bd4:	4403      	add	r3, r0
 8008bd6:	9306      	str	r3, [sp, #24]
 8008bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bda:	4403      	add	r3, r0
 8008bdc:	9309      	str	r3, [sp, #36]	; 0x24
 8008bde:	9b06      	ldr	r3, [sp, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	dd05      	ble.n	8008bf0 <_dtoa_r+0x830>
 8008be4:	4659      	mov	r1, fp
 8008be6:	461a      	mov	r2, r3
 8008be8:	4628      	mov	r0, r5
 8008bea:	f000 fe33 	bl	8009854 <__lshift>
 8008bee:	4683      	mov	fp, r0
 8008bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dd05      	ble.n	8008c02 <_dtoa_r+0x842>
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 fe2a 	bl	8009854 <__lshift>
 8008c00:	4604      	mov	r4, r0
 8008c02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d070      	beq.n	8008cea <_dtoa_r+0x92a>
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4658      	mov	r0, fp
 8008c0c:	f000 fe92 	bl	8009934 <__mcmp>
 8008c10:	2800      	cmp	r0, #0
 8008c12:	da6a      	bge.n	8008cea <_dtoa_r+0x92a>
 8008c14:	2300      	movs	r3, #0
 8008c16:	4659      	mov	r1, fp
 8008c18:	220a      	movs	r2, #10
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f000 fc6e 	bl	80094fc <__multadd>
 8008c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c22:	4683      	mov	fp, r0
 8008c24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 8194 	beq.w	8008f56 <_dtoa_r+0xb96>
 8008c2e:	4631      	mov	r1, r6
 8008c30:	2300      	movs	r3, #0
 8008c32:	220a      	movs	r2, #10
 8008c34:	4628      	mov	r0, r5
 8008c36:	f000 fc61 	bl	80094fc <__multadd>
 8008c3a:	f1b9 0f00 	cmp.w	r9, #0
 8008c3e:	4606      	mov	r6, r0
 8008c40:	f300 8093 	bgt.w	8008d6a <_dtoa_r+0x9aa>
 8008c44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	dc57      	bgt.n	8008cfa <_dtoa_r+0x93a>
 8008c4a:	e08e      	b.n	8008d6a <_dtoa_r+0x9aa>
 8008c4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c52:	e757      	b.n	8008b04 <_dtoa_r+0x744>
 8008c54:	9b08      	ldr	r3, [sp, #32]
 8008c56:	1e5c      	subs	r4, r3, #1
 8008c58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c5a:	42a3      	cmp	r3, r4
 8008c5c:	bfb7      	itett	lt
 8008c5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008c60:	1b1c      	subge	r4, r3, r4
 8008c62:	1ae2      	sublt	r2, r4, r3
 8008c64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008c66:	bfbe      	ittt	lt
 8008c68:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008c6a:	189b      	addlt	r3, r3, r2
 8008c6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008c6e:	9b08      	ldr	r3, [sp, #32]
 8008c70:	bfb8      	it	lt
 8008c72:	2400      	movlt	r4, #0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bfbb      	ittet	lt
 8008c78:	9b06      	ldrlt	r3, [sp, #24]
 8008c7a:	9a08      	ldrlt	r2, [sp, #32]
 8008c7c:	9f06      	ldrge	r7, [sp, #24]
 8008c7e:	1a9f      	sublt	r7, r3, r2
 8008c80:	bfac      	ite	ge
 8008c82:	9b08      	ldrge	r3, [sp, #32]
 8008c84:	2300      	movlt	r3, #0
 8008c86:	e73f      	b.n	8008b08 <_dtoa_r+0x748>
 8008c88:	3fe00000 	.word	0x3fe00000
 8008c8c:	40240000 	.word	0x40240000
 8008c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008c92:	9f06      	ldr	r7, [sp, #24]
 8008c94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008c96:	e742      	b.n	8008b1e <_dtoa_r+0x75e>
 8008c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c9a:	e76b      	b.n	8008b74 <_dtoa_r+0x7b4>
 8008c9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	dc19      	bgt.n	8008cd6 <_dtoa_r+0x916>
 8008ca2:	9b04      	ldr	r3, [sp, #16]
 8008ca4:	b9bb      	cbnz	r3, 8008cd6 <_dtoa_r+0x916>
 8008ca6:	9b05      	ldr	r3, [sp, #20]
 8008ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cac:	b99b      	cbnz	r3, 8008cd6 <_dtoa_r+0x916>
 8008cae:	9b05      	ldr	r3, [sp, #20]
 8008cb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008cb4:	0d1b      	lsrs	r3, r3, #20
 8008cb6:	051b      	lsls	r3, r3, #20
 8008cb8:	b183      	cbz	r3, 8008cdc <_dtoa_r+0x91c>
 8008cba:	f04f 0801 	mov.w	r8, #1
 8008cbe:	9b06      	ldr	r3, [sp, #24]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	9306      	str	r3, [sp, #24]
 8008cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f47f af6a 	bne.w	8008ba6 <_dtoa_r+0x7e6>
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	e76f      	b.n	8008bb6 <_dtoa_r+0x7f6>
 8008cd6:	f04f 0800 	mov.w	r8, #0
 8008cda:	e7f6      	b.n	8008cca <_dtoa_r+0x90a>
 8008cdc:	4698      	mov	r8, r3
 8008cde:	e7f4      	b.n	8008cca <_dtoa_r+0x90a>
 8008ce0:	f43f af7d 	beq.w	8008bde <_dtoa_r+0x81e>
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	301c      	adds	r0, #28
 8008ce8:	e772      	b.n	8008bd0 <_dtoa_r+0x810>
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	dc36      	bgt.n	8008d5e <_dtoa_r+0x99e>
 8008cf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	dd33      	ble.n	8008d5e <_dtoa_r+0x99e>
 8008cf6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008cfa:	f1b9 0f00 	cmp.w	r9, #0
 8008cfe:	d10d      	bne.n	8008d1c <_dtoa_r+0x95c>
 8008d00:	4621      	mov	r1, r4
 8008d02:	464b      	mov	r3, r9
 8008d04:	2205      	movs	r2, #5
 8008d06:	4628      	mov	r0, r5
 8008d08:	f000 fbf8 	bl	80094fc <__multadd>
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	4604      	mov	r4, r0
 8008d10:	4658      	mov	r0, fp
 8008d12:	f000 fe0f 	bl	8009934 <__mcmp>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f73f adb8 	bgt.w	800888c <_dtoa_r+0x4cc>
 8008d1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d1e:	9f03      	ldr	r7, [sp, #12]
 8008d20:	ea6f 0a03 	mvn.w	sl, r3
 8008d24:	f04f 0800 	mov.w	r8, #0
 8008d28:	4621      	mov	r1, r4
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	f000 fbc4 	bl	80094b8 <_Bfree>
 8008d30:	2e00      	cmp	r6, #0
 8008d32:	f43f aea7 	beq.w	8008a84 <_dtoa_r+0x6c4>
 8008d36:	f1b8 0f00 	cmp.w	r8, #0
 8008d3a:	d005      	beq.n	8008d48 <_dtoa_r+0x988>
 8008d3c:	45b0      	cmp	r8, r6
 8008d3e:	d003      	beq.n	8008d48 <_dtoa_r+0x988>
 8008d40:	4641      	mov	r1, r8
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 fbb8 	bl	80094b8 <_Bfree>
 8008d48:	4631      	mov	r1, r6
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	f000 fbb4 	bl	80094b8 <_Bfree>
 8008d50:	e698      	b.n	8008a84 <_dtoa_r+0x6c4>
 8008d52:	2400      	movs	r4, #0
 8008d54:	4626      	mov	r6, r4
 8008d56:	e7e1      	b.n	8008d1c <_dtoa_r+0x95c>
 8008d58:	46c2      	mov	sl, r8
 8008d5a:	4626      	mov	r6, r4
 8008d5c:	e596      	b.n	800888c <_dtoa_r+0x4cc>
 8008d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 80fd 	beq.w	8008f64 <_dtoa_r+0xba4>
 8008d6a:	2f00      	cmp	r7, #0
 8008d6c:	dd05      	ble.n	8008d7a <_dtoa_r+0x9ba>
 8008d6e:	4631      	mov	r1, r6
 8008d70:	463a      	mov	r2, r7
 8008d72:	4628      	mov	r0, r5
 8008d74:	f000 fd6e 	bl	8009854 <__lshift>
 8008d78:	4606      	mov	r6, r0
 8008d7a:	f1b8 0f00 	cmp.w	r8, #0
 8008d7e:	d05c      	beq.n	8008e3a <_dtoa_r+0xa7a>
 8008d80:	4628      	mov	r0, r5
 8008d82:	6871      	ldr	r1, [r6, #4]
 8008d84:	f000 fb58 	bl	8009438 <_Balloc>
 8008d88:	4607      	mov	r7, r0
 8008d8a:	b928      	cbnz	r0, 8008d98 <_dtoa_r+0x9d8>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008d92:	4b7f      	ldr	r3, [pc, #508]	; (8008f90 <_dtoa_r+0xbd0>)
 8008d94:	f7ff bb28 	b.w	80083e8 <_dtoa_r+0x28>
 8008d98:	6932      	ldr	r2, [r6, #16]
 8008d9a:	f106 010c 	add.w	r1, r6, #12
 8008d9e:	3202      	adds	r2, #2
 8008da0:	0092      	lsls	r2, r2, #2
 8008da2:	300c      	adds	r0, #12
 8008da4:	f7fe f98a 	bl	80070bc <memcpy>
 8008da8:	2201      	movs	r2, #1
 8008daa:	4639      	mov	r1, r7
 8008dac:	4628      	mov	r0, r5
 8008dae:	f000 fd51 	bl	8009854 <__lshift>
 8008db2:	46b0      	mov	r8, r6
 8008db4:	4606      	mov	r6, r0
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	9308      	str	r3, [sp, #32]
 8008dbc:	9b03      	ldr	r3, [sp, #12]
 8008dbe:	444b      	add	r3, r9
 8008dc0:	930a      	str	r3, [sp, #40]	; 0x28
 8008dc2:	9b04      	ldr	r3, [sp, #16]
 8008dc4:	f003 0301 	and.w	r3, r3, #1
 8008dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	4621      	mov	r1, r4
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	4658      	mov	r0, fp
 8008dd2:	9304      	str	r3, [sp, #16]
 8008dd4:	f7ff fa66 	bl	80082a4 <quorem>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	4641      	mov	r1, r8
 8008ddc:	3330      	adds	r3, #48	; 0x30
 8008dde:	9006      	str	r0, [sp, #24]
 8008de0:	4658      	mov	r0, fp
 8008de2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008de4:	f000 fda6 	bl	8009934 <__mcmp>
 8008de8:	4632      	mov	r2, r6
 8008dea:	4681      	mov	r9, r0
 8008dec:	4621      	mov	r1, r4
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 fdbc 	bl	800996c <__mdiff>
 8008df4:	68c2      	ldr	r2, [r0, #12]
 8008df6:	4607      	mov	r7, r0
 8008df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfa:	bb02      	cbnz	r2, 8008e3e <_dtoa_r+0xa7e>
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	4658      	mov	r0, fp
 8008e00:	f000 fd98 	bl	8009934 <__mcmp>
 8008e04:	4602      	mov	r2, r0
 8008e06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e08:	4639      	mov	r1, r7
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008e10:	f000 fb52 	bl	80094b8 <_Bfree>
 8008e14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e18:	9f08      	ldr	r7, [sp, #32]
 8008e1a:	ea43 0102 	orr.w	r1, r3, r2
 8008e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e20:	430b      	orrs	r3, r1
 8008e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e24:	d10d      	bne.n	8008e42 <_dtoa_r+0xa82>
 8008e26:	2b39      	cmp	r3, #57	; 0x39
 8008e28:	d029      	beq.n	8008e7e <_dtoa_r+0xabe>
 8008e2a:	f1b9 0f00 	cmp.w	r9, #0
 8008e2e:	dd01      	ble.n	8008e34 <_dtoa_r+0xa74>
 8008e30:	9b06      	ldr	r3, [sp, #24]
 8008e32:	3331      	adds	r3, #49	; 0x31
 8008e34:	9a04      	ldr	r2, [sp, #16]
 8008e36:	7013      	strb	r3, [r2, #0]
 8008e38:	e776      	b.n	8008d28 <_dtoa_r+0x968>
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	e7b9      	b.n	8008db2 <_dtoa_r+0x9f2>
 8008e3e:	2201      	movs	r2, #1
 8008e40:	e7e2      	b.n	8008e08 <_dtoa_r+0xa48>
 8008e42:	f1b9 0f00 	cmp.w	r9, #0
 8008e46:	db06      	blt.n	8008e56 <_dtoa_r+0xa96>
 8008e48:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008e4a:	ea41 0909 	orr.w	r9, r1, r9
 8008e4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008e50:	ea59 0101 	orrs.w	r1, r9, r1
 8008e54:	d120      	bne.n	8008e98 <_dtoa_r+0xad8>
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	ddec      	ble.n	8008e34 <_dtoa_r+0xa74>
 8008e5a:	4659      	mov	r1, fp
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	4628      	mov	r0, r5
 8008e60:	9308      	str	r3, [sp, #32]
 8008e62:	f000 fcf7 	bl	8009854 <__lshift>
 8008e66:	4621      	mov	r1, r4
 8008e68:	4683      	mov	fp, r0
 8008e6a:	f000 fd63 	bl	8009934 <__mcmp>
 8008e6e:	2800      	cmp	r0, #0
 8008e70:	9b08      	ldr	r3, [sp, #32]
 8008e72:	dc02      	bgt.n	8008e7a <_dtoa_r+0xaba>
 8008e74:	d1de      	bne.n	8008e34 <_dtoa_r+0xa74>
 8008e76:	07da      	lsls	r2, r3, #31
 8008e78:	d5dc      	bpl.n	8008e34 <_dtoa_r+0xa74>
 8008e7a:	2b39      	cmp	r3, #57	; 0x39
 8008e7c:	d1d8      	bne.n	8008e30 <_dtoa_r+0xa70>
 8008e7e:	2339      	movs	r3, #57	; 0x39
 8008e80:	9a04      	ldr	r2, [sp, #16]
 8008e82:	7013      	strb	r3, [r2, #0]
 8008e84:	463b      	mov	r3, r7
 8008e86:	461f      	mov	r7, r3
 8008e88:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	2a39      	cmp	r2, #57	; 0x39
 8008e90:	d050      	beq.n	8008f34 <_dtoa_r+0xb74>
 8008e92:	3201      	adds	r2, #1
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	e747      	b.n	8008d28 <_dtoa_r+0x968>
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	dd03      	ble.n	8008ea4 <_dtoa_r+0xae4>
 8008e9c:	2b39      	cmp	r3, #57	; 0x39
 8008e9e:	d0ee      	beq.n	8008e7e <_dtoa_r+0xabe>
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	e7c7      	b.n	8008e34 <_dtoa_r+0xa74>
 8008ea4:	9a08      	ldr	r2, [sp, #32]
 8008ea6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008ea8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008eac:	428a      	cmp	r2, r1
 8008eae:	d02a      	beq.n	8008f06 <_dtoa_r+0xb46>
 8008eb0:	4659      	mov	r1, fp
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	220a      	movs	r2, #10
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 fb20 	bl	80094fc <__multadd>
 8008ebc:	45b0      	cmp	r8, r6
 8008ebe:	4683      	mov	fp, r0
 8008ec0:	f04f 0300 	mov.w	r3, #0
 8008ec4:	f04f 020a 	mov.w	r2, #10
 8008ec8:	4641      	mov	r1, r8
 8008eca:	4628      	mov	r0, r5
 8008ecc:	d107      	bne.n	8008ede <_dtoa_r+0xb1e>
 8008ece:	f000 fb15 	bl	80094fc <__multadd>
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	9b08      	ldr	r3, [sp, #32]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	9308      	str	r3, [sp, #32]
 8008edc:	e775      	b.n	8008dca <_dtoa_r+0xa0a>
 8008ede:	f000 fb0d 	bl	80094fc <__multadd>
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	220a      	movs	r2, #10
 8008eea:	4628      	mov	r0, r5
 8008eec:	f000 fb06 	bl	80094fc <__multadd>
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	e7f0      	b.n	8008ed6 <_dtoa_r+0xb16>
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	bfcc      	ite	gt
 8008efa:	464f      	movgt	r7, r9
 8008efc:	2701      	movle	r7, #1
 8008efe:	f04f 0800 	mov.w	r8, #0
 8008f02:	9a03      	ldr	r2, [sp, #12]
 8008f04:	4417      	add	r7, r2
 8008f06:	4659      	mov	r1, fp
 8008f08:	2201      	movs	r2, #1
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	9308      	str	r3, [sp, #32]
 8008f0e:	f000 fca1 	bl	8009854 <__lshift>
 8008f12:	4621      	mov	r1, r4
 8008f14:	4683      	mov	fp, r0
 8008f16:	f000 fd0d 	bl	8009934 <__mcmp>
 8008f1a:	2800      	cmp	r0, #0
 8008f1c:	dcb2      	bgt.n	8008e84 <_dtoa_r+0xac4>
 8008f1e:	d102      	bne.n	8008f26 <_dtoa_r+0xb66>
 8008f20:	9b08      	ldr	r3, [sp, #32]
 8008f22:	07db      	lsls	r3, r3, #31
 8008f24:	d4ae      	bmi.n	8008e84 <_dtoa_r+0xac4>
 8008f26:	463b      	mov	r3, r7
 8008f28:	461f      	mov	r7, r3
 8008f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f2e:	2a30      	cmp	r2, #48	; 0x30
 8008f30:	d0fa      	beq.n	8008f28 <_dtoa_r+0xb68>
 8008f32:	e6f9      	b.n	8008d28 <_dtoa_r+0x968>
 8008f34:	9a03      	ldr	r2, [sp, #12]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d1a5      	bne.n	8008e86 <_dtoa_r+0xac6>
 8008f3a:	2331      	movs	r3, #49	; 0x31
 8008f3c:	f10a 0a01 	add.w	sl, sl, #1
 8008f40:	e779      	b.n	8008e36 <_dtoa_r+0xa76>
 8008f42:	4b14      	ldr	r3, [pc, #80]	; (8008f94 <_dtoa_r+0xbd4>)
 8008f44:	f7ff baa8 	b.w	8008498 <_dtoa_r+0xd8>
 8008f48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f47f aa81 	bne.w	8008452 <_dtoa_r+0x92>
 8008f50:	4b11      	ldr	r3, [pc, #68]	; (8008f98 <_dtoa_r+0xbd8>)
 8008f52:	f7ff baa1 	b.w	8008498 <_dtoa_r+0xd8>
 8008f56:	f1b9 0f00 	cmp.w	r9, #0
 8008f5a:	dc03      	bgt.n	8008f64 <_dtoa_r+0xba4>
 8008f5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	f73f aecb 	bgt.w	8008cfa <_dtoa_r+0x93a>
 8008f64:	9f03      	ldr	r7, [sp, #12]
 8008f66:	4621      	mov	r1, r4
 8008f68:	4658      	mov	r0, fp
 8008f6a:	f7ff f99b 	bl	80082a4 <quorem>
 8008f6e:	9a03      	ldr	r2, [sp, #12]
 8008f70:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008f74:	f807 3b01 	strb.w	r3, [r7], #1
 8008f78:	1aba      	subs	r2, r7, r2
 8008f7a:	4591      	cmp	r9, r2
 8008f7c:	ddba      	ble.n	8008ef4 <_dtoa_r+0xb34>
 8008f7e:	4659      	mov	r1, fp
 8008f80:	2300      	movs	r3, #0
 8008f82:	220a      	movs	r2, #10
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 fab9 	bl	80094fc <__multadd>
 8008f8a:	4683      	mov	fp, r0
 8008f8c:	e7eb      	b.n	8008f66 <_dtoa_r+0xba6>
 8008f8e:	bf00      	nop
 8008f90:	0800add1 	.word	0x0800add1
 8008f94:	0800afb1 	.word	0x0800afb1
 8008f98:	0800ad52 	.word	0x0800ad52

08008f9c <__sflush_r>:
 8008f9c:	898a      	ldrh	r2, [r1, #12]
 8008f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	0710      	lsls	r0, r2, #28
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	d457      	bmi.n	8009058 <__sflush_r+0xbc>
 8008fa8:	684b      	ldr	r3, [r1, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	dc04      	bgt.n	8008fb8 <__sflush_r+0x1c>
 8008fae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	dc01      	bgt.n	8008fb8 <__sflush_r+0x1c>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fba:	2e00      	cmp	r6, #0
 8008fbc:	d0fa      	beq.n	8008fb4 <__sflush_r+0x18>
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fc4:	682f      	ldr	r7, [r5, #0]
 8008fc6:	602b      	str	r3, [r5, #0]
 8008fc8:	d032      	beq.n	8009030 <__sflush_r+0x94>
 8008fca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	075a      	lsls	r2, r3, #29
 8008fd0:	d505      	bpl.n	8008fde <__sflush_r+0x42>
 8008fd2:	6863      	ldr	r3, [r4, #4]
 8008fd4:	1ac0      	subs	r0, r0, r3
 8008fd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fd8:	b10b      	cbz	r3, 8008fde <__sflush_r+0x42>
 8008fda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fdc:	1ac0      	subs	r0, r0, r3
 8008fde:	2300      	movs	r3, #0
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	6a21      	ldr	r1, [r4, #32]
 8008fe8:	47b0      	blx	r6
 8008fea:	1c43      	adds	r3, r0, #1
 8008fec:	89a3      	ldrh	r3, [r4, #12]
 8008fee:	d106      	bne.n	8008ffe <__sflush_r+0x62>
 8008ff0:	6829      	ldr	r1, [r5, #0]
 8008ff2:	291d      	cmp	r1, #29
 8008ff4:	d82c      	bhi.n	8009050 <__sflush_r+0xb4>
 8008ff6:	4a29      	ldr	r2, [pc, #164]	; (800909c <__sflush_r+0x100>)
 8008ff8:	40ca      	lsrs	r2, r1
 8008ffa:	07d6      	lsls	r6, r2, #31
 8008ffc:	d528      	bpl.n	8009050 <__sflush_r+0xb4>
 8008ffe:	2200      	movs	r2, #0
 8009000:	6062      	str	r2, [r4, #4]
 8009002:	6922      	ldr	r2, [r4, #16]
 8009004:	04d9      	lsls	r1, r3, #19
 8009006:	6022      	str	r2, [r4, #0]
 8009008:	d504      	bpl.n	8009014 <__sflush_r+0x78>
 800900a:	1c42      	adds	r2, r0, #1
 800900c:	d101      	bne.n	8009012 <__sflush_r+0x76>
 800900e:	682b      	ldr	r3, [r5, #0]
 8009010:	b903      	cbnz	r3, 8009014 <__sflush_r+0x78>
 8009012:	6560      	str	r0, [r4, #84]	; 0x54
 8009014:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009016:	602f      	str	r7, [r5, #0]
 8009018:	2900      	cmp	r1, #0
 800901a:	d0cb      	beq.n	8008fb4 <__sflush_r+0x18>
 800901c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009020:	4299      	cmp	r1, r3
 8009022:	d002      	beq.n	800902a <__sflush_r+0x8e>
 8009024:	4628      	mov	r0, r5
 8009026:	f7fe f873 	bl	8007110 <_free_r>
 800902a:	2000      	movs	r0, #0
 800902c:	6360      	str	r0, [r4, #52]	; 0x34
 800902e:	e7c2      	b.n	8008fb6 <__sflush_r+0x1a>
 8009030:	6a21      	ldr	r1, [r4, #32]
 8009032:	2301      	movs	r3, #1
 8009034:	4628      	mov	r0, r5
 8009036:	47b0      	blx	r6
 8009038:	1c41      	adds	r1, r0, #1
 800903a:	d1c7      	bne.n	8008fcc <__sflush_r+0x30>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0c4      	beq.n	8008fcc <__sflush_r+0x30>
 8009042:	2b1d      	cmp	r3, #29
 8009044:	d001      	beq.n	800904a <__sflush_r+0xae>
 8009046:	2b16      	cmp	r3, #22
 8009048:	d101      	bne.n	800904e <__sflush_r+0xb2>
 800904a:	602f      	str	r7, [r5, #0]
 800904c:	e7b2      	b.n	8008fb4 <__sflush_r+0x18>
 800904e:	89a3      	ldrh	r3, [r4, #12]
 8009050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	e7ae      	b.n	8008fb6 <__sflush_r+0x1a>
 8009058:	690f      	ldr	r7, [r1, #16]
 800905a:	2f00      	cmp	r7, #0
 800905c:	d0aa      	beq.n	8008fb4 <__sflush_r+0x18>
 800905e:	0793      	lsls	r3, r2, #30
 8009060:	bf18      	it	ne
 8009062:	2300      	movne	r3, #0
 8009064:	680e      	ldr	r6, [r1, #0]
 8009066:	bf08      	it	eq
 8009068:	694b      	ldreq	r3, [r1, #20]
 800906a:	1bf6      	subs	r6, r6, r7
 800906c:	600f      	str	r7, [r1, #0]
 800906e:	608b      	str	r3, [r1, #8]
 8009070:	2e00      	cmp	r6, #0
 8009072:	dd9f      	ble.n	8008fb4 <__sflush_r+0x18>
 8009074:	4633      	mov	r3, r6
 8009076:	463a      	mov	r2, r7
 8009078:	4628      	mov	r0, r5
 800907a:	6a21      	ldr	r1, [r4, #32]
 800907c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009080:	47e0      	blx	ip
 8009082:	2800      	cmp	r0, #0
 8009084:	dc06      	bgt.n	8009094 <__sflush_r+0xf8>
 8009086:	89a3      	ldrh	r3, [r4, #12]
 8009088:	f04f 30ff 	mov.w	r0, #4294967295
 800908c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009090:	81a3      	strh	r3, [r4, #12]
 8009092:	e790      	b.n	8008fb6 <__sflush_r+0x1a>
 8009094:	4407      	add	r7, r0
 8009096:	1a36      	subs	r6, r6, r0
 8009098:	e7ea      	b.n	8009070 <__sflush_r+0xd4>
 800909a:	bf00      	nop
 800909c:	20400001 	.word	0x20400001

080090a0 <_fflush_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	690b      	ldr	r3, [r1, #16]
 80090a4:	4605      	mov	r5, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	b913      	cbnz	r3, 80090b0 <_fflush_r+0x10>
 80090aa:	2500      	movs	r5, #0
 80090ac:	4628      	mov	r0, r5
 80090ae:	bd38      	pop	{r3, r4, r5, pc}
 80090b0:	b118      	cbz	r0, 80090ba <_fflush_r+0x1a>
 80090b2:	6983      	ldr	r3, [r0, #24]
 80090b4:	b90b      	cbnz	r3, 80090ba <_fflush_r+0x1a>
 80090b6:	f000 f887 	bl	80091c8 <__sinit>
 80090ba:	4b14      	ldr	r3, [pc, #80]	; (800910c <_fflush_r+0x6c>)
 80090bc:	429c      	cmp	r4, r3
 80090be:	d11b      	bne.n	80090f8 <_fflush_r+0x58>
 80090c0:	686c      	ldr	r4, [r5, #4]
 80090c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d0ef      	beq.n	80090aa <_fflush_r+0xa>
 80090ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090cc:	07d0      	lsls	r0, r2, #31
 80090ce:	d404      	bmi.n	80090da <_fflush_r+0x3a>
 80090d0:	0599      	lsls	r1, r3, #22
 80090d2:	d402      	bmi.n	80090da <_fflush_r+0x3a>
 80090d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090d6:	f000 f91a 	bl	800930e <__retarget_lock_acquire_recursive>
 80090da:	4628      	mov	r0, r5
 80090dc:	4621      	mov	r1, r4
 80090de:	f7ff ff5d 	bl	8008f9c <__sflush_r>
 80090e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090e4:	4605      	mov	r5, r0
 80090e6:	07da      	lsls	r2, r3, #31
 80090e8:	d4e0      	bmi.n	80090ac <_fflush_r+0xc>
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	059b      	lsls	r3, r3, #22
 80090ee:	d4dd      	bmi.n	80090ac <_fflush_r+0xc>
 80090f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090f2:	f000 f90d 	bl	8009310 <__retarget_lock_release_recursive>
 80090f6:	e7d9      	b.n	80090ac <_fflush_r+0xc>
 80090f8:	4b05      	ldr	r3, [pc, #20]	; (8009110 <_fflush_r+0x70>)
 80090fa:	429c      	cmp	r4, r3
 80090fc:	d101      	bne.n	8009102 <_fflush_r+0x62>
 80090fe:	68ac      	ldr	r4, [r5, #8]
 8009100:	e7df      	b.n	80090c2 <_fflush_r+0x22>
 8009102:	4b04      	ldr	r3, [pc, #16]	; (8009114 <_fflush_r+0x74>)
 8009104:	429c      	cmp	r4, r3
 8009106:	bf08      	it	eq
 8009108:	68ec      	ldreq	r4, [r5, #12]
 800910a:	e7da      	b.n	80090c2 <_fflush_r+0x22>
 800910c:	0800ae04 	.word	0x0800ae04
 8009110:	0800ae24 	.word	0x0800ae24
 8009114:	0800ade4 	.word	0x0800ade4

08009118 <std>:
 8009118:	2300      	movs	r3, #0
 800911a:	b510      	push	{r4, lr}
 800911c:	4604      	mov	r4, r0
 800911e:	e9c0 3300 	strd	r3, r3, [r0]
 8009122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009126:	6083      	str	r3, [r0, #8]
 8009128:	8181      	strh	r1, [r0, #12]
 800912a:	6643      	str	r3, [r0, #100]	; 0x64
 800912c:	81c2      	strh	r2, [r0, #14]
 800912e:	6183      	str	r3, [r0, #24]
 8009130:	4619      	mov	r1, r3
 8009132:	2208      	movs	r2, #8
 8009134:	305c      	adds	r0, #92	; 0x5c
 8009136:	f7fd ffcf 	bl	80070d8 <memset>
 800913a:	4b05      	ldr	r3, [pc, #20]	; (8009150 <std+0x38>)
 800913c:	6224      	str	r4, [r4, #32]
 800913e:	6263      	str	r3, [r4, #36]	; 0x24
 8009140:	4b04      	ldr	r3, [pc, #16]	; (8009154 <std+0x3c>)
 8009142:	62a3      	str	r3, [r4, #40]	; 0x28
 8009144:	4b04      	ldr	r3, [pc, #16]	; (8009158 <std+0x40>)
 8009146:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009148:	4b04      	ldr	r3, [pc, #16]	; (800915c <std+0x44>)
 800914a:	6323      	str	r3, [r4, #48]	; 0x30
 800914c:	bd10      	pop	{r4, pc}
 800914e:	bf00      	nop
 8009150:	08008055 	.word	0x08008055
 8009154:	0800807b 	.word	0x0800807b
 8009158:	080080b3 	.word	0x080080b3
 800915c:	080080d7 	.word	0x080080d7

08009160 <_cleanup_r>:
 8009160:	4901      	ldr	r1, [pc, #4]	; (8009168 <_cleanup_r+0x8>)
 8009162:	f000 b8af 	b.w	80092c4 <_fwalk_reent>
 8009166:	bf00      	nop
 8009168:	080090a1 	.word	0x080090a1

0800916c <__sfmoreglue>:
 800916c:	2268      	movs	r2, #104	; 0x68
 800916e:	b570      	push	{r4, r5, r6, lr}
 8009170:	1e4d      	subs	r5, r1, #1
 8009172:	4355      	muls	r5, r2
 8009174:	460e      	mov	r6, r1
 8009176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800917a:	f7fe f831 	bl	80071e0 <_malloc_r>
 800917e:	4604      	mov	r4, r0
 8009180:	b140      	cbz	r0, 8009194 <__sfmoreglue+0x28>
 8009182:	2100      	movs	r1, #0
 8009184:	e9c0 1600 	strd	r1, r6, [r0]
 8009188:	300c      	adds	r0, #12
 800918a:	60a0      	str	r0, [r4, #8]
 800918c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009190:	f7fd ffa2 	bl	80070d8 <memset>
 8009194:	4620      	mov	r0, r4
 8009196:	bd70      	pop	{r4, r5, r6, pc}

08009198 <__sfp_lock_acquire>:
 8009198:	4801      	ldr	r0, [pc, #4]	; (80091a0 <__sfp_lock_acquire+0x8>)
 800919a:	f000 b8b8 	b.w	800930e <__retarget_lock_acquire_recursive>
 800919e:	bf00      	nop
 80091a0:	2000262d 	.word	0x2000262d

080091a4 <__sfp_lock_release>:
 80091a4:	4801      	ldr	r0, [pc, #4]	; (80091ac <__sfp_lock_release+0x8>)
 80091a6:	f000 b8b3 	b.w	8009310 <__retarget_lock_release_recursive>
 80091aa:	bf00      	nop
 80091ac:	2000262d 	.word	0x2000262d

080091b0 <__sinit_lock_acquire>:
 80091b0:	4801      	ldr	r0, [pc, #4]	; (80091b8 <__sinit_lock_acquire+0x8>)
 80091b2:	f000 b8ac 	b.w	800930e <__retarget_lock_acquire_recursive>
 80091b6:	bf00      	nop
 80091b8:	2000262e 	.word	0x2000262e

080091bc <__sinit_lock_release>:
 80091bc:	4801      	ldr	r0, [pc, #4]	; (80091c4 <__sinit_lock_release+0x8>)
 80091be:	f000 b8a7 	b.w	8009310 <__retarget_lock_release_recursive>
 80091c2:	bf00      	nop
 80091c4:	2000262e 	.word	0x2000262e

080091c8 <__sinit>:
 80091c8:	b510      	push	{r4, lr}
 80091ca:	4604      	mov	r4, r0
 80091cc:	f7ff fff0 	bl	80091b0 <__sinit_lock_acquire>
 80091d0:	69a3      	ldr	r3, [r4, #24]
 80091d2:	b11b      	cbz	r3, 80091dc <__sinit+0x14>
 80091d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091d8:	f7ff bff0 	b.w	80091bc <__sinit_lock_release>
 80091dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091e0:	6523      	str	r3, [r4, #80]	; 0x50
 80091e2:	4b13      	ldr	r3, [pc, #76]	; (8009230 <__sinit+0x68>)
 80091e4:	4a13      	ldr	r2, [pc, #76]	; (8009234 <__sinit+0x6c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80091ea:	42a3      	cmp	r3, r4
 80091ec:	bf08      	it	eq
 80091ee:	2301      	moveq	r3, #1
 80091f0:	4620      	mov	r0, r4
 80091f2:	bf08      	it	eq
 80091f4:	61a3      	streq	r3, [r4, #24]
 80091f6:	f000 f81f 	bl	8009238 <__sfp>
 80091fa:	6060      	str	r0, [r4, #4]
 80091fc:	4620      	mov	r0, r4
 80091fe:	f000 f81b 	bl	8009238 <__sfp>
 8009202:	60a0      	str	r0, [r4, #8]
 8009204:	4620      	mov	r0, r4
 8009206:	f000 f817 	bl	8009238 <__sfp>
 800920a:	2200      	movs	r2, #0
 800920c:	2104      	movs	r1, #4
 800920e:	60e0      	str	r0, [r4, #12]
 8009210:	6860      	ldr	r0, [r4, #4]
 8009212:	f7ff ff81 	bl	8009118 <std>
 8009216:	2201      	movs	r2, #1
 8009218:	2109      	movs	r1, #9
 800921a:	68a0      	ldr	r0, [r4, #8]
 800921c:	f7ff ff7c 	bl	8009118 <std>
 8009220:	2202      	movs	r2, #2
 8009222:	2112      	movs	r1, #18
 8009224:	68e0      	ldr	r0, [r4, #12]
 8009226:	f7ff ff77 	bl	8009118 <std>
 800922a:	2301      	movs	r3, #1
 800922c:	61a3      	str	r3, [r4, #24]
 800922e:	e7d1      	b.n	80091d4 <__sinit+0xc>
 8009230:	0800ad1c 	.word	0x0800ad1c
 8009234:	08009161 	.word	0x08009161

08009238 <__sfp>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	4607      	mov	r7, r0
 800923c:	f7ff ffac 	bl	8009198 <__sfp_lock_acquire>
 8009240:	4b1e      	ldr	r3, [pc, #120]	; (80092bc <__sfp+0x84>)
 8009242:	681e      	ldr	r6, [r3, #0]
 8009244:	69b3      	ldr	r3, [r6, #24]
 8009246:	b913      	cbnz	r3, 800924e <__sfp+0x16>
 8009248:	4630      	mov	r0, r6
 800924a:	f7ff ffbd 	bl	80091c8 <__sinit>
 800924e:	3648      	adds	r6, #72	; 0x48
 8009250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009254:	3b01      	subs	r3, #1
 8009256:	d503      	bpl.n	8009260 <__sfp+0x28>
 8009258:	6833      	ldr	r3, [r6, #0]
 800925a:	b30b      	cbz	r3, 80092a0 <__sfp+0x68>
 800925c:	6836      	ldr	r6, [r6, #0]
 800925e:	e7f7      	b.n	8009250 <__sfp+0x18>
 8009260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009264:	b9d5      	cbnz	r5, 800929c <__sfp+0x64>
 8009266:	4b16      	ldr	r3, [pc, #88]	; (80092c0 <__sfp+0x88>)
 8009268:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800926c:	60e3      	str	r3, [r4, #12]
 800926e:	6665      	str	r5, [r4, #100]	; 0x64
 8009270:	f000 f84c 	bl	800930c <__retarget_lock_init_recursive>
 8009274:	f7ff ff96 	bl	80091a4 <__sfp_lock_release>
 8009278:	2208      	movs	r2, #8
 800927a:	4629      	mov	r1, r5
 800927c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009280:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009284:	6025      	str	r5, [r4, #0]
 8009286:	61a5      	str	r5, [r4, #24]
 8009288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800928c:	f7fd ff24 	bl	80070d8 <memset>
 8009290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009298:	4620      	mov	r0, r4
 800929a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800929c:	3468      	adds	r4, #104	; 0x68
 800929e:	e7d9      	b.n	8009254 <__sfp+0x1c>
 80092a0:	2104      	movs	r1, #4
 80092a2:	4638      	mov	r0, r7
 80092a4:	f7ff ff62 	bl	800916c <__sfmoreglue>
 80092a8:	4604      	mov	r4, r0
 80092aa:	6030      	str	r0, [r6, #0]
 80092ac:	2800      	cmp	r0, #0
 80092ae:	d1d5      	bne.n	800925c <__sfp+0x24>
 80092b0:	f7ff ff78 	bl	80091a4 <__sfp_lock_release>
 80092b4:	230c      	movs	r3, #12
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	e7ee      	b.n	8009298 <__sfp+0x60>
 80092ba:	bf00      	nop
 80092bc:	0800ad1c 	.word	0x0800ad1c
 80092c0:	ffff0001 	.word	0xffff0001

080092c4 <_fwalk_reent>:
 80092c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c8:	4606      	mov	r6, r0
 80092ca:	4688      	mov	r8, r1
 80092cc:	2700      	movs	r7, #0
 80092ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80092d6:	f1b9 0901 	subs.w	r9, r9, #1
 80092da:	d505      	bpl.n	80092e8 <_fwalk_reent+0x24>
 80092dc:	6824      	ldr	r4, [r4, #0]
 80092de:	2c00      	cmp	r4, #0
 80092e0:	d1f7      	bne.n	80092d2 <_fwalk_reent+0xe>
 80092e2:	4638      	mov	r0, r7
 80092e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e8:	89ab      	ldrh	r3, [r5, #12]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d907      	bls.n	80092fe <_fwalk_reent+0x3a>
 80092ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092f2:	3301      	adds	r3, #1
 80092f4:	d003      	beq.n	80092fe <_fwalk_reent+0x3a>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4630      	mov	r0, r6
 80092fa:	47c0      	blx	r8
 80092fc:	4307      	orrs	r7, r0
 80092fe:	3568      	adds	r5, #104	; 0x68
 8009300:	e7e9      	b.n	80092d6 <_fwalk_reent+0x12>
	...

08009304 <_localeconv_r>:
 8009304:	4800      	ldr	r0, [pc, #0]	; (8009308 <_localeconv_r+0x4>)
 8009306:	4770      	bx	lr
 8009308:	20000168 	.word	0x20000168

0800930c <__retarget_lock_init_recursive>:
 800930c:	4770      	bx	lr

0800930e <__retarget_lock_acquire_recursive>:
 800930e:	4770      	bx	lr

08009310 <__retarget_lock_release_recursive>:
 8009310:	4770      	bx	lr
	...

08009314 <_lseek_r>:
 8009314:	b538      	push	{r3, r4, r5, lr}
 8009316:	4604      	mov	r4, r0
 8009318:	4608      	mov	r0, r1
 800931a:	4611      	mov	r1, r2
 800931c:	2200      	movs	r2, #0
 800931e:	4d05      	ldr	r5, [pc, #20]	; (8009334 <_lseek_r+0x20>)
 8009320:	602a      	str	r2, [r5, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	f7fa f8da 	bl	80034dc <_lseek>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	d102      	bne.n	8009332 <_lseek_r+0x1e>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	b103      	cbz	r3, 8009332 <_lseek_r+0x1e>
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	20002630 	.word	0x20002630

08009338 <__swhatbuf_r>:
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	460e      	mov	r6, r1
 800933c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009340:	4614      	mov	r4, r2
 8009342:	2900      	cmp	r1, #0
 8009344:	461d      	mov	r5, r3
 8009346:	b096      	sub	sp, #88	; 0x58
 8009348:	da08      	bge.n	800935c <__swhatbuf_r+0x24>
 800934a:	2200      	movs	r2, #0
 800934c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009350:	602a      	str	r2, [r5, #0]
 8009352:	061a      	lsls	r2, r3, #24
 8009354:	d410      	bmi.n	8009378 <__swhatbuf_r+0x40>
 8009356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800935a:	e00e      	b.n	800937a <__swhatbuf_r+0x42>
 800935c:	466a      	mov	r2, sp
 800935e:	f001 fa57 	bl	800a810 <_fstat_r>
 8009362:	2800      	cmp	r0, #0
 8009364:	dbf1      	blt.n	800934a <__swhatbuf_r+0x12>
 8009366:	9a01      	ldr	r2, [sp, #4]
 8009368:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800936c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009370:	425a      	negs	r2, r3
 8009372:	415a      	adcs	r2, r3
 8009374:	602a      	str	r2, [r5, #0]
 8009376:	e7ee      	b.n	8009356 <__swhatbuf_r+0x1e>
 8009378:	2340      	movs	r3, #64	; 0x40
 800937a:	2000      	movs	r0, #0
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	b016      	add	sp, #88	; 0x58
 8009380:	bd70      	pop	{r4, r5, r6, pc}
	...

08009384 <__smakebuf_r>:
 8009384:	898b      	ldrh	r3, [r1, #12]
 8009386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009388:	079d      	lsls	r5, r3, #30
 800938a:	4606      	mov	r6, r0
 800938c:	460c      	mov	r4, r1
 800938e:	d507      	bpl.n	80093a0 <__smakebuf_r+0x1c>
 8009390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	6123      	str	r3, [r4, #16]
 8009398:	2301      	movs	r3, #1
 800939a:	6163      	str	r3, [r4, #20]
 800939c:	b002      	add	sp, #8
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	466a      	mov	r2, sp
 80093a2:	ab01      	add	r3, sp, #4
 80093a4:	f7ff ffc8 	bl	8009338 <__swhatbuf_r>
 80093a8:	9900      	ldr	r1, [sp, #0]
 80093aa:	4605      	mov	r5, r0
 80093ac:	4630      	mov	r0, r6
 80093ae:	f7fd ff17 	bl	80071e0 <_malloc_r>
 80093b2:	b948      	cbnz	r0, 80093c8 <__smakebuf_r+0x44>
 80093b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b8:	059a      	lsls	r2, r3, #22
 80093ba:	d4ef      	bmi.n	800939c <__smakebuf_r+0x18>
 80093bc:	f023 0303 	bic.w	r3, r3, #3
 80093c0:	f043 0302 	orr.w	r3, r3, #2
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	e7e3      	b.n	8009390 <__smakebuf_r+0xc>
 80093c8:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <__smakebuf_r+0x7c>)
 80093ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	6020      	str	r0, [r4, #0]
 80093d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	9b00      	ldr	r3, [sp, #0]
 80093d8:	6120      	str	r0, [r4, #16]
 80093da:	6163      	str	r3, [r4, #20]
 80093dc:	9b01      	ldr	r3, [sp, #4]
 80093de:	b15b      	cbz	r3, 80093f8 <__smakebuf_r+0x74>
 80093e0:	4630      	mov	r0, r6
 80093e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e6:	f001 fa25 	bl	800a834 <_isatty_r>
 80093ea:	b128      	cbz	r0, 80093f8 <__smakebuf_r+0x74>
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f023 0303 	bic.w	r3, r3, #3
 80093f2:	f043 0301 	orr.w	r3, r3, #1
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	89a0      	ldrh	r0, [r4, #12]
 80093fa:	4305      	orrs	r5, r0
 80093fc:	81a5      	strh	r5, [r4, #12]
 80093fe:	e7cd      	b.n	800939c <__smakebuf_r+0x18>
 8009400:	08009161 	.word	0x08009161

08009404 <memchr>:
 8009404:	4603      	mov	r3, r0
 8009406:	b510      	push	{r4, lr}
 8009408:	b2c9      	uxtb	r1, r1
 800940a:	4402      	add	r2, r0
 800940c:	4293      	cmp	r3, r2
 800940e:	4618      	mov	r0, r3
 8009410:	d101      	bne.n	8009416 <memchr+0x12>
 8009412:	2000      	movs	r0, #0
 8009414:	e003      	b.n	800941e <memchr+0x1a>
 8009416:	7804      	ldrb	r4, [r0, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	428c      	cmp	r4, r1
 800941c:	d1f6      	bne.n	800940c <memchr+0x8>
 800941e:	bd10      	pop	{r4, pc}

08009420 <__malloc_lock>:
 8009420:	4801      	ldr	r0, [pc, #4]	; (8009428 <__malloc_lock+0x8>)
 8009422:	f7ff bf74 	b.w	800930e <__retarget_lock_acquire_recursive>
 8009426:	bf00      	nop
 8009428:	2000262c 	.word	0x2000262c

0800942c <__malloc_unlock>:
 800942c:	4801      	ldr	r0, [pc, #4]	; (8009434 <__malloc_unlock+0x8>)
 800942e:	f7ff bf6f 	b.w	8009310 <__retarget_lock_release_recursive>
 8009432:	bf00      	nop
 8009434:	2000262c 	.word	0x2000262c

08009438 <_Balloc>:
 8009438:	b570      	push	{r4, r5, r6, lr}
 800943a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800943c:	4604      	mov	r4, r0
 800943e:	460d      	mov	r5, r1
 8009440:	b976      	cbnz	r6, 8009460 <_Balloc+0x28>
 8009442:	2010      	movs	r0, #16
 8009444:	f7fd fe2a 	bl	800709c <malloc>
 8009448:	4602      	mov	r2, r0
 800944a:	6260      	str	r0, [r4, #36]	; 0x24
 800944c:	b920      	cbnz	r0, 8009458 <_Balloc+0x20>
 800944e:	2166      	movs	r1, #102	; 0x66
 8009450:	4b17      	ldr	r3, [pc, #92]	; (80094b0 <_Balloc+0x78>)
 8009452:	4818      	ldr	r0, [pc, #96]	; (80094b4 <_Balloc+0x7c>)
 8009454:	f001 f9ac 	bl	800a7b0 <__assert_func>
 8009458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800945c:	6006      	str	r6, [r0, #0]
 800945e:	60c6      	str	r6, [r0, #12]
 8009460:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009462:	68f3      	ldr	r3, [r6, #12]
 8009464:	b183      	cbz	r3, 8009488 <_Balloc+0x50>
 8009466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800946e:	b9b8      	cbnz	r0, 80094a0 <_Balloc+0x68>
 8009470:	2101      	movs	r1, #1
 8009472:	fa01 f605 	lsl.w	r6, r1, r5
 8009476:	1d72      	adds	r2, r6, #5
 8009478:	4620      	mov	r0, r4
 800947a:	0092      	lsls	r2, r2, #2
 800947c:	f7fd fe34 	bl	80070e8 <_calloc_r>
 8009480:	b160      	cbz	r0, 800949c <_Balloc+0x64>
 8009482:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009486:	e00e      	b.n	80094a6 <_Balloc+0x6e>
 8009488:	2221      	movs	r2, #33	; 0x21
 800948a:	2104      	movs	r1, #4
 800948c:	4620      	mov	r0, r4
 800948e:	f7fd fe2b 	bl	80070e8 <_calloc_r>
 8009492:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009494:	60f0      	str	r0, [r6, #12]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e4      	bne.n	8009466 <_Balloc+0x2e>
 800949c:	2000      	movs	r0, #0
 800949e:	bd70      	pop	{r4, r5, r6, pc}
 80094a0:	6802      	ldr	r2, [r0, #0]
 80094a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094a6:	2300      	movs	r3, #0
 80094a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094ac:	e7f7      	b.n	800949e <_Balloc+0x66>
 80094ae:	bf00      	nop
 80094b0:	0800ad5f 	.word	0x0800ad5f
 80094b4:	0800ae44 	.word	0x0800ae44

080094b8 <_Bfree>:
 80094b8:	b570      	push	{r4, r5, r6, lr}
 80094ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094bc:	4605      	mov	r5, r0
 80094be:	460c      	mov	r4, r1
 80094c0:	b976      	cbnz	r6, 80094e0 <_Bfree+0x28>
 80094c2:	2010      	movs	r0, #16
 80094c4:	f7fd fdea 	bl	800709c <malloc>
 80094c8:	4602      	mov	r2, r0
 80094ca:	6268      	str	r0, [r5, #36]	; 0x24
 80094cc:	b920      	cbnz	r0, 80094d8 <_Bfree+0x20>
 80094ce:	218a      	movs	r1, #138	; 0x8a
 80094d0:	4b08      	ldr	r3, [pc, #32]	; (80094f4 <_Bfree+0x3c>)
 80094d2:	4809      	ldr	r0, [pc, #36]	; (80094f8 <_Bfree+0x40>)
 80094d4:	f001 f96c 	bl	800a7b0 <__assert_func>
 80094d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094dc:	6006      	str	r6, [r0, #0]
 80094de:	60c6      	str	r6, [r0, #12]
 80094e0:	b13c      	cbz	r4, 80094f2 <_Bfree+0x3a>
 80094e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094e4:	6862      	ldr	r2, [r4, #4]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094ec:	6021      	str	r1, [r4, #0]
 80094ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094f2:	bd70      	pop	{r4, r5, r6, pc}
 80094f4:	0800ad5f 	.word	0x0800ad5f
 80094f8:	0800ae44 	.word	0x0800ae44

080094fc <__multadd>:
 80094fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009500:	4607      	mov	r7, r0
 8009502:	460c      	mov	r4, r1
 8009504:	461e      	mov	r6, r3
 8009506:	2000      	movs	r0, #0
 8009508:	690d      	ldr	r5, [r1, #16]
 800950a:	f101 0c14 	add.w	ip, r1, #20
 800950e:	f8dc 3000 	ldr.w	r3, [ip]
 8009512:	3001      	adds	r0, #1
 8009514:	b299      	uxth	r1, r3
 8009516:	fb02 6101 	mla	r1, r2, r1, r6
 800951a:	0c1e      	lsrs	r6, r3, #16
 800951c:	0c0b      	lsrs	r3, r1, #16
 800951e:	fb02 3306 	mla	r3, r2, r6, r3
 8009522:	b289      	uxth	r1, r1
 8009524:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009528:	4285      	cmp	r5, r0
 800952a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800952e:	f84c 1b04 	str.w	r1, [ip], #4
 8009532:	dcec      	bgt.n	800950e <__multadd+0x12>
 8009534:	b30e      	cbz	r6, 800957a <__multadd+0x7e>
 8009536:	68a3      	ldr	r3, [r4, #8]
 8009538:	42ab      	cmp	r3, r5
 800953a:	dc19      	bgt.n	8009570 <__multadd+0x74>
 800953c:	6861      	ldr	r1, [r4, #4]
 800953e:	4638      	mov	r0, r7
 8009540:	3101      	adds	r1, #1
 8009542:	f7ff ff79 	bl	8009438 <_Balloc>
 8009546:	4680      	mov	r8, r0
 8009548:	b928      	cbnz	r0, 8009556 <__multadd+0x5a>
 800954a:	4602      	mov	r2, r0
 800954c:	21b5      	movs	r1, #181	; 0xb5
 800954e:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <__multadd+0x84>)
 8009550:	480c      	ldr	r0, [pc, #48]	; (8009584 <__multadd+0x88>)
 8009552:	f001 f92d 	bl	800a7b0 <__assert_func>
 8009556:	6922      	ldr	r2, [r4, #16]
 8009558:	f104 010c 	add.w	r1, r4, #12
 800955c:	3202      	adds	r2, #2
 800955e:	0092      	lsls	r2, r2, #2
 8009560:	300c      	adds	r0, #12
 8009562:	f7fd fdab 	bl	80070bc <memcpy>
 8009566:	4621      	mov	r1, r4
 8009568:	4638      	mov	r0, r7
 800956a:	f7ff ffa5 	bl	80094b8 <_Bfree>
 800956e:	4644      	mov	r4, r8
 8009570:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009574:	3501      	adds	r5, #1
 8009576:	615e      	str	r6, [r3, #20]
 8009578:	6125      	str	r5, [r4, #16]
 800957a:	4620      	mov	r0, r4
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	0800add1 	.word	0x0800add1
 8009584:	0800ae44 	.word	0x0800ae44

08009588 <__hi0bits>:
 8009588:	0c02      	lsrs	r2, r0, #16
 800958a:	0412      	lsls	r2, r2, #16
 800958c:	4603      	mov	r3, r0
 800958e:	b9ca      	cbnz	r2, 80095c4 <__hi0bits+0x3c>
 8009590:	0403      	lsls	r3, r0, #16
 8009592:	2010      	movs	r0, #16
 8009594:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009598:	bf04      	itt	eq
 800959a:	021b      	lsleq	r3, r3, #8
 800959c:	3008      	addeq	r0, #8
 800959e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80095a2:	bf04      	itt	eq
 80095a4:	011b      	lsleq	r3, r3, #4
 80095a6:	3004      	addeq	r0, #4
 80095a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80095ac:	bf04      	itt	eq
 80095ae:	009b      	lsleq	r3, r3, #2
 80095b0:	3002      	addeq	r0, #2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	db05      	blt.n	80095c2 <__hi0bits+0x3a>
 80095b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80095ba:	f100 0001 	add.w	r0, r0, #1
 80095be:	bf08      	it	eq
 80095c0:	2020      	moveq	r0, #32
 80095c2:	4770      	bx	lr
 80095c4:	2000      	movs	r0, #0
 80095c6:	e7e5      	b.n	8009594 <__hi0bits+0xc>

080095c8 <__lo0bits>:
 80095c8:	6803      	ldr	r3, [r0, #0]
 80095ca:	4602      	mov	r2, r0
 80095cc:	f013 0007 	ands.w	r0, r3, #7
 80095d0:	d00b      	beq.n	80095ea <__lo0bits+0x22>
 80095d2:	07d9      	lsls	r1, r3, #31
 80095d4:	d421      	bmi.n	800961a <__lo0bits+0x52>
 80095d6:	0798      	lsls	r0, r3, #30
 80095d8:	bf49      	itett	mi
 80095da:	085b      	lsrmi	r3, r3, #1
 80095dc:	089b      	lsrpl	r3, r3, #2
 80095de:	2001      	movmi	r0, #1
 80095e0:	6013      	strmi	r3, [r2, #0]
 80095e2:	bf5c      	itt	pl
 80095e4:	2002      	movpl	r0, #2
 80095e6:	6013      	strpl	r3, [r2, #0]
 80095e8:	4770      	bx	lr
 80095ea:	b299      	uxth	r1, r3
 80095ec:	b909      	cbnz	r1, 80095f2 <__lo0bits+0x2a>
 80095ee:	2010      	movs	r0, #16
 80095f0:	0c1b      	lsrs	r3, r3, #16
 80095f2:	b2d9      	uxtb	r1, r3
 80095f4:	b909      	cbnz	r1, 80095fa <__lo0bits+0x32>
 80095f6:	3008      	adds	r0, #8
 80095f8:	0a1b      	lsrs	r3, r3, #8
 80095fa:	0719      	lsls	r1, r3, #28
 80095fc:	bf04      	itt	eq
 80095fe:	091b      	lsreq	r3, r3, #4
 8009600:	3004      	addeq	r0, #4
 8009602:	0799      	lsls	r1, r3, #30
 8009604:	bf04      	itt	eq
 8009606:	089b      	lsreq	r3, r3, #2
 8009608:	3002      	addeq	r0, #2
 800960a:	07d9      	lsls	r1, r3, #31
 800960c:	d403      	bmi.n	8009616 <__lo0bits+0x4e>
 800960e:	085b      	lsrs	r3, r3, #1
 8009610:	f100 0001 	add.w	r0, r0, #1
 8009614:	d003      	beq.n	800961e <__lo0bits+0x56>
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	4770      	bx	lr
 800961a:	2000      	movs	r0, #0
 800961c:	4770      	bx	lr
 800961e:	2020      	movs	r0, #32
 8009620:	4770      	bx	lr
	...

08009624 <__i2b>:
 8009624:	b510      	push	{r4, lr}
 8009626:	460c      	mov	r4, r1
 8009628:	2101      	movs	r1, #1
 800962a:	f7ff ff05 	bl	8009438 <_Balloc>
 800962e:	4602      	mov	r2, r0
 8009630:	b928      	cbnz	r0, 800963e <__i2b+0x1a>
 8009632:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009636:	4b04      	ldr	r3, [pc, #16]	; (8009648 <__i2b+0x24>)
 8009638:	4804      	ldr	r0, [pc, #16]	; (800964c <__i2b+0x28>)
 800963a:	f001 f8b9 	bl	800a7b0 <__assert_func>
 800963e:	2301      	movs	r3, #1
 8009640:	6144      	str	r4, [r0, #20]
 8009642:	6103      	str	r3, [r0, #16]
 8009644:	bd10      	pop	{r4, pc}
 8009646:	bf00      	nop
 8009648:	0800add1 	.word	0x0800add1
 800964c:	0800ae44 	.word	0x0800ae44

08009650 <__multiply>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	4691      	mov	r9, r2
 8009656:	690a      	ldr	r2, [r1, #16]
 8009658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800965c:	460c      	mov	r4, r1
 800965e:	429a      	cmp	r2, r3
 8009660:	bfbe      	ittt	lt
 8009662:	460b      	movlt	r3, r1
 8009664:	464c      	movlt	r4, r9
 8009666:	4699      	movlt	r9, r3
 8009668:	6927      	ldr	r7, [r4, #16]
 800966a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800966e:	68a3      	ldr	r3, [r4, #8]
 8009670:	6861      	ldr	r1, [r4, #4]
 8009672:	eb07 060a 	add.w	r6, r7, sl
 8009676:	42b3      	cmp	r3, r6
 8009678:	b085      	sub	sp, #20
 800967a:	bfb8      	it	lt
 800967c:	3101      	addlt	r1, #1
 800967e:	f7ff fedb 	bl	8009438 <_Balloc>
 8009682:	b930      	cbnz	r0, 8009692 <__multiply+0x42>
 8009684:	4602      	mov	r2, r0
 8009686:	f240 115d 	movw	r1, #349	; 0x15d
 800968a:	4b43      	ldr	r3, [pc, #268]	; (8009798 <__multiply+0x148>)
 800968c:	4843      	ldr	r0, [pc, #268]	; (800979c <__multiply+0x14c>)
 800968e:	f001 f88f 	bl	800a7b0 <__assert_func>
 8009692:	f100 0514 	add.w	r5, r0, #20
 8009696:	462b      	mov	r3, r5
 8009698:	2200      	movs	r2, #0
 800969a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800969e:	4543      	cmp	r3, r8
 80096a0:	d321      	bcc.n	80096e6 <__multiply+0x96>
 80096a2:	f104 0314 	add.w	r3, r4, #20
 80096a6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80096aa:	f109 0314 	add.w	r3, r9, #20
 80096ae:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80096b2:	9202      	str	r2, [sp, #8]
 80096b4:	1b3a      	subs	r2, r7, r4
 80096b6:	3a15      	subs	r2, #21
 80096b8:	f022 0203 	bic.w	r2, r2, #3
 80096bc:	3204      	adds	r2, #4
 80096be:	f104 0115 	add.w	r1, r4, #21
 80096c2:	428f      	cmp	r7, r1
 80096c4:	bf38      	it	cc
 80096c6:	2204      	movcc	r2, #4
 80096c8:	9201      	str	r2, [sp, #4]
 80096ca:	9a02      	ldr	r2, [sp, #8]
 80096cc:	9303      	str	r3, [sp, #12]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d80c      	bhi.n	80096ec <__multiply+0x9c>
 80096d2:	2e00      	cmp	r6, #0
 80096d4:	dd03      	ble.n	80096de <__multiply+0x8e>
 80096d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d059      	beq.n	8009792 <__multiply+0x142>
 80096de:	6106      	str	r6, [r0, #16]
 80096e0:	b005      	add	sp, #20
 80096e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e6:	f843 2b04 	str.w	r2, [r3], #4
 80096ea:	e7d8      	b.n	800969e <__multiply+0x4e>
 80096ec:	f8b3 a000 	ldrh.w	sl, [r3]
 80096f0:	f1ba 0f00 	cmp.w	sl, #0
 80096f4:	d023      	beq.n	800973e <__multiply+0xee>
 80096f6:	46a9      	mov	r9, r5
 80096f8:	f04f 0c00 	mov.w	ip, #0
 80096fc:	f104 0e14 	add.w	lr, r4, #20
 8009700:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009704:	f8d9 1000 	ldr.w	r1, [r9]
 8009708:	fa1f fb82 	uxth.w	fp, r2
 800970c:	b289      	uxth	r1, r1
 800970e:	fb0a 110b 	mla	r1, sl, fp, r1
 8009712:	4461      	add	r1, ip
 8009714:	f8d9 c000 	ldr.w	ip, [r9]
 8009718:	0c12      	lsrs	r2, r2, #16
 800971a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800971e:	fb0a c202 	mla	r2, sl, r2, ip
 8009722:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009726:	b289      	uxth	r1, r1
 8009728:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800972c:	4577      	cmp	r7, lr
 800972e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009732:	f849 1b04 	str.w	r1, [r9], #4
 8009736:	d8e3      	bhi.n	8009700 <__multiply+0xb0>
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	f845 c002 	str.w	ip, [r5, r2]
 800973e:	9a03      	ldr	r2, [sp, #12]
 8009740:	3304      	adds	r3, #4
 8009742:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009746:	f1b9 0f00 	cmp.w	r9, #0
 800974a:	d020      	beq.n	800978e <__multiply+0x13e>
 800974c:	46ae      	mov	lr, r5
 800974e:	f04f 0a00 	mov.w	sl, #0
 8009752:	6829      	ldr	r1, [r5, #0]
 8009754:	f104 0c14 	add.w	ip, r4, #20
 8009758:	f8bc b000 	ldrh.w	fp, [ip]
 800975c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009760:	b289      	uxth	r1, r1
 8009762:	fb09 220b 	mla	r2, r9, fp, r2
 8009766:	4492      	add	sl, r2
 8009768:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800976c:	f84e 1b04 	str.w	r1, [lr], #4
 8009770:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009774:	f8be 1000 	ldrh.w	r1, [lr]
 8009778:	0c12      	lsrs	r2, r2, #16
 800977a:	fb09 1102 	mla	r1, r9, r2, r1
 800977e:	4567      	cmp	r7, ip
 8009780:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009784:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009788:	d8e6      	bhi.n	8009758 <__multiply+0x108>
 800978a:	9a01      	ldr	r2, [sp, #4]
 800978c:	50a9      	str	r1, [r5, r2]
 800978e:	3504      	adds	r5, #4
 8009790:	e79b      	b.n	80096ca <__multiply+0x7a>
 8009792:	3e01      	subs	r6, #1
 8009794:	e79d      	b.n	80096d2 <__multiply+0x82>
 8009796:	bf00      	nop
 8009798:	0800add1 	.word	0x0800add1
 800979c:	0800ae44 	.word	0x0800ae44

080097a0 <__pow5mult>:
 80097a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4615      	mov	r5, r2
 80097a6:	f012 0203 	ands.w	r2, r2, #3
 80097aa:	4606      	mov	r6, r0
 80097ac:	460f      	mov	r7, r1
 80097ae:	d007      	beq.n	80097c0 <__pow5mult+0x20>
 80097b0:	4c25      	ldr	r4, [pc, #148]	; (8009848 <__pow5mult+0xa8>)
 80097b2:	3a01      	subs	r2, #1
 80097b4:	2300      	movs	r3, #0
 80097b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097ba:	f7ff fe9f 	bl	80094fc <__multadd>
 80097be:	4607      	mov	r7, r0
 80097c0:	10ad      	asrs	r5, r5, #2
 80097c2:	d03d      	beq.n	8009840 <__pow5mult+0xa0>
 80097c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80097c6:	b97c      	cbnz	r4, 80097e8 <__pow5mult+0x48>
 80097c8:	2010      	movs	r0, #16
 80097ca:	f7fd fc67 	bl	800709c <malloc>
 80097ce:	4602      	mov	r2, r0
 80097d0:	6270      	str	r0, [r6, #36]	; 0x24
 80097d2:	b928      	cbnz	r0, 80097e0 <__pow5mult+0x40>
 80097d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80097d8:	4b1c      	ldr	r3, [pc, #112]	; (800984c <__pow5mult+0xac>)
 80097da:	481d      	ldr	r0, [pc, #116]	; (8009850 <__pow5mult+0xb0>)
 80097dc:	f000 ffe8 	bl	800a7b0 <__assert_func>
 80097e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80097e4:	6004      	str	r4, [r0, #0]
 80097e6:	60c4      	str	r4, [r0, #12]
 80097e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80097ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80097f0:	b94c      	cbnz	r4, 8009806 <__pow5mult+0x66>
 80097f2:	f240 2171 	movw	r1, #625	; 0x271
 80097f6:	4630      	mov	r0, r6
 80097f8:	f7ff ff14 	bl	8009624 <__i2b>
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	f8c8 0008 	str.w	r0, [r8, #8]
 8009804:	6003      	str	r3, [r0, #0]
 8009806:	f04f 0900 	mov.w	r9, #0
 800980a:	07eb      	lsls	r3, r5, #31
 800980c:	d50a      	bpl.n	8009824 <__pow5mult+0x84>
 800980e:	4639      	mov	r1, r7
 8009810:	4622      	mov	r2, r4
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff ff1c 	bl	8009650 <__multiply>
 8009818:	4680      	mov	r8, r0
 800981a:	4639      	mov	r1, r7
 800981c:	4630      	mov	r0, r6
 800981e:	f7ff fe4b 	bl	80094b8 <_Bfree>
 8009822:	4647      	mov	r7, r8
 8009824:	106d      	asrs	r5, r5, #1
 8009826:	d00b      	beq.n	8009840 <__pow5mult+0xa0>
 8009828:	6820      	ldr	r0, [r4, #0]
 800982a:	b938      	cbnz	r0, 800983c <__pow5mult+0x9c>
 800982c:	4622      	mov	r2, r4
 800982e:	4621      	mov	r1, r4
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff ff0d 	bl	8009650 <__multiply>
 8009836:	6020      	str	r0, [r4, #0]
 8009838:	f8c0 9000 	str.w	r9, [r0]
 800983c:	4604      	mov	r4, r0
 800983e:	e7e4      	b.n	800980a <__pow5mult+0x6a>
 8009840:	4638      	mov	r0, r7
 8009842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009846:	bf00      	nop
 8009848:	0800af90 	.word	0x0800af90
 800984c:	0800ad5f 	.word	0x0800ad5f
 8009850:	0800ae44 	.word	0x0800ae44

08009854 <__lshift>:
 8009854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009858:	460c      	mov	r4, r1
 800985a:	4607      	mov	r7, r0
 800985c:	4691      	mov	r9, r2
 800985e:	6923      	ldr	r3, [r4, #16]
 8009860:	6849      	ldr	r1, [r1, #4]
 8009862:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009866:	68a3      	ldr	r3, [r4, #8]
 8009868:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800986c:	f108 0601 	add.w	r6, r8, #1
 8009870:	42b3      	cmp	r3, r6
 8009872:	db0b      	blt.n	800988c <__lshift+0x38>
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff fddf 	bl	8009438 <_Balloc>
 800987a:	4605      	mov	r5, r0
 800987c:	b948      	cbnz	r0, 8009892 <__lshift+0x3e>
 800987e:	4602      	mov	r2, r0
 8009880:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009884:	4b29      	ldr	r3, [pc, #164]	; (800992c <__lshift+0xd8>)
 8009886:	482a      	ldr	r0, [pc, #168]	; (8009930 <__lshift+0xdc>)
 8009888:	f000 ff92 	bl	800a7b0 <__assert_func>
 800988c:	3101      	adds	r1, #1
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	e7ee      	b.n	8009870 <__lshift+0x1c>
 8009892:	2300      	movs	r3, #0
 8009894:	f100 0114 	add.w	r1, r0, #20
 8009898:	f100 0210 	add.w	r2, r0, #16
 800989c:	4618      	mov	r0, r3
 800989e:	4553      	cmp	r3, sl
 80098a0:	db37      	blt.n	8009912 <__lshift+0xbe>
 80098a2:	6920      	ldr	r0, [r4, #16]
 80098a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098a8:	f104 0314 	add.w	r3, r4, #20
 80098ac:	f019 091f 	ands.w	r9, r9, #31
 80098b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80098b8:	d02f      	beq.n	800991a <__lshift+0xc6>
 80098ba:	468a      	mov	sl, r1
 80098bc:	f04f 0c00 	mov.w	ip, #0
 80098c0:	f1c9 0e20 	rsb	lr, r9, #32
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	fa02 f209 	lsl.w	r2, r2, r9
 80098ca:	ea42 020c 	orr.w	r2, r2, ip
 80098ce:	f84a 2b04 	str.w	r2, [sl], #4
 80098d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80098d6:	4298      	cmp	r0, r3
 80098d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80098dc:	d8f2      	bhi.n	80098c4 <__lshift+0x70>
 80098de:	1b03      	subs	r3, r0, r4
 80098e0:	3b15      	subs	r3, #21
 80098e2:	f023 0303 	bic.w	r3, r3, #3
 80098e6:	3304      	adds	r3, #4
 80098e8:	f104 0215 	add.w	r2, r4, #21
 80098ec:	4290      	cmp	r0, r2
 80098ee:	bf38      	it	cc
 80098f0:	2304      	movcc	r3, #4
 80098f2:	f841 c003 	str.w	ip, [r1, r3]
 80098f6:	f1bc 0f00 	cmp.w	ip, #0
 80098fa:	d001      	beq.n	8009900 <__lshift+0xac>
 80098fc:	f108 0602 	add.w	r6, r8, #2
 8009900:	3e01      	subs	r6, #1
 8009902:	4638      	mov	r0, r7
 8009904:	4621      	mov	r1, r4
 8009906:	612e      	str	r6, [r5, #16]
 8009908:	f7ff fdd6 	bl	80094b8 <_Bfree>
 800990c:	4628      	mov	r0, r5
 800990e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009912:	f842 0f04 	str.w	r0, [r2, #4]!
 8009916:	3301      	adds	r3, #1
 8009918:	e7c1      	b.n	800989e <__lshift+0x4a>
 800991a:	3904      	subs	r1, #4
 800991c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009920:	4298      	cmp	r0, r3
 8009922:	f841 2f04 	str.w	r2, [r1, #4]!
 8009926:	d8f9      	bhi.n	800991c <__lshift+0xc8>
 8009928:	e7ea      	b.n	8009900 <__lshift+0xac>
 800992a:	bf00      	nop
 800992c:	0800add1 	.word	0x0800add1
 8009930:	0800ae44 	.word	0x0800ae44

08009934 <__mcmp>:
 8009934:	4603      	mov	r3, r0
 8009936:	690a      	ldr	r2, [r1, #16]
 8009938:	6900      	ldr	r0, [r0, #16]
 800993a:	b530      	push	{r4, r5, lr}
 800993c:	1a80      	subs	r0, r0, r2
 800993e:	d10d      	bne.n	800995c <__mcmp+0x28>
 8009940:	3314      	adds	r3, #20
 8009942:	3114      	adds	r1, #20
 8009944:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009948:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800994c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009950:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009954:	4295      	cmp	r5, r2
 8009956:	d002      	beq.n	800995e <__mcmp+0x2a>
 8009958:	d304      	bcc.n	8009964 <__mcmp+0x30>
 800995a:	2001      	movs	r0, #1
 800995c:	bd30      	pop	{r4, r5, pc}
 800995e:	42a3      	cmp	r3, r4
 8009960:	d3f4      	bcc.n	800994c <__mcmp+0x18>
 8009962:	e7fb      	b.n	800995c <__mcmp+0x28>
 8009964:	f04f 30ff 	mov.w	r0, #4294967295
 8009968:	e7f8      	b.n	800995c <__mcmp+0x28>
	...

0800996c <__mdiff>:
 800996c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009970:	460d      	mov	r5, r1
 8009972:	4607      	mov	r7, r0
 8009974:	4611      	mov	r1, r2
 8009976:	4628      	mov	r0, r5
 8009978:	4614      	mov	r4, r2
 800997a:	f7ff ffdb 	bl	8009934 <__mcmp>
 800997e:	1e06      	subs	r6, r0, #0
 8009980:	d111      	bne.n	80099a6 <__mdiff+0x3a>
 8009982:	4631      	mov	r1, r6
 8009984:	4638      	mov	r0, r7
 8009986:	f7ff fd57 	bl	8009438 <_Balloc>
 800998a:	4602      	mov	r2, r0
 800998c:	b928      	cbnz	r0, 800999a <__mdiff+0x2e>
 800998e:	f240 2132 	movw	r1, #562	; 0x232
 8009992:	4b3a      	ldr	r3, [pc, #232]	; (8009a7c <__mdiff+0x110>)
 8009994:	483a      	ldr	r0, [pc, #232]	; (8009a80 <__mdiff+0x114>)
 8009996:	f000 ff0b 	bl	800a7b0 <__assert_func>
 800999a:	2301      	movs	r3, #1
 800999c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80099a0:	4610      	mov	r0, r2
 80099a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099a6:	bfa4      	itt	ge
 80099a8:	4623      	movge	r3, r4
 80099aa:	462c      	movge	r4, r5
 80099ac:	4638      	mov	r0, r7
 80099ae:	6861      	ldr	r1, [r4, #4]
 80099b0:	bfa6      	itte	ge
 80099b2:	461d      	movge	r5, r3
 80099b4:	2600      	movge	r6, #0
 80099b6:	2601      	movlt	r6, #1
 80099b8:	f7ff fd3e 	bl	8009438 <_Balloc>
 80099bc:	4602      	mov	r2, r0
 80099be:	b918      	cbnz	r0, 80099c8 <__mdiff+0x5c>
 80099c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80099c4:	4b2d      	ldr	r3, [pc, #180]	; (8009a7c <__mdiff+0x110>)
 80099c6:	e7e5      	b.n	8009994 <__mdiff+0x28>
 80099c8:	f102 0814 	add.w	r8, r2, #20
 80099cc:	46c2      	mov	sl, r8
 80099ce:	f04f 0c00 	mov.w	ip, #0
 80099d2:	6927      	ldr	r7, [r4, #16]
 80099d4:	60c6      	str	r6, [r0, #12]
 80099d6:	692e      	ldr	r6, [r5, #16]
 80099d8:	f104 0014 	add.w	r0, r4, #20
 80099dc:	f105 0914 	add.w	r9, r5, #20
 80099e0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80099e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80099e8:	3410      	adds	r4, #16
 80099ea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80099ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80099f2:	fa1f f18b 	uxth.w	r1, fp
 80099f6:	448c      	add	ip, r1
 80099f8:	b299      	uxth	r1, r3
 80099fa:	0c1b      	lsrs	r3, r3, #16
 80099fc:	ebac 0101 	sub.w	r1, ip, r1
 8009a00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a04:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009a08:	b289      	uxth	r1, r1
 8009a0a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009a0e:	454e      	cmp	r6, r9
 8009a10:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009a14:	f84a 3b04 	str.w	r3, [sl], #4
 8009a18:	d8e7      	bhi.n	80099ea <__mdiff+0x7e>
 8009a1a:	1b73      	subs	r3, r6, r5
 8009a1c:	3b15      	subs	r3, #21
 8009a1e:	f023 0303 	bic.w	r3, r3, #3
 8009a22:	3515      	adds	r5, #21
 8009a24:	3304      	adds	r3, #4
 8009a26:	42ae      	cmp	r6, r5
 8009a28:	bf38      	it	cc
 8009a2a:	2304      	movcc	r3, #4
 8009a2c:	4418      	add	r0, r3
 8009a2e:	4443      	add	r3, r8
 8009a30:	461e      	mov	r6, r3
 8009a32:	4605      	mov	r5, r0
 8009a34:	4575      	cmp	r5, lr
 8009a36:	d30e      	bcc.n	8009a56 <__mdiff+0xea>
 8009a38:	f10e 0103 	add.w	r1, lr, #3
 8009a3c:	1a09      	subs	r1, r1, r0
 8009a3e:	f021 0103 	bic.w	r1, r1, #3
 8009a42:	3803      	subs	r0, #3
 8009a44:	4586      	cmp	lr, r0
 8009a46:	bf38      	it	cc
 8009a48:	2100      	movcc	r1, #0
 8009a4a:	4419      	add	r1, r3
 8009a4c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009a50:	b18b      	cbz	r3, 8009a76 <__mdiff+0x10a>
 8009a52:	6117      	str	r7, [r2, #16]
 8009a54:	e7a4      	b.n	80099a0 <__mdiff+0x34>
 8009a56:	f855 8b04 	ldr.w	r8, [r5], #4
 8009a5a:	fa1f f188 	uxth.w	r1, r8
 8009a5e:	4461      	add	r1, ip
 8009a60:	140c      	asrs	r4, r1, #16
 8009a62:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009a66:	b289      	uxth	r1, r1
 8009a68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009a6c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009a70:	f846 1b04 	str.w	r1, [r6], #4
 8009a74:	e7de      	b.n	8009a34 <__mdiff+0xc8>
 8009a76:	3f01      	subs	r7, #1
 8009a78:	e7e8      	b.n	8009a4c <__mdiff+0xe0>
 8009a7a:	bf00      	nop
 8009a7c:	0800add1 	.word	0x0800add1
 8009a80:	0800ae44 	.word	0x0800ae44

08009a84 <__d2b>:
 8009a84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009a88:	2101      	movs	r1, #1
 8009a8a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009a8e:	4690      	mov	r8, r2
 8009a90:	461d      	mov	r5, r3
 8009a92:	f7ff fcd1 	bl	8009438 <_Balloc>
 8009a96:	4604      	mov	r4, r0
 8009a98:	b930      	cbnz	r0, 8009aa8 <__d2b+0x24>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	f240 310a 	movw	r1, #778	; 0x30a
 8009aa0:	4b24      	ldr	r3, [pc, #144]	; (8009b34 <__d2b+0xb0>)
 8009aa2:	4825      	ldr	r0, [pc, #148]	; (8009b38 <__d2b+0xb4>)
 8009aa4:	f000 fe84 	bl	800a7b0 <__assert_func>
 8009aa8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009aac:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009ab0:	bb2d      	cbnz	r5, 8009afe <__d2b+0x7a>
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ab8:	d026      	beq.n	8009b08 <__d2b+0x84>
 8009aba:	4668      	mov	r0, sp
 8009abc:	9300      	str	r3, [sp, #0]
 8009abe:	f7ff fd83 	bl	80095c8 <__lo0bits>
 8009ac2:	9900      	ldr	r1, [sp, #0]
 8009ac4:	b1f0      	cbz	r0, 8009b04 <__d2b+0x80>
 8009ac6:	9a01      	ldr	r2, [sp, #4]
 8009ac8:	f1c0 0320 	rsb	r3, r0, #32
 8009acc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	40c2      	lsrs	r2, r0
 8009ad4:	6163      	str	r3, [r4, #20]
 8009ad6:	9201      	str	r2, [sp, #4]
 8009ad8:	9b01      	ldr	r3, [sp, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	bf14      	ite	ne
 8009ade:	2102      	movne	r1, #2
 8009ae0:	2101      	moveq	r1, #1
 8009ae2:	61a3      	str	r3, [r4, #24]
 8009ae4:	6121      	str	r1, [r4, #16]
 8009ae6:	b1c5      	cbz	r5, 8009b1a <__d2b+0x96>
 8009ae8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aec:	4405      	add	r5, r0
 8009aee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009af2:	603d      	str	r5, [r7, #0]
 8009af4:	6030      	str	r0, [r6, #0]
 8009af6:	4620      	mov	r0, r4
 8009af8:	b002      	add	sp, #8
 8009afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b02:	e7d6      	b.n	8009ab2 <__d2b+0x2e>
 8009b04:	6161      	str	r1, [r4, #20]
 8009b06:	e7e7      	b.n	8009ad8 <__d2b+0x54>
 8009b08:	a801      	add	r0, sp, #4
 8009b0a:	f7ff fd5d 	bl	80095c8 <__lo0bits>
 8009b0e:	2101      	movs	r1, #1
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	6121      	str	r1, [r4, #16]
 8009b14:	6163      	str	r3, [r4, #20]
 8009b16:	3020      	adds	r0, #32
 8009b18:	e7e5      	b.n	8009ae6 <__d2b+0x62>
 8009b1a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009b1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b22:	6038      	str	r0, [r7, #0]
 8009b24:	6918      	ldr	r0, [r3, #16]
 8009b26:	f7ff fd2f 	bl	8009588 <__hi0bits>
 8009b2a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009b2e:	6031      	str	r1, [r6, #0]
 8009b30:	e7e1      	b.n	8009af6 <__d2b+0x72>
 8009b32:	bf00      	nop
 8009b34:	0800add1 	.word	0x0800add1
 8009b38:	0800ae44 	.word	0x0800ae44

08009b3c <_sungetc_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	1c4b      	adds	r3, r1, #1
 8009b40:	4614      	mov	r4, r2
 8009b42:	d103      	bne.n	8009b4c <_sungetc_r+0x10>
 8009b44:	f04f 35ff 	mov.w	r5, #4294967295
 8009b48:	4628      	mov	r0, r5
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	8993      	ldrh	r3, [r2, #12]
 8009b4e:	b2cd      	uxtb	r5, r1
 8009b50:	f023 0320 	bic.w	r3, r3, #32
 8009b54:	8193      	strh	r3, [r2, #12]
 8009b56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b58:	6852      	ldr	r2, [r2, #4]
 8009b5a:	b18b      	cbz	r3, 8009b80 <_sungetc_r+0x44>
 8009b5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	dd08      	ble.n	8009b74 <_sungetc_r+0x38>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	1e5a      	subs	r2, r3, #1
 8009b66:	6022      	str	r2, [r4, #0]
 8009b68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009b6c:	6863      	ldr	r3, [r4, #4]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	6063      	str	r3, [r4, #4]
 8009b72:	e7e9      	b.n	8009b48 <_sungetc_r+0xc>
 8009b74:	4621      	mov	r1, r4
 8009b76:	f000 fde3 	bl	800a740 <__submore>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d0f1      	beq.n	8009b62 <_sungetc_r+0x26>
 8009b7e:	e7e1      	b.n	8009b44 <_sungetc_r+0x8>
 8009b80:	6921      	ldr	r1, [r4, #16]
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	b151      	cbz	r1, 8009b9c <_sungetc_r+0x60>
 8009b86:	4299      	cmp	r1, r3
 8009b88:	d208      	bcs.n	8009b9c <_sungetc_r+0x60>
 8009b8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009b8e:	42a9      	cmp	r1, r5
 8009b90:	d104      	bne.n	8009b9c <_sungetc_r+0x60>
 8009b92:	3b01      	subs	r3, #1
 8009b94:	3201      	adds	r2, #1
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	6062      	str	r2, [r4, #4]
 8009b9a:	e7d5      	b.n	8009b48 <_sungetc_r+0xc>
 8009b9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ba4:	6363      	str	r3, [r4, #52]	; 0x34
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	63a3      	str	r3, [r4, #56]	; 0x38
 8009baa:	4623      	mov	r3, r4
 8009bac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009bb0:	6023      	str	r3, [r4, #0]
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e7dc      	b.n	8009b70 <_sungetc_r+0x34>

08009bb6 <__ssrefill_r>:
 8009bb6:	b510      	push	{r4, lr}
 8009bb8:	460c      	mov	r4, r1
 8009bba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009bbc:	b169      	cbz	r1, 8009bda <__ssrefill_r+0x24>
 8009bbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc2:	4299      	cmp	r1, r3
 8009bc4:	d001      	beq.n	8009bca <__ssrefill_r+0x14>
 8009bc6:	f7fd faa3 	bl	8007110 <_free_r>
 8009bca:	2000      	movs	r0, #0
 8009bcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009bce:	6360      	str	r0, [r4, #52]	; 0x34
 8009bd0:	6063      	str	r3, [r4, #4]
 8009bd2:	b113      	cbz	r3, 8009bda <__ssrefill_r+0x24>
 8009bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009bd6:	6023      	str	r3, [r4, #0]
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	6923      	ldr	r3, [r4, #16]
 8009bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	2300      	movs	r3, #0
 8009be4:	6063      	str	r3, [r4, #4]
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f043 0320 	orr.w	r3, r3, #32
 8009bec:	81a3      	strh	r3, [r4, #12]
 8009bee:	e7f3      	b.n	8009bd8 <__ssrefill_r+0x22>

08009bf0 <__ssvfiscanf_r>:
 8009bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf4:	460c      	mov	r4, r1
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8009bfe:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009c02:	49a7      	ldr	r1, [pc, #668]	; (8009ea0 <__ssvfiscanf_r+0x2b0>)
 8009c04:	f10d 0804 	add.w	r8, sp, #4
 8009c08:	91a0      	str	r1, [sp, #640]	; 0x280
 8009c0a:	49a6      	ldr	r1, [pc, #664]	; (8009ea4 <__ssvfiscanf_r+0x2b4>)
 8009c0c:	4fa6      	ldr	r7, [pc, #664]	; (8009ea8 <__ssvfiscanf_r+0x2b8>)
 8009c0e:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8009eac <__ssvfiscanf_r+0x2bc>
 8009c12:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009c16:	91a1      	str	r1, [sp, #644]	; 0x284
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	7813      	ldrb	r3, [r2, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f000 815c 	beq.w	8009eda <__ssvfiscanf_r+0x2ea>
 8009c22:	5dd9      	ldrb	r1, [r3, r7]
 8009c24:	1c55      	adds	r5, r2, #1
 8009c26:	f011 0108 	ands.w	r1, r1, #8
 8009c2a:	d019      	beq.n	8009c60 <__ssvfiscanf_r+0x70>
 8009c2c:	6863      	ldr	r3, [r4, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	dd0f      	ble.n	8009c52 <__ssvfiscanf_r+0x62>
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	781a      	ldrb	r2, [r3, #0]
 8009c36:	5cba      	ldrb	r2, [r7, r2]
 8009c38:	0712      	lsls	r2, r2, #28
 8009c3a:	d401      	bmi.n	8009c40 <__ssvfiscanf_r+0x50>
 8009c3c:	462a      	mov	r2, r5
 8009c3e:	e7ec      	b.n	8009c1a <__ssvfiscanf_r+0x2a>
 8009c40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009c42:	3301      	adds	r3, #1
 8009c44:	3201      	adds	r2, #1
 8009c46:	9245      	str	r2, [sp, #276]	; 0x114
 8009c48:	6862      	ldr	r2, [r4, #4]
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	3a01      	subs	r2, #1
 8009c4e:	6062      	str	r2, [r4, #4]
 8009c50:	e7ec      	b.n	8009c2c <__ssvfiscanf_r+0x3c>
 8009c52:	4621      	mov	r1, r4
 8009c54:	4630      	mov	r0, r6
 8009c56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009c58:	4798      	blx	r3
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d0e9      	beq.n	8009c32 <__ssvfiscanf_r+0x42>
 8009c5e:	e7ed      	b.n	8009c3c <__ssvfiscanf_r+0x4c>
 8009c60:	2b25      	cmp	r3, #37	; 0x25
 8009c62:	d012      	beq.n	8009c8a <__ssvfiscanf_r+0x9a>
 8009c64:	469a      	mov	sl, r3
 8009c66:	6863      	ldr	r3, [r4, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	f340 8094 	ble.w	8009d96 <__ssvfiscanf_r+0x1a6>
 8009c6e:	6822      	ldr	r2, [r4, #0]
 8009c70:	7813      	ldrb	r3, [r2, #0]
 8009c72:	4553      	cmp	r3, sl
 8009c74:	f040 8131 	bne.w	8009eda <__ssvfiscanf_r+0x2ea>
 8009c78:	6863      	ldr	r3, [r4, #4]
 8009c7a:	3201      	adds	r2, #1
 8009c7c:	3b01      	subs	r3, #1
 8009c7e:	6063      	str	r3, [r4, #4]
 8009c80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009c82:	6022      	str	r2, [r4, #0]
 8009c84:	3301      	adds	r3, #1
 8009c86:	9345      	str	r3, [sp, #276]	; 0x114
 8009c88:	e7d8      	b.n	8009c3c <__ssvfiscanf_r+0x4c>
 8009c8a:	9141      	str	r1, [sp, #260]	; 0x104
 8009c8c:	9143      	str	r1, [sp, #268]	; 0x10c
 8009c8e:	7853      	ldrb	r3, [r2, #1]
 8009c90:	2b2a      	cmp	r3, #42	; 0x2a
 8009c92:	bf04      	itt	eq
 8009c94:	2310      	moveq	r3, #16
 8009c96:	1c95      	addeq	r5, r2, #2
 8009c98:	f04f 020a 	mov.w	r2, #10
 8009c9c:	bf08      	it	eq
 8009c9e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009ca0:	46aa      	mov	sl, r5
 8009ca2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009ca6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009caa:	2b09      	cmp	r3, #9
 8009cac:	d91d      	bls.n	8009cea <__ssvfiscanf_r+0xfa>
 8009cae:	2203      	movs	r2, #3
 8009cb0:	487e      	ldr	r0, [pc, #504]	; (8009eac <__ssvfiscanf_r+0x2bc>)
 8009cb2:	f7ff fba7 	bl	8009404 <memchr>
 8009cb6:	b140      	cbz	r0, 8009cca <__ssvfiscanf_r+0xda>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4655      	mov	r5, sl
 8009cbc:	eba0 0009 	sub.w	r0, r0, r9
 8009cc0:	fa03 f000 	lsl.w	r0, r3, r0
 8009cc4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009cc6:	4318      	orrs	r0, r3
 8009cc8:	9041      	str	r0, [sp, #260]	; 0x104
 8009cca:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009cce:	2b78      	cmp	r3, #120	; 0x78
 8009cd0:	d806      	bhi.n	8009ce0 <__ssvfiscanf_r+0xf0>
 8009cd2:	2b57      	cmp	r3, #87	; 0x57
 8009cd4:	d810      	bhi.n	8009cf8 <__ssvfiscanf_r+0x108>
 8009cd6:	2b25      	cmp	r3, #37	; 0x25
 8009cd8:	d0c4      	beq.n	8009c64 <__ssvfiscanf_r+0x74>
 8009cda:	d857      	bhi.n	8009d8c <__ssvfiscanf_r+0x19c>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d065      	beq.n	8009dac <__ssvfiscanf_r+0x1bc>
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ce4:	230a      	movs	r3, #10
 8009ce6:	9342      	str	r3, [sp, #264]	; 0x108
 8009ce8:	e072      	b.n	8009dd0 <__ssvfiscanf_r+0x1e0>
 8009cea:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009cec:	4655      	mov	r5, sl
 8009cee:	fb02 1103 	mla	r1, r2, r3, r1
 8009cf2:	3930      	subs	r1, #48	; 0x30
 8009cf4:	9143      	str	r1, [sp, #268]	; 0x10c
 8009cf6:	e7d3      	b.n	8009ca0 <__ssvfiscanf_r+0xb0>
 8009cf8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009cfc:	2a20      	cmp	r2, #32
 8009cfe:	d8ef      	bhi.n	8009ce0 <__ssvfiscanf_r+0xf0>
 8009d00:	a101      	add	r1, pc, #4	; (adr r1, 8009d08 <__ssvfiscanf_r+0x118>)
 8009d02:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009dbb 	.word	0x08009dbb
 8009d0c:	08009ce1 	.word	0x08009ce1
 8009d10:	08009ce1 	.word	0x08009ce1
 8009d14:	08009e19 	.word	0x08009e19
 8009d18:	08009ce1 	.word	0x08009ce1
 8009d1c:	08009ce1 	.word	0x08009ce1
 8009d20:	08009ce1 	.word	0x08009ce1
 8009d24:	08009ce1 	.word	0x08009ce1
 8009d28:	08009ce1 	.word	0x08009ce1
 8009d2c:	08009ce1 	.word	0x08009ce1
 8009d30:	08009ce1 	.word	0x08009ce1
 8009d34:	08009e2f 	.word	0x08009e2f
 8009d38:	08009e05 	.word	0x08009e05
 8009d3c:	08009d93 	.word	0x08009d93
 8009d40:	08009d93 	.word	0x08009d93
 8009d44:	08009d93 	.word	0x08009d93
 8009d48:	08009ce1 	.word	0x08009ce1
 8009d4c:	08009e09 	.word	0x08009e09
 8009d50:	08009ce1 	.word	0x08009ce1
 8009d54:	08009ce1 	.word	0x08009ce1
 8009d58:	08009ce1 	.word	0x08009ce1
 8009d5c:	08009ce1 	.word	0x08009ce1
 8009d60:	08009e3f 	.word	0x08009e3f
 8009d64:	08009e11 	.word	0x08009e11
 8009d68:	08009db3 	.word	0x08009db3
 8009d6c:	08009ce1 	.word	0x08009ce1
 8009d70:	08009ce1 	.word	0x08009ce1
 8009d74:	08009e3b 	.word	0x08009e3b
 8009d78:	08009ce1 	.word	0x08009ce1
 8009d7c:	08009e05 	.word	0x08009e05
 8009d80:	08009ce1 	.word	0x08009ce1
 8009d84:	08009ce1 	.word	0x08009ce1
 8009d88:	08009dbb 	.word	0x08009dbb
 8009d8c:	3b45      	subs	r3, #69	; 0x45
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d8a6      	bhi.n	8009ce0 <__ssvfiscanf_r+0xf0>
 8009d92:	2305      	movs	r3, #5
 8009d94:	e01b      	b.n	8009dce <__ssvfiscanf_r+0x1de>
 8009d96:	4621      	mov	r1, r4
 8009d98:	4630      	mov	r0, r6
 8009d9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009d9c:	4798      	blx	r3
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	f43f af65 	beq.w	8009c6e <__ssvfiscanf_r+0x7e>
 8009da4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f040 808d 	bne.w	8009ec6 <__ssvfiscanf_r+0x2d6>
 8009dac:	f04f 30ff 	mov.w	r0, #4294967295
 8009db0:	e08f      	b.n	8009ed2 <__ssvfiscanf_r+0x2e2>
 8009db2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009db4:	f042 0220 	orr.w	r2, r2, #32
 8009db8:	9241      	str	r2, [sp, #260]	; 0x104
 8009dba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dc0:	9241      	str	r2, [sp, #260]	; 0x104
 8009dc2:	2210      	movs	r2, #16
 8009dc4:	2b6f      	cmp	r3, #111	; 0x6f
 8009dc6:	bf34      	ite	cc
 8009dc8:	2303      	movcc	r3, #3
 8009dca:	2304      	movcs	r3, #4
 8009dcc:	9242      	str	r2, [sp, #264]	; 0x108
 8009dce:	9347      	str	r3, [sp, #284]	; 0x11c
 8009dd0:	6863      	ldr	r3, [r4, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dd42      	ble.n	8009e5c <__ssvfiscanf_r+0x26c>
 8009dd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009dd8:	0659      	lsls	r1, r3, #25
 8009dda:	d404      	bmi.n	8009de6 <__ssvfiscanf_r+0x1f6>
 8009ddc:	6823      	ldr	r3, [r4, #0]
 8009dde:	781a      	ldrb	r2, [r3, #0]
 8009de0:	5cba      	ldrb	r2, [r7, r2]
 8009de2:	0712      	lsls	r2, r2, #28
 8009de4:	d441      	bmi.n	8009e6a <__ssvfiscanf_r+0x27a>
 8009de6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	dc50      	bgt.n	8009e8e <__ssvfiscanf_r+0x29e>
 8009dec:	466b      	mov	r3, sp
 8009dee:	4622      	mov	r2, r4
 8009df0:	4630      	mov	r0, r6
 8009df2:	a941      	add	r1, sp, #260	; 0x104
 8009df4:	f000 f9ce 	bl	800a194 <_scanf_chars>
 8009df8:	2801      	cmp	r0, #1
 8009dfa:	d06e      	beq.n	8009eda <__ssvfiscanf_r+0x2ea>
 8009dfc:	2802      	cmp	r0, #2
 8009dfe:	f47f af1d 	bne.w	8009c3c <__ssvfiscanf_r+0x4c>
 8009e02:	e7cf      	b.n	8009da4 <__ssvfiscanf_r+0x1b4>
 8009e04:	220a      	movs	r2, #10
 8009e06:	e7dd      	b.n	8009dc4 <__ssvfiscanf_r+0x1d4>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9342      	str	r3, [sp, #264]	; 0x108
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e7de      	b.n	8009dce <__ssvfiscanf_r+0x1de>
 8009e10:	2308      	movs	r3, #8
 8009e12:	9342      	str	r3, [sp, #264]	; 0x108
 8009e14:	2304      	movs	r3, #4
 8009e16:	e7da      	b.n	8009dce <__ssvfiscanf_r+0x1de>
 8009e18:	4629      	mov	r1, r5
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	f000 fb66 	bl	800a4ec <__sccl>
 8009e20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e22:	4605      	mov	r5, r0
 8009e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e28:	9341      	str	r3, [sp, #260]	; 0x104
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e7cf      	b.n	8009dce <__ssvfiscanf_r+0x1de>
 8009e2e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e34:	9341      	str	r3, [sp, #260]	; 0x104
 8009e36:	2300      	movs	r3, #0
 8009e38:	e7c9      	b.n	8009dce <__ssvfiscanf_r+0x1de>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e7c7      	b.n	8009dce <__ssvfiscanf_r+0x1de>
 8009e3e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009e40:	06c3      	lsls	r3, r0, #27
 8009e42:	f53f aefb 	bmi.w	8009c3c <__ssvfiscanf_r+0x4c>
 8009e46:	9b00      	ldr	r3, [sp, #0]
 8009e48:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e4a:	1d19      	adds	r1, r3, #4
 8009e4c:	9100      	str	r1, [sp, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f010 0f01 	tst.w	r0, #1
 8009e54:	bf14      	ite	ne
 8009e56:	801a      	strhne	r2, [r3, #0]
 8009e58:	601a      	streq	r2, [r3, #0]
 8009e5a:	e6ef      	b.n	8009c3c <__ssvfiscanf_r+0x4c>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4630      	mov	r0, r6
 8009e60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e62:	4798      	blx	r3
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d0b6      	beq.n	8009dd6 <__ssvfiscanf_r+0x1e6>
 8009e68:	e79c      	b.n	8009da4 <__ssvfiscanf_r+0x1b4>
 8009e6a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e6c:	3201      	adds	r2, #1
 8009e6e:	9245      	str	r2, [sp, #276]	; 0x114
 8009e70:	6862      	ldr	r2, [r4, #4]
 8009e72:	3a01      	subs	r2, #1
 8009e74:	2a00      	cmp	r2, #0
 8009e76:	6062      	str	r2, [r4, #4]
 8009e78:	dd02      	ble.n	8009e80 <__ssvfiscanf_r+0x290>
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	e7ad      	b.n	8009ddc <__ssvfiscanf_r+0x1ec>
 8009e80:	4621      	mov	r1, r4
 8009e82:	4630      	mov	r0, r6
 8009e84:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e86:	4798      	blx	r3
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d0a7      	beq.n	8009ddc <__ssvfiscanf_r+0x1ec>
 8009e8c:	e78a      	b.n	8009da4 <__ssvfiscanf_r+0x1b4>
 8009e8e:	2b04      	cmp	r3, #4
 8009e90:	dc0e      	bgt.n	8009eb0 <__ssvfiscanf_r+0x2c0>
 8009e92:	466b      	mov	r3, sp
 8009e94:	4622      	mov	r2, r4
 8009e96:	4630      	mov	r0, r6
 8009e98:	a941      	add	r1, sp, #260	; 0x104
 8009e9a:	f000 f9d5 	bl	800a248 <_scanf_i>
 8009e9e:	e7ab      	b.n	8009df8 <__ssvfiscanf_r+0x208>
 8009ea0:	08009b3d 	.word	0x08009b3d
 8009ea4:	08009bb7 	.word	0x08009bb7
 8009ea8:	0800b005 	.word	0x0800b005
 8009eac:	0800af9c 	.word	0x0800af9c
 8009eb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ee0 <__ssvfiscanf_r+0x2f0>)
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f43f aec2 	beq.w	8009c3c <__ssvfiscanf_r+0x4c>
 8009eb8:	466b      	mov	r3, sp
 8009eba:	4622      	mov	r2, r4
 8009ebc:	4630      	mov	r0, r6
 8009ebe:	a941      	add	r1, sp, #260	; 0x104
 8009ec0:	f3af 8000 	nop.w
 8009ec4:	e798      	b.n	8009df8 <__ssvfiscanf_r+0x208>
 8009ec6:	89a3      	ldrh	r3, [r4, #12]
 8009ec8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009ecc:	bf18      	it	ne
 8009ece:	f04f 30ff 	movne.w	r0, #4294967295
 8009ed2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eda:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009edc:	e7f9      	b.n	8009ed2 <__ssvfiscanf_r+0x2e2>
 8009ede:	bf00      	nop
 8009ee0:	00000000 	.word	0x00000000

08009ee4 <__sfputc_r>:
 8009ee4:	6893      	ldr	r3, [r2, #8]
 8009ee6:	b410      	push	{r4}
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	6093      	str	r3, [r2, #8]
 8009eee:	da07      	bge.n	8009f00 <__sfputc_r+0x1c>
 8009ef0:	6994      	ldr	r4, [r2, #24]
 8009ef2:	42a3      	cmp	r3, r4
 8009ef4:	db01      	blt.n	8009efa <__sfputc_r+0x16>
 8009ef6:	290a      	cmp	r1, #10
 8009ef8:	d102      	bne.n	8009f00 <__sfputc_r+0x1c>
 8009efa:	bc10      	pop	{r4}
 8009efc:	f7fe b8f0 	b.w	80080e0 <__swbuf_r>
 8009f00:	6813      	ldr	r3, [r2, #0]
 8009f02:	1c58      	adds	r0, r3, #1
 8009f04:	6010      	str	r0, [r2, #0]
 8009f06:	7019      	strb	r1, [r3, #0]
 8009f08:	4608      	mov	r0, r1
 8009f0a:	bc10      	pop	{r4}
 8009f0c:	4770      	bx	lr

08009f0e <__sfputs_r>:
 8009f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f10:	4606      	mov	r6, r0
 8009f12:	460f      	mov	r7, r1
 8009f14:	4614      	mov	r4, r2
 8009f16:	18d5      	adds	r5, r2, r3
 8009f18:	42ac      	cmp	r4, r5
 8009f1a:	d101      	bne.n	8009f20 <__sfputs_r+0x12>
 8009f1c:	2000      	movs	r0, #0
 8009f1e:	e007      	b.n	8009f30 <__sfputs_r+0x22>
 8009f20:	463a      	mov	r2, r7
 8009f22:	4630      	mov	r0, r6
 8009f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f28:	f7ff ffdc 	bl	8009ee4 <__sfputc_r>
 8009f2c:	1c43      	adds	r3, r0, #1
 8009f2e:	d1f3      	bne.n	8009f18 <__sfputs_r+0xa>
 8009f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f34 <_vfiprintf_r>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	460d      	mov	r5, r1
 8009f3a:	4614      	mov	r4, r2
 8009f3c:	4698      	mov	r8, r3
 8009f3e:	4606      	mov	r6, r0
 8009f40:	b09d      	sub	sp, #116	; 0x74
 8009f42:	b118      	cbz	r0, 8009f4c <_vfiprintf_r+0x18>
 8009f44:	6983      	ldr	r3, [r0, #24]
 8009f46:	b90b      	cbnz	r3, 8009f4c <_vfiprintf_r+0x18>
 8009f48:	f7ff f93e 	bl	80091c8 <__sinit>
 8009f4c:	4b89      	ldr	r3, [pc, #548]	; (800a174 <_vfiprintf_r+0x240>)
 8009f4e:	429d      	cmp	r5, r3
 8009f50:	d11b      	bne.n	8009f8a <_vfiprintf_r+0x56>
 8009f52:	6875      	ldr	r5, [r6, #4]
 8009f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f56:	07d9      	lsls	r1, r3, #31
 8009f58:	d405      	bmi.n	8009f66 <_vfiprintf_r+0x32>
 8009f5a:	89ab      	ldrh	r3, [r5, #12]
 8009f5c:	059a      	lsls	r2, r3, #22
 8009f5e:	d402      	bmi.n	8009f66 <_vfiprintf_r+0x32>
 8009f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f62:	f7ff f9d4 	bl	800930e <__retarget_lock_acquire_recursive>
 8009f66:	89ab      	ldrh	r3, [r5, #12]
 8009f68:	071b      	lsls	r3, r3, #28
 8009f6a:	d501      	bpl.n	8009f70 <_vfiprintf_r+0x3c>
 8009f6c:	692b      	ldr	r3, [r5, #16]
 8009f6e:	b9eb      	cbnz	r3, 8009fac <_vfiprintf_r+0x78>
 8009f70:	4629      	mov	r1, r5
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7fe f918 	bl	80081a8 <__swsetup_r>
 8009f78:	b1c0      	cbz	r0, 8009fac <_vfiprintf_r+0x78>
 8009f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f7c:	07dc      	lsls	r4, r3, #31
 8009f7e:	d50e      	bpl.n	8009f9e <_vfiprintf_r+0x6a>
 8009f80:	f04f 30ff 	mov.w	r0, #4294967295
 8009f84:	b01d      	add	sp, #116	; 0x74
 8009f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f8a:	4b7b      	ldr	r3, [pc, #492]	; (800a178 <_vfiprintf_r+0x244>)
 8009f8c:	429d      	cmp	r5, r3
 8009f8e:	d101      	bne.n	8009f94 <_vfiprintf_r+0x60>
 8009f90:	68b5      	ldr	r5, [r6, #8]
 8009f92:	e7df      	b.n	8009f54 <_vfiprintf_r+0x20>
 8009f94:	4b79      	ldr	r3, [pc, #484]	; (800a17c <_vfiprintf_r+0x248>)
 8009f96:	429d      	cmp	r5, r3
 8009f98:	bf08      	it	eq
 8009f9a:	68f5      	ldreq	r5, [r6, #12]
 8009f9c:	e7da      	b.n	8009f54 <_vfiprintf_r+0x20>
 8009f9e:	89ab      	ldrh	r3, [r5, #12]
 8009fa0:	0598      	lsls	r0, r3, #22
 8009fa2:	d4ed      	bmi.n	8009f80 <_vfiprintf_r+0x4c>
 8009fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fa6:	f7ff f9b3 	bl	8009310 <__retarget_lock_release_recursive>
 8009faa:	e7e9      	b.n	8009f80 <_vfiprintf_r+0x4c>
 8009fac:	2300      	movs	r3, #0
 8009fae:	9309      	str	r3, [sp, #36]	; 0x24
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fb6:	2330      	movs	r3, #48	; 0x30
 8009fb8:	f04f 0901 	mov.w	r9, #1
 8009fbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fc0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a180 <_vfiprintf_r+0x24c>
 8009fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fc8:	4623      	mov	r3, r4
 8009fca:	469a      	mov	sl, r3
 8009fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fd0:	b10a      	cbz	r2, 8009fd6 <_vfiprintf_r+0xa2>
 8009fd2:	2a25      	cmp	r2, #37	; 0x25
 8009fd4:	d1f9      	bne.n	8009fca <_vfiprintf_r+0x96>
 8009fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8009fda:	d00b      	beq.n	8009ff4 <_vfiprintf_r+0xc0>
 8009fdc:	465b      	mov	r3, fp
 8009fde:	4622      	mov	r2, r4
 8009fe0:	4629      	mov	r1, r5
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f7ff ff93 	bl	8009f0e <__sfputs_r>
 8009fe8:	3001      	adds	r0, #1
 8009fea:	f000 80aa 	beq.w	800a142 <_vfiprintf_r+0x20e>
 8009fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ff0:	445a      	add	r2, fp
 8009ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 80a2 	beq.w	800a142 <_vfiprintf_r+0x20e>
 8009ffe:	2300      	movs	r3, #0
 800a000:	f04f 32ff 	mov.w	r2, #4294967295
 800a004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a008:	f10a 0a01 	add.w	sl, sl, #1
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	9307      	str	r3, [sp, #28]
 800a010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a014:	931a      	str	r3, [sp, #104]	; 0x68
 800a016:	4654      	mov	r4, sl
 800a018:	2205      	movs	r2, #5
 800a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01e:	4858      	ldr	r0, [pc, #352]	; (800a180 <_vfiprintf_r+0x24c>)
 800a020:	f7ff f9f0 	bl	8009404 <memchr>
 800a024:	9a04      	ldr	r2, [sp, #16]
 800a026:	b9d8      	cbnz	r0, 800a060 <_vfiprintf_r+0x12c>
 800a028:	06d1      	lsls	r1, r2, #27
 800a02a:	bf44      	itt	mi
 800a02c:	2320      	movmi	r3, #32
 800a02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a032:	0713      	lsls	r3, r2, #28
 800a034:	bf44      	itt	mi
 800a036:	232b      	movmi	r3, #43	; 0x2b
 800a038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a03c:	f89a 3000 	ldrb.w	r3, [sl]
 800a040:	2b2a      	cmp	r3, #42	; 0x2a
 800a042:	d015      	beq.n	800a070 <_vfiprintf_r+0x13c>
 800a044:	4654      	mov	r4, sl
 800a046:	2000      	movs	r0, #0
 800a048:	f04f 0c0a 	mov.w	ip, #10
 800a04c:	9a07      	ldr	r2, [sp, #28]
 800a04e:	4621      	mov	r1, r4
 800a050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a054:	3b30      	subs	r3, #48	; 0x30
 800a056:	2b09      	cmp	r3, #9
 800a058:	d94e      	bls.n	800a0f8 <_vfiprintf_r+0x1c4>
 800a05a:	b1b0      	cbz	r0, 800a08a <_vfiprintf_r+0x156>
 800a05c:	9207      	str	r2, [sp, #28]
 800a05e:	e014      	b.n	800a08a <_vfiprintf_r+0x156>
 800a060:	eba0 0308 	sub.w	r3, r0, r8
 800a064:	fa09 f303 	lsl.w	r3, r9, r3
 800a068:	4313      	orrs	r3, r2
 800a06a:	46a2      	mov	sl, r4
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	e7d2      	b.n	800a016 <_vfiprintf_r+0xe2>
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	1d19      	adds	r1, r3, #4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	9103      	str	r1, [sp, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bfbb      	ittet	lt
 800a07c:	425b      	neglt	r3, r3
 800a07e:	f042 0202 	orrlt.w	r2, r2, #2
 800a082:	9307      	strge	r3, [sp, #28]
 800a084:	9307      	strlt	r3, [sp, #28]
 800a086:	bfb8      	it	lt
 800a088:	9204      	strlt	r2, [sp, #16]
 800a08a:	7823      	ldrb	r3, [r4, #0]
 800a08c:	2b2e      	cmp	r3, #46	; 0x2e
 800a08e:	d10c      	bne.n	800a0aa <_vfiprintf_r+0x176>
 800a090:	7863      	ldrb	r3, [r4, #1]
 800a092:	2b2a      	cmp	r3, #42	; 0x2a
 800a094:	d135      	bne.n	800a102 <_vfiprintf_r+0x1ce>
 800a096:	9b03      	ldr	r3, [sp, #12]
 800a098:	3402      	adds	r4, #2
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	9203      	str	r2, [sp, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	bfb8      	it	lt
 800a0a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0a8:	9305      	str	r3, [sp, #20]
 800a0aa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a184 <_vfiprintf_r+0x250>
 800a0ae:	2203      	movs	r2, #3
 800a0b0:	4650      	mov	r0, sl
 800a0b2:	7821      	ldrb	r1, [r4, #0]
 800a0b4:	f7ff f9a6 	bl	8009404 <memchr>
 800a0b8:	b140      	cbz	r0, 800a0cc <_vfiprintf_r+0x198>
 800a0ba:	2340      	movs	r3, #64	; 0x40
 800a0bc:	eba0 000a 	sub.w	r0, r0, sl
 800a0c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a0c4:	9b04      	ldr	r3, [sp, #16]
 800a0c6:	3401      	adds	r4, #1
 800a0c8:	4303      	orrs	r3, r0
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d0:	2206      	movs	r2, #6
 800a0d2:	482d      	ldr	r0, [pc, #180]	; (800a188 <_vfiprintf_r+0x254>)
 800a0d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0d8:	f7ff f994 	bl	8009404 <memchr>
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d03f      	beq.n	800a160 <_vfiprintf_r+0x22c>
 800a0e0:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <_vfiprintf_r+0x258>)
 800a0e2:	bb1b      	cbnz	r3, 800a12c <_vfiprintf_r+0x1f8>
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	3307      	adds	r3, #7
 800a0e8:	f023 0307 	bic.w	r3, r3, #7
 800a0ec:	3308      	adds	r3, #8
 800a0ee:	9303      	str	r3, [sp, #12]
 800a0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f2:	443b      	add	r3, r7
 800a0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f6:	e767      	b.n	8009fc8 <_vfiprintf_r+0x94>
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a100:	e7a5      	b.n	800a04e <_vfiprintf_r+0x11a>
 800a102:	2300      	movs	r3, #0
 800a104:	f04f 0c0a 	mov.w	ip, #10
 800a108:	4619      	mov	r1, r3
 800a10a:	3401      	adds	r4, #1
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	4620      	mov	r0, r4
 800a110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a114:	3a30      	subs	r2, #48	; 0x30
 800a116:	2a09      	cmp	r2, #9
 800a118:	d903      	bls.n	800a122 <_vfiprintf_r+0x1ee>
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0c5      	beq.n	800a0aa <_vfiprintf_r+0x176>
 800a11e:	9105      	str	r1, [sp, #20]
 800a120:	e7c3      	b.n	800a0aa <_vfiprintf_r+0x176>
 800a122:	4604      	mov	r4, r0
 800a124:	2301      	movs	r3, #1
 800a126:	fb0c 2101 	mla	r1, ip, r1, r2
 800a12a:	e7f0      	b.n	800a10e <_vfiprintf_r+0x1da>
 800a12c:	ab03      	add	r3, sp, #12
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	462a      	mov	r2, r5
 800a132:	4630      	mov	r0, r6
 800a134:	4b16      	ldr	r3, [pc, #88]	; (800a190 <_vfiprintf_r+0x25c>)
 800a136:	a904      	add	r1, sp, #16
 800a138:	f7fd f964 	bl	8007404 <_printf_float>
 800a13c:	4607      	mov	r7, r0
 800a13e:	1c78      	adds	r0, r7, #1
 800a140:	d1d6      	bne.n	800a0f0 <_vfiprintf_r+0x1bc>
 800a142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a144:	07d9      	lsls	r1, r3, #31
 800a146:	d405      	bmi.n	800a154 <_vfiprintf_r+0x220>
 800a148:	89ab      	ldrh	r3, [r5, #12]
 800a14a:	059a      	lsls	r2, r3, #22
 800a14c:	d402      	bmi.n	800a154 <_vfiprintf_r+0x220>
 800a14e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a150:	f7ff f8de 	bl	8009310 <__retarget_lock_release_recursive>
 800a154:	89ab      	ldrh	r3, [r5, #12]
 800a156:	065b      	lsls	r3, r3, #25
 800a158:	f53f af12 	bmi.w	8009f80 <_vfiprintf_r+0x4c>
 800a15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a15e:	e711      	b.n	8009f84 <_vfiprintf_r+0x50>
 800a160:	ab03      	add	r3, sp, #12
 800a162:	9300      	str	r3, [sp, #0]
 800a164:	462a      	mov	r2, r5
 800a166:	4630      	mov	r0, r6
 800a168:	4b09      	ldr	r3, [pc, #36]	; (800a190 <_vfiprintf_r+0x25c>)
 800a16a:	a904      	add	r1, sp, #16
 800a16c:	f7fd fbe6 	bl	800793c <_printf_i>
 800a170:	e7e4      	b.n	800a13c <_vfiprintf_r+0x208>
 800a172:	bf00      	nop
 800a174:	0800ae04 	.word	0x0800ae04
 800a178:	0800ae24 	.word	0x0800ae24
 800a17c:	0800ade4 	.word	0x0800ade4
 800a180:	0800afa0 	.word	0x0800afa0
 800a184:	0800af9c 	.word	0x0800af9c
 800a188:	0800afa6 	.word	0x0800afa6
 800a18c:	08007405 	.word	0x08007405
 800a190:	08009f0f 	.word	0x08009f0f

0800a194 <_scanf_chars>:
 800a194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a198:	4615      	mov	r5, r2
 800a19a:	688a      	ldr	r2, [r1, #8]
 800a19c:	4680      	mov	r8, r0
 800a19e:	460c      	mov	r4, r1
 800a1a0:	b932      	cbnz	r2, 800a1b0 <_scanf_chars+0x1c>
 800a1a2:	698a      	ldr	r2, [r1, #24]
 800a1a4:	2a00      	cmp	r2, #0
 800a1a6:	bf0c      	ite	eq
 800a1a8:	2201      	moveq	r2, #1
 800a1aa:	f04f 32ff 	movne.w	r2, #4294967295
 800a1ae:	608a      	str	r2, [r1, #8]
 800a1b0:	2700      	movs	r7, #0
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a244 <_scanf_chars+0xb0>
 800a1b8:	06d1      	lsls	r1, r2, #27
 800a1ba:	bf5f      	itttt	pl
 800a1bc:	681a      	ldrpl	r2, [r3, #0]
 800a1be:	1d11      	addpl	r1, r2, #4
 800a1c0:	6019      	strpl	r1, [r3, #0]
 800a1c2:	6816      	ldrpl	r6, [r2, #0]
 800a1c4:	69a0      	ldr	r0, [r4, #24]
 800a1c6:	b188      	cbz	r0, 800a1ec <_scanf_chars+0x58>
 800a1c8:	2801      	cmp	r0, #1
 800a1ca:	d107      	bne.n	800a1dc <_scanf_chars+0x48>
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	781a      	ldrb	r2, [r3, #0]
 800a1d0:	6963      	ldr	r3, [r4, #20]
 800a1d2:	5c9b      	ldrb	r3, [r3, r2]
 800a1d4:	b953      	cbnz	r3, 800a1ec <_scanf_chars+0x58>
 800a1d6:	2f00      	cmp	r7, #0
 800a1d8:	d031      	beq.n	800a23e <_scanf_chars+0xaa>
 800a1da:	e022      	b.n	800a222 <_scanf_chars+0x8e>
 800a1dc:	2802      	cmp	r0, #2
 800a1de:	d120      	bne.n	800a222 <_scanf_chars+0x8e>
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a1e8:	071b      	lsls	r3, r3, #28
 800a1ea:	d41a      	bmi.n	800a222 <_scanf_chars+0x8e>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	3701      	adds	r7, #1
 800a1f0:	06da      	lsls	r2, r3, #27
 800a1f2:	bf5e      	ittt	pl
 800a1f4:	682b      	ldrpl	r3, [r5, #0]
 800a1f6:	781b      	ldrbpl	r3, [r3, #0]
 800a1f8:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a1fc:	682a      	ldr	r2, [r5, #0]
 800a1fe:	686b      	ldr	r3, [r5, #4]
 800a200:	3201      	adds	r2, #1
 800a202:	602a      	str	r2, [r5, #0]
 800a204:	68a2      	ldr	r2, [r4, #8]
 800a206:	3b01      	subs	r3, #1
 800a208:	3a01      	subs	r2, #1
 800a20a:	606b      	str	r3, [r5, #4]
 800a20c:	60a2      	str	r2, [r4, #8]
 800a20e:	b142      	cbz	r2, 800a222 <_scanf_chars+0x8e>
 800a210:	2b00      	cmp	r3, #0
 800a212:	dcd7      	bgt.n	800a1c4 <_scanf_chars+0x30>
 800a214:	4629      	mov	r1, r5
 800a216:	4640      	mov	r0, r8
 800a218:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a21c:	4798      	blx	r3
 800a21e:	2800      	cmp	r0, #0
 800a220:	d0d0      	beq.n	800a1c4 <_scanf_chars+0x30>
 800a222:	6823      	ldr	r3, [r4, #0]
 800a224:	f013 0310 	ands.w	r3, r3, #16
 800a228:	d105      	bne.n	800a236 <_scanf_chars+0xa2>
 800a22a:	68e2      	ldr	r2, [r4, #12]
 800a22c:	3201      	adds	r2, #1
 800a22e:	60e2      	str	r2, [r4, #12]
 800a230:	69a2      	ldr	r2, [r4, #24]
 800a232:	b102      	cbz	r2, 800a236 <_scanf_chars+0xa2>
 800a234:	7033      	strb	r3, [r6, #0]
 800a236:	2000      	movs	r0, #0
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	443b      	add	r3, r7
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a242:	bf00      	nop
 800a244:	0800b005 	.word	0x0800b005

0800a248 <_scanf_i>:
 800a248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24c:	460c      	mov	r4, r1
 800a24e:	4698      	mov	r8, r3
 800a250:	4b75      	ldr	r3, [pc, #468]	; (800a428 <_scanf_i+0x1e0>)
 800a252:	b087      	sub	sp, #28
 800a254:	4682      	mov	sl, r0
 800a256:	4616      	mov	r6, r2
 800a258:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a262:	4b72      	ldr	r3, [pc, #456]	; (800a42c <_scanf_i+0x1e4>)
 800a264:	69a1      	ldr	r1, [r4, #24]
 800a266:	4a72      	ldr	r2, [pc, #456]	; (800a430 <_scanf_i+0x1e8>)
 800a268:	4627      	mov	r7, r4
 800a26a:	2903      	cmp	r1, #3
 800a26c:	bf18      	it	ne
 800a26e:	461a      	movne	r2, r3
 800a270:	68a3      	ldr	r3, [r4, #8]
 800a272:	9201      	str	r2, [sp, #4]
 800a274:	1e5a      	subs	r2, r3, #1
 800a276:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a27a:	bf81      	itttt	hi
 800a27c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a280:	eb03 0905 	addhi.w	r9, r3, r5
 800a284:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a288:	60a3      	strhi	r3, [r4, #8]
 800a28a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a28e:	bf98      	it	ls
 800a290:	f04f 0900 	movls.w	r9, #0
 800a294:	463d      	mov	r5, r7
 800a296:	f04f 0b00 	mov.w	fp, #0
 800a29a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a29e:	6023      	str	r3, [r4, #0]
 800a2a0:	6831      	ldr	r1, [r6, #0]
 800a2a2:	ab03      	add	r3, sp, #12
 800a2a4:	2202      	movs	r2, #2
 800a2a6:	7809      	ldrb	r1, [r1, #0]
 800a2a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a2ac:	f7ff f8aa 	bl	8009404 <memchr>
 800a2b0:	b328      	cbz	r0, 800a2fe <_scanf_i+0xb6>
 800a2b2:	f1bb 0f01 	cmp.w	fp, #1
 800a2b6:	d159      	bne.n	800a36c <_scanf_i+0x124>
 800a2b8:	6862      	ldr	r2, [r4, #4]
 800a2ba:	b92a      	cbnz	r2, 800a2c8 <_scanf_i+0x80>
 800a2bc:	2308      	movs	r3, #8
 800a2be:	6822      	ldr	r2, [r4, #0]
 800a2c0:	6063      	str	r3, [r4, #4]
 800a2c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c6:	6022      	str	r2, [r4, #0]
 800a2c8:	6822      	ldr	r2, [r4, #0]
 800a2ca:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a2ce:	6022      	str	r2, [r4, #0]
 800a2d0:	68a2      	ldr	r2, [r4, #8]
 800a2d2:	1e51      	subs	r1, r2, #1
 800a2d4:	60a1      	str	r1, [r4, #8]
 800a2d6:	b192      	cbz	r2, 800a2fe <_scanf_i+0xb6>
 800a2d8:	6832      	ldr	r2, [r6, #0]
 800a2da:	1c51      	adds	r1, r2, #1
 800a2dc:	6031      	str	r1, [r6, #0]
 800a2de:	7812      	ldrb	r2, [r2, #0]
 800a2e0:	f805 2b01 	strb.w	r2, [r5], #1
 800a2e4:	6872      	ldr	r2, [r6, #4]
 800a2e6:	3a01      	subs	r2, #1
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	6072      	str	r2, [r6, #4]
 800a2ec:	dc07      	bgt.n	800a2fe <_scanf_i+0xb6>
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4650      	mov	r0, sl
 800a2f2:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a2f6:	4790      	blx	r2
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	f040 8085 	bne.w	800a408 <_scanf_i+0x1c0>
 800a2fe:	f10b 0b01 	add.w	fp, fp, #1
 800a302:	f1bb 0f03 	cmp.w	fp, #3
 800a306:	d1cb      	bne.n	800a2a0 <_scanf_i+0x58>
 800a308:	6863      	ldr	r3, [r4, #4]
 800a30a:	b90b      	cbnz	r3, 800a310 <_scanf_i+0xc8>
 800a30c:	230a      	movs	r3, #10
 800a30e:	6063      	str	r3, [r4, #4]
 800a310:	6863      	ldr	r3, [r4, #4]
 800a312:	4948      	ldr	r1, [pc, #288]	; (800a434 <_scanf_i+0x1ec>)
 800a314:	6960      	ldr	r0, [r4, #20]
 800a316:	1ac9      	subs	r1, r1, r3
 800a318:	f000 f8e8 	bl	800a4ec <__sccl>
 800a31c:	f04f 0b00 	mov.w	fp, #0
 800a320:	68a3      	ldr	r3, [r4, #8]
 800a322:	6822      	ldr	r2, [r4, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d03d      	beq.n	800a3a4 <_scanf_i+0x15c>
 800a328:	6831      	ldr	r1, [r6, #0]
 800a32a:	6960      	ldr	r0, [r4, #20]
 800a32c:	f891 c000 	ldrb.w	ip, [r1]
 800a330:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a334:	2800      	cmp	r0, #0
 800a336:	d035      	beq.n	800a3a4 <_scanf_i+0x15c>
 800a338:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a33c:	d124      	bne.n	800a388 <_scanf_i+0x140>
 800a33e:	0510      	lsls	r0, r2, #20
 800a340:	d522      	bpl.n	800a388 <_scanf_i+0x140>
 800a342:	f10b 0b01 	add.w	fp, fp, #1
 800a346:	f1b9 0f00 	cmp.w	r9, #0
 800a34a:	d003      	beq.n	800a354 <_scanf_i+0x10c>
 800a34c:	3301      	adds	r3, #1
 800a34e:	f109 39ff 	add.w	r9, r9, #4294967295
 800a352:	60a3      	str	r3, [r4, #8]
 800a354:	6873      	ldr	r3, [r6, #4]
 800a356:	3b01      	subs	r3, #1
 800a358:	2b00      	cmp	r3, #0
 800a35a:	6073      	str	r3, [r6, #4]
 800a35c:	dd1b      	ble.n	800a396 <_scanf_i+0x14e>
 800a35e:	6833      	ldr	r3, [r6, #0]
 800a360:	3301      	adds	r3, #1
 800a362:	6033      	str	r3, [r6, #0]
 800a364:	68a3      	ldr	r3, [r4, #8]
 800a366:	3b01      	subs	r3, #1
 800a368:	60a3      	str	r3, [r4, #8]
 800a36a:	e7d9      	b.n	800a320 <_scanf_i+0xd8>
 800a36c:	f1bb 0f02 	cmp.w	fp, #2
 800a370:	d1ae      	bne.n	800a2d0 <_scanf_i+0x88>
 800a372:	6822      	ldr	r2, [r4, #0]
 800a374:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a378:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a37c:	d1bf      	bne.n	800a2fe <_scanf_i+0xb6>
 800a37e:	2310      	movs	r3, #16
 800a380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a384:	6063      	str	r3, [r4, #4]
 800a386:	e7a2      	b.n	800a2ce <_scanf_i+0x86>
 800a388:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a38c:	6022      	str	r2, [r4, #0]
 800a38e:	780b      	ldrb	r3, [r1, #0]
 800a390:	f805 3b01 	strb.w	r3, [r5], #1
 800a394:	e7de      	b.n	800a354 <_scanf_i+0x10c>
 800a396:	4631      	mov	r1, r6
 800a398:	4650      	mov	r0, sl
 800a39a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a39e:	4798      	blx	r3
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d0df      	beq.n	800a364 <_scanf_i+0x11c>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	05db      	lsls	r3, r3, #23
 800a3a8:	d50d      	bpl.n	800a3c6 <_scanf_i+0x17e>
 800a3aa:	42bd      	cmp	r5, r7
 800a3ac:	d909      	bls.n	800a3c2 <_scanf_i+0x17a>
 800a3ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a3b2:	4632      	mov	r2, r6
 800a3b4:	4650      	mov	r0, sl
 800a3b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ba:	f105 39ff 	add.w	r9, r5, #4294967295
 800a3be:	4798      	blx	r3
 800a3c0:	464d      	mov	r5, r9
 800a3c2:	42bd      	cmp	r5, r7
 800a3c4:	d02d      	beq.n	800a422 <_scanf_i+0x1da>
 800a3c6:	6822      	ldr	r2, [r4, #0]
 800a3c8:	f012 0210 	ands.w	r2, r2, #16
 800a3cc:	d113      	bne.n	800a3f6 <_scanf_i+0x1ae>
 800a3ce:	702a      	strb	r2, [r5, #0]
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	6863      	ldr	r3, [r4, #4]
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	9e01      	ldr	r6, [sp, #4]
 800a3d8:	47b0      	blx	r6
 800a3da:	6821      	ldr	r1, [r4, #0]
 800a3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e0:	f011 0f20 	tst.w	r1, #32
 800a3e4:	d013      	beq.n	800a40e <_scanf_i+0x1c6>
 800a3e6:	1d1a      	adds	r2, r3, #4
 800a3e8:	f8c8 2000 	str.w	r2, [r8]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6018      	str	r0, [r3, #0]
 800a3f0:	68e3      	ldr	r3, [r4, #12]
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	60e3      	str	r3, [r4, #12]
 800a3f6:	2000      	movs	r0, #0
 800a3f8:	1bed      	subs	r5, r5, r7
 800a3fa:	44ab      	add	fp, r5
 800a3fc:	6925      	ldr	r5, [r4, #16]
 800a3fe:	445d      	add	r5, fp
 800a400:	6125      	str	r5, [r4, #16]
 800a402:	b007      	add	sp, #28
 800a404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a408:	f04f 0b00 	mov.w	fp, #0
 800a40c:	e7ca      	b.n	800a3a4 <_scanf_i+0x15c>
 800a40e:	1d1a      	adds	r2, r3, #4
 800a410:	f8c8 2000 	str.w	r2, [r8]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f011 0f01 	tst.w	r1, #1
 800a41a:	bf14      	ite	ne
 800a41c:	8018      	strhne	r0, [r3, #0]
 800a41e:	6018      	streq	r0, [r3, #0]
 800a420:	e7e6      	b.n	800a3f0 <_scanf_i+0x1a8>
 800a422:	2001      	movs	r0, #1
 800a424:	e7ed      	b.n	800a402 <_scanf_i+0x1ba>
 800a426:	bf00      	nop
 800a428:	0800acf8 	.word	0x0800acf8
 800a42c:	0800a73d 	.word	0x0800a73d
 800a430:	0800a655 	.word	0x0800a655
 800a434:	0800afc6 	.word	0x0800afc6

0800a438 <_putc_r>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	460d      	mov	r5, r1
 800a43c:	4614      	mov	r4, r2
 800a43e:	4606      	mov	r6, r0
 800a440:	b118      	cbz	r0, 800a44a <_putc_r+0x12>
 800a442:	6983      	ldr	r3, [r0, #24]
 800a444:	b90b      	cbnz	r3, 800a44a <_putc_r+0x12>
 800a446:	f7fe febf 	bl	80091c8 <__sinit>
 800a44a:	4b1c      	ldr	r3, [pc, #112]	; (800a4bc <_putc_r+0x84>)
 800a44c:	429c      	cmp	r4, r3
 800a44e:	d124      	bne.n	800a49a <_putc_r+0x62>
 800a450:	6874      	ldr	r4, [r6, #4]
 800a452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a454:	07d8      	lsls	r0, r3, #31
 800a456:	d405      	bmi.n	800a464 <_putc_r+0x2c>
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	0599      	lsls	r1, r3, #22
 800a45c:	d402      	bmi.n	800a464 <_putc_r+0x2c>
 800a45e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a460:	f7fe ff55 	bl	800930e <__retarget_lock_acquire_recursive>
 800a464:	68a3      	ldr	r3, [r4, #8]
 800a466:	3b01      	subs	r3, #1
 800a468:	2b00      	cmp	r3, #0
 800a46a:	60a3      	str	r3, [r4, #8]
 800a46c:	da05      	bge.n	800a47a <_putc_r+0x42>
 800a46e:	69a2      	ldr	r2, [r4, #24]
 800a470:	4293      	cmp	r3, r2
 800a472:	db1c      	blt.n	800a4ae <_putc_r+0x76>
 800a474:	b2eb      	uxtb	r3, r5
 800a476:	2b0a      	cmp	r3, #10
 800a478:	d019      	beq.n	800a4ae <_putc_r+0x76>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	1c5a      	adds	r2, r3, #1
 800a47e:	6022      	str	r2, [r4, #0]
 800a480:	701d      	strb	r5, [r3, #0]
 800a482:	b2ed      	uxtb	r5, r5
 800a484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a486:	07da      	lsls	r2, r3, #31
 800a488:	d405      	bmi.n	800a496 <_putc_r+0x5e>
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	059b      	lsls	r3, r3, #22
 800a48e:	d402      	bmi.n	800a496 <_putc_r+0x5e>
 800a490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a492:	f7fe ff3d 	bl	8009310 <__retarget_lock_release_recursive>
 800a496:	4628      	mov	r0, r5
 800a498:	bd70      	pop	{r4, r5, r6, pc}
 800a49a:	4b09      	ldr	r3, [pc, #36]	; (800a4c0 <_putc_r+0x88>)
 800a49c:	429c      	cmp	r4, r3
 800a49e:	d101      	bne.n	800a4a4 <_putc_r+0x6c>
 800a4a0:	68b4      	ldr	r4, [r6, #8]
 800a4a2:	e7d6      	b.n	800a452 <_putc_r+0x1a>
 800a4a4:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <_putc_r+0x8c>)
 800a4a6:	429c      	cmp	r4, r3
 800a4a8:	bf08      	it	eq
 800a4aa:	68f4      	ldreq	r4, [r6, #12]
 800a4ac:	e7d1      	b.n	800a452 <_putc_r+0x1a>
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	4622      	mov	r2, r4
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	f7fd fe14 	bl	80080e0 <__swbuf_r>
 800a4b8:	4605      	mov	r5, r0
 800a4ba:	e7e3      	b.n	800a484 <_putc_r+0x4c>
 800a4bc:	0800ae04 	.word	0x0800ae04
 800a4c0:	0800ae24 	.word	0x0800ae24
 800a4c4:	0800ade4 	.word	0x0800ade4

0800a4c8 <_read_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	4611      	mov	r1, r2
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	4d05      	ldr	r5, [pc, #20]	; (800a4e8 <_read_r+0x20>)
 800a4d4:	602a      	str	r2, [r5, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	f7f8 ffa3 	bl	8003422 <_read>
 800a4dc:	1c43      	adds	r3, r0, #1
 800a4de:	d102      	bne.n	800a4e6 <_read_r+0x1e>
 800a4e0:	682b      	ldr	r3, [r5, #0]
 800a4e2:	b103      	cbz	r3, 800a4e6 <_read_r+0x1e>
 800a4e4:	6023      	str	r3, [r4, #0]
 800a4e6:	bd38      	pop	{r3, r4, r5, pc}
 800a4e8:	20002630 	.word	0x20002630

0800a4ec <__sccl>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	780b      	ldrb	r3, [r1, #0]
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	2b5e      	cmp	r3, #94	; 0x5e
 800a4f4:	bf13      	iteet	ne
 800a4f6:	2200      	movne	r2, #0
 800a4f8:	2201      	moveq	r2, #1
 800a4fa:	784b      	ldrbeq	r3, [r1, #1]
 800a4fc:	1c48      	addne	r0, r1, #1
 800a4fe:	bf08      	it	eq
 800a500:	1c88      	addeq	r0, r1, #2
 800a502:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a506:	1e61      	subs	r1, r4, #1
 800a508:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a50c:	42a9      	cmp	r1, r5
 800a50e:	d1fb      	bne.n	800a508 <__sccl+0x1c>
 800a510:	b90b      	cbnz	r3, 800a516 <__sccl+0x2a>
 800a512:	3801      	subs	r0, #1
 800a514:	bd70      	pop	{r4, r5, r6, pc}
 800a516:	f082 0201 	eor.w	r2, r2, #1
 800a51a:	4605      	mov	r5, r0
 800a51c:	54e2      	strb	r2, [r4, r3]
 800a51e:	4628      	mov	r0, r5
 800a520:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a524:	292d      	cmp	r1, #45	; 0x2d
 800a526:	d006      	beq.n	800a536 <__sccl+0x4a>
 800a528:	295d      	cmp	r1, #93	; 0x5d
 800a52a:	d0f3      	beq.n	800a514 <__sccl+0x28>
 800a52c:	b909      	cbnz	r1, 800a532 <__sccl+0x46>
 800a52e:	4628      	mov	r0, r5
 800a530:	e7f0      	b.n	800a514 <__sccl+0x28>
 800a532:	460b      	mov	r3, r1
 800a534:	e7f1      	b.n	800a51a <__sccl+0x2e>
 800a536:	786e      	ldrb	r6, [r5, #1]
 800a538:	2e5d      	cmp	r6, #93	; 0x5d
 800a53a:	d0fa      	beq.n	800a532 <__sccl+0x46>
 800a53c:	42b3      	cmp	r3, r6
 800a53e:	dcf8      	bgt.n	800a532 <__sccl+0x46>
 800a540:	4619      	mov	r1, r3
 800a542:	3502      	adds	r5, #2
 800a544:	3101      	adds	r1, #1
 800a546:	428e      	cmp	r6, r1
 800a548:	5462      	strb	r2, [r4, r1]
 800a54a:	dcfb      	bgt.n	800a544 <__sccl+0x58>
 800a54c:	1af1      	subs	r1, r6, r3
 800a54e:	3901      	subs	r1, #1
 800a550:	42b3      	cmp	r3, r6
 800a552:	bfa8      	it	ge
 800a554:	2100      	movge	r1, #0
 800a556:	1c58      	adds	r0, r3, #1
 800a558:	1843      	adds	r3, r0, r1
 800a55a:	e7e0      	b.n	800a51e <__sccl+0x32>

0800a55c <_strtol_l.constprop.0>:
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a562:	4680      	mov	r8, r0
 800a564:	d001      	beq.n	800a56a <_strtol_l.constprop.0+0xe>
 800a566:	2b24      	cmp	r3, #36	; 0x24
 800a568:	d906      	bls.n	800a578 <_strtol_l.constprop.0+0x1c>
 800a56a:	f7fc fd6d 	bl	8007048 <__errno>
 800a56e:	2316      	movs	r3, #22
 800a570:	6003      	str	r3, [r0, #0]
 800a572:	2000      	movs	r0, #0
 800a574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a578:	460d      	mov	r5, r1
 800a57a:	4f35      	ldr	r7, [pc, #212]	; (800a650 <_strtol_l.constprop.0+0xf4>)
 800a57c:	4628      	mov	r0, r5
 800a57e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a582:	5de6      	ldrb	r6, [r4, r7]
 800a584:	f016 0608 	ands.w	r6, r6, #8
 800a588:	d1f8      	bne.n	800a57c <_strtol_l.constprop.0+0x20>
 800a58a:	2c2d      	cmp	r4, #45	; 0x2d
 800a58c:	d12f      	bne.n	800a5ee <_strtol_l.constprop.0+0x92>
 800a58e:	2601      	movs	r6, #1
 800a590:	782c      	ldrb	r4, [r5, #0]
 800a592:	1c85      	adds	r5, r0, #2
 800a594:	2b00      	cmp	r3, #0
 800a596:	d057      	beq.n	800a648 <_strtol_l.constprop.0+0xec>
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d109      	bne.n	800a5b0 <_strtol_l.constprop.0+0x54>
 800a59c:	2c30      	cmp	r4, #48	; 0x30
 800a59e:	d107      	bne.n	800a5b0 <_strtol_l.constprop.0+0x54>
 800a5a0:	7828      	ldrb	r0, [r5, #0]
 800a5a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a5a6:	2858      	cmp	r0, #88	; 0x58
 800a5a8:	d149      	bne.n	800a63e <_strtol_l.constprop.0+0xe2>
 800a5aa:	2310      	movs	r3, #16
 800a5ac:	786c      	ldrb	r4, [r5, #1]
 800a5ae:	3502      	adds	r5, #2
 800a5b0:	2700      	movs	r7, #0
 800a5b2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800a5b6:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a5ba:	fbbe f9f3 	udiv	r9, lr, r3
 800a5be:	4638      	mov	r0, r7
 800a5c0:	fb03 ea19 	mls	sl, r3, r9, lr
 800a5c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a5c8:	f1bc 0f09 	cmp.w	ip, #9
 800a5cc:	d814      	bhi.n	800a5f8 <_strtol_l.constprop.0+0x9c>
 800a5ce:	4664      	mov	r4, ip
 800a5d0:	42a3      	cmp	r3, r4
 800a5d2:	dd22      	ble.n	800a61a <_strtol_l.constprop.0+0xbe>
 800a5d4:	2f00      	cmp	r7, #0
 800a5d6:	db1d      	blt.n	800a614 <_strtol_l.constprop.0+0xb8>
 800a5d8:	4581      	cmp	r9, r0
 800a5da:	d31b      	bcc.n	800a614 <_strtol_l.constprop.0+0xb8>
 800a5dc:	d101      	bne.n	800a5e2 <_strtol_l.constprop.0+0x86>
 800a5de:	45a2      	cmp	sl, r4
 800a5e0:	db18      	blt.n	800a614 <_strtol_l.constprop.0+0xb8>
 800a5e2:	2701      	movs	r7, #1
 800a5e4:	fb00 4003 	mla	r0, r0, r3, r4
 800a5e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5ec:	e7ea      	b.n	800a5c4 <_strtol_l.constprop.0+0x68>
 800a5ee:	2c2b      	cmp	r4, #43	; 0x2b
 800a5f0:	bf04      	itt	eq
 800a5f2:	782c      	ldrbeq	r4, [r5, #0]
 800a5f4:	1c85      	addeq	r5, r0, #2
 800a5f6:	e7cd      	b.n	800a594 <_strtol_l.constprop.0+0x38>
 800a5f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a5fc:	f1bc 0f19 	cmp.w	ip, #25
 800a600:	d801      	bhi.n	800a606 <_strtol_l.constprop.0+0xaa>
 800a602:	3c37      	subs	r4, #55	; 0x37
 800a604:	e7e4      	b.n	800a5d0 <_strtol_l.constprop.0+0x74>
 800a606:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a60a:	f1bc 0f19 	cmp.w	ip, #25
 800a60e:	d804      	bhi.n	800a61a <_strtol_l.constprop.0+0xbe>
 800a610:	3c57      	subs	r4, #87	; 0x57
 800a612:	e7dd      	b.n	800a5d0 <_strtol_l.constprop.0+0x74>
 800a614:	f04f 37ff 	mov.w	r7, #4294967295
 800a618:	e7e6      	b.n	800a5e8 <_strtol_l.constprop.0+0x8c>
 800a61a:	2f00      	cmp	r7, #0
 800a61c:	da07      	bge.n	800a62e <_strtol_l.constprop.0+0xd2>
 800a61e:	2322      	movs	r3, #34	; 0x22
 800a620:	4670      	mov	r0, lr
 800a622:	f8c8 3000 	str.w	r3, [r8]
 800a626:	2a00      	cmp	r2, #0
 800a628:	d0a4      	beq.n	800a574 <_strtol_l.constprop.0+0x18>
 800a62a:	1e69      	subs	r1, r5, #1
 800a62c:	e005      	b.n	800a63a <_strtol_l.constprop.0+0xde>
 800a62e:	b106      	cbz	r6, 800a632 <_strtol_l.constprop.0+0xd6>
 800a630:	4240      	negs	r0, r0
 800a632:	2a00      	cmp	r2, #0
 800a634:	d09e      	beq.n	800a574 <_strtol_l.constprop.0+0x18>
 800a636:	2f00      	cmp	r7, #0
 800a638:	d1f7      	bne.n	800a62a <_strtol_l.constprop.0+0xce>
 800a63a:	6011      	str	r1, [r2, #0]
 800a63c:	e79a      	b.n	800a574 <_strtol_l.constprop.0+0x18>
 800a63e:	2430      	movs	r4, #48	; 0x30
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1b5      	bne.n	800a5b0 <_strtol_l.constprop.0+0x54>
 800a644:	2308      	movs	r3, #8
 800a646:	e7b3      	b.n	800a5b0 <_strtol_l.constprop.0+0x54>
 800a648:	2c30      	cmp	r4, #48	; 0x30
 800a64a:	d0a9      	beq.n	800a5a0 <_strtol_l.constprop.0+0x44>
 800a64c:	230a      	movs	r3, #10
 800a64e:	e7af      	b.n	800a5b0 <_strtol_l.constprop.0+0x54>
 800a650:	0800b005 	.word	0x0800b005

0800a654 <_strtol_r>:
 800a654:	f7ff bf82 	b.w	800a55c <_strtol_l.constprop.0>

0800a658 <_strtoul_l.constprop.0>:
 800a658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a65c:	4686      	mov	lr, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	4f35      	ldr	r7, [pc, #212]	; (800a738 <_strtoul_l.constprop.0+0xe0>)
 800a662:	4628      	mov	r0, r5
 800a664:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a668:	5de6      	ldrb	r6, [r4, r7]
 800a66a:	f016 0608 	ands.w	r6, r6, #8
 800a66e:	d1f8      	bne.n	800a662 <_strtoul_l.constprop.0+0xa>
 800a670:	2c2d      	cmp	r4, #45	; 0x2d
 800a672:	d12f      	bne.n	800a6d4 <_strtoul_l.constprop.0+0x7c>
 800a674:	2601      	movs	r6, #1
 800a676:	782c      	ldrb	r4, [r5, #0]
 800a678:	1c85      	adds	r5, r0, #2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d057      	beq.n	800a72e <_strtoul_l.constprop.0+0xd6>
 800a67e:	2b10      	cmp	r3, #16
 800a680:	d109      	bne.n	800a696 <_strtoul_l.constprop.0+0x3e>
 800a682:	2c30      	cmp	r4, #48	; 0x30
 800a684:	d107      	bne.n	800a696 <_strtoul_l.constprop.0+0x3e>
 800a686:	7828      	ldrb	r0, [r5, #0]
 800a688:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a68c:	2858      	cmp	r0, #88	; 0x58
 800a68e:	d149      	bne.n	800a724 <_strtoul_l.constprop.0+0xcc>
 800a690:	2310      	movs	r3, #16
 800a692:	786c      	ldrb	r4, [r5, #1]
 800a694:	3502      	adds	r5, #2
 800a696:	f04f 38ff 	mov.w	r8, #4294967295
 800a69a:	fbb8 f8f3 	udiv	r8, r8, r3
 800a69e:	2700      	movs	r7, #0
 800a6a0:	fb03 f908 	mul.w	r9, r3, r8
 800a6a4:	4638      	mov	r0, r7
 800a6a6:	ea6f 0909 	mvn.w	r9, r9
 800a6aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a6ae:	f1bc 0f09 	cmp.w	ip, #9
 800a6b2:	d814      	bhi.n	800a6de <_strtoul_l.constprop.0+0x86>
 800a6b4:	4664      	mov	r4, ip
 800a6b6:	42a3      	cmp	r3, r4
 800a6b8:	dd22      	ble.n	800a700 <_strtoul_l.constprop.0+0xa8>
 800a6ba:	2f00      	cmp	r7, #0
 800a6bc:	db1d      	blt.n	800a6fa <_strtoul_l.constprop.0+0xa2>
 800a6be:	4580      	cmp	r8, r0
 800a6c0:	d31b      	bcc.n	800a6fa <_strtoul_l.constprop.0+0xa2>
 800a6c2:	d101      	bne.n	800a6c8 <_strtoul_l.constprop.0+0x70>
 800a6c4:	45a1      	cmp	r9, r4
 800a6c6:	db18      	blt.n	800a6fa <_strtoul_l.constprop.0+0xa2>
 800a6c8:	2701      	movs	r7, #1
 800a6ca:	fb00 4003 	mla	r0, r0, r3, r4
 800a6ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6d2:	e7ea      	b.n	800a6aa <_strtoul_l.constprop.0+0x52>
 800a6d4:	2c2b      	cmp	r4, #43	; 0x2b
 800a6d6:	bf04      	itt	eq
 800a6d8:	782c      	ldrbeq	r4, [r5, #0]
 800a6da:	1c85      	addeq	r5, r0, #2
 800a6dc:	e7cd      	b.n	800a67a <_strtoul_l.constprop.0+0x22>
 800a6de:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a6e2:	f1bc 0f19 	cmp.w	ip, #25
 800a6e6:	d801      	bhi.n	800a6ec <_strtoul_l.constprop.0+0x94>
 800a6e8:	3c37      	subs	r4, #55	; 0x37
 800a6ea:	e7e4      	b.n	800a6b6 <_strtoul_l.constprop.0+0x5e>
 800a6ec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a6f0:	f1bc 0f19 	cmp.w	ip, #25
 800a6f4:	d804      	bhi.n	800a700 <_strtoul_l.constprop.0+0xa8>
 800a6f6:	3c57      	subs	r4, #87	; 0x57
 800a6f8:	e7dd      	b.n	800a6b6 <_strtoul_l.constprop.0+0x5e>
 800a6fa:	f04f 37ff 	mov.w	r7, #4294967295
 800a6fe:	e7e6      	b.n	800a6ce <_strtoul_l.constprop.0+0x76>
 800a700:	2f00      	cmp	r7, #0
 800a702:	da07      	bge.n	800a714 <_strtoul_l.constprop.0+0xbc>
 800a704:	2322      	movs	r3, #34	; 0x22
 800a706:	f04f 30ff 	mov.w	r0, #4294967295
 800a70a:	f8ce 3000 	str.w	r3, [lr]
 800a70e:	b932      	cbnz	r2, 800a71e <_strtoul_l.constprop.0+0xc6>
 800a710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a714:	b106      	cbz	r6, 800a718 <_strtoul_l.constprop.0+0xc0>
 800a716:	4240      	negs	r0, r0
 800a718:	2a00      	cmp	r2, #0
 800a71a:	d0f9      	beq.n	800a710 <_strtoul_l.constprop.0+0xb8>
 800a71c:	b107      	cbz	r7, 800a720 <_strtoul_l.constprop.0+0xc8>
 800a71e:	1e69      	subs	r1, r5, #1
 800a720:	6011      	str	r1, [r2, #0]
 800a722:	e7f5      	b.n	800a710 <_strtoul_l.constprop.0+0xb8>
 800a724:	2430      	movs	r4, #48	; 0x30
 800a726:	2b00      	cmp	r3, #0
 800a728:	d1b5      	bne.n	800a696 <_strtoul_l.constprop.0+0x3e>
 800a72a:	2308      	movs	r3, #8
 800a72c:	e7b3      	b.n	800a696 <_strtoul_l.constprop.0+0x3e>
 800a72e:	2c30      	cmp	r4, #48	; 0x30
 800a730:	d0a9      	beq.n	800a686 <_strtoul_l.constprop.0+0x2e>
 800a732:	230a      	movs	r3, #10
 800a734:	e7af      	b.n	800a696 <_strtoul_l.constprop.0+0x3e>
 800a736:	bf00      	nop
 800a738:	0800b005 	.word	0x0800b005

0800a73c <_strtoul_r>:
 800a73c:	f7ff bf8c 	b.w	800a658 <_strtoul_l.constprop.0>

0800a740 <__submore>:
 800a740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a744:	460c      	mov	r4, r1
 800a746:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a74c:	4299      	cmp	r1, r3
 800a74e:	d11b      	bne.n	800a788 <__submore+0x48>
 800a750:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a754:	f7fc fd44 	bl	80071e0 <_malloc_r>
 800a758:	b918      	cbnz	r0, 800a762 <__submore+0x22>
 800a75a:	f04f 30ff 	mov.w	r0, #4294967295
 800a75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a766:	63a3      	str	r3, [r4, #56]	; 0x38
 800a768:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a76c:	6360      	str	r0, [r4, #52]	; 0x34
 800a76e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a772:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a776:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a77a:	7043      	strb	r3, [r0, #1]
 800a77c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a780:	7003      	strb	r3, [r0, #0]
 800a782:	6020      	str	r0, [r4, #0]
 800a784:	2000      	movs	r0, #0
 800a786:	e7ea      	b.n	800a75e <__submore+0x1e>
 800a788:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a78a:	0077      	lsls	r7, r6, #1
 800a78c:	463a      	mov	r2, r7
 800a78e:	f000 f873 	bl	800a878 <_realloc_r>
 800a792:	4605      	mov	r5, r0
 800a794:	2800      	cmp	r0, #0
 800a796:	d0e0      	beq.n	800a75a <__submore+0x1a>
 800a798:	eb00 0806 	add.w	r8, r0, r6
 800a79c:	4601      	mov	r1, r0
 800a79e:	4632      	mov	r2, r6
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	f7fc fc8b 	bl	80070bc <memcpy>
 800a7a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a7aa:	f8c4 8000 	str.w	r8, [r4]
 800a7ae:	e7e9      	b.n	800a784 <__submore+0x44>

0800a7b0 <__assert_func>:
 800a7b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7b2:	4614      	mov	r4, r2
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <__assert_func+0x2c>)
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68d8      	ldr	r0, [r3, #12]
 800a7be:	b14c      	cbz	r4, 800a7d4 <__assert_func+0x24>
 800a7c0:	4b07      	ldr	r3, [pc, #28]	; (800a7e0 <__assert_func+0x30>)
 800a7c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7c6:	9100      	str	r1, [sp, #0]
 800a7c8:	462b      	mov	r3, r5
 800a7ca:	4906      	ldr	r1, [pc, #24]	; (800a7e4 <__assert_func+0x34>)
 800a7cc:	f000 f80e 	bl	800a7ec <fiprintf>
 800a7d0:	f000 f88e 	bl	800a8f0 <abort>
 800a7d4:	4b04      	ldr	r3, [pc, #16]	; (800a7e8 <__assert_func+0x38>)
 800a7d6:	461c      	mov	r4, r3
 800a7d8:	e7f3      	b.n	800a7c2 <__assert_func+0x12>
 800a7da:	bf00      	nop
 800a7dc:	20000014 	.word	0x20000014
 800a7e0:	0800afc8 	.word	0x0800afc8
 800a7e4:	0800afd5 	.word	0x0800afd5
 800a7e8:	0800b003 	.word	0x0800b003

0800a7ec <fiprintf>:
 800a7ec:	b40e      	push	{r1, r2, r3}
 800a7ee:	b503      	push	{r0, r1, lr}
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	ab03      	add	r3, sp, #12
 800a7f4:	4805      	ldr	r0, [pc, #20]	; (800a80c <fiprintf+0x20>)
 800a7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7fa:	6800      	ldr	r0, [r0, #0]
 800a7fc:	9301      	str	r3, [sp, #4]
 800a7fe:	f7ff fb99 	bl	8009f34 <_vfiprintf_r>
 800a802:	b002      	add	sp, #8
 800a804:	f85d eb04 	ldr.w	lr, [sp], #4
 800a808:	b003      	add	sp, #12
 800a80a:	4770      	bx	lr
 800a80c:	20000014 	.word	0x20000014

0800a810 <_fstat_r>:
 800a810:	b538      	push	{r3, r4, r5, lr}
 800a812:	2300      	movs	r3, #0
 800a814:	4d06      	ldr	r5, [pc, #24]	; (800a830 <_fstat_r+0x20>)
 800a816:	4604      	mov	r4, r0
 800a818:	4608      	mov	r0, r1
 800a81a:	4611      	mov	r1, r2
 800a81c:	602b      	str	r3, [r5, #0]
 800a81e:	f7f8 fe44 	bl	80034aa <_fstat>
 800a822:	1c43      	adds	r3, r0, #1
 800a824:	d102      	bne.n	800a82c <_fstat_r+0x1c>
 800a826:	682b      	ldr	r3, [r5, #0]
 800a828:	b103      	cbz	r3, 800a82c <_fstat_r+0x1c>
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	bd38      	pop	{r3, r4, r5, pc}
 800a82e:	bf00      	nop
 800a830:	20002630 	.word	0x20002630

0800a834 <_isatty_r>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	2300      	movs	r3, #0
 800a838:	4d05      	ldr	r5, [pc, #20]	; (800a850 <_isatty_r+0x1c>)
 800a83a:	4604      	mov	r4, r0
 800a83c:	4608      	mov	r0, r1
 800a83e:	602b      	str	r3, [r5, #0]
 800a840:	f7f8 fe42 	bl	80034c8 <_isatty>
 800a844:	1c43      	adds	r3, r0, #1
 800a846:	d102      	bne.n	800a84e <_isatty_r+0x1a>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	b103      	cbz	r3, 800a84e <_isatty_r+0x1a>
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	bd38      	pop	{r3, r4, r5, pc}
 800a850:	20002630 	.word	0x20002630

0800a854 <__ascii_mbtowc>:
 800a854:	b082      	sub	sp, #8
 800a856:	b901      	cbnz	r1, 800a85a <__ascii_mbtowc+0x6>
 800a858:	a901      	add	r1, sp, #4
 800a85a:	b142      	cbz	r2, 800a86e <__ascii_mbtowc+0x1a>
 800a85c:	b14b      	cbz	r3, 800a872 <__ascii_mbtowc+0x1e>
 800a85e:	7813      	ldrb	r3, [r2, #0]
 800a860:	600b      	str	r3, [r1, #0]
 800a862:	7812      	ldrb	r2, [r2, #0]
 800a864:	1e10      	subs	r0, r2, #0
 800a866:	bf18      	it	ne
 800a868:	2001      	movne	r0, #1
 800a86a:	b002      	add	sp, #8
 800a86c:	4770      	bx	lr
 800a86e:	4610      	mov	r0, r2
 800a870:	e7fb      	b.n	800a86a <__ascii_mbtowc+0x16>
 800a872:	f06f 0001 	mvn.w	r0, #1
 800a876:	e7f8      	b.n	800a86a <__ascii_mbtowc+0x16>

0800a878 <_realloc_r>:
 800a878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87c:	4680      	mov	r8, r0
 800a87e:	4614      	mov	r4, r2
 800a880:	460e      	mov	r6, r1
 800a882:	b921      	cbnz	r1, 800a88e <_realloc_r+0x16>
 800a884:	4611      	mov	r1, r2
 800a886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a88a:	f7fc bca9 	b.w	80071e0 <_malloc_r>
 800a88e:	b92a      	cbnz	r2, 800a89c <_realloc_r+0x24>
 800a890:	f7fc fc3e 	bl	8007110 <_free_r>
 800a894:	4625      	mov	r5, r4
 800a896:	4628      	mov	r0, r5
 800a898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a89c:	f000 f82f 	bl	800a8fe <_malloc_usable_size_r>
 800a8a0:	4284      	cmp	r4, r0
 800a8a2:	4607      	mov	r7, r0
 800a8a4:	d802      	bhi.n	800a8ac <_realloc_r+0x34>
 800a8a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a8aa:	d812      	bhi.n	800a8d2 <_realloc_r+0x5a>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4640      	mov	r0, r8
 800a8b0:	f7fc fc96 	bl	80071e0 <_malloc_r>
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d0ed      	beq.n	800a896 <_realloc_r+0x1e>
 800a8ba:	42bc      	cmp	r4, r7
 800a8bc:	4622      	mov	r2, r4
 800a8be:	4631      	mov	r1, r6
 800a8c0:	bf28      	it	cs
 800a8c2:	463a      	movcs	r2, r7
 800a8c4:	f7fc fbfa 	bl	80070bc <memcpy>
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	f7fc fc20 	bl	8007110 <_free_r>
 800a8d0:	e7e1      	b.n	800a896 <_realloc_r+0x1e>
 800a8d2:	4635      	mov	r5, r6
 800a8d4:	e7df      	b.n	800a896 <_realloc_r+0x1e>

0800a8d6 <__ascii_wctomb>:
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	4608      	mov	r0, r1
 800a8da:	b141      	cbz	r1, 800a8ee <__ascii_wctomb+0x18>
 800a8dc:	2aff      	cmp	r2, #255	; 0xff
 800a8de:	d904      	bls.n	800a8ea <__ascii_wctomb+0x14>
 800a8e0:	228a      	movs	r2, #138	; 0x8a
 800a8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e6:	601a      	str	r2, [r3, #0]
 800a8e8:	4770      	bx	lr
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	700a      	strb	r2, [r1, #0]
 800a8ee:	4770      	bx	lr

0800a8f0 <abort>:
 800a8f0:	2006      	movs	r0, #6
 800a8f2:	b508      	push	{r3, lr}
 800a8f4:	f000 f834 	bl	800a960 <raise>
 800a8f8:	2001      	movs	r0, #1
 800a8fa:	f7f8 fd88 	bl	800340e <_exit>

0800a8fe <_malloc_usable_size_r>:
 800a8fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a902:	1f18      	subs	r0, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfbc      	itt	lt
 800a908:	580b      	ldrlt	r3, [r1, r0]
 800a90a:	18c0      	addlt	r0, r0, r3
 800a90c:	4770      	bx	lr

0800a90e <_raise_r>:
 800a90e:	291f      	cmp	r1, #31
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4604      	mov	r4, r0
 800a914:	460d      	mov	r5, r1
 800a916:	d904      	bls.n	800a922 <_raise_r+0x14>
 800a918:	2316      	movs	r3, #22
 800a91a:	6003      	str	r3, [r0, #0]
 800a91c:	f04f 30ff 	mov.w	r0, #4294967295
 800a920:	bd38      	pop	{r3, r4, r5, pc}
 800a922:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a924:	b112      	cbz	r2, 800a92c <_raise_r+0x1e>
 800a926:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a92a:	b94b      	cbnz	r3, 800a940 <_raise_r+0x32>
 800a92c:	4620      	mov	r0, r4
 800a92e:	f000 f831 	bl	800a994 <_getpid_r>
 800a932:	462a      	mov	r2, r5
 800a934:	4601      	mov	r1, r0
 800a936:	4620      	mov	r0, r4
 800a938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a93c:	f000 b818 	b.w	800a970 <_kill_r>
 800a940:	2b01      	cmp	r3, #1
 800a942:	d00a      	beq.n	800a95a <_raise_r+0x4c>
 800a944:	1c59      	adds	r1, r3, #1
 800a946:	d103      	bne.n	800a950 <_raise_r+0x42>
 800a948:	2316      	movs	r3, #22
 800a94a:	6003      	str	r3, [r0, #0]
 800a94c:	2001      	movs	r0, #1
 800a94e:	e7e7      	b.n	800a920 <_raise_r+0x12>
 800a950:	2400      	movs	r4, #0
 800a952:	4628      	mov	r0, r5
 800a954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a958:	4798      	blx	r3
 800a95a:	2000      	movs	r0, #0
 800a95c:	e7e0      	b.n	800a920 <_raise_r+0x12>
	...

0800a960 <raise>:
 800a960:	4b02      	ldr	r3, [pc, #8]	; (800a96c <raise+0xc>)
 800a962:	4601      	mov	r1, r0
 800a964:	6818      	ldr	r0, [r3, #0]
 800a966:	f7ff bfd2 	b.w	800a90e <_raise_r>
 800a96a:	bf00      	nop
 800a96c:	20000014 	.word	0x20000014

0800a970 <_kill_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	2300      	movs	r3, #0
 800a974:	4d06      	ldr	r5, [pc, #24]	; (800a990 <_kill_r+0x20>)
 800a976:	4604      	mov	r4, r0
 800a978:	4608      	mov	r0, r1
 800a97a:	4611      	mov	r1, r2
 800a97c:	602b      	str	r3, [r5, #0]
 800a97e:	f7f8 fd36 	bl	80033ee <_kill>
 800a982:	1c43      	adds	r3, r0, #1
 800a984:	d102      	bne.n	800a98c <_kill_r+0x1c>
 800a986:	682b      	ldr	r3, [r5, #0]
 800a988:	b103      	cbz	r3, 800a98c <_kill_r+0x1c>
 800a98a:	6023      	str	r3, [r4, #0]
 800a98c:	bd38      	pop	{r3, r4, r5, pc}
 800a98e:	bf00      	nop
 800a990:	20002630 	.word	0x20002630

0800a994 <_getpid_r>:
 800a994:	f7f8 bd24 	b.w	80033e0 <_getpid>

0800a998 <sqrt>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	4606      	mov	r6, r0
 800a99c:	460f      	mov	r7, r1
 800a99e:	f000 f81f 	bl	800a9e0 <__ieee754_sqrt>
 800a9a2:	4632      	mov	r2, r6
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	460d      	mov	r5, r1
 800a9a8:	463b      	mov	r3, r7
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	4639      	mov	r1, r7
 800a9ae:	f7f6 f82d 	bl	8000a0c <__aeabi_dcmpun>
 800a9b2:	b990      	cbnz	r0, 800a9da <sqrt+0x42>
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	4639      	mov	r1, r7
 800a9bc:	f7f5 fffe 	bl	80009bc <__aeabi_dcmplt>
 800a9c0:	b158      	cbz	r0, 800a9da <sqrt+0x42>
 800a9c2:	f7fc fb41 	bl	8007048 <__errno>
 800a9c6:	2321      	movs	r3, #33	; 0x21
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	6003      	str	r3, [r0, #0]
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	4619      	mov	r1, r3
 800a9d2:	f7f5 feab 	bl	800072c <__aeabi_ddiv>
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	460d      	mov	r5, r1
 800a9da:	4620      	mov	r0, r4
 800a9dc:	4629      	mov	r1, r5
 800a9de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9e0 <__ieee754_sqrt>:
 800a9e0:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ab3c <__ieee754_sqrt+0x15c>
 800a9e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e8:	ea3c 0c01 	bics.w	ip, ip, r1
 800a9ec:	4606      	mov	r6, r0
 800a9ee:	460d      	mov	r5, r1
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	460a      	mov	r2, r1
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	d10f      	bne.n	800aa1a <__ieee754_sqrt+0x3a>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	f7f5 fd6b 	bl	80004d8 <__aeabi_dmul>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	4630      	mov	r0, r6
 800aa08:	4629      	mov	r1, r5
 800aa0a:	f7f5 fbaf 	bl	800016c <__adddf3>
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460d      	mov	r5, r1
 800aa12:	4630      	mov	r0, r6
 800aa14:	4629      	mov	r1, r5
 800aa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa1a:	2900      	cmp	r1, #0
 800aa1c:	dc0e      	bgt.n	800aa3c <__ieee754_sqrt+0x5c>
 800aa1e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800aa22:	ea5c 0707 	orrs.w	r7, ip, r7
 800aa26:	d0f4      	beq.n	800aa12 <__ieee754_sqrt+0x32>
 800aa28:	b141      	cbz	r1, 800aa3c <__ieee754_sqrt+0x5c>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	f7f5 fb9b 	bl	8000168 <__aeabi_dsub>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	f7f5 fe79 	bl	800072c <__aeabi_ddiv>
 800aa3a:	e7e8      	b.n	800aa0e <__ieee754_sqrt+0x2e>
 800aa3c:	1521      	asrs	r1, r4, #20
 800aa3e:	d075      	beq.n	800ab2c <__ieee754_sqrt+0x14c>
 800aa40:	07cc      	lsls	r4, r1, #31
 800aa42:	f04f 0400 	mov.w	r4, #0
 800aa46:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800aa4a:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800aa4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800aa52:	bf5e      	ittt	pl
 800aa54:	0fd9      	lsrpl	r1, r3, #31
 800aa56:	005b      	lslpl	r3, r3, #1
 800aa58:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800aa5c:	0fd9      	lsrs	r1, r3, #31
 800aa5e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800aa62:	2516      	movs	r5, #22
 800aa64:	4620      	mov	r0, r4
 800aa66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa6a:	107f      	asrs	r7, r7, #1
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	1846      	adds	r6, r0, r1
 800aa70:	4296      	cmp	r6, r2
 800aa72:	bfde      	ittt	le
 800aa74:	1b92      	suble	r2, r2, r6
 800aa76:	1870      	addle	r0, r6, r1
 800aa78:	1864      	addle	r4, r4, r1
 800aa7a:	0052      	lsls	r2, r2, #1
 800aa7c:	3d01      	subs	r5, #1
 800aa7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800aa82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800aa86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aa8a:	d1f0      	bne.n	800aa6e <__ieee754_sqrt+0x8e>
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	f04f 0e20 	mov.w	lr, #32
 800aa92:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800aa96:	4282      	cmp	r2, r0
 800aa98:	eb06 0c05 	add.w	ip, r6, r5
 800aa9c:	dc02      	bgt.n	800aaa4 <__ieee754_sqrt+0xc4>
 800aa9e:	d113      	bne.n	800aac8 <__ieee754_sqrt+0xe8>
 800aaa0:	459c      	cmp	ip, r3
 800aaa2:	d811      	bhi.n	800aac8 <__ieee754_sqrt+0xe8>
 800aaa4:	f1bc 0f00 	cmp.w	ip, #0
 800aaa8:	eb0c 0506 	add.w	r5, ip, r6
 800aaac:	da43      	bge.n	800ab36 <__ieee754_sqrt+0x156>
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	db41      	blt.n	800ab36 <__ieee754_sqrt+0x156>
 800aab2:	f100 0801 	add.w	r8, r0, #1
 800aab6:	1a12      	subs	r2, r2, r0
 800aab8:	4640      	mov	r0, r8
 800aaba:	459c      	cmp	ip, r3
 800aabc:	bf88      	it	hi
 800aabe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800aac2:	eba3 030c 	sub.w	r3, r3, ip
 800aac6:	4431      	add	r1, r6
 800aac8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800aacc:	f1be 0e01 	subs.w	lr, lr, #1
 800aad0:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800aad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800aad8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aadc:	d1db      	bne.n	800aa96 <__ieee754_sqrt+0xb6>
 800aade:	4313      	orrs	r3, r2
 800aae0:	d006      	beq.n	800aaf0 <__ieee754_sqrt+0x110>
 800aae2:	1c48      	adds	r0, r1, #1
 800aae4:	bf0b      	itete	eq
 800aae6:	4671      	moveq	r1, lr
 800aae8:	3101      	addne	r1, #1
 800aaea:	3401      	addeq	r4, #1
 800aaec:	f021 0101 	bicne.w	r1, r1, #1
 800aaf0:	1063      	asrs	r3, r4, #1
 800aaf2:	0849      	lsrs	r1, r1, #1
 800aaf4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800aaf8:	07e2      	lsls	r2, r4, #31
 800aafa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800aafe:	bf48      	it	mi
 800ab00:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ab04:	460e      	mov	r6, r1
 800ab06:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ab0a:	e782      	b.n	800aa12 <__ieee754_sqrt+0x32>
 800ab0c:	0ada      	lsrs	r2, r3, #11
 800ab0e:	3815      	subs	r0, #21
 800ab10:	055b      	lsls	r3, r3, #21
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	d0fa      	beq.n	800ab0c <__ieee754_sqrt+0x12c>
 800ab16:	02d5      	lsls	r5, r2, #11
 800ab18:	d50a      	bpl.n	800ab30 <__ieee754_sqrt+0x150>
 800ab1a:	f1c1 0420 	rsb	r4, r1, #32
 800ab1e:	fa23 f404 	lsr.w	r4, r3, r4
 800ab22:	1e4d      	subs	r5, r1, #1
 800ab24:	408b      	lsls	r3, r1
 800ab26:	4322      	orrs	r2, r4
 800ab28:	1b41      	subs	r1, r0, r5
 800ab2a:	e789      	b.n	800aa40 <__ieee754_sqrt+0x60>
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	e7f0      	b.n	800ab12 <__ieee754_sqrt+0x132>
 800ab30:	0052      	lsls	r2, r2, #1
 800ab32:	3101      	adds	r1, #1
 800ab34:	e7ef      	b.n	800ab16 <__ieee754_sqrt+0x136>
 800ab36:	4680      	mov	r8, r0
 800ab38:	e7bd      	b.n	800aab6 <__ieee754_sqrt+0xd6>
 800ab3a:	bf00      	nop
 800ab3c:	7ff00000 	.word	0x7ff00000

0800ab40 <_init>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr

0800ab4c <_fini>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	bf00      	nop
 800ab50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab52:	bc08      	pop	{r3}
 800ab54:	469e      	mov	lr, r3
 800ab56:	4770      	bx	lr

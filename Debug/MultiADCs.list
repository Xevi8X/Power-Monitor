
MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000752c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08007640  08007640  00017640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007abc  08007abc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007abc  08007abc  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007abc  08007abc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ac0  08007ac0  00017ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f8  200001e0  08007ca4  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bd8  08007ca4  00020bd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009826  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236f  00000000  00000000  00029a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002c768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cae  00000000  00000000  0002d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c313  00000000  00000000  00045cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089456  00000000  00000000  00051fe9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db43f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003714  00000000  00000000  000db490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007624 	.word	0x08007624

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007624 	.word	0x08007624

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <MX_ADC1_Init+0xd4>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001004:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001008:	2201      	movs	r2, #1
 800100a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_ADC1_Init+0xd0>)
 800100e:	2200      	movs	r2, #0
 8001010:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001014:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001018:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_ADC1_Init+0xd0>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001022:	2203      	movs	r2, #3
 8001024:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001026:	4823      	ldr	r0, [pc, #140]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001028:	f001 fa46 	bl	80024b8 <HAL_ADC_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 ffe8 	bl	8002006 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001036:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800103a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	481c      	ldr	r0, [pc, #112]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001044:	f001 fffa 	bl	800303c <HAL_ADCEx_MultiModeConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 ffda 	bl	8002006 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2301      	movs	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001064:	f001 fc84 	bl	8002970 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800106e:	f000 ffca 	bl	8002006 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001072:	2304      	movs	r3, #4
 8001074:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001076:	2302      	movs	r3, #2
 8001078:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001080:	f001 fc76 	bl	8002970 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800108a:	f000 ffbc 	bl	8002006 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800108e:	230b      	movs	r3, #11
 8001090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001092:	2303      	movs	r3, #3
 8001094:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_ADC1_Init+0xd0>)
 800109c:	f001 fc68 	bl	8002970 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010a6:	f000 ffae 	bl	8002006 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001fc 	.word	0x200001fc
 80010b8:	40012400 	.word	0x40012400

080010bc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <MX_ADC2_Init+0xb0>)
 80010ce:	4a28      	ldr	r2, [pc, #160]	; (8001170 <MX_ADC2_Init+0xb4>)
 80010d0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <MX_ADC2_Init+0xb0>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_ADC2_Init+0xb0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <MX_ADC2_Init+0xb0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_ADC2_Init+0xb0>)
 80010e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_ADC2_Init+0xb0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_ADC2_Init+0xb0>)
 80010f6:	2203      	movs	r2, #3
 80010f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fa:	481c      	ldr	r0, [pc, #112]	; (800116c <MX_ADC2_Init+0xb0>)
 80010fc:	f001 f9dc 	bl	80024b8 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8001106:	f000 ff7e 	bl	8002006 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2301      	movs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001112:	2307      	movs	r3, #7
 8001114:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4814      	ldr	r0, [pc, #80]	; (800116c <MX_ADC2_Init+0xb0>)
 800111c:	f001 fc28 	bl	8002970 <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 ff6e 	bl	8002006 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800112a:	2308      	movs	r3, #8
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112e:	2302      	movs	r3, #2
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_ADC2_Init+0xb0>)
 8001138:	f001 fc1a 	bl	8002970 <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001142:	f000 ff60 	bl	8002006 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001146:	230a      	movs	r3, #10
 8001148:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800114a:	2303      	movs	r3, #3
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_ADC2_Init+0xb0>)
 8001154:	f001 fc0c 	bl	8002970 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800115e:	f000 ff52 	bl	8002006 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000022c 	.word	0x2000022c
 8001170:	40012800 	.word	0x40012800

08001174 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a65      	ldr	r2, [pc, #404]	; (8001324 <HAL_ADC_MspInit+0x1b0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d168      	bne.n	8001266 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001194:	4b64      	ldr	r3, [pc, #400]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a63      	ldr	r2, [pc, #396]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b61      	ldr	r3, [pc, #388]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a5d      	ldr	r2, [pc, #372]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	623b      	str	r3, [r7, #32]
 80011c2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b58      	ldr	r3, [pc, #352]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a57      	ldr	r2, [pc, #348]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b55      	ldr	r3, [pc, #340]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4850      	ldr	r0, [pc, #320]	; (800132c <HAL_ADC_MspInit+0x1b8>)
 80011ec:	f002 fa74 	bl	80036d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80011f0:	2311      	movs	r3, #17
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fc:	4619      	mov	r1, r3
 80011fe:	484c      	ldr	r0, [pc, #304]	; (8001330 <HAL_ADC_MspInit+0x1bc>)
 8001200:	f002 fa6a 	bl	80036d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001206:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_ADC_MspInit+0x1c4>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001216:	4b47      	ldr	r3, [pc, #284]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800121c:	4b45      	ldr	r3, [pc, #276]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800121e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001222:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001224:	4b43      	ldr	r3, [pc, #268]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800122c:	4b41      	ldr	r3, [pc, #260]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800122e:	2220      	movs	r2, #32
 8001230:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001232:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001238:	483e      	ldr	r0, [pc, #248]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800123a:	f002 f85f 	bl	80032fc <HAL_DMA_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001244:	f000 fedf 	bl	8002006 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3a      	ldr	r2, [pc, #232]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800124c:	621a      	str	r2, [r3, #32]
 800124e:	4a39      	ldr	r2, [pc, #228]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2012      	movs	r0, #18
 800125a:	f002 f818 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800125e:	2012      	movs	r0, #18
 8001260:	f002 f831 	bl	80032c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001264:	e05a      	b.n	800131c <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a34      	ldr	r2, [pc, #208]	; (800133c <HAL_ADC_MspInit+0x1c8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d155      	bne.n	800131c <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a26      	ldr	r2, [pc, #152]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a20      	ldr	r2, [pc, #128]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d0:	2303      	movs	r3, #3
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d4:	2303      	movs	r3, #3
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012dc:	4619      	mov	r1, r3
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <HAL_ADC_MspInit+0x1b8>)
 80012e0:	f002 f9fa 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012e4:	2302      	movs	r3, #2
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e8:	2303      	movs	r3, #3
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f0:	4619      	mov	r1, r3
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <HAL_ADC_MspInit+0x1bc>)
 80012f4:	f002 f9f0 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001304:	4619      	mov	r1, r3
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <HAL_ADC_MspInit+0x1cc>)
 8001308:	f002 f9e6 	bl	80036d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2012      	movs	r0, #18
 8001312:	f001 ffbc 	bl	800328e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001316:	2012      	movs	r0, #18
 8001318:	f001 ffd5 	bl	80032c6 <HAL_NVIC_EnableIRQ>
}
 800131c:	bf00      	nop
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40012400 	.word	0x40012400
 8001328:	40021000 	.word	0x40021000
 800132c:	40011000 	.word	0x40011000
 8001330:	40010800 	.word	0x40010800
 8001334:	2000025c 	.word	0x2000025c
 8001338:	40020008 	.word	0x40020008
 800133c:	40012800 	.word	0x40012800
 8001340:	40010c00 	.word	0x40010c00

08001344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_DMA_Init+0x38>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <MX_DMA_Init+0x38>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_DMA_Init+0x38>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	200b      	movs	r0, #11
 8001368:	f001 ff91 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800136c:	200b      	movs	r0, #11
 800136e:	f001 ffaa 	bl	80032c6 <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <MX_GPIO_Init+0xa8>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a23      	ldr	r2, [pc, #140]	; (8001428 <MX_GPIO_Init+0xa8>)
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013b2:	f043 0320 	orr.w	r3, r3, #32
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a11      	ldr	r2, [pc, #68]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_GPIO_Init+0xac>)
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <MX_GPIO_Init+0xb0>)
 800140a:	f002 f965 	bl	80036d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2028      	movs	r0, #40	; 0x28
 8001414:	f001 ff3b 	bl	800328e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001418:	2028      	movs	r0, #40	; 0x28
 800141a:	f001 ff54 	bl	80032c6 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	10110000 	.word	0x10110000
 8001430:	40011000 	.word	0x40011000

08001434 <ADC_Start>:
/* USER CODE BEGIN 0 */



void ADC_Start(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001438:	bf00      	nop
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <ADC_Start+0x3c>)
 800143c:	f001 fc92 	bl	8002d64 <HAL_ADCEx_Calibration_Start>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 8001446:	bf00      	nop
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <ADC_Start+0x40>)
 800144a:	f001 fc8b 	bl	8002d64 <HAL_ADCEx_Calibration_Start>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f9      	bne.n	8001448 <ADC_Start+0x14>
	HAL_Delay(10);
 8001454:	200a      	movs	r0, #10
 8001456:	f001 f80b 	bl	8002470 <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <ADC_Start+0x40>)
 800145c:	f001 f904 	bl	8002668 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADC_Buffer, (uint32_t)2 * CHANNELS);
 8001460:	2206      	movs	r2, #6
 8001462:	4905      	ldr	r1, [pc, #20]	; (8001478 <ADC_Start+0x44>)
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <ADC_Start+0x3c>)
 8001466:	f001 fd29 	bl	8002ebc <HAL_ADCEx_MultiModeStart_DMA>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200001fc 	.word	0x200001fc
 8001474:	2000022c 	.word	0x2000022c
 8001478:	200002a0 	.word	0x200002a0

0800147c <CalcRMScorection>:

void CalcRMScorection()
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
		while(indexCircBuffer!= 0);
 8001482:	bf00      	nop
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <CalcRMScorection+0x70>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1fb      	bne.n	8001484 <CalcRMScorection+0x8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
		__disable_irq();
		uint32_t timeOfBufforing = time[BUFFERSIZE-1]- time[0];
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <CalcRMScorection+0x74>)
 8001492:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <CalcRMScorection+0x74>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	60fb      	str	r3, [r7, #12]
		uint32_t halfPhase = 1000000/EXPECTEDFREQ/2;
 800149e:	f242 7310 	movw	r3, #10000	; 0x2710
 80014a2:	60bb      	str	r3, [r7, #8]
		uint16_t halfPeriods = timeOfBufforing/halfPhase;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	80fb      	strh	r3, [r7, #6]

		while(time[BUFFERSIZE-1-correctionRMS] > time[0] + halfPhase*halfPeriods) correctionRMS++;
 80014ae:	e005      	b.n	80014bc <CalcRMScorection+0x40>
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <CalcRMScorection+0x78>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <CalcRMScorection+0x78>)
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <CalcRMScorection+0x78>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <CalcRMScorection+0x74>)
 80014c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <CalcRMScorection+0x74>)
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	fb00 f303 	mul.w	r3, r0, r3
 80014d6:	440b      	add	r3, r1
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8e9      	bhi.n	80014b0 <CalcRMScorection+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 80014dc:	b662      	cpsie	i
}
 80014de:	bf00      	nop
		__enable_irq();
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000ab8 	.word	0x20000ab8
 80014f0:	200008b8 	.word	0x200008b8
 80014f4:	20000af8 	.word	0x20000af8

080014f8 <CalibrateZero>:

void CalibrateZero()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0

	printf("Starting calibration...\n");
 80014fe:	4850      	ldr	r0, [pc, #320]	; (8001640 <CalibrateZero+0x148>)
 8001500:	f003 ff08 	bl	8005314 <puts>
	//printf("Press button when voltage and current is equal to 0\n");
	while(indexCircBuffer!= 0);
 8001504:	bf00      	nop
 8001506:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <CalibrateZero+0x14c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1fb      	bne.n	8001506 <CalibrateZero+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 800150e:	b672      	cpsid	i
}
 8001510:	bf00      	nop
	//		data[0][j] = -calibZeros[j];
	//		RMS[j] = 0;
	//	}

	//Vpp calibration
	int32_t min = 1 << 16, max = 0;
 8001512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 800151c:	2300      	movs	r3, #0
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	e06f      	b.n	8001602 <CalibrateZero+0x10a>
	{
		for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 8001522:	4b49      	ldr	r3, [pc, #292]	; (8001648 <CalibrateZero+0x150>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	80bb      	strh	r3, [r7, #4]
 8001528:	e03f      	b.n	80015aa <CalibrateZero+0xb2>
		{
			if(max < data[i][j]) max = data[i][j];
 800152a:	88ba      	ldrh	r2, [r7, #4]
 800152c:	79f9      	ldrb	r1, [r7, #7]
 800152e:	4847      	ldr	r0, [pc, #284]	; (800164c <CalibrateZero+0x154>)
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	440b      	add	r3, r1
 800153a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800153e:	461a      	mov	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4293      	cmp	r3, r2
 8001544:	da0a      	bge.n	800155c <CalibrateZero+0x64>
 8001546:	88ba      	ldrh	r2, [r7, #4]
 8001548:	79f9      	ldrb	r1, [r7, #7]
 800154a:	4840      	ldr	r0, [pc, #256]	; (800164c <CalibrateZero+0x154>)
 800154c:	4613      	mov	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	4413      	add	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	440b      	add	r3, r1
 8001556:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800155a:	60bb      	str	r3, [r7, #8]
			if(min > data[i][j]) min = data[i][j];
 800155c:	88ba      	ldrh	r2, [r7, #4]
 800155e:	79f9      	ldrb	r1, [r7, #7]
 8001560:	483a      	ldr	r0, [pc, #232]	; (800164c <CalibrateZero+0x154>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	440b      	add	r3, r1
 800156c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	4293      	cmp	r3, r2
 8001576:	dd0a      	ble.n	800158e <CalibrateZero+0x96>
 8001578:	88ba      	ldrh	r2, [r7, #4]
 800157a:	79f9      	ldrb	r1, [r7, #7]
 800157c:	4833      	ldr	r0, [pc, #204]	; (800164c <CalibrateZero+0x154>)
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	440b      	add	r3, r1
 8001588:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800158c:	60fb      	str	r3, [r7, #12]
			data[i][j] = 0;
 800158e:	88ba      	ldrh	r2, [r7, #4]
 8001590:	79f9      	ldrb	r1, [r7, #7]
 8001592:	482e      	ldr	r0, [pc, #184]	; (800164c <CalibrateZero+0x154>)
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	440b      	add	r3, r1
 800159e:	2200      	movs	r2, #0
 80015a0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 80015a4:	88bb      	ldrh	r3, [r7, #4]
 80015a6:	3301      	adds	r3, #1
 80015a8:	80bb      	strh	r3, [r7, #4]
 80015aa:	88bb      	ldrh	r3, [r7, #4]
 80015ac:	2b7f      	cmp	r3, #127	; 0x7f
 80015ae:	d9bc      	bls.n	800152a <CalibrateZero+0x32>
		}
		calibZeros[j] += (min+max)/2;
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	4a27      	ldr	r2, [pc, #156]	; (8001650 <CalibrateZero+0x158>)
 80015b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	4413      	add	r3, r2
 80015be:	0fda      	lsrs	r2, r3, #31
 80015c0:	4413      	add	r3, r2
 80015c2:	105b      	asrs	r3, r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	440a      	add	r2, r1
 80015ca:	b291      	uxth	r1, r2
 80015cc:	4a20      	ldr	r2, [pc, #128]	; (8001650 <CalibrateZero+0x158>)
 80015ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data[0][j] = -calibZeros[j];
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <CalibrateZero+0x158>)
 80015d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015da:	425b      	negs	r3, r3
 80015dc:	b29a      	uxth	r2, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	b211      	sxth	r1, r2
 80015e2:	4a1a      	ldr	r2, [pc, #104]	; (800164c <CalibrateZero+0x154>)
 80015e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RMS[j] = 0;
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <CalibrateZero+0x15c>)
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	18d1      	adds	r1, r2, r3
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	3301      	adds	r3, #1
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b05      	cmp	r3, #5
 8001606:	d98c      	bls.n	8001522 <CalibrateZero+0x2a>
	}


	for(uint8_t j = 0; j < CHANNELS;j++)
 8001608:	2300      	movs	r3, #0
 800160a:	70fb      	strb	r3, [r7, #3]
 800160c:	e00c      	b.n	8001628 <CalibrateZero+0x130>
	{
		P[j] = 0;
 800160e:	78fb      	ldrb	r3, [r7, #3]
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <CalibrateZero+0x160>)
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	18d1      	adds	r1, r2, r3
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS;j++)
 8001622:	78fb      	ldrb	r3, [r7, #3]
 8001624:	3301      	adds	r3, #1
 8001626:	70fb      	strb	r3, [r7, #3]
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d9ef      	bls.n	800160e <CalibrateZero+0x116>
	}
	//printf("Waiting for button click");
	//while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET);
	printf("Calibration completed\n");
 800162e:	480b      	ldr	r0, [pc, #44]	; (800165c <CalibrateZero+0x164>)
 8001630:	f003 fe70 	bl	8005314 <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 8001634:	b662      	cpsie	i
}
 8001636:	bf00      	nop
	__enable_irq();
}
 8001638:	bf00      	nop
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	08007640 	.word	0x08007640
 8001644:	20000ab8 	.word	0x20000ab8
 8001648:	20000af8 	.word	0x20000af8
 800164c:	200002b8 	.word	0x200002b8
 8001650:	20000abc 	.word	0x20000abc
 8001654:	20000ac8 	.word	0x20000ac8
 8001658:	20000b00 	.word	0x20000b00
 800165c:	08007658 	.word	0x08007658

08001660 <takeData>:

void takeData(uint32_t* buffer)
{
 8001660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001664:	b091      	sub	sp, #68	; 0x44
 8001666:	af00      	add	r7, sp, #0
 8001668:	6378      	str	r0, [r7, #52]	; 0x34
	if(oversamplingIndex == OVERSAMPLING)
 800166a:	4b7e      	ldr	r3, [pc, #504]	; (8001864 <takeData+0x204>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b08      	cmp	r3, #8
 8001670:	f040 8182 	bne.w	8001978 <takeData+0x318>
	{
		oversamplingIndex = 0;
 8001674:	4a7b      	ldr	r2, [pc, #492]	; (8001864 <takeData+0x204>)
 8001676:	2300      	movs	r3, #0
 8001678:	7013      	strb	r3, [r2, #0]
		time[indexCircBuffer] = getCurrentMicros();
 800167a:	4b7b      	ldr	r3, [pc, #492]	; (8001868 <takeData+0x208>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	461c      	mov	r4, r3
 8001680:	f000 fb00 	bl	8001c84 <getCurrentMicros>
 8001684:	4602      	mov	r2, r0
 8001686:	4b79      	ldr	r3, [pc, #484]	; (800186c <takeData+0x20c>)
 8001688:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 800168c:	2300      	movs	r3, #0
 800168e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001692:	e036      	b.n	8001702 <takeData+0xa2>
		{
			RMS[i] += data[indexCircBuffer][i]*data[indexCircBuffer][i];
 8001694:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001698:	4a75      	ldr	r2, [pc, #468]	; (8001870 <takeData+0x210>)
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4413      	add	r3, r2
 800169e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016a2:	4b71      	ldr	r3, [pc, #452]	; (8001868 <takeData+0x208>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	461c      	mov	r4, r3
 80016a8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80016ac:	4d71      	ldr	r5, [pc, #452]	; (8001874 <takeData+0x214>)
 80016ae:	4623      	mov	r3, r4
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4423      	add	r3, r4
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80016bc:	461e      	mov	r6, r3
 80016be:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <takeData+0x208>)
 80016c0:	881b      	ldrh	r3, [r3, #0]
 80016c2:	461c      	mov	r4, r3
 80016c4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80016c8:	4d6a      	ldr	r5, [pc, #424]	; (8001874 <takeData+0x214>)
 80016ca:	4623      	mov	r3, r4
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	4423      	add	r3, r4
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4413      	add	r3, r2
 80016d4:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80016d8:	fb06 f303 	mul.w	r3, r6, r3
 80016dc:	17da      	asrs	r2, r3, #31
 80016de:	4698      	mov	r8, r3
 80016e0:	4691      	mov	r9, r2
 80016e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016e6:	eb10 0a08 	adds.w	sl, r0, r8
 80016ea:	eb41 0b09 	adc.w	fp, r1, r9
 80016ee:	4a60      	ldr	r2, [pc, #384]	; (8001870 <takeData+0x210>)
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	4413      	add	r3, r2
 80016f4:	e9c3 ab00 	strd	sl, fp, [r3]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 80016f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016fc:	3301      	adds	r3, #1
 80016fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001702:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001706:	2b05      	cmp	r3, #5
 8001708:	d9c4      	bls.n	8001694 <takeData+0x34>
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 800170a:	2300      	movs	r3, #0
 800170c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001710:	e040      	b.n	8001794 <takeData+0x134>
		{
			P[i] += data[indexCircBuffer][2*i]*data[indexCircBuffer][2*i+1];
 8001712:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001716:	4a58      	ldr	r2, [pc, #352]	; (8001878 <takeData+0x218>)
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4413      	add	r3, r2
 800171c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001720:	4b51      	ldr	r3, [pc, #324]	; (8001868 <takeData+0x208>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	461d      	mov	r5, r3
 8001726:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800172a:	005a      	lsls	r2, r3, #1
 800172c:	4c51      	ldr	r4, [pc, #324]	; (8001874 <takeData+0x214>)
 800172e:	462b      	mov	r3, r5
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	442b      	add	r3, r5
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 800173c:	461e      	mov	r6, r3
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <takeData+0x208>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	461d      	mov	r5, r3
 8001744:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	4c49      	ldr	r4, [pc, #292]	; (8001874 <takeData+0x214>)
 800174e:	462b      	mov	r3, r5
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	442b      	add	r3, r5
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 800175c:	fb06 f303 	mul.w	r3, r6, r3
 8001760:	17da      	asrs	r2, r3, #31
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
 8001764:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001766:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800176a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800176e:	4622      	mov	r2, r4
 8001770:	1882      	adds	r2, r0, r2
 8001772:	623a      	str	r2, [r7, #32]
 8001774:	462a      	mov	r2, r5
 8001776:	eb41 0202 	adc.w	r2, r1, r2
 800177a:	627a      	str	r2, [r7, #36]	; 0x24
 800177c:	4a3e      	ldr	r2, [pc, #248]	; (8001878 <takeData+0x218>)
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001786:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 800178a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800178e:	3301      	adds	r3, #1
 8001790:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001794:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001798:	2b02      	cmp	r3, #2
 800179a:	d9ba      	bls.n	8001712 <takeData+0xb2>
		}
		indexCircBuffer++;
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <takeData+0x208>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <takeData+0x208>)
 80017a6:	801a      	strh	r2, [r3, #0]
		if(indexCircBuffer == BUFFERSIZE)
 80017a8:	4b2f      	ldr	r3, [pc, #188]	; (8001868 <takeData+0x208>)
 80017aa:	881b      	ldrh	r3, [r3, #0]
 80017ac:	2b80      	cmp	r3, #128	; 0x80
 80017ae:	d102      	bne.n	80017b6 <takeData+0x156>
		{
			indexCircBuffer = 0;
 80017b0:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <takeData+0x208>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	801a      	strh	r2, [r3, #0]
			//	calibCounter = 0;
			//	CalibrateZero();
			//}
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 80017b6:	2300      	movs	r3, #0
 80017b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80017bc:	e04a      	b.n	8001854 <takeData+0x1f4>
		{
			P[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i]*data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i+1];
 80017be:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017c2:	4a2d      	ldr	r2, [pc, #180]	; (8001878 <takeData+0x218>)
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <takeData+0x208>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <takeData+0x21c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017dc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017e0:	005c      	lsls	r4, r3, #1
 80017e2:	4d24      	ldr	r5, [pc, #144]	; (8001874 <takeData+0x214>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4423      	add	r3, r4
 80017ee:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80017f2:	461e      	mov	r6, r3
 80017f4:	4b1c      	ldr	r3, [pc, #112]	; (8001868 <takeData+0x208>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <takeData+0x21c>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	4413      	add	r3, r2
 8001800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001804:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	1c5c      	adds	r4, r3, #1
 800180c:	4d19      	ldr	r5, [pc, #100]	; (8001874 <takeData+0x214>)
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4423      	add	r3, r4
 8001818:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 800181c:	fb06 f303 	mul.w	r3, r6, r3
 8001820:	17da      	asrs	r2, r3, #31
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	61fa      	str	r2, [r7, #28]
 8001826:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800182a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800182e:	4622      	mov	r2, r4
 8001830:	1a82      	subs	r2, r0, r2
 8001832:	613a      	str	r2, [r7, #16]
 8001834:	462a      	mov	r2, r5
 8001836:	eb61 0202 	sbc.w	r2, r1, r2
 800183a:	617a      	str	r2, [r7, #20]
 800183c:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <takeData+0x218>)
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001846:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 800184a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800184e:	3301      	adds	r3, #1
 8001850:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001854:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001858:	2b02      	cmp	r3, #2
 800185a:	d9b0      	bls.n	80017be <takeData+0x15e>
		}
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 800185c:	2300      	movs	r3, #0
 800185e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001862:	e085      	b.n	8001970 <takeData+0x310>
 8001864:	20000aba 	.word	0x20000aba
 8001868:	20000ab8 	.word	0x20000ab8
 800186c:	200008b8 	.word	0x200008b8
 8001870:	20000ac8 	.word	0x20000ac8
 8001874:	200002b8 	.word	0x200002b8
 8001878:	20000b00 	.word	0x20000b00
 800187c:	20000af8 	.word	0x20000af8
		{
			RMS[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][i]*data[(indexCircBuffer+ correctionRMS)% BUFFERSIZE][i];
 8001880:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001884:	4a72      	ldr	r2, [pc, #456]	; (8001a50 <takeData+0x3f0>)
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	4413      	add	r3, r2
 800188a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800188e:	4b71      	ldr	r3, [pc, #452]	; (8001a54 <takeData+0x3f4>)
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4b70      	ldr	r3, [pc, #448]	; (8001a58 <takeData+0x3f8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4413      	add	r3, r2
 800189a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800189e:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 80018a2:	4d6e      	ldr	r5, [pc, #440]	; (8001a5c <takeData+0x3fc>)
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4423      	add	r3, r4
 80018ae:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80018b2:	461e      	mov	r6, r3
 80018b4:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <takeData+0x3f4>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	4b67      	ldr	r3, [pc, #412]	; (8001a58 <takeData+0x3f8>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4413      	add	r3, r2
 80018c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018c4:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 80018c8:	4d64      	ldr	r5, [pc, #400]	; (8001a5c <takeData+0x3fc>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4423      	add	r3, r4
 80018d4:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80018d8:	fb06 f303 	mul.w	r3, r6, r3
 80018dc:	17da      	asrs	r2, r3, #31
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	60fa      	str	r2, [r7, #12]
 80018e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018ea:	4622      	mov	r2, r4
 80018ec:	1a82      	subs	r2, r0, r2
 80018ee:	603a      	str	r2, [r7, #0]
 80018f0:	462a      	mov	r2, r5
 80018f2:	eb61 0202 	sbc.w	r2, r1, r2
 80018f6:	607a      	str	r2, [r7, #4]
 80018f8:	4a55      	ldr	r2, [pc, #340]	; (8001a50 <takeData+0x3f0>)
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	4413      	add	r3, r2
 80018fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001902:	e9c3 1200 	strd	r1, r2, [r3]
			setSign(i,indexCircBuffer, (data[indexCircBuffer][i]> 0) ? 1: 0);
 8001906:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <takeData+0x3f4>)
 8001908:	8819      	ldrh	r1, [r3, #0]
 800190a:	4b52      	ldr	r3, [pc, #328]	; (8001a54 <takeData+0x3f4>)
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	461c      	mov	r4, r3
 8001910:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001914:	4851      	ldr	r0, [pc, #324]	; (8001a5c <takeData+0x3fc>)
 8001916:	4623      	mov	r3, r4
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4423      	add	r3, r4
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	bfcc      	ite	gt
 8001928:	2301      	movgt	r3, #1
 800192a:	2300      	movle	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
 8001930:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f897 	bl	8001a68 <setSign>
			data[indexCircBuffer][i] = -calibZeros[i];
 800193a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800193e:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <takeData+0x400>)
 8001940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001944:	425b      	negs	r3, r3
 8001946:	b299      	uxth	r1, r3
 8001948:	4b42      	ldr	r3, [pc, #264]	; (8001a54 <takeData+0x3f4>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001952:	b20c      	sxth	r4, r1
 8001954:	4941      	ldr	r1, [pc, #260]	; (8001a5c <takeData+0x3fc>)
 8001956:	4603      	mov	r3, r0
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4403      	add	r3, r0
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	4622      	mov	r2, r4
 8001962:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001966:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800196a:	3301      	adds	r3, #1
 800196c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001970:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001974:	2b05      	cmp	r3, #5
 8001976:	d983      	bls.n	8001880 <takeData+0x220>
		}


	}
	for(uint8_t i = 0; i < CHANNELS;i++)
 8001978:	2300      	movs	r3, #0
 800197a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800197e:	e057      	b.n	8001a30 <takeData+0x3d0>
	{
		data[indexCircBuffer][2*i] += (uint16_t) buffer[i];
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <takeData+0x3f4>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800198a:	005a      	lsls	r2, r3, #1
 800198c:	4933      	ldr	r1, [pc, #204]	; (8001a5c <takeData+0x3fc>)
 800198e:	4603      	mov	r3, r0
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4403      	add	r3, r0
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	4413      	add	r3, r2
 8001998:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800199c:	b29a      	uxth	r2, r3
 800199e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019a6:	440b      	add	r3, r1
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	4413      	add	r3, r2
 80019ae:	b299      	uxth	r1, r3
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <takeData+0x3f4>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019ba:	005a      	lsls	r2, r3, #1
 80019bc:	b20c      	sxth	r4, r1
 80019be:	4927      	ldr	r1, [pc, #156]	; (8001a5c <takeData+0x3fc>)
 80019c0:	4603      	mov	r3, r0
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4403      	add	r3, r0
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4413      	add	r3, r2
 80019ca:	4622      	mov	r2, r4
 80019cc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		data[indexCircBuffer][2*i+1] += (uint16_t) (buffer[i] >> 16);
 80019d0:	4b20      	ldr	r3, [pc, #128]	; (8001a54 <takeData+0x3f4>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	491f      	ldr	r1, [pc, #124]	; (8001a5c <takeData+0x3fc>)
 80019e0:	4603      	mov	r3, r0
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4403      	add	r3, r0
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019f8:	440b      	add	r3, r1
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0c1b      	lsrs	r3, r3, #16
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	b299      	uxth	r1, r3
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <takeData+0x3f4>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	b20c      	sxth	r4, r1
 8001a14:	4911      	ldr	r1, [pc, #68]	; (8001a5c <takeData+0x3fc>)
 8001a16:	4603      	mov	r3, r0
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4403      	add	r3, r0
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	4622      	mov	r2, r4
 8001a22:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t i = 0; i < CHANNELS;i++)
 8001a26:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001a30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d9a3      	bls.n	8001980 <takeData+0x320>
	}
	oversamplingIndex++;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <takeData+0x404>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <takeData+0x404>)
 8001a42:	701a      	strb	r2, [r3, #0]
}
 8001a44:	bf00      	nop
 8001a46:	3744      	adds	r7, #68	; 0x44
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000ac8 	.word	0x20000ac8
 8001a54:	20000ab8 	.word	0x20000ab8
 8001a58:	20000af8 	.word	0x20000af8
 8001a5c:	200002b8 	.word	0x200002b8
 8001a60:	20000abc 	.word	0x20000abc
 8001a64:	20000aba 	.word	0x20000aba

08001a68 <setSign>:

void setSign(uint8_t channel, uint16_t index,uint8_t value)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	460b      	mov	r3, r1
 8001a74:	80bb      	strh	r3, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	71bb      	strb	r3, [r7, #6]
	if(disableSetting != 0) return;
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <setSign+0xa4>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d13e      	bne.n	8001b00 <setSign+0x98>
	if(value == 1)
 8001a82:	79bb      	ldrb	r3, [r7, #6]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d11c      	bne.n	8001ac2 <setSign+0x5a>
	{
		sign[channel][index/8] |= (1 << (index % 8));
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	88ba      	ldrh	r2, [r7, #4]
 8001a8c:	08d2      	lsrs	r2, r2, #3
 8001a8e:	b290      	uxth	r0, r2
 8001a90:	4601      	mov	r1, r0
 8001a92:	4a1f      	ldr	r2, [pc, #124]	; (8001b10 <setSign+0xa8>)
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	4413      	add	r3, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	b25a      	sxtb	r2, r3
 8001a9e:	88bb      	ldrh	r3, [r7, #4]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b25a      	sxtb	r2, r3
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	b2d1      	uxtb	r1, r2
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <setSign+0xa8>)
 8001ab6:	011b      	lsls	r3, r3, #4
 8001ab8:	4413      	add	r3, r2
 8001aba:	4403      	add	r3, r0
 8001abc:	460a      	mov	r2, r1
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	e01f      	b.n	8001b02 <setSign+0x9a>
	}
	else
	{
		sign[channel][index/8] &= ~(1 << (index % 8));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	88ba      	ldrh	r2, [r7, #4]
 8001ac6:	08d2      	lsrs	r2, r2, #3
 8001ac8:	b290      	uxth	r0, r2
 8001aca:	4601      	mov	r1, r0
 8001acc:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <setSign+0xa8>)
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	4413      	add	r3, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	88bb      	ldrh	r3, [r7, #4]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	2101      	movs	r1, #1
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	4013      	ands	r3, r2
 8001aec:	b25a      	sxtb	r2, r3
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	b2d1      	uxtb	r1, r2
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <setSign+0xa8>)
 8001af4:	011b      	lsls	r3, r3, #4
 8001af6:	4413      	add	r3, r2
 8001af8:	4403      	add	r3, r0
 8001afa:	460a      	mov	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
 8001afe:	e000      	b.n	8001b02 <setSign+0x9a>
	if(disableSetting != 0) return;
 8001b00:	bf00      	nop
	}
}
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000b78 	.word	0x20000b78
 8001b10:	20000b18 	.word	0x20000b18

08001b14 <calcXOR>:

float calcXOR(uint8_t channel)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	disableSetting = 1;
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <calcXOR+0xc8>)
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]
	uint16_t count = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	82fb      	strh	r3, [r7, #22]
	uint16_t counter = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = 0; i < (BUFFERSIZE)/8; i++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	74fb      	strb	r3, [r7, #19]
 8001b30:	e02e      	b.n	8001b90 <calcXOR+0x7c>
	{
		uint8_t xor = (sign[channel*2][i]) ^ (sign[channel*2 + 1][i]);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	005a      	lsls	r2, r3, #1
 8001b36:	7cfb      	ldrb	r3, [r7, #19]
 8001b38:	4929      	ldr	r1, [pc, #164]	; (8001be0 <calcXOR+0xcc>)
 8001b3a:	0112      	lsls	r2, r2, #4
 8001b3c:	440a      	add	r2, r1
 8001b3e:	4413      	add	r3, r2
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	1c59      	adds	r1, r3, #1
 8001b48:	7cfb      	ldrb	r3, [r7, #19]
 8001b4a:	4825      	ldr	r0, [pc, #148]	; (8001be0 <calcXOR+0xcc>)
 8001b4c:	0109      	lsls	r1, r1, #4
 8001b4e:	4401      	add	r1, r0
 8001b50:	440b      	add	r3, r1
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4053      	eors	r3, r2
 8001b56:	74bb      	strb	r3, [r7, #18]
		while (xor > 0)
 8001b58:	e014      	b.n	8001b84 <calcXOR+0x70>
		{
			if(counter < BUFFERSIZE - correctionRMS)
 8001b5a:	8aba      	ldrh	r2, [r7, #20]
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <calcXOR+0xd0>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001b64:	429a      	cmp	r2, r3
 8001b66:	da07      	bge.n	8001b78 <calcXOR+0x64>
			{
				count += xor & 1;
 8001b68:	7cbb      	ldrb	r3, [r7, #18]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	8afb      	ldrh	r3, [r7, #22]
 8001b74:	4413      	add	r3, r2
 8001b76:	82fb      	strh	r3, [r7, #22]
			}
			xor >>= 1;
 8001b78:	7cbb      	ldrb	r3, [r7, #18]
 8001b7a:	085b      	lsrs	r3, r3, #1
 8001b7c:	74bb      	strb	r3, [r7, #18]
			counter++;
 8001b7e:	8abb      	ldrh	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	82bb      	strh	r3, [r7, #20]
		while (xor > 0)
 8001b84:	7cbb      	ldrb	r3, [r7, #18]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1e7      	bne.n	8001b5a <calcXOR+0x46>
	for(uint8_t i = 0; i < (BUFFERSIZE)/8; i++)
 8001b8a:	7cfb      	ldrb	r3, [r7, #19]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	74fb      	strb	r3, [r7, #19]
 8001b90:	7cfb      	ldrb	r3, [r7, #19]
 8001b92:	2b0f      	cmp	r3, #15
 8001b94:	d9cd      	bls.n	8001b32 <calcXOR+0x1e>
		}
	}


	float angle = count;
 8001b96:	8afb      	ldrh	r3, [r7, #22]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff f87b 	bl	8000c94 <__aeabi_ui2f>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	60fb      	str	r3, [r7, #12]
	angle /= (BUFFERSIZE-correctionRMS);
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <calcXOR+0xd0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f876 	bl	8000c9c <__aeabi_i2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7ff f979 	bl	8000eac <__aeabi_fdiv>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	60fb      	str	r3, [r7, #12]
	//angle = 1 - angle;
	angle *= 180.0f;
 8001bbe:	490a      	ldr	r1, [pc, #40]	; (8001be8 <calcXOR+0xd4>)
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff f8bf 	bl	8000d44 <__aeabi_fmul>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	60fb      	str	r3, [r7, #12]
	disableSetting = 0;
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <calcXOR+0xc8>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
	return angle;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000b78 	.word	0x20000b78
 8001be0:	20000b18 	.word	0x20000b18
 8001be4:	20000af8 	.word	0x20000af8
 8001be8:	43340000 	.word	0x43340000

08001bec <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	if(hadc)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_ADC_ConvHalfCpltCallback+0x14>
	{
		takeData(ADC_Buffer);
 8001bfa:	4803      	ldr	r0, [pc, #12]	; (8001c08 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001bfc:	f7ff fd30 	bl	8001660 <takeData>
	}
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200002a0 	.word	0x200002a0

08001c0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	if(hadc)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_ADC_ConvCpltCallback+0x18>
	{
		takeData(halfOfADC_Buffer);
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_ADC_ConvCpltCallback+0x20>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fd1e 	bl	8001660 <takeData>
	}
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000000 	.word	0x20000000

08001c30 <__io_putchar>:


int __io_putchar(int ch)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b0a      	cmp	r3, #10
 8001c3c:	d102      	bne.n	8001c44 <__io_putchar+0x14>
    __io_putchar('\r');
 8001c3e:	200d      	movs	r0, #13
 8001c40:	f7ff fff6 	bl	8001c30 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001c44:	1d39      	adds	r1, r7, #4
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4803      	ldr	r0, [pc, #12]	; (8001c5c <__io_putchar+0x2c>)
 8001c4e:	f002 fcde 	bl	800460e <HAL_UART_Transmit>

  return 1;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000b80 	.word	0x20000b80

08001c60 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	bf0c      	ite	eq
 8001c72:	2301      	moveq	r3, #1
 8001c74:	2300      	movne	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <getCurrentMicros>:

uint32_t getCurrentMicros(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 8001c8a:	f7ff ffe9 	bl	8001c60 <LL_SYSTICK_IsActiveCounterFlag>
  uint32_t m = HAL_GetTick();
 8001c8e:	f000 fbe5 	bl	800245c <HAL_GetTick>
 8001c92:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <getCurrentMicros+0x60>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <getCurrentMicros+0x60>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 8001ca6:	f7ff ffdb 	bl	8001c60 <LL_SYSTICK_IsActiveCounterFlag>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <getCurrentMicros+0x3c>
    m = HAL_GetTick();
 8001cb0:	f000 fbd4 	bl	800245c <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <getCurrentMicros+0x60>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc6:	fb03 f202 	mul.w	r2, r3, r2
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cd0:	fb03 f101 	mul.w	r1, r3, r1
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cda:	4413      	add	r3, r2
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cec:	b090      	sub	sp, #64	; 0x40
 8001cee:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf0:	f000 fb5c 	bl	80023ac <HAL_Init>

  /* USER CODE BEGIN Init */
  uint32_t lastGetTick;
  indexCircBuffer = 0;
 8001cf4:	4b8e      	ldr	r3, [pc, #568]	; (8001f30 <main+0x248>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	801a      	strh	r2, [r3, #0]
  oversamplingIndex = 0;
 8001cfa:	4b8e      	ldr	r3, [pc, #568]	; (8001f34 <main+0x24c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
  correctionRMS = 1;
 8001d00:	4b8d      	ldr	r3, [pc, #564]	; (8001f38 <main+0x250>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
  calibCounter = 0;
 8001d06:	4b8d      	ldr	r3, [pc, #564]	; (8001f3c <main+0x254>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
  disableSetting = 0;
 8001d0c:	4b8c      	ldr	r3, [pc, #560]	; (8001f40 <main+0x258>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d12:	f000 f921 	bl	8001f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d16:	f7ff fb33 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d1a:	f7ff fb13 	bl	8001344 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001d1e:	f000 fab7 	bl	8002290 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001d22:	f7ff f95f 	bl	8000fe4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001d26:	f7ff f9c9 	bl	80010bc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 8001d2a:	f7ff fb83 	bl	8001434 <ADC_Start>
  HAL_Delay(1500);
 8001d2e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001d32:	f000 fb9d 	bl	8002470 <HAL_Delay>
  CalibrateZero();
 8001d36:	f7ff fbdf 	bl	80014f8 <CalibrateZero>
  CalcRMScorection();
 8001d3a:	f7ff fb9f 	bl	800147c <CalcRMScorection>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d42:	4880      	ldr	r0, [pc, #512]	; (8001f44 <main+0x25c>)
 8001d44:	f001 fe4c 	bl	80039e0 <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <main+0x6a>
	  {
		  CalibrateZero();
 8001d4e:	f7ff fbd3 	bl	80014f8 <CalibrateZero>
	  }

	  if((HAL_GetTick()-lastGetTick)>=SHOWDATAPERIOD)
 8001d52:	f000 fb83 	bl	800245c <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d60:	d3ed      	bcc.n	8001d3e <main+0x56>
	  {
		  float V1 = sqrt((float)RMS[1]/(BUFFERSIZE-correctionRMS))/VOLTAGESCALE;
 8001d62:	4b79      	ldr	r3, [pc, #484]	; (8001f48 <main+0x260>)
 8001d64:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe ffa4 	bl	8000cb8 <__aeabi_ul2f>
 8001d70:	4604      	mov	r4, r0
 8001d72:	4b71      	ldr	r3, [pc, #452]	; (8001f38 <main+0x250>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe ff8e 	bl	8000c9c <__aeabi_i2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4619      	mov	r1, r3
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff f891 	bl	8000eac <__aeabi_fdiv>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fb4b 	bl	8000428 <__aeabi_f2d>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f005 fb6f 	bl	800747c <sqrt>
 8001d9e:	a35e      	add	r3, pc, #376	; (adr r3, 8001f18 <main+0x230>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fcc2 	bl	800072c <__aeabi_ddiv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe fe6a 	bl	8000a88 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	61bb      	str	r3, [r7, #24]
		  float A1 = sqrt((float)RMS[0]/(BUFFERSIZE-correctionRMS))/CURRENTSCALE;
 8001db8:	4b63      	ldr	r3, [pc, #396]	; (8001f48 <main+0x260>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe ff79 	bl	8000cb8 <__aeabi_ul2f>
 8001dc6:	4604      	mov	r4, r0
 8001dc8:	4b5b      	ldr	r3, [pc, #364]	; (8001f38 <main+0x250>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe ff63 	bl	8000c9c <__aeabi_i2f>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff f866 	bl	8000eac <__aeabi_fdiv>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fb20 	bl	8000428 <__aeabi_f2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	f005 fb44 	bl	800747c <sqrt>
 8001df4:	a34a      	add	r3, pc, #296	; (adr r3, 8001f20 <main+0x238>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f7fe fc97 	bl	800072c <__aeabi_ddiv>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fe3f 	bl	8000a88 <__aeabi_d2f>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	617b      	str	r3, [r7, #20]
		  float S1 = V1*A1;
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	69b8      	ldr	r0, [r7, #24]
 8001e12:	f7fe ff97 	bl	8000d44 <__aeabi_fmul>
 8001e16:	4603      	mov	r3, r0
 8001e18:	613b      	str	r3, [r7, #16]
		  float P1 = P[0];
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <main+0x264>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	4610      	mov	r0, r2
 8001e22:	4619      	mov	r1, r3
 8001e24:	f7fe ff50 	bl	8000cc8 <__aeabi_l2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]
		  P1 /= ((BUFFERSIZE-correctionRMS)*(VOLTAGESCALE*CURRENTSCALE));
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7fe fafb 	bl	8000428 <__aeabi_f2d>
 8001e32:	4604      	mov	r4, r0
 8001e34:	460d      	mov	r5, r1
 8001e36:	4b40      	ldr	r3, [pc, #256]	; (8001f38 <main+0x250>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fae0 	bl	8000404 <__aeabi_i2d>
 8001e44:	a338      	add	r3, pc, #224	; (adr r3, 8001f28 <main+0x240>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fb45 	bl	80004d8 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4620      	mov	r0, r4
 8001e54:	4629      	mov	r1, r5
 8001e56:	f7fe fc69 	bl	800072c <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fe11 	bl	8000a88 <__aeabi_d2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	60fb      	str	r3, [r7, #12]
		  float Q1 = sqrt(S1*S1-P1*P1);
 8001e6a:	6939      	ldr	r1, [r7, #16]
 8001e6c:	6938      	ldr	r0, [r7, #16]
 8001e6e:	f7fe ff69 	bl	8000d44 <__aeabi_fmul>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461c      	mov	r4, r3
 8001e76:	68f9      	ldr	r1, [r7, #12]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7fe ff63 	bl	8000d44 <__aeabi_fmul>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4620      	mov	r0, r4
 8001e84:	f7fe fe54 	bl	8000b30 <__aeabi_fsub>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe facc 	bl	8000428 <__aeabi_f2d>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f005 faf0 	bl	800747c <sqrt>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fdf0 	bl	8000a88 <__aeabi_d2f>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60bb      	str	r3, [r7, #8]

		  printf("RMS: V: %.1f,  A:%.2f,  P:%.2f,  Q:%.2f,  S:%.2f\n",V1 ,A1, P1, Q1, S1);
 8001eac:	69b8      	ldr	r0, [r7, #24]
 8001eae:	f7fe fabb 	bl	8000428 <__aeabi_f2d>
 8001eb2:	e9c7 0100 	strd	r0, r1, [r7]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7fe fab6 	bl	8000428 <__aeabi_f2d>
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	460d      	mov	r5, r1
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7fe fab1 	bl	8000428 <__aeabi_f2d>
 8001ec6:	4680      	mov	r8, r0
 8001ec8:	4689      	mov	r9, r1
 8001eca:	68b8      	ldr	r0, [r7, #8]
 8001ecc:	f7fe faac 	bl	8000428 <__aeabi_f2d>
 8001ed0:	4682      	mov	sl, r0
 8001ed2:	468b      	mov	fp, r1
 8001ed4:	6938      	ldr	r0, [r7, #16]
 8001ed6:	f7fe faa7 	bl	8000428 <__aeabi_f2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001ee2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001ee6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001eea:	e9cd 4500 	strd	r4, r5, [sp]
 8001eee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ef2:	4817      	ldr	r0, [pc, #92]	; (8001f50 <main+0x268>)
 8001ef4:	f003 f988 	bl	8005208 <iprintf>
		  printf("Fi: %f\n", calcXOR(0));
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fe0b 	bl	8001b14 <calcXOR>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fa91 	bl	8000428 <__aeabi_f2d>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4812      	ldr	r0, [pc, #72]	; (8001f54 <main+0x26c>)
 8001f0c:	f003 f97c 	bl	8005208 <iprintf>

		  lastGetTick=HAL_GetTick();
 8001f10:	f000 faa4 	bl	800245c <HAL_GetTick>
 8001f14:	61f8      	str	r0, [r7, #28]
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001f16:	e712      	b.n	8001d3e <main+0x56>
 8001f18:	66666666 	.word	0x66666666
 8001f1c:	40416666 	.word	0x40416666
 8001f20:	33333333 	.word	0x33333333
 8001f24:	4076a333 	.word	0x4076a333
 8001f28:	ae147ae0 	.word	0xae147ae0
 8001f2c:	40c89e47 	.word	0x40c89e47
 8001f30:	20000ab8 	.word	0x20000ab8
 8001f34:	20000aba 	.word	0x20000aba
 8001f38:	20000af8 	.word	0x20000af8
 8001f3c:	20000afa 	.word	0x20000afa
 8001f40:	20000b78 	.word	0x20000b78
 8001f44:	40011000 	.word	0x40011000
 8001f48:	20000ac8 	.word	0x20000ac8
 8001f4c:	20000b00 	.word	0x20000b00
 8001f50:	08007670 	.word	0x08007670
 8001f54:	080076a4 	.word	0x080076a4

08001f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b094      	sub	sp, #80	; 0x50
 8001f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f62:	2228      	movs	r2, #40	; 0x28
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f002 fce6 	bl	8004938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f90:	2310      	movs	r3, #16
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f94:	2302      	movs	r3, #2
 8001f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001f9c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f001 fd54 	bl	8003a54 <HAL_RCC_OscConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001fb2:	f000 f828 	bl	8002006 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fc6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	2102      	movs	r1, #2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f001 ffc0 	bl	8003f58 <HAL_RCC_ClockConfig>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001fde:	f000 f812 	bl	8002006 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001fe6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f002 f94a 	bl	8004288 <HAL_RCCEx_PeriphCLKConfig>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ffa:	f000 f804 	bl	8002006 <Error_Handler>
  }
}
 8001ffe:	bf00      	nop
 8002000:	3750      	adds	r7, #80	; 0x50
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800200a:	b672      	cpsid	i
}
 800200c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200e:	e7fe      	b.n	800200e <Error_Handler+0x8>

08002010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_MspInit+0x5c>)
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_MspInit+0x5c>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6193      	str	r3, [r2, #24]
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_MspInit+0x5c>)
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_MspInit+0x5c>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_MspInit+0x5c>)
 8002034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002038:	61d3      	str	r3, [r2, #28]
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_MspInit+0x5c>)
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_MspInit+0x60>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_MspInit+0x60>)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	40021000 	.word	0x40021000
 8002070:	40010000 	.word	0x40010000

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <NMI_Handler+0x4>

0800207a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <MemManage_Handler+0x4>

08002086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <UsageFault_Handler+0x4>

08002092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr

080020b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ba:	f000 f9bd 	bl	8002438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <DMA1_Channel1_IRQHandler+0x10>)
 80020ca:	f001 f9d1 	bl	8003470 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	2000025c 	.word	0x2000025c

080020d8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <ADC1_2_IRQHandler+0x14>)
 80020de:	f000 fb71 	bl	80027c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <ADC1_2_IRQHandler+0x18>)
 80020e4:	f000 fb6e 	bl	80027c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200001fc 	.word	0x200001fc
 80020f0:	2000022c 	.word	0x2000022c

080020f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020fc:	f001 fc88 	bl	8003a10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
	return 1;
 8002108:	2301      	movs	r3, #1
}
 800210a:	4618      	mov	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <_kill>:

int _kill(int pid, int sig)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800211c:	f002 fbe2 	bl	80048e4 <__errno>
 8002120:	4603      	mov	r3, r0
 8002122:	2216      	movs	r2, #22
 8002124:	601a      	str	r2, [r3, #0]
	return -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800212a:	4618      	mov	r0, r3
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <_exit>:

void _exit (int status)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800213a:	f04f 31ff 	mov.w	r1, #4294967295
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffe7 	bl	8002112 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002144:	e7fe      	b.n	8002144 <_exit+0x12>

08002146 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e00a      	b.n	800216e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002158:	f3af 8000 	nop.w
 800215c:	4601      	mov	r1, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	60ba      	str	r2, [r7, #8]
 8002164:	b2ca      	uxtb	r2, r1
 8002166:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	dbf0      	blt.n	8002158 <_read+0x12>
	}

return len;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e009      	b.n	80021a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	60ba      	str	r2, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fd48 	bl	8001c30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	dbf1      	blt.n	8002192 <_write+0x12>
	}
	return len;
 80021ae:	687b      	ldr	r3, [r7, #4]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_close>:

int _close(int file)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bc80      	pop	{r7}
 80021cc:	4770      	bx	lr

080021ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	605a      	str	r2, [r3, #4]
	return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <_isatty>:

int _isatty(int file)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
	return 1;
 80021f4:	2301      	movs	r3, #1
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr

08002200 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
	return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <_sbrk+0x5c>)
 8002222:	4b15      	ldr	r3, [pc, #84]	; (8002278 <_sbrk+0x60>)
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800222c:	4b13      	ldr	r3, [pc, #76]	; (800227c <_sbrk+0x64>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_sbrk+0x64>)
 8002236:	4a12      	ldr	r2, [pc, #72]	; (8002280 <_sbrk+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002248:	f002 fb4c 	bl	80048e4 <__errno>
 800224c:	4603      	mov	r3, r0
 800224e:	220c      	movs	r2, #12
 8002250:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	e009      	b.n	800226c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_sbrk+0x64>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	4a05      	ldr	r2, [pc, #20]	; (800227c <_sbrk+0x64>)
 8002268:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800226a:	68fb      	ldr	r3, [r7, #12]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20005000 	.word	0x20005000
 8002278:	00000400 	.word	0x00000400
 800227c:	20000b7c 	.word	0x20000b7c
 8002280:	20000bd8 	.word	0x20000bd8

08002284 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 8002296:	4a12      	ldr	r2, [pc, #72]	; (80022e0 <MX_USART2_UART_Init+0x50>)
 8002298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800229a:	4b10      	ldr	r3, [pc, #64]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 800229c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022b6:	220c      	movs	r2, #12
 80022b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_USART2_UART_Init+0x4c>)
 80022c8:	f002 f954 	bl	8004574 <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80022d2:	f7ff fe98 	bl	8002006 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000b80 	.word	0x20000b80
 80022e0:	40004400 	.word	0x40004400

080022e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b088      	sub	sp, #32
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <HAL_UART_MspInit+0x70>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d123      	bne.n	800234c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002304:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x74>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_UART_MspInit+0x74>)
 800230a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230e:	61d3      	str	r3, [r2, #28]
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_MspInit+0x74>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800231c:	4b0e      	ldr	r3, [pc, #56]	; (8002358 <HAL_UART_MspInit+0x74>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4a0d      	ldr	r2, [pc, #52]	; (8002358 <HAL_UART_MspInit+0x74>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	6193      	str	r3, [r2, #24]
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <HAL_UART_MspInit+0x74>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002334:	230c      	movs	r3, #12
 8002336:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2302      	movs	r3, #2
 800233e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 0310 	add.w	r3, r7, #16
 8002344:	4619      	mov	r1, r3
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <HAL_UART_MspInit+0x78>)
 8002348:	f001 f9c6 	bl	80036d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40004400 	.word	0x40004400
 8002358:	40021000 	.word	0x40021000
 800235c:	40010800 	.word	0x40010800

08002360 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002362:	490d      	ldr	r1, [pc, #52]	; (8002398 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002364:	4a0d      	ldr	r2, [pc, #52]	; (800239c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002368:	e002      	b.n	8002370 <LoopCopyDataInit>

0800236a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800236a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800236c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800236e:	3304      	adds	r3, #4

08002370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002374:	d3f9      	bcc.n	800236a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002378:	4c0a      	ldr	r4, [pc, #40]	; (80023a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800237a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800237c:	e001      	b.n	8002382 <LoopFillZerobss>

0800237e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800237e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002380:	3204      	adds	r2, #4

08002382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002384:	d3fb      	bcc.n	800237e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002386:	f7ff ff7d 	bl	8002284 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238a:	f002 fab1 	bl	80048f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800238e:	f7ff fcab 	bl	8001ce8 <main>
  bx lr
 8002392:	4770      	bx	lr
  ldr r0, =_sdata
 8002394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002398:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800239c:	08007ac4 	.word	0x08007ac4
  ldr r2, =_sbss
 80023a0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80023a4:	20000bd8 	.word	0x20000bd8

080023a8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023a8:	e7fe      	b.n	80023a8 <CAN1_RX1_IRQHandler>
	...

080023ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <HAL_Init+0x28>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_Init+0x28>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023bc:	2003      	movs	r0, #3
 80023be:	f000 ff5b 	bl	8003278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f000 f808 	bl	80023d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c8:	f7ff fe22 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40022000 	.word	0x40022000

080023d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_InitTick+0x54>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_InitTick+0x58>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80023f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 ff73 	bl	80032e2 <HAL_SYSTICK_Config>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e00e      	b.n	8002424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b0f      	cmp	r3, #15
 800240a:	d80a      	bhi.n	8002422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800240c:	2200      	movs	r2, #0
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	f000 ff3b 	bl	800328e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002418:	4a06      	ldr	r2, [pc, #24]	; (8002434 <HAL_InitTick+0x5c>)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e000      	b.n	8002424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	20000004 	.word	0x20000004
 8002430:	2000000c 	.word	0x2000000c
 8002434:	20000008 	.word	0x20000008

08002438 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_IncTick+0x1c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <HAL_IncTick+0x20>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_IncTick+0x20>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	2000000c 	.word	0x2000000c
 8002458:	20000bc4 	.word	0x20000bc4

0800245c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return uwTick;
 8002460:	4b02      	ldr	r3, [pc, #8]	; (800246c <HAL_GetTick+0x10>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	20000bc4 	.word	0x20000bc4

08002470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff fff0 	bl	800245c <HAL_GetTick>
 800247c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002488:	d005      	beq.n	8002496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <HAL_Delay+0x44>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4413      	add	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002496:	bf00      	nop
 8002498:	f7ff ffe0 	bl	800245c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	68fa      	ldr	r2, [r7, #12]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d8f7      	bhi.n	8002498 <HAL_Delay+0x28>
  {
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000000c 	.word	0x2000000c

080024b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e0be      	b.n	8002658 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fe fe3c 	bl	8001174 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 fb89 	bl	8002c14 <ADC_ConversionStop_Disable>
 8002502:	4603      	mov	r3, r0
 8002504:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250a:	f003 0310 	and.w	r3, r3, #16
 800250e:	2b00      	cmp	r3, #0
 8002510:	f040 8099 	bne.w	8002646 <HAL_ADC_Init+0x18e>
 8002514:	7dfb      	ldrb	r3, [r7, #23]
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 8095 	bne.w	8002646 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002524:	f023 0302 	bic.w	r3, r3, #2
 8002528:	f043 0202 	orr.w	r2, r3, #2
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002538:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7b1b      	ldrb	r3, [r3, #12]
 800253e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002540:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4313      	orrs	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002550:	d003      	beq.n	800255a <HAL_ADC_Init+0xa2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <HAL_ADC_Init+0xa8>
 800255a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255e:	e000      	b.n	8002562 <HAL_ADC_Init+0xaa>
 8002560:	2300      	movs	r3, #0
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7d1b      	ldrb	r3, [r3, #20]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d119      	bne.n	80025a4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	7b1b      	ldrb	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	3b01      	subs	r3, #1
 800257e:	035a      	lsls	r2, r3, #13
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	e00b      	b.n	80025a4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	f043 0220 	orr.w	r2, r3, #32
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_ADC_Init+0x1a8>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	68b9      	ldr	r1, [r7, #8]
 80025c8:	430b      	orrs	r3, r1
 80025ca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d4:	d003      	beq.n	80025de <HAL_ADC_Init+0x126>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d104      	bne.n	80025e8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	051b      	lsls	r3, r3, #20
 80025e6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b18      	ldr	r3, [pc, #96]	; (8002664 <HAL_ADC_Init+0x1ac>)
 8002604:	4013      	ands	r3, r2
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	429a      	cmp	r2, r3
 800260a:	d10b      	bne.n	8002624 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002622:	e018      	b.n	8002656 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002628:	f023 0312 	bic.w	r3, r3, #18
 800262c:	f043 0210 	orr.w	r2, r3, #16
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f043 0201 	orr.w	r2, r3, #1
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002644:	e007      	b.n	8002656 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	f043 0210 	orr.w	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002656:	7dfb      	ldrb	r3, [r7, #23]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	ffe1f7fd 	.word	0xffe1f7fd
 8002664:	ff1f0efe 	.word	0xff1f0efe

08002668 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_Start+0x1a>
 800267e:	2302      	movs	r3, #2
 8002680:	e098      	b.n	80027b4 <HAL_ADC_Start+0x14c>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fa68 	bl	8002b60 <ADC_Enable>
 8002690:	4603      	mov	r3, r0
 8002692:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 8087 	bne.w	80027aa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a4:	f023 0301 	bic.w	r3, r3, #1
 80026a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a41      	ldr	r2, [pc, #260]	; (80027bc <HAL_ADC_Start+0x154>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d105      	bne.n	80026c6 <HAL_ADC_Start+0x5e>
 80026ba:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_ADC_Start+0x158>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d115      	bne.n	80026f2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d026      	beq.n	800272e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026f0:	e01d      	b.n	800272e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2f      	ldr	r2, [pc, #188]	; (80027c0 <HAL_ADC_Start+0x158>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d004      	beq.n	8002712 <HAL_ADC_Start+0xaa>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <HAL_ADC_Start+0x154>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10d      	bne.n	800272e <HAL_ADC_Start+0xc6>
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <HAL_ADC_Start+0x158>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002726:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	f023 0206 	bic.w	r2, r3, #6
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c
 8002746:	e002      	b.n	800274e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f06f 0202 	mvn.w	r2, #2
 800275e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800276a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800276e:	d113      	bne.n	8002798 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_ADC_Start+0x154>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d105      	bne.n	8002786 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_ADC_Start+0x158>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	e00c      	b.n	80027b2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	e003      	b.n	80027b2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80027b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40012800 	.word	0x40012800
 80027c0:	40012400 	.word	0x40012400

080027c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d140      	bne.n	800285c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d139      	bne.n	800285c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800280a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800280e:	d11d      	bne.n	800284c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002814:	2b00      	cmp	r3, #0
 8002816:	d119      	bne.n	800284c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0220 	bic.w	r2, r2, #32
 8002826:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff f9dd 	bl	8001c0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f06f 0212 	mvn.w	r2, #18
 800285a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b80      	cmp	r3, #128	; 0x80
 8002868:	d14f      	bne.n	800290a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d148      	bne.n	800290a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800289a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800289e:	d012      	beq.n	80028c6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d125      	bne.n	80028fa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028bc:	d11d      	bne.n	80028fa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d119      	bne.n	80028fa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fb94 	bl	8003028 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 020c 	mvn.w	r2, #12
 8002908:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d114      	bne.n	8002942 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10d      	bne.n	8002942 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f809 	bl	800294a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0201 	mvn.w	r2, #1
 8002940:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr
	...

08002970 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_ADC_ConfigChannel+0x20>
 800298c:	2302      	movs	r3, #2
 800298e:	e0dc      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x1da>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b06      	cmp	r3, #6
 800299e:	d81c      	bhi.n	80029da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3b05      	subs	r3, #5
 80029b2:	221f      	movs	r2, #31
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	4019      	ands	r1, r3
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	3b05      	subs	r3, #5
 80029cc:	fa00 f203 	lsl.w	r2, r0, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	635a      	str	r2, [r3, #52]	; 0x34
 80029d8:	e03c      	b.n	8002a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d81c      	bhi.n	8002a1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	3b23      	subs	r3, #35	; 0x23
 80029f4:	221f      	movs	r2, #31
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	43db      	mvns	r3, r3
 80029fc:	4019      	ands	r1, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b23      	subs	r3, #35	; 0x23
 8002a0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1a:	e01b      	b.n	8002a54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3b41      	subs	r3, #65	; 0x41
 8002a2e:	221f      	movs	r2, #31
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	4019      	ands	r1, r3
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	3b41      	subs	r3, #65	; 0x41
 8002a48:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b09      	cmp	r3, #9
 8002a5a:	d91c      	bls.n	8002a96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68d9      	ldr	r1, [r3, #12]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b1e      	subs	r3, #30
 8002a6e:	2207      	movs	r2, #7
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	4019      	ands	r1, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6898      	ldr	r0, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	3b1e      	subs	r3, #30
 8002a88:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	e019      	b.n	8002aca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6919      	ldr	r1, [r3, #16]
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	4413      	add	r3, r2
 8002aa6:	2207      	movs	r2, #7
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	4019      	ands	r1, r3
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	6898      	ldr	r0, [r3, #8]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	fa00 f203 	lsl.w	r2, r0, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d003      	beq.n	8002ada <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ad6:	2b11      	cmp	r3, #17
 8002ad8:	d132      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_ADC_ConfigChannel+0x1e4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d125      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d126      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d11a      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0a:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a13      	ldr	r2, [pc, #76]	; (8002b5c <HAL_ADC_ConfigChannel+0x1ec>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	0c9a      	lsrs	r2, r3, #18
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x1b2>
 8002b2e:	e007      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b34:	f043 0220 	orr.w	r2, r3, #32
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bc80      	pop	{r7}
 8002b52:	4770      	bx	lr
 8002b54:	40012400 	.word	0x40012400
 8002b58:	20000004 	.word	0x20000004
 8002b5c:	431bde83 	.word	0x431bde83

08002b60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d040      	beq.n	8002c00 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	; (8002c0c <ADC_Enable+0xac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1f      	ldr	r2, [pc, #124]	; (8002c10 <ADC_Enable+0xb0>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	0c9b      	lsrs	r3, r3, #18
 8002b9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b9c:	e002      	b.n	8002ba4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f9      	bne.n	8002b9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002baa:	f7ff fc57 	bl	800245c <HAL_GetTick>
 8002bae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bb0:	e01f      	b.n	8002bf2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bb2:	f7ff fc53 	bl	800245c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d918      	bls.n	8002bf2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d011      	beq.n	8002bf2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e007      	b.n	8002c02 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d1d8      	bne.n	8002bb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000004 	.word	0x20000004
 8002c10:	431bde83 	.word	0x431bde83

08002c14 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d12e      	bne.n	8002c8c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c3e:	f7ff fc0d 	bl	800245c <HAL_GetTick>
 8002c42:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c44:	e01b      	b.n	8002c7e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c46:	f7ff fc09 	bl	800245c <HAL_GetTick>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d914      	bls.n	8002c7e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d10d      	bne.n	8002c7e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	f043 0210 	orr.w	r2, r3, #16
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e007      	b.n	8002c8e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d0dc      	beq.n	8002c46 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d127      	bne.n	8002d00 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cc6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cca:	d115      	bne.n	8002cf8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d111      	bne.n	8002cf8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f7fe ff87 	bl	8001c0c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002cfe:	e004      	b.n	8002d0a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	4798      	blx	r3
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f7fe ff63 	bl	8001bec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d26:	bf00      	nop
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	f043 0204 	orr.w	r2, r3, #4
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff fe01 	bl	800295c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADCEx_Calibration_Start+0x1e>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e095      	b.n	8002eae <HAL_ADCEx_Calibration_Start+0x14a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff42 	bl	8002c14 <ADC_ConversionStop_Disable>
 8002d90:	4603      	mov	r3, r0
 8002d92:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 8084 	bne.w	8002ea4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002da4:	f023 0302 	bic.w	r3, r3, #2
 8002da8:	f043 0202 	orr.w	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002db0:	4b41      	ldr	r3, [pc, #260]	; (8002eb8 <HAL_ADCEx_Calibration_Start+0x154>)
 8002db2:	681c      	ldr	r4, [r3, #0]
 8002db4:	2002      	movs	r0, #2
 8002db6:	f001 fb1d 	bl	80043f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002dc0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002dc2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002dc4:	e002      	b.n	8002dcc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f9      	bne.n	8002dc6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fec4 	bl	8002b60 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0208 	orr.w	r2, r2, #8
 8002de6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002de8:	f7ff fb38 	bl	800245c <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dee:	e01b      	b.n	8002e28 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002df0:	f7ff fb34 	bl	800245c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b0a      	cmp	r3, #10
 8002dfc:	d914      	bls.n	8002e28 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e10:	f023 0312 	bic.w	r3, r3, #18
 8002e14:	f043 0210 	orr.w	r2, r3, #16
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e042      	b.n	8002eae <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 0308 	and.w	r3, r3, #8
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1dc      	bne.n	8002df0 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0204 	orr.w	r2, r2, #4
 8002e44:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e46:	f7ff fb09 	bl	800245c <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e4c:	e01b      	b.n	8002e86 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e4e:	f7ff fb05 	bl	800245c <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b0a      	cmp	r3, #10
 8002e5a:	d914      	bls.n	8002e86 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	f023 0312 	bic.w	r3, r3, #18
 8002e72:	f043 0210 	orr.w	r2, r3, #16
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e013      	b.n	8002eae <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1dc      	bne.n	8002e4e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e98:	f023 0303 	bic.w	r3, r3, #3
 8002e9c:	f043 0201 	orr.w	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	371c      	adds	r7, #28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd90      	pop	{r4, r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000004 	.word	0x20000004

08002ebc <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b092      	sub	sp, #72	; 0x48
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	2230      	movs	r2, #48	; 0x30
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f001 fd2e 	bl	8004938 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e08f      	b.n	800300a <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ef2:	4b48      	ldr	r3, [pc, #288]	; (8003014 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002ef4:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002efe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f02:	d00b      	beq.n	8002f1c <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e076      	b.n	800300a <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff fe1f 	bl	8002b60 <ADC_Enable>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 8002f28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d107      	bne.n	8002f40 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fe13 	bl	8002b60 <ADC_Enable>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002f40:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d15a      	bne.n	8002ffe <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f4c:	4b32      	ldr	r3, [pc, #200]	; (8003018 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f6e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	4a24      	ldr	r2, [pc, #144]	; (800301c <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4a23      	ldr	r2, [pc, #140]	; (8003020 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f06f 0202 	mvn.w	r2, #2
 8002fa4:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fb4:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a18      	ldr	r0, [r3, #32]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	334c      	adds	r3, #76	; 0x4c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f000 f9f3 	bl	80033b0 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002fd4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002fd8:	d108      	bne.n	8002fec <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	e00c      	b.n	8003006 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	e003      	b.n	8003006 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003006:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800300a:	4618      	mov	r0, r3
 800300c:	3748      	adds	r7, #72	; 0x48
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40012800 	.word	0x40012800
 8003018:	ffeffcfe 	.word	0xffeffcfe
 800301c:	08002c97 	.word	0x08002c97
 8003020:	08002d13 	.word	0x08002d13
 8003024:	08002d2f 	.word	0x08002d2f

08003028 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr
	...

0800303c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b090      	sub	sp, #64	; 0x40
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	2230      	movs	r2, #48	; 0x30
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f001 fc6f 	bl	8004938 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8003064:	2302      	movs	r3, #2
 8003066:	e032      	b.n	80030ce <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8003072:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b01      	cmp	r3, #1
 8003080:	d016      	beq.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 800308a:	2b01      	cmp	r3, #1
 800308c:	d010      	beq.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8003092:	4a12      	ldr	r2, [pc, #72]	; (80030dc <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10b      	bne.n	80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	e008      	b.n	80030c2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80030ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 80030ce:	4618      	mov	r0, r3
 80030d0:	3740      	adds	r7, #64	; 0x40
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40012800 	.word	0x40012800
 80030dc:	40012400 	.word	0x40012400

080030e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800310c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003112:	4a04      	ldr	r2, [pc, #16]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	60d3      	str	r3, [r2, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__NVIC_GetPriorityGrouping+0x18>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 0307 	and.w	r3, r3, #7
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	2b00      	cmp	r3, #0
 8003154:	db0b      	blt.n	800316e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	f003 021f 	and.w	r2, r3, #31
 800315c:	4906      	ldr	r1, [pc, #24]	; (8003178 <__NVIC_EnableIRQ+0x34>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2001      	movs	r0, #1
 8003166:	fa00 f202 	lsl.w	r2, r0, r2
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	bc80      	pop	{r7}
 8003176:	4770      	bx	lr
 8003178:	e000e100 	.word	0xe000e100

0800317c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318c:	2b00      	cmp	r3, #0
 800318e:	db0a      	blt.n	80031a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	490c      	ldr	r1, [pc, #48]	; (80031c8 <__NVIC_SetPriority+0x4c>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	440b      	add	r3, r1
 80031a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a4:	e00a      	b.n	80031bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4908      	ldr	r1, [pc, #32]	; (80031cc <__NVIC_SetPriority+0x50>)
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3b04      	subs	r3, #4
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	440b      	add	r3, r1
 80031ba:	761a      	strb	r2, [r3, #24]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000e100 	.word	0xe000e100
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f1c3 0307 	rsb	r3, r3, #7
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	bf28      	it	cs
 80031ee:	2304      	movcs	r3, #4
 80031f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d902      	bls.n	8003200 <NVIC_EncodePriority+0x30>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3b03      	subs	r3, #3
 80031fe:	e000      	b.n	8003202 <NVIC_EncodePriority+0x32>
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	f04f 32ff 	mov.w	r2, #4294967295
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	401a      	ands	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003218:	f04f 31ff 	mov.w	r1, #4294967295
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43d9      	mvns	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	4313      	orrs	r3, r2
         );
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3b01      	subs	r3, #1
 8003240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003244:	d301      	bcc.n	800324a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003246:	2301      	movs	r3, #1
 8003248:	e00f      	b.n	800326a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <SysTick_Config+0x40>)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3b01      	subs	r3, #1
 8003250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003252:	210f      	movs	r1, #15
 8003254:	f04f 30ff 	mov.w	r0, #4294967295
 8003258:	f7ff ff90 	bl	800317c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <SysTick_Config+0x40>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003262:	4b04      	ldr	r3, [pc, #16]	; (8003274 <SysTick_Config+0x40>)
 8003264:	2207      	movs	r2, #7
 8003266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	e000e010 	.word	0xe000e010

08003278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f7ff ff2d 	bl	80030e0 <__NVIC_SetPriorityGrouping>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	4603      	mov	r3, r0
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800329c:	2300      	movs	r3, #0
 800329e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a0:	f7ff ff42 	bl	8003128 <__NVIC_GetPriorityGrouping>
 80032a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	6978      	ldr	r0, [r7, #20]
 80032ac:	f7ff ff90 	bl	80031d0 <NVIC_EncodePriority>
 80032b0:	4602      	mov	r2, r0
 80032b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b6:	4611      	mov	r1, r2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff ff5f 	bl	800317c <__NVIC_SetPriority>
}
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b082      	sub	sp, #8
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	4603      	mov	r3, r0
 80032ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff35 	bl	8003144 <__NVIC_EnableIRQ>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ffa2 	bl	8003234 <SysTick_Config>
 80032f0:	4603      	mov	r3, r0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e043      	b.n	800339a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	4b22      	ldr	r3, [pc, #136]	; (80033a4 <HAL_DMA_Init+0xa8>)
 800331a:	4413      	add	r3, r2
 800331c:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_DMA_Init+0xac>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	009a      	lsls	r2, r3, #2
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1f      	ldr	r2, [pc, #124]	; (80033ac <HAL_DMA_Init+0xb0>)
 800332e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003346:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800334a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr
 80033a4:	bffdfff8 	.word	0xbffdfff8
 80033a8:	cccccccd 	.word	0xcccccccd
 80033ac:	40020000 	.word	0x40020000

080033b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_DMA_Start_IT+0x20>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e04a      	b.n	8003466 <HAL_DMA_Start_IT+0xb6>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d13a      	bne.n	8003458 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2202      	movs	r2, #2
 80033e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f938 	bl	800367c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 020e 	orr.w	r2, r2, #14
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e00f      	b.n	8003446 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0204 	bic.w	r2, r2, #4
 8003434:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f042 020a 	orr.w	r2, r2, #10
 8003444:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	e005      	b.n	8003464 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003460:	2302      	movs	r3, #2
 8003462:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003464:	7dfb      	ldrb	r3, [r7, #23]
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	2204      	movs	r2, #4
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d04f      	beq.n	8003538 <HAL_DMA_IRQHandler+0xc8>
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04a      	beq.n	8003538 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0204 	bic.w	r2, r2, #4
 80034be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a66      	ldr	r2, [pc, #408]	; (8003660 <HAL_DMA_IRQHandler+0x1f0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d029      	beq.n	800351e <HAL_DMA_IRQHandler+0xae>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a65      	ldr	r2, [pc, #404]	; (8003664 <HAL_DMA_IRQHandler+0x1f4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d022      	beq.n	800351a <HAL_DMA_IRQHandler+0xaa>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a63      	ldr	r2, [pc, #396]	; (8003668 <HAL_DMA_IRQHandler+0x1f8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d01a      	beq.n	8003514 <HAL_DMA_IRQHandler+0xa4>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a62      	ldr	r2, [pc, #392]	; (800366c <HAL_DMA_IRQHandler+0x1fc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d012      	beq.n	800350e <HAL_DMA_IRQHandler+0x9e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a60      	ldr	r2, [pc, #384]	; (8003670 <HAL_DMA_IRQHandler+0x200>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00a      	beq.n	8003508 <HAL_DMA_IRQHandler+0x98>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a5f      	ldr	r2, [pc, #380]	; (8003674 <HAL_DMA_IRQHandler+0x204>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d102      	bne.n	8003502 <HAL_DMA_IRQHandler+0x92>
 80034fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003500:	e00e      	b.n	8003520 <HAL_DMA_IRQHandler+0xb0>
 8003502:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003506:	e00b      	b.n	8003520 <HAL_DMA_IRQHandler+0xb0>
 8003508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800350c:	e008      	b.n	8003520 <HAL_DMA_IRQHandler+0xb0>
 800350e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003512:	e005      	b.n	8003520 <HAL_DMA_IRQHandler+0xb0>
 8003514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003518:	e002      	b.n	8003520 <HAL_DMA_IRQHandler+0xb0>
 800351a:	2340      	movs	r3, #64	; 0x40
 800351c:	e000      	b.n	8003520 <HAL_DMA_IRQHandler+0xb0>
 800351e:	2304      	movs	r3, #4
 8003520:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_DMA_IRQHandler+0x208>)
 8003522:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8094 	beq.w	8003656 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003536:	e08e      	b.n	8003656 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353c:	2202      	movs	r2, #2
 800353e:	409a      	lsls	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d056      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x186>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d051      	beq.n	80035f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d10b      	bne.n	8003578 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 020a 	bic.w	r2, r2, #10
 800356e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a38      	ldr	r2, [pc, #224]	; (8003660 <HAL_DMA_IRQHandler+0x1f0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d029      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x166>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a37      	ldr	r2, [pc, #220]	; (8003664 <HAL_DMA_IRQHandler+0x1f4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d022      	beq.n	80035d2 <HAL_DMA_IRQHandler+0x162>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a35      	ldr	r2, [pc, #212]	; (8003668 <HAL_DMA_IRQHandler+0x1f8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01a      	beq.n	80035cc <HAL_DMA_IRQHandler+0x15c>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a34      	ldr	r2, [pc, #208]	; (800366c <HAL_DMA_IRQHandler+0x1fc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d012      	beq.n	80035c6 <HAL_DMA_IRQHandler+0x156>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a32      	ldr	r2, [pc, #200]	; (8003670 <HAL_DMA_IRQHandler+0x200>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00a      	beq.n	80035c0 <HAL_DMA_IRQHandler+0x150>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a31      	ldr	r2, [pc, #196]	; (8003674 <HAL_DMA_IRQHandler+0x204>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d102      	bne.n	80035ba <HAL_DMA_IRQHandler+0x14a>
 80035b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035b8:	e00e      	b.n	80035d8 <HAL_DMA_IRQHandler+0x168>
 80035ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035be:	e00b      	b.n	80035d8 <HAL_DMA_IRQHandler+0x168>
 80035c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035c4:	e008      	b.n	80035d8 <HAL_DMA_IRQHandler+0x168>
 80035c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ca:	e005      	b.n	80035d8 <HAL_DMA_IRQHandler+0x168>
 80035cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d0:	e002      	b.n	80035d8 <HAL_DMA_IRQHandler+0x168>
 80035d2:	2320      	movs	r3, #32
 80035d4:	e000      	b.n	80035d8 <HAL_DMA_IRQHandler+0x168>
 80035d6:	2302      	movs	r3, #2
 80035d8:	4a27      	ldr	r2, [pc, #156]	; (8003678 <HAL_DMA_IRQHandler+0x208>)
 80035da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d034      	beq.n	8003656 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80035f4:	e02f      	b.n	8003656 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2208      	movs	r2, #8
 80035fc:	409a      	lsls	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d028      	beq.n	8003658 <HAL_DMA_IRQHandler+0x1e8>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d023      	beq.n	8003658 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 020e 	bic.w	r2, r2, #14
 800361e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	2101      	movs	r1, #1
 800362a:	fa01 f202 	lsl.w	r2, r1, r2
 800362e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	d004      	beq.n	8003658 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	4798      	blx	r3
    }
  }
  return;
 8003656:	bf00      	nop
 8003658:	bf00      	nop
}
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40020008 	.word	0x40020008
 8003664:	4002001c 	.word	0x4002001c
 8003668:	40020030 	.word	0x40020030
 800366c:	40020044 	.word	0x40020044
 8003670:	40020058 	.word	0x40020058
 8003674:	4002006c 	.word	0x4002006c
 8003678:	40020000 	.word	0x40020000

0800367c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003692:	2101      	movs	r1, #1
 8003694:	fa01 f202 	lsl.w	r2, r1, r2
 8003698:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b10      	cmp	r3, #16
 80036a8:	d108      	bne.n	80036bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036ba:	e007      	b.n	80036cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	60da      	str	r2, [r3, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bc80      	pop	{r7}
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b08b      	sub	sp, #44	; 0x2c
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ea:	e169      	b.n	80039c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036ec:	2201      	movs	r2, #1
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	429a      	cmp	r2, r3
 8003706:	f040 8158 	bne.w	80039ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4a9a      	ldr	r2, [pc, #616]	; (8003978 <HAL_GPIO_Init+0x2a0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d05e      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 8003714:	4a98      	ldr	r2, [pc, #608]	; (8003978 <HAL_GPIO_Init+0x2a0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d875      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 800371a:	4a98      	ldr	r2, [pc, #608]	; (800397c <HAL_GPIO_Init+0x2a4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d058      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 8003720:	4a96      	ldr	r2, [pc, #600]	; (800397c <HAL_GPIO_Init+0x2a4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d86f      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 8003726:	4a96      	ldr	r2, [pc, #600]	; (8003980 <HAL_GPIO_Init+0x2a8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d052      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 800372c:	4a94      	ldr	r2, [pc, #592]	; (8003980 <HAL_GPIO_Init+0x2a8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d869      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 8003732:	4a94      	ldr	r2, [pc, #592]	; (8003984 <HAL_GPIO_Init+0x2ac>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d04c      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 8003738:	4a92      	ldr	r2, [pc, #584]	; (8003984 <HAL_GPIO_Init+0x2ac>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d863      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 800373e:	4a92      	ldr	r2, [pc, #584]	; (8003988 <HAL_GPIO_Init+0x2b0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d046      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 8003744:	4a90      	ldr	r2, [pc, #576]	; (8003988 <HAL_GPIO_Init+0x2b0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d85d      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 800374a:	2b12      	cmp	r3, #18
 800374c:	d82a      	bhi.n	80037a4 <HAL_GPIO_Init+0xcc>
 800374e:	2b12      	cmp	r3, #18
 8003750:	d859      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 8003752:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <HAL_GPIO_Init+0x80>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	080037d3 	.word	0x080037d3
 800375c:	080037ad 	.word	0x080037ad
 8003760:	080037bf 	.word	0x080037bf
 8003764:	08003801 	.word	0x08003801
 8003768:	08003807 	.word	0x08003807
 800376c:	08003807 	.word	0x08003807
 8003770:	08003807 	.word	0x08003807
 8003774:	08003807 	.word	0x08003807
 8003778:	08003807 	.word	0x08003807
 800377c:	08003807 	.word	0x08003807
 8003780:	08003807 	.word	0x08003807
 8003784:	08003807 	.word	0x08003807
 8003788:	08003807 	.word	0x08003807
 800378c:	08003807 	.word	0x08003807
 8003790:	08003807 	.word	0x08003807
 8003794:	08003807 	.word	0x08003807
 8003798:	08003807 	.word	0x08003807
 800379c:	080037b5 	.word	0x080037b5
 80037a0:	080037c9 	.word	0x080037c9
 80037a4:	4a79      	ldr	r2, [pc, #484]	; (800398c <HAL_GPIO_Init+0x2b4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037aa:	e02c      	b.n	8003806 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	623b      	str	r3, [r7, #32]
          break;
 80037b2:	e029      	b.n	8003808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	3304      	adds	r3, #4
 80037ba:	623b      	str	r3, [r7, #32]
          break;
 80037bc:	e024      	b.n	8003808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	3308      	adds	r3, #8
 80037c4:	623b      	str	r3, [r7, #32]
          break;
 80037c6:	e01f      	b.n	8003808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	330c      	adds	r3, #12
 80037ce:	623b      	str	r3, [r7, #32]
          break;
 80037d0:	e01a      	b.n	8003808 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037da:	2304      	movs	r3, #4
 80037dc:	623b      	str	r3, [r7, #32]
          break;
 80037de:	e013      	b.n	8003808 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037e8:	2308      	movs	r3, #8
 80037ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	611a      	str	r2, [r3, #16]
          break;
 80037f2:	e009      	b.n	8003808 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037f4:	2308      	movs	r3, #8
 80037f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	615a      	str	r2, [r3, #20]
          break;
 80037fe:	e003      	b.n	8003808 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003800:	2300      	movs	r3, #0
 8003802:	623b      	str	r3, [r7, #32]
          break;
 8003804:	e000      	b.n	8003808 <HAL_GPIO_Init+0x130>
          break;
 8003806:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2bff      	cmp	r3, #255	; 0xff
 800380c:	d801      	bhi.n	8003812 <HAL_GPIO_Init+0x13a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	e001      	b.n	8003816 <HAL_GPIO_Init+0x13e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2bff      	cmp	r3, #255	; 0xff
 800381c:	d802      	bhi.n	8003824 <HAL_GPIO_Init+0x14c>
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	e002      	b.n	800382a <HAL_GPIO_Init+0x152>
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	3b08      	subs	r3, #8
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	210f      	movs	r1, #15
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	6a39      	ldr	r1, [r7, #32]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80b1 	beq.w	80039ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003858:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <HAL_GPIO_Init+0x2b8>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	4a4c      	ldr	r2, [pc, #304]	; (8003990 <HAL_GPIO_Init+0x2b8>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6193      	str	r3, [r2, #24]
 8003864:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <HAL_GPIO_Init+0x2b8>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003870:	4a48      	ldr	r2, [pc, #288]	; (8003994 <HAL_GPIO_Init+0x2bc>)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	3302      	adds	r3, #2
 8003878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	220f      	movs	r2, #15
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <HAL_GPIO_Init+0x2c0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_GPIO_Init+0x1ec>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3f      	ldr	r2, [pc, #252]	; (800399c <HAL_GPIO_Init+0x2c4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00d      	beq.n	80038c0 <HAL_GPIO_Init+0x1e8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a3e      	ldr	r2, [pc, #248]	; (80039a0 <HAL_GPIO_Init+0x2c8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <HAL_GPIO_Init+0x1e4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3d      	ldr	r2, [pc, #244]	; (80039a4 <HAL_GPIO_Init+0x2cc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_GPIO_Init+0x1e0>
 80038b4:	2303      	movs	r3, #3
 80038b6:	e006      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038b8:	2304      	movs	r3, #4
 80038ba:	e004      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038bc:	2302      	movs	r3, #2
 80038be:	e002      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038c4:	2300      	movs	r3, #0
 80038c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c8:	f002 0203 	and.w	r2, r2, #3
 80038cc:	0092      	lsls	r2, r2, #2
 80038ce:	4093      	lsls	r3, r2
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038d6:	492f      	ldr	r1, [pc, #188]	; (8003994 <HAL_GPIO_Init+0x2bc>)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	492c      	ldr	r1, [pc, #176]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	600b      	str	r3, [r1, #0]
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	43db      	mvns	r3, r3
 8003906:	4928      	ldr	r1, [pc, #160]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003908:	4013      	ands	r3, r2
 800390a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d006      	beq.n	8003926 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	4922      	ldr	r1, [pc, #136]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	e006      	b.n	8003934 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	43db      	mvns	r3, r3
 800392e:	491e      	ldr	r1, [pc, #120]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003930:	4013      	ands	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d006      	beq.n	800394e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	4918      	ldr	r1, [pc, #96]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	608b      	str	r3, [r1, #8]
 800394c:	e006      	b.n	800395c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	43db      	mvns	r3, r3
 8003956:	4914      	ldr	r1, [pc, #80]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003958:	4013      	ands	r3, r2
 800395a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d021      	beq.n	80039ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	60cb      	str	r3, [r1, #12]
 8003974:	e021      	b.n	80039ba <HAL_GPIO_Init+0x2e2>
 8003976:	bf00      	nop
 8003978:	10320000 	.word	0x10320000
 800397c:	10310000 	.word	0x10310000
 8003980:	10220000 	.word	0x10220000
 8003984:	10210000 	.word	0x10210000
 8003988:	10120000 	.word	0x10120000
 800398c:	10110000 	.word	0x10110000
 8003990:	40021000 	.word	0x40021000
 8003994:	40010000 	.word	0x40010000
 8003998:	40010800 	.word	0x40010800
 800399c:	40010c00 	.word	0x40010c00
 80039a0:	40011000 	.word	0x40011000
 80039a4:	40011400 	.word	0x40011400
 80039a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_GPIO_Init+0x304>)
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	4909      	ldr	r1, [pc, #36]	; (80039dc <HAL_GPIO_Init+0x304>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	3301      	adds	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f47f ae8e 	bne.w	80036ec <HAL_GPIO_Init+0x14>
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	372c      	adds	r7, #44	; 0x2c
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e001      	b.n	8003a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	4603      	mov	r3, r0
 8003a18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a1a:	4b08      	ldr	r3, [pc, #32]	; (8003a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a1c:	695a      	ldr	r2, [r3, #20]
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d006      	beq.n	8003a34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a26:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f806 	bl	8003a40 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40010400 	.word	0x40010400

08003a40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e272      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f000 8087 	beq.w	8003b82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a74:	4b92      	ldr	r3, [pc, #584]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 030c 	and.w	r3, r3, #12
 8003a7c:	2b04      	cmp	r3, #4
 8003a7e:	d00c      	beq.n	8003a9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a80:	4b8f      	ldr	r3, [pc, #572]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d112      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x5e>
 8003a8c:	4b8c      	ldr	r3, [pc, #560]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d10b      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9a:	4b89      	ldr	r3, [pc, #548]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d06c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x12c>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d168      	bne.n	8003b80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e24c      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x76>
 8003abc:	4b80      	ldr	r3, [pc, #512]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a7f      	ldr	r2, [pc, #508]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e02e      	b.n	8003b28 <HAL_RCC_OscConfig+0xd4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x98>
 8003ad2:	4b7b      	ldr	r3, [pc, #492]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7a      	ldr	r2, [pc, #488]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	4b78      	ldr	r3, [pc, #480]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a77      	ldr	r2, [pc, #476]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003ae4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e01d      	b.n	8003b28 <HAL_RCC_OscConfig+0xd4>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0xbc>
 8003af6:	4b72      	ldr	r3, [pc, #456]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a71      	ldr	r2, [pc, #452]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b6f      	ldr	r3, [pc, #444]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6e      	ldr	r2, [pc, #440]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0xd4>
 8003b10:	4b6b      	ldr	r3, [pc, #428]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6a      	ldr	r2, [pc, #424]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b68      	ldr	r3, [pc, #416]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a67      	ldr	r2, [pc, #412]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fe fc94 	bl	800245c <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fe fc90 	bl	800245c <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e200      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b5d      	ldr	r3, [pc, #372]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0xe4>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fe fc80 	bl	800245c <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fe fc7c 	bl	800245c <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e1ec      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0x10c>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d063      	beq.n	8003c56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8e:	4b4c      	ldr	r3, [pc, #304]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b9a:	4b49      	ldr	r3, [pc, #292]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d11c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x18c>
 8003ba6:	4b46      	ldr	r3, [pc, #280]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d116      	bne.n	8003be0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb2:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_RCC_OscConfig+0x176>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e1c0      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bca:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4939      	ldr	r1, [pc, #228]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	e03a      	b.n	8003c56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be8:	4b36      	ldr	r3, [pc, #216]	; (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7fe fc35 	bl	800245c <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf6:	f7fe fc31 	bl	800245c <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e1a1      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c14:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4927      	ldr	r1, [pc, #156]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]
 8003c28:	e015      	b.n	8003c56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2a:	4b26      	ldr	r3, [pc, #152]	; (8003cc4 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c30:	f7fe fc14 	bl	800245c <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c38:	f7fe fc10 	bl	800245c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e180      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03a      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d019      	beq.n	8003c9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6a:	4b17      	ldr	r3, [pc, #92]	; (8003cc8 <HAL_RCC_OscConfig+0x274>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c70:	f7fe fbf4 	bl	800245c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c78:	f7fe fbf0 	bl	800245c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e160      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c96:	2001      	movs	r0, #1
 8003c98:	f000 fad8 	bl	800424c <RCC_Delay>
 8003c9c:	e01c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_RCC_OscConfig+0x274>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca4:	f7fe fbda 	bl	800245c <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003caa:	e00f      	b.n	8003ccc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cac:	f7fe fbd6 	bl	800245c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d908      	bls.n	8003ccc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e146      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	42420000 	.word	0x42420000
 8003cc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ccc:	4b92      	ldr	r3, [pc, #584]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e9      	bne.n	8003cac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a6 	beq.w	8003e32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cea:	4b8b      	ldr	r3, [pc, #556]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10d      	bne.n	8003d12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	4b88      	ldr	r3, [pc, #544]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	4a87      	ldr	r2, [pc, #540]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d00:	61d3      	str	r3, [r2, #28]
 8003d02:	4b85      	ldr	r3, [pc, #532]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x4c8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d118      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1e:	4b7f      	ldr	r3, [pc, #508]	; (8003f1c <HAL_RCC_OscConfig+0x4c8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a7e      	ldr	r2, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x4c8>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2a:	f7fe fb97 	bl	800245c <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d32:	f7fe fb93 	bl	800245c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b64      	cmp	r3, #100	; 0x64
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e103      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d44:	4b75      	ldr	r3, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x4c8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d106      	bne.n	8003d66 <HAL_RCC_OscConfig+0x312>
 8003d58:	4b6f      	ldr	r3, [pc, #444]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	4a6e      	ldr	r2, [pc, #440]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6213      	str	r3, [r2, #32]
 8003d64:	e02d      	b.n	8003dc2 <HAL_RCC_OscConfig+0x36e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0x334>
 8003d6e:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	4a69      	ldr	r2, [pc, #420]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	6213      	str	r3, [r2, #32]
 8003d7a:	4b67      	ldr	r3, [pc, #412]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a66      	ldr	r2, [pc, #408]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f023 0304 	bic.w	r3, r3, #4
 8003d84:	6213      	str	r3, [r2, #32]
 8003d86:	e01c      	b.n	8003dc2 <HAL_RCC_OscConfig+0x36e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d10c      	bne.n	8003daa <HAL_RCC_OscConfig+0x356>
 8003d90:	4b61      	ldr	r3, [pc, #388]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4a60      	ldr	r2, [pc, #384]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	6213      	str	r3, [r2, #32]
 8003d9c:	4b5e      	ldr	r3, [pc, #376]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4a5d      	ldr	r2, [pc, #372]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	6213      	str	r3, [r2, #32]
 8003da8:	e00b      	b.n	8003dc2 <HAL_RCC_OscConfig+0x36e>
 8003daa:	4b5b      	ldr	r3, [pc, #364]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	4a5a      	ldr	r2, [pc, #360]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6213      	str	r3, [r2, #32]
 8003db6:	4b58      	ldr	r3, [pc, #352]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	4a57      	ldr	r2, [pc, #348]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003dbc:	f023 0304 	bic.w	r3, r3, #4
 8003dc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d015      	beq.n	8003df6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dca:	f7fe fb47 	bl	800245c <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fe fb43 	bl	800245c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0b1      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ee      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x37e>
 8003df4:	e014      	b.n	8003e20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fe fb31 	bl	800245c <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfc:	e00a      	b.n	8003e14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfe:	f7fe fb2d 	bl	800245c <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e09b      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e14:	4b40      	ldr	r3, [pc, #256]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ee      	bne.n	8003dfe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d105      	bne.n	8003e32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e26:	4b3c      	ldr	r3, [pc, #240]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4a3b      	ldr	r2, [pc, #236]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 8087 	beq.w	8003f4a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 030c 	and.w	r3, r3, #12
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d061      	beq.n	8003f0c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d146      	bne.n	8003ede <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e50:	4b33      	ldr	r3, [pc, #204]	; (8003f20 <HAL_RCC_OscConfig+0x4cc>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fe fb01 	bl	800245c <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5e:	f7fe fafd 	bl	800245c <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e06d      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e70:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1f0      	bne.n	8003e5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e84:	d108      	bne.n	8003e98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	4921      	ldr	r1, [pc, #132]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e98:	4b1f      	ldr	r3, [pc, #124]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a19      	ldr	r1, [r3, #32]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	491b      	ldr	r1, [pc, #108]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eb0:	4b1b      	ldr	r3, [pc, #108]	; (8003f20 <HAL_RCC_OscConfig+0x4cc>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fe fad1 	bl	800245c <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fe facd 	bl	800245c <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e03d      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed0:	4b11      	ldr	r3, [pc, #68]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0x46a>
 8003edc:	e035      	b.n	8003f4a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <HAL_RCC_OscConfig+0x4cc>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe faba 	bl	800245c <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eec:	f7fe fab6 	bl	800245c <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e026      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003efe:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <HAL_RCC_OscConfig+0x4c4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x498>
 8003f0a:	e01e      	b.n	8003f4a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d107      	bne.n	8003f24 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e019      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40007000 	.word	0x40007000
 8003f20:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_OscConfig+0x500>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d106      	bne.n	8003f46 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3718      	adds	r7, #24
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40021000 	.word	0x40021000

08003f58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0d0      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b6a      	ldr	r3, [pc, #424]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d910      	bls.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b67      	ldr	r3, [pc, #412]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 0207 	bic.w	r2, r3, #7
 8003f82:	4965      	ldr	r1, [pc, #404]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0b8      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d020      	beq.n	8003fea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fb4:	4b59      	ldr	r3, [pc, #356]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a58      	ldr	r2, [pc, #352]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003fbe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0308 	and.w	r3, r3, #8
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fcc:	4b53      	ldr	r3, [pc, #332]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a52      	ldr	r2, [pc, #328]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fd2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003fd6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd8:	4b50      	ldr	r3, [pc, #320]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	494d      	ldr	r1, [pc, #308]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d040      	beq.n	8004078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d107      	bne.n	800400e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d115      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07f      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e073      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	4b3d      	ldr	r3, [pc, #244]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06b      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b39      	ldr	r3, [pc, #228]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4936      	ldr	r1, [pc, #216]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004044:	4313      	orrs	r3, r2
 8004046:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004048:	f7fe fa08 	bl	800245c <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e00a      	b.n	8004066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fe fa04 	bl	800245c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e053      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	4b2d      	ldr	r3, [pc, #180]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f003 020c 	and.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d1eb      	bne.n	8004050 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004078:	4b27      	ldr	r3, [pc, #156]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d210      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b24      	ldr	r3, [pc, #144]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 0207 	bic.w	r2, r3, #7
 800408e:	4922      	ldr	r1, [pc, #136]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004096:	4b20      	ldr	r3, [pc, #128]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e032      	b.n	800410e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b4:	4b19      	ldr	r3, [pc, #100]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	4916      	ldr	r1, [pc, #88]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040d2:	4b12      	ldr	r3, [pc, #72]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	490e      	ldr	r1, [pc, #56]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e6:	f000 f821 	bl	800412c <HAL_RCC_GetSysClockFreq>
 80040ea:	4602      	mov	r2, r0
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	091b      	lsrs	r3, r3, #4
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	490a      	ldr	r1, [pc, #40]	; (8004120 <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	5ccb      	ldrb	r3, [r1, r3]
 80040fa:	fa22 f303 	lsr.w	r3, r2, r3
 80040fe:	4a09      	ldr	r2, [pc, #36]	; (8004124 <HAL_RCC_ClockConfig+0x1cc>)
 8004100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004102:	4b09      	ldr	r3, [pc, #36]	; (8004128 <HAL_RCC_ClockConfig+0x1d0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe f966 	bl	80023d8 <HAL_InitTick>

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	40022000 	.word	0x40022000
 800411c:	40021000 	.word	0x40021000
 8004120:	080076cc 	.word	0x080076cc
 8004124:	20000004 	.word	0x20000004
 8004128:	20000008 	.word	0x20000008

0800412c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800412c:	b490      	push	{r4, r7}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004132:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xac>)
 8004134:	1d3c      	adds	r4, r7, #4
 8004136:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800413c:	f240 2301 	movw	r3, #513	; 0x201
 8004140:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	2300      	movs	r3, #0
 8004148:	61bb      	str	r3, [r7, #24]
 800414a:	2300      	movs	r3, #0
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004156:	4b21      	ldr	r3, [pc, #132]	; (80041dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d002      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x40>
 8004166:	2b08      	cmp	r3, #8
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x46>
 800416a:	e02b      	b.n	80041c4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800416e:	623b      	str	r3, [r7, #32]
      break;
 8004170:	e02b      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	3328      	adds	r3, #40	; 0x28
 800417c:	443b      	add	r3, r7
 800417e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004182:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d012      	beq.n	80041b4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	0c5b      	lsrs	r3, r3, #17
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	3328      	adds	r3, #40	; 0x28
 800419a:	443b      	add	r3, r7
 800419c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a0e      	ldr	r2, [pc, #56]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041a6:	fb03 f202 	mul.w	r2, r3, r2
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	e004      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4a0b      	ldr	r2, [pc, #44]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041b8:	fb02 f303 	mul.w	r3, r2, r3
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	623b      	str	r3, [r7, #32]
      break;
 80041c2:	e002      	b.n	80041ca <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041c6:	623b      	str	r3, [r7, #32]
      break;
 80041c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ca:	6a3b      	ldr	r3, [r7, #32]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bc90      	pop	{r4, r7}
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	080076ac 	.word	0x080076ac
 80041dc:	40021000 	.word	0x40021000
 80041e0:	007a1200 	.word	0x007a1200
 80041e4:	003d0900 	.word	0x003d0900

080041e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b02      	ldr	r3, [pc, #8]	; (80041f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr
 80041f8:	20000004 	.word	0x20000004

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004200:	f7ff fff2 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	0a1b      	lsrs	r3, r3, #8
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40021000 	.word	0x40021000
 8004220:	080076dc 	.word	0x080076dc

08004224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004228:	f7ff ffde 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 800422c:	4602      	mov	r2, r0
 800422e:	4b05      	ldr	r3, [pc, #20]	; (8004244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	0adb      	lsrs	r3, r3, #11
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	4903      	ldr	r1, [pc, #12]	; (8004248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800423a:	5ccb      	ldrb	r3, [r1, r3]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004240:	4618      	mov	r0, r3
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40021000 	.word	0x40021000
 8004248:	080076dc 	.word	0x080076dc

0800424c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <RCC_Delay+0x34>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <RCC_Delay+0x38>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0a5b      	lsrs	r3, r3, #9
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	fb02 f303 	mul.w	r3, r2, r3
 8004266:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004268:	bf00      	nop
  }
  while (Delay --);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1e5a      	subs	r2, r3, #1
 800426e:	60fa      	str	r2, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f9      	bne.n	8004268 <RCC_Delay+0x1c>
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr
 8004280:	20000004 	.word	0x20000004
 8004284:	10624dd3 	.word	0x10624dd3

08004288 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	2300      	movs	r3, #0
 8004296:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d07d      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80042a4:	2300      	movs	r3, #0
 80042a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a8:	4b4f      	ldr	r3, [pc, #316]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10d      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b4:	4b4c      	ldr	r3, [pc, #304]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	4a4b      	ldr	r2, [pc, #300]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042be:	61d3      	str	r3, [r2, #28]
 80042c0:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	4b46      	ldr	r3, [pc, #280]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d118      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042dc:	4b43      	ldr	r3, [pc, #268]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a42      	ldr	r2, [pc, #264]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80042e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e8:	f7fe f8b8 	bl	800245c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ee:	e008      	b.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fe f8b4 	bl	800245c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e06d      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	4b3a      	ldr	r3, [pc, #232]	; (80043ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800430e:	4b36      	ldr	r3, [pc, #216]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004316:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d02e      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d027      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800432c:	4b2e      	ldr	r3, [pc, #184]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004334:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004336:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004338:	2201      	movs	r2, #1
 800433a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800433c:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800433e:	2200      	movs	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004342:	4a29      	ldr	r2, [pc, #164]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d014      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004352:	f7fe f883 	bl	800245c <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fe f87f 	bl	800245c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e036      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004370:	4b1d      	ldr	r3, [pc, #116]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ee      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800437c:	4b1a      	ldr	r3, [pc, #104]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4917      	ldr	r1, [pc, #92]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438a:	4313      	orrs	r3, r2
 800438c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	4a13      	ldr	r2, [pc, #76]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800439a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ac:	4b0e      	ldr	r3, [pc, #56]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	490b      	ldr	r1, [pc, #44]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d008      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ca:	4b07      	ldr	r3, [pc, #28]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	4904      	ldr	r1, [pc, #16]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3718      	adds	r7, #24
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40007000 	.word	0x40007000
 80043f0:	42420440 	.word	0x42420440

080043f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b08d      	sub	sp, #52	; 0x34
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043fc:	4b58      	ldr	r3, [pc, #352]	; (8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80043fe:	f107 040c 	add.w	r4, r7, #12
 8004402:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004408:	f240 2301 	movw	r3, #513	; 0x201
 800440c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
 8004412:	2300      	movs	r3, #0
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004416:	2300      	movs	r3, #0
 8004418:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	2300      	movs	r3, #0
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b10      	cmp	r3, #16
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b10      	cmp	r3, #16
 800442c:	f200 808e 	bhi.w	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d049      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d079      	beq.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800443c:	e086      	b.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800443e:	4b49      	ldr	r3, [pc, #292]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004444:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d07f      	beq.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	0c9b      	lsrs	r3, r3, #18
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	3330      	adds	r3, #48	; 0x30
 800445a:	443b      	add	r3, r7
 800445c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004460:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d017      	beq.n	800449c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800446c:	4b3d      	ldr	r3, [pc, #244]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	0c5b      	lsrs	r3, r3, #17
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	3330      	adds	r3, #48	; 0x30
 8004478:	443b      	add	r3, r7
 800447a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00d      	beq.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800448a:	4a37      	ldr	r2, [pc, #220]	; (8004568 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
 800449a:	e004      	b.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	4a33      	ldr	r2, [pc, #204]	; (800456c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80044a0:	fb02 f303 	mul.w	r3, r2, r3
 80044a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80044a6:	4b2f      	ldr	r3, [pc, #188]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044b2:	d102      	bne.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044b8:	e04a      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80044ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4a2c      	ldr	r2, [pc, #176]	; (8004570 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80044c0:	fba2 2303 	umull	r2, r3, r2, r3
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80044c8:	e042      	b.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80044ca:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044da:	d108      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80044e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ec:	e01f      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f8:	d109      	bne.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80044fa:	4b1a      	ldr	r3, [pc, #104]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8004506:	f649 4340 	movw	r3, #40000	; 0x9c40
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
 800450c:	e00f      	b.n	800452e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004518:	d11c      	bne.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800451a:	4b12      	ldr	r3, [pc, #72]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004526:	f24f 4324 	movw	r3, #62500	; 0xf424
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800452c:	e012      	b.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800452e:	e011      	b.n	8004554 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004530:	f7ff fe78 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	0b9b      	lsrs	r3, r3, #14
 800453c:	f003 0303 	and.w	r3, r3, #3
 8004540:	3301      	adds	r3, #1
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800454a:	e004      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800454c:	bf00      	nop
 800454e:	e002      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004550:	bf00      	nop
 8004552:	e000      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004554:	bf00      	nop
    }
  }
  return (frequency);
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004558:	4618      	mov	r0, r3
 800455a:	3734      	adds	r7, #52	; 0x34
 800455c:	46bd      	mov	sp, r7
 800455e:	bd90      	pop	{r4, r7, pc}
 8004560:	080076bc 	.word	0x080076bc
 8004564:	40021000 	.word	0x40021000
 8004568:	007a1200 	.word	0x007a1200
 800456c:	003d0900 	.word	0x003d0900
 8004570:	aaaaaaab 	.word	0xaaaaaaab

08004574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e03f      	b.n	8004606 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7fd fea2 	bl	80022e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68da      	ldr	r2, [r3, #12]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f000 f905 	bl	80047c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	691a      	ldr	r2, [r3, #16]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695a      	ldr	r2, [r3, #20]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68da      	ldr	r2, [r3, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b08a      	sub	sp, #40	; 0x28
 8004612:	af02      	add	r7, sp, #8
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	603b      	str	r3, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b20      	cmp	r3, #32
 800462c:	d17c      	bne.n	8004728 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_UART_Transmit+0x2c>
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e075      	b.n	800472a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_UART_Transmit+0x3e>
 8004648:	2302      	movs	r3, #2
 800464a:	e06e      	b.n	800472a <HAL_UART_Transmit+0x11c>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2221      	movs	r2, #33	; 0x21
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004662:	f7fd fefb 	bl	800245c <HAL_GetTick>
 8004666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	88fa      	ldrh	r2, [r7, #6]
 800466c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	88fa      	ldrh	r2, [r7, #6]
 8004672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d108      	bne.n	8004690 <HAL_UART_Transmit+0x82>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d104      	bne.n	8004690 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	e003      	b.n	8004698 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046a0:	e02a      	b.n	80046f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 f840 	bl	8004732 <UART_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e036      	b.n	800472a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10b      	bne.n	80046da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	881b      	ldrh	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	3302      	adds	r3, #2
 80046d6:	61bb      	str	r3, [r7, #24]
 80046d8:	e007      	b.n	80046ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	781a      	ldrb	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3301      	adds	r3, #1
 80046e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1cf      	bne.n	80046a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2200      	movs	r2, #0
 800470a:	2140      	movs	r1, #64	; 0x40
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f810 	bl	8004732 <UART_WaitOnFlagUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d001      	beq.n	800471c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e006      	b.n	800472a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e000      	b.n	800472a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004742:	e02c      	b.n	800479e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d028      	beq.n	800479e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0x30>
 8004752:	f7fd fe83 	bl	800245c <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	429a      	cmp	r2, r3
 8004760:	d21d      	bcs.n	800479e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004770:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695a      	ldr	r2, [r3, #20]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e00f      	b.n	80047be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4013      	ands	r3, r2
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d0c3      	beq.n	8004744 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004802:	f023 030c 	bic.w	r3, r3, #12
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6812      	ldr	r2, [r2, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	430b      	orrs	r3, r1
 800480e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699a      	ldr	r2, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a2c      	ldr	r2, [pc, #176]	; (80048dc <UART_SetConfig+0x114>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d103      	bne.n	8004838 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7ff fcf8 	bl	8004224 <HAL_RCC_GetPCLK2Freq>
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	e002      	b.n	800483e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004838:	f7ff fce0 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 800483c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009a      	lsls	r2, r3, #2
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	4a22      	ldr	r2, [pc, #136]	; (80048e0 <UART_SetConfig+0x118>)
 8004856:	fba2 2303 	umull	r2, r3, r2, r3
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	0119      	lsls	r1, r3, #4
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009a      	lsls	r2, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	fbb2 f2f3 	udiv	r2, r2, r3
 8004874:	4b1a      	ldr	r3, [pc, #104]	; (80048e0 <UART_SetConfig+0x118>)
 8004876:	fba3 0302 	umull	r0, r3, r3, r2
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	2064      	movs	r0, #100	; 0x64
 800487e:	fb00 f303 	mul.w	r3, r0, r3
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	011b      	lsls	r3, r3, #4
 8004886:	3332      	adds	r3, #50	; 0x32
 8004888:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <UART_SetConfig+0x118>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004894:	4419      	add	r1, r3
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	009a      	lsls	r2, r3, #2
 80048a0:	441a      	add	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <UART_SetConfig+0x118>)
 80048ae:	fba3 0302 	umull	r0, r3, r3, r2
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	2064      	movs	r0, #100	; 0x64
 80048b6:	fb00 f303 	mul.w	r3, r0, r3
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	3332      	adds	r3, #50	; 0x32
 80048c0:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <UART_SetConfig+0x118>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	f003 020f 	and.w	r2, r3, #15
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	440a      	add	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40013800 	.word	0x40013800
 80048e0:	51eb851f 	.word	0x51eb851f

080048e4 <__errno>:
 80048e4:	4b01      	ldr	r3, [pc, #4]	; (80048ec <__errno+0x8>)
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20000010 	.word	0x20000010

080048f0 <__libc_init_array>:
 80048f0:	b570      	push	{r4, r5, r6, lr}
 80048f2:	2600      	movs	r6, #0
 80048f4:	4d0c      	ldr	r5, [pc, #48]	; (8004928 <__libc_init_array+0x38>)
 80048f6:	4c0d      	ldr	r4, [pc, #52]	; (800492c <__libc_init_array+0x3c>)
 80048f8:	1b64      	subs	r4, r4, r5
 80048fa:	10a4      	asrs	r4, r4, #2
 80048fc:	42a6      	cmp	r6, r4
 80048fe:	d109      	bne.n	8004914 <__libc_init_array+0x24>
 8004900:	f002 fe90 	bl	8007624 <_init>
 8004904:	2600      	movs	r6, #0
 8004906:	4d0a      	ldr	r5, [pc, #40]	; (8004930 <__libc_init_array+0x40>)
 8004908:	4c0a      	ldr	r4, [pc, #40]	; (8004934 <__libc_init_array+0x44>)
 800490a:	1b64      	subs	r4, r4, r5
 800490c:	10a4      	asrs	r4, r4, #2
 800490e:	42a6      	cmp	r6, r4
 8004910:	d105      	bne.n	800491e <__libc_init_array+0x2e>
 8004912:	bd70      	pop	{r4, r5, r6, pc}
 8004914:	f855 3b04 	ldr.w	r3, [r5], #4
 8004918:	4798      	blx	r3
 800491a:	3601      	adds	r6, #1
 800491c:	e7ee      	b.n	80048fc <__libc_init_array+0xc>
 800491e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004922:	4798      	blx	r3
 8004924:	3601      	adds	r6, #1
 8004926:	e7f2      	b.n	800490e <__libc_init_array+0x1e>
 8004928:	08007abc 	.word	0x08007abc
 800492c:	08007abc 	.word	0x08007abc
 8004930:	08007abc 	.word	0x08007abc
 8004934:	08007ac0 	.word	0x08007ac0

08004938 <memset>:
 8004938:	4603      	mov	r3, r0
 800493a:	4402      	add	r2, r0
 800493c:	4293      	cmp	r3, r2
 800493e:	d100      	bne.n	8004942 <memset+0xa>
 8004940:	4770      	bx	lr
 8004942:	f803 1b01 	strb.w	r1, [r3], #1
 8004946:	e7f9      	b.n	800493c <memset+0x4>

08004948 <__cvt>:
 8004948:	2b00      	cmp	r3, #0
 800494a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800494e:	461f      	mov	r7, r3
 8004950:	bfbb      	ittet	lt
 8004952:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004956:	461f      	movlt	r7, r3
 8004958:	2300      	movge	r3, #0
 800495a:	232d      	movlt	r3, #45	; 0x2d
 800495c:	b088      	sub	sp, #32
 800495e:	4614      	mov	r4, r2
 8004960:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004962:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004964:	7013      	strb	r3, [r2, #0]
 8004966:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004968:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800496c:	f023 0820 	bic.w	r8, r3, #32
 8004970:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004974:	d005      	beq.n	8004982 <__cvt+0x3a>
 8004976:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800497a:	d100      	bne.n	800497e <__cvt+0x36>
 800497c:	3501      	adds	r5, #1
 800497e:	2302      	movs	r3, #2
 8004980:	e000      	b.n	8004984 <__cvt+0x3c>
 8004982:	2303      	movs	r3, #3
 8004984:	aa07      	add	r2, sp, #28
 8004986:	9204      	str	r2, [sp, #16]
 8004988:	aa06      	add	r2, sp, #24
 800498a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800498e:	e9cd 3500 	strd	r3, r5, [sp]
 8004992:	4622      	mov	r2, r4
 8004994:	463b      	mov	r3, r7
 8004996:	f000 fe13 	bl	80055c0 <_dtoa_r>
 800499a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800499e:	4606      	mov	r6, r0
 80049a0:	d102      	bne.n	80049a8 <__cvt+0x60>
 80049a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80049a4:	07db      	lsls	r3, r3, #31
 80049a6:	d522      	bpl.n	80049ee <__cvt+0xa6>
 80049a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80049ac:	eb06 0905 	add.w	r9, r6, r5
 80049b0:	d110      	bne.n	80049d4 <__cvt+0x8c>
 80049b2:	7833      	ldrb	r3, [r6, #0]
 80049b4:	2b30      	cmp	r3, #48	; 0x30
 80049b6:	d10a      	bne.n	80049ce <__cvt+0x86>
 80049b8:	2200      	movs	r2, #0
 80049ba:	2300      	movs	r3, #0
 80049bc:	4620      	mov	r0, r4
 80049be:	4639      	mov	r1, r7
 80049c0:	f7fb fff2 	bl	80009a8 <__aeabi_dcmpeq>
 80049c4:	b918      	cbnz	r0, 80049ce <__cvt+0x86>
 80049c6:	f1c5 0501 	rsb	r5, r5, #1
 80049ca:	f8ca 5000 	str.w	r5, [sl]
 80049ce:	f8da 3000 	ldr.w	r3, [sl]
 80049d2:	4499      	add	r9, r3
 80049d4:	2200      	movs	r2, #0
 80049d6:	2300      	movs	r3, #0
 80049d8:	4620      	mov	r0, r4
 80049da:	4639      	mov	r1, r7
 80049dc:	f7fb ffe4 	bl	80009a8 <__aeabi_dcmpeq>
 80049e0:	b108      	cbz	r0, 80049e6 <__cvt+0x9e>
 80049e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80049e6:	2230      	movs	r2, #48	; 0x30
 80049e8:	9b07      	ldr	r3, [sp, #28]
 80049ea:	454b      	cmp	r3, r9
 80049ec:	d307      	bcc.n	80049fe <__cvt+0xb6>
 80049ee:	4630      	mov	r0, r6
 80049f0:	9b07      	ldr	r3, [sp, #28]
 80049f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80049f4:	1b9b      	subs	r3, r3, r6
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	b008      	add	sp, #32
 80049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	9107      	str	r1, [sp, #28]
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e7f0      	b.n	80049e8 <__cvt+0xa0>

08004a06 <__exponent>:
 8004a06:	4603      	mov	r3, r0
 8004a08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	f803 2b02 	strb.w	r2, [r3], #2
 8004a10:	bfb6      	itet	lt
 8004a12:	222d      	movlt	r2, #45	; 0x2d
 8004a14:	222b      	movge	r2, #43	; 0x2b
 8004a16:	4249      	neglt	r1, r1
 8004a18:	2909      	cmp	r1, #9
 8004a1a:	7042      	strb	r2, [r0, #1]
 8004a1c:	dd2b      	ble.n	8004a76 <__exponent+0x70>
 8004a1e:	f10d 0407 	add.w	r4, sp, #7
 8004a22:	46a4      	mov	ip, r4
 8004a24:	270a      	movs	r7, #10
 8004a26:	fb91 f6f7 	sdiv	r6, r1, r7
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	46a6      	mov	lr, r4
 8004a2e:	fb07 1516 	mls	r5, r7, r6, r1
 8004a32:	2a63      	cmp	r2, #99	; 0x63
 8004a34:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004a38:	4631      	mov	r1, r6
 8004a3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a42:	dcf0      	bgt.n	8004a26 <__exponent+0x20>
 8004a44:	3130      	adds	r1, #48	; 0x30
 8004a46:	f1ae 0502 	sub.w	r5, lr, #2
 8004a4a:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a4e:	4629      	mov	r1, r5
 8004a50:	1c44      	adds	r4, r0, #1
 8004a52:	4561      	cmp	r1, ip
 8004a54:	d30a      	bcc.n	8004a6c <__exponent+0x66>
 8004a56:	f10d 0209 	add.w	r2, sp, #9
 8004a5a:	eba2 020e 	sub.w	r2, r2, lr
 8004a5e:	4565      	cmp	r5, ip
 8004a60:	bf88      	it	hi
 8004a62:	2200      	movhi	r2, #0
 8004a64:	4413      	add	r3, r2
 8004a66:	1a18      	subs	r0, r3, r0
 8004a68:	b003      	add	sp, #12
 8004a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a70:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a74:	e7ed      	b.n	8004a52 <__exponent+0x4c>
 8004a76:	2330      	movs	r3, #48	; 0x30
 8004a78:	3130      	adds	r1, #48	; 0x30
 8004a7a:	7083      	strb	r3, [r0, #2]
 8004a7c:	70c1      	strb	r1, [r0, #3]
 8004a7e:	1d03      	adds	r3, r0, #4
 8004a80:	e7f1      	b.n	8004a66 <__exponent+0x60>
	...

08004a84 <_printf_float>:
 8004a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a88:	b091      	sub	sp, #68	; 0x44
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004a90:	4616      	mov	r6, r2
 8004a92:	461f      	mov	r7, r3
 8004a94:	4605      	mov	r5, r0
 8004a96:	f001 fd35 	bl	8006504 <_localeconv_r>
 8004a9a:	6803      	ldr	r3, [r0, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8004aa0:	f7fb fb56 	bl	8000150 <strlen>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	930e      	str	r3, [sp, #56]	; 0x38
 8004aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8004aac:	900a      	str	r0, [sp, #40]	; 0x28
 8004aae:	3307      	adds	r3, #7
 8004ab0:	f023 0307 	bic.w	r3, r3, #7
 8004ab4:	f103 0208 	add.w	r2, r3, #8
 8004ab8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004abc:	f8d4 b000 	ldr.w	fp, [r4]
 8004ac0:	f8c8 2000 	str.w	r2, [r8]
 8004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004acc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004ad0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ad4:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8004ada:	4640      	mov	r0, r8
 8004adc:	4b9c      	ldr	r3, [pc, #624]	; (8004d50 <_printf_float+0x2cc>)
 8004ade:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ae0:	f7fb ff94 	bl	8000a0c <__aeabi_dcmpun>
 8004ae4:	bb70      	cbnz	r0, 8004b44 <_printf_float+0xc0>
 8004ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aea:	4640      	mov	r0, r8
 8004aec:	4b98      	ldr	r3, [pc, #608]	; (8004d50 <_printf_float+0x2cc>)
 8004aee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004af0:	f7fb ff6e 	bl	80009d0 <__aeabi_dcmple>
 8004af4:	bb30      	cbnz	r0, 8004b44 <_printf_float+0xc0>
 8004af6:	2200      	movs	r2, #0
 8004af8:	2300      	movs	r3, #0
 8004afa:	4640      	mov	r0, r8
 8004afc:	4651      	mov	r1, sl
 8004afe:	f7fb ff5d 	bl	80009bc <__aeabi_dcmplt>
 8004b02:	b110      	cbz	r0, 8004b0a <_printf_float+0x86>
 8004b04:	232d      	movs	r3, #45	; 0x2d
 8004b06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b0a:	4b92      	ldr	r3, [pc, #584]	; (8004d54 <_printf_float+0x2d0>)
 8004b0c:	4892      	ldr	r0, [pc, #584]	; (8004d58 <_printf_float+0x2d4>)
 8004b0e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004b12:	bf94      	ite	ls
 8004b14:	4698      	movls	r8, r3
 8004b16:	4680      	movhi	r8, r0
 8004b18:	2303      	movs	r3, #3
 8004b1a:	f04f 0a00 	mov.w	sl, #0
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	f02b 0304 	bic.w	r3, fp, #4
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	4633      	mov	r3, r6
 8004b28:	4621      	mov	r1, r4
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	9700      	str	r7, [sp, #0]
 8004b2e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004b30:	f000 f9d4 	bl	8004edc <_printf_common>
 8004b34:	3001      	adds	r0, #1
 8004b36:	f040 8090 	bne.w	8004c5a <_printf_float+0x1d6>
 8004b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3e:	b011      	add	sp, #68	; 0x44
 8004b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b44:	4642      	mov	r2, r8
 8004b46:	4653      	mov	r3, sl
 8004b48:	4640      	mov	r0, r8
 8004b4a:	4651      	mov	r1, sl
 8004b4c:	f7fb ff5e 	bl	8000a0c <__aeabi_dcmpun>
 8004b50:	b148      	cbz	r0, 8004b66 <_printf_float+0xe2>
 8004b52:	f1ba 0f00 	cmp.w	sl, #0
 8004b56:	bfb8      	it	lt
 8004b58:	232d      	movlt	r3, #45	; 0x2d
 8004b5a:	4880      	ldr	r0, [pc, #512]	; (8004d5c <_printf_float+0x2d8>)
 8004b5c:	bfb8      	it	lt
 8004b5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b62:	4b7f      	ldr	r3, [pc, #508]	; (8004d60 <_printf_float+0x2dc>)
 8004b64:	e7d3      	b.n	8004b0e <_printf_float+0x8a>
 8004b66:	6863      	ldr	r3, [r4, #4]
 8004b68:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	d142      	bne.n	8004bf6 <_printf_float+0x172>
 8004b70:	2306      	movs	r3, #6
 8004b72:	6063      	str	r3, [r4, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	9206      	str	r2, [sp, #24]
 8004b78:	aa0e      	add	r2, sp, #56	; 0x38
 8004b7a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004b7e:	aa0d      	add	r2, sp, #52	; 0x34
 8004b80:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004b84:	9203      	str	r2, [sp, #12]
 8004b86:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004b8a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	6863      	ldr	r3, [r4, #4]
 8004b92:	4642      	mov	r2, r8
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4628      	mov	r0, r5
 8004b98:	4653      	mov	r3, sl
 8004b9a:	910b      	str	r1, [sp, #44]	; 0x2c
 8004b9c:	f7ff fed4 	bl	8004948 <__cvt>
 8004ba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ba2:	4680      	mov	r8, r0
 8004ba4:	2947      	cmp	r1, #71	; 0x47
 8004ba6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ba8:	d108      	bne.n	8004bbc <_printf_float+0x138>
 8004baa:	1cc8      	adds	r0, r1, #3
 8004bac:	db02      	blt.n	8004bb4 <_printf_float+0x130>
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	dd40      	ble.n	8004c36 <_printf_float+0x1b2>
 8004bb4:	f1a9 0902 	sub.w	r9, r9, #2
 8004bb8:	fa5f f989 	uxtb.w	r9, r9
 8004bbc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004bc0:	d81f      	bhi.n	8004c02 <_printf_float+0x17e>
 8004bc2:	464a      	mov	r2, r9
 8004bc4:	3901      	subs	r1, #1
 8004bc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004bca:	910d      	str	r1, [sp, #52]	; 0x34
 8004bcc:	f7ff ff1b 	bl	8004a06 <__exponent>
 8004bd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004bd2:	4682      	mov	sl, r0
 8004bd4:	1813      	adds	r3, r2, r0
 8004bd6:	2a01      	cmp	r2, #1
 8004bd8:	6123      	str	r3, [r4, #16]
 8004bda:	dc02      	bgt.n	8004be2 <_printf_float+0x15e>
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	07d2      	lsls	r2, r2, #31
 8004be0:	d501      	bpl.n	8004be6 <_printf_float+0x162>
 8004be2:	3301      	adds	r3, #1
 8004be4:	6123      	str	r3, [r4, #16]
 8004be6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d09b      	beq.n	8004b26 <_printf_float+0xa2>
 8004bee:	232d      	movs	r3, #45	; 0x2d
 8004bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf4:	e797      	b.n	8004b26 <_printf_float+0xa2>
 8004bf6:	2947      	cmp	r1, #71	; 0x47
 8004bf8:	d1bc      	bne.n	8004b74 <_printf_float+0xf0>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1ba      	bne.n	8004b74 <_printf_float+0xf0>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e7b7      	b.n	8004b72 <_printf_float+0xee>
 8004c02:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004c06:	d118      	bne.n	8004c3a <_printf_float+0x1b6>
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	6863      	ldr	r3, [r4, #4]
 8004c0c:	dd0b      	ble.n	8004c26 <_printf_float+0x1a2>
 8004c0e:	6121      	str	r1, [r4, #16]
 8004c10:	b913      	cbnz	r3, 8004c18 <_printf_float+0x194>
 8004c12:	6822      	ldr	r2, [r4, #0]
 8004c14:	07d0      	lsls	r0, r2, #31
 8004c16:	d502      	bpl.n	8004c1e <_printf_float+0x19a>
 8004c18:	3301      	adds	r3, #1
 8004c1a:	440b      	add	r3, r1
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	f04f 0a00 	mov.w	sl, #0
 8004c22:	65a1      	str	r1, [r4, #88]	; 0x58
 8004c24:	e7df      	b.n	8004be6 <_printf_float+0x162>
 8004c26:	b913      	cbnz	r3, 8004c2e <_printf_float+0x1aa>
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	07d2      	lsls	r2, r2, #31
 8004c2c:	d501      	bpl.n	8004c32 <_printf_float+0x1ae>
 8004c2e:	3302      	adds	r3, #2
 8004c30:	e7f4      	b.n	8004c1c <_printf_float+0x198>
 8004c32:	2301      	movs	r3, #1
 8004c34:	e7f2      	b.n	8004c1c <_printf_float+0x198>
 8004c36:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004c3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	db05      	blt.n	8004c4c <_printf_float+0x1c8>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	6121      	str	r1, [r4, #16]
 8004c44:	07d8      	lsls	r0, r3, #31
 8004c46:	d5ea      	bpl.n	8004c1e <_printf_float+0x19a>
 8004c48:	1c4b      	adds	r3, r1, #1
 8004c4a:	e7e7      	b.n	8004c1c <_printf_float+0x198>
 8004c4c:	2900      	cmp	r1, #0
 8004c4e:	bfcc      	ite	gt
 8004c50:	2201      	movgt	r2, #1
 8004c52:	f1c1 0202 	rsble	r2, r1, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	e7e0      	b.n	8004c1c <_printf_float+0x198>
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	055a      	lsls	r2, r3, #21
 8004c5e:	d407      	bmi.n	8004c70 <_printf_float+0x1ec>
 8004c60:	6923      	ldr	r3, [r4, #16]
 8004c62:	4642      	mov	r2, r8
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	d12b      	bne.n	8004cc6 <_printf_float+0x242>
 8004c6e:	e764      	b.n	8004b3a <_printf_float+0xb6>
 8004c70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004c74:	f240 80dd 	bls.w	8004e32 <_printf_float+0x3ae>
 8004c78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f7fb fe92 	bl	80009a8 <__aeabi_dcmpeq>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d033      	beq.n	8004cf0 <_printf_float+0x26c>
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	4a35      	ldr	r2, [pc, #212]	; (8004d64 <_printf_float+0x2e0>)
 8004c90:	47b8      	blx	r7
 8004c92:	3001      	adds	r0, #1
 8004c94:	f43f af51 	beq.w	8004b3a <_printf_float+0xb6>
 8004c98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	db02      	blt.n	8004ca6 <_printf_float+0x222>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	07d8      	lsls	r0, r3, #31
 8004ca4:	d50f      	bpl.n	8004cc6 <_printf_float+0x242>
 8004ca6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004caa:	4631      	mov	r1, r6
 8004cac:	4628      	mov	r0, r5
 8004cae:	47b8      	blx	r7
 8004cb0:	3001      	adds	r0, #1
 8004cb2:	f43f af42 	beq.w	8004b3a <_printf_float+0xb6>
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	f104 091a 	add.w	r9, r4, #26
 8004cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	4543      	cmp	r3, r8
 8004cc4:	dc09      	bgt.n	8004cda <_printf_float+0x256>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	079b      	lsls	r3, r3, #30
 8004cca:	f100 8102 	bmi.w	8004ed2 <_printf_float+0x44e>
 8004cce:	68e0      	ldr	r0, [r4, #12]
 8004cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cd2:	4298      	cmp	r0, r3
 8004cd4:	bfb8      	it	lt
 8004cd6:	4618      	movlt	r0, r3
 8004cd8:	e731      	b.n	8004b3e <_printf_float+0xba>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	464a      	mov	r2, r9
 8004cde:	4631      	mov	r1, r6
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b8      	blx	r7
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	f43f af28 	beq.w	8004b3a <_printf_float+0xb6>
 8004cea:	f108 0801 	add.w	r8, r8, #1
 8004cee:	e7e6      	b.n	8004cbe <_printf_float+0x23a>
 8004cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dc38      	bgt.n	8004d68 <_printf_float+0x2e4>
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	4a19      	ldr	r2, [pc, #100]	; (8004d64 <_printf_float+0x2e0>)
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	f43f af1a 	beq.w	8004b3a <_printf_float+0xb6>
 8004d06:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	d102      	bne.n	8004d14 <_printf_float+0x290>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	07d9      	lsls	r1, r3, #31
 8004d12:	d5d8      	bpl.n	8004cc6 <_printf_float+0x242>
 8004d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f43f af0b 	beq.w	8004b3a <_printf_float+0xb6>
 8004d24:	f04f 0900 	mov.w	r9, #0
 8004d28:	f104 0a1a 	add.w	sl, r4, #26
 8004d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2e:	425b      	negs	r3, r3
 8004d30:	454b      	cmp	r3, r9
 8004d32:	dc01      	bgt.n	8004d38 <_printf_float+0x2b4>
 8004d34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d36:	e794      	b.n	8004c62 <_printf_float+0x1de>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4652      	mov	r2, sl
 8004d3c:	4631      	mov	r1, r6
 8004d3e:	4628      	mov	r0, r5
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f aef9 	beq.w	8004b3a <_printf_float+0xb6>
 8004d48:	f109 0901 	add.w	r9, r9, #1
 8004d4c:	e7ee      	b.n	8004d2c <_printf_float+0x2a8>
 8004d4e:	bf00      	nop
 8004d50:	7fefffff 	.word	0x7fefffff
 8004d54:	080076e8 	.word	0x080076e8
 8004d58:	080076ec 	.word	0x080076ec
 8004d5c:	080076f4 	.word	0x080076f4
 8004d60:	080076f0 	.word	0x080076f0
 8004d64:	080076f8 	.word	0x080076f8
 8004d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	bfa8      	it	ge
 8004d70:	461a      	movge	r2, r3
 8004d72:	2a00      	cmp	r2, #0
 8004d74:	4691      	mov	r9, r2
 8004d76:	dc37      	bgt.n	8004de8 <_printf_float+0x364>
 8004d78:	f04f 0b00 	mov.w	fp, #0
 8004d7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d80:	f104 021a 	add.w	r2, r4, #26
 8004d84:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004d88:	ebaa 0309 	sub.w	r3, sl, r9
 8004d8c:	455b      	cmp	r3, fp
 8004d8e:	dc33      	bgt.n	8004df8 <_printf_float+0x374>
 8004d90:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d94:	429a      	cmp	r2, r3
 8004d96:	db3b      	blt.n	8004e10 <_printf_float+0x38c>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	07da      	lsls	r2, r3, #31
 8004d9c:	d438      	bmi.n	8004e10 <_printf_float+0x38c>
 8004d9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004da0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004da2:	eba3 020a 	sub.w	r2, r3, sl
 8004da6:	eba3 0901 	sub.w	r9, r3, r1
 8004daa:	4591      	cmp	r9, r2
 8004dac:	bfa8      	it	ge
 8004dae:	4691      	movge	r9, r2
 8004db0:	f1b9 0f00 	cmp.w	r9, #0
 8004db4:	dc34      	bgt.n	8004e20 <_printf_float+0x39c>
 8004db6:	f04f 0800 	mov.w	r8, #0
 8004dba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dbe:	f104 0a1a 	add.w	sl, r4, #26
 8004dc2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	eba3 0309 	sub.w	r3, r3, r9
 8004dcc:	4543      	cmp	r3, r8
 8004dce:	f77f af7a 	ble.w	8004cc6 <_printf_float+0x242>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	f43f aeac 	beq.w	8004b3a <_printf_float+0xb6>
 8004de2:	f108 0801 	add.w	r8, r8, #1
 8004de6:	e7ec      	b.n	8004dc2 <_printf_float+0x33e>
 8004de8:	4613      	mov	r3, r2
 8004dea:	4631      	mov	r1, r6
 8004dec:	4642      	mov	r2, r8
 8004dee:	4628      	mov	r0, r5
 8004df0:	47b8      	blx	r7
 8004df2:	3001      	adds	r0, #1
 8004df4:	d1c0      	bne.n	8004d78 <_printf_float+0x2f4>
 8004df6:	e6a0      	b.n	8004b3a <_printf_float+0xb6>
 8004df8:	2301      	movs	r3, #1
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e00:	47b8      	blx	r7
 8004e02:	3001      	adds	r0, #1
 8004e04:	f43f ae99 	beq.w	8004b3a <_printf_float+0xb6>
 8004e08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e0a:	f10b 0b01 	add.w	fp, fp, #1
 8004e0e:	e7b9      	b.n	8004d84 <_printf_float+0x300>
 8004e10:	4631      	mov	r1, r6
 8004e12:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	d1bf      	bne.n	8004d9e <_printf_float+0x31a>
 8004e1e:	e68c      	b.n	8004b3a <_printf_float+0xb6>
 8004e20:	464b      	mov	r3, r9
 8004e22:	4631      	mov	r1, r6
 8004e24:	4628      	mov	r0, r5
 8004e26:	eb08 020a 	add.w	r2, r8, sl
 8004e2a:	47b8      	blx	r7
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	d1c2      	bne.n	8004db6 <_printf_float+0x332>
 8004e30:	e683      	b.n	8004b3a <_printf_float+0xb6>
 8004e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e34:	2a01      	cmp	r2, #1
 8004e36:	dc01      	bgt.n	8004e3c <_printf_float+0x3b8>
 8004e38:	07db      	lsls	r3, r3, #31
 8004e3a:	d537      	bpl.n	8004eac <_printf_float+0x428>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	4642      	mov	r2, r8
 8004e40:	4631      	mov	r1, r6
 8004e42:	4628      	mov	r0, r5
 8004e44:	47b8      	blx	r7
 8004e46:	3001      	adds	r0, #1
 8004e48:	f43f ae77 	beq.w	8004b3a <_printf_float+0xb6>
 8004e4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e50:	4631      	mov	r1, r6
 8004e52:	4628      	mov	r0, r5
 8004e54:	47b8      	blx	r7
 8004e56:	3001      	adds	r0, #1
 8004e58:	f43f ae6f 	beq.w	8004b3a <_printf_float+0xb6>
 8004e5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e60:	2200      	movs	r2, #0
 8004e62:	2300      	movs	r3, #0
 8004e64:	f7fb fda0 	bl	80009a8 <__aeabi_dcmpeq>
 8004e68:	b9d8      	cbnz	r0, 8004ea2 <_printf_float+0x41e>
 8004e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e6c:	f108 0201 	add.w	r2, r8, #1
 8004e70:	3b01      	subs	r3, #1
 8004e72:	4631      	mov	r1, r6
 8004e74:	4628      	mov	r0, r5
 8004e76:	47b8      	blx	r7
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d10e      	bne.n	8004e9a <_printf_float+0x416>
 8004e7c:	e65d      	b.n	8004b3a <_printf_float+0xb6>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	464a      	mov	r2, r9
 8004e82:	4631      	mov	r1, r6
 8004e84:	4628      	mov	r0, r5
 8004e86:	47b8      	blx	r7
 8004e88:	3001      	adds	r0, #1
 8004e8a:	f43f ae56 	beq.w	8004b3a <_printf_float+0xb6>
 8004e8e:	f108 0801 	add.w	r8, r8, #1
 8004e92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e94:	3b01      	subs	r3, #1
 8004e96:	4543      	cmp	r3, r8
 8004e98:	dcf1      	bgt.n	8004e7e <_printf_float+0x3fa>
 8004e9a:	4653      	mov	r3, sl
 8004e9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004ea0:	e6e0      	b.n	8004c64 <_printf_float+0x1e0>
 8004ea2:	f04f 0800 	mov.w	r8, #0
 8004ea6:	f104 091a 	add.w	r9, r4, #26
 8004eaa:	e7f2      	b.n	8004e92 <_printf_float+0x40e>
 8004eac:	2301      	movs	r3, #1
 8004eae:	4642      	mov	r2, r8
 8004eb0:	e7df      	b.n	8004e72 <_printf_float+0x3ee>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	464a      	mov	r2, r9
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	4628      	mov	r0, r5
 8004eba:	47b8      	blx	r7
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	f43f ae3c 	beq.w	8004b3a <_printf_float+0xb6>
 8004ec2:	f108 0801 	add.w	r8, r8, #1
 8004ec6:	68e3      	ldr	r3, [r4, #12]
 8004ec8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004eca:	1a5b      	subs	r3, r3, r1
 8004ecc:	4543      	cmp	r3, r8
 8004ece:	dcf0      	bgt.n	8004eb2 <_printf_float+0x42e>
 8004ed0:	e6fd      	b.n	8004cce <_printf_float+0x24a>
 8004ed2:	f04f 0800 	mov.w	r8, #0
 8004ed6:	f104 0919 	add.w	r9, r4, #25
 8004eda:	e7f4      	b.n	8004ec6 <_printf_float+0x442>

08004edc <_printf_common>:
 8004edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	4699      	mov	r9, r3
 8004ee4:	688a      	ldr	r2, [r1, #8]
 8004ee6:	690b      	ldr	r3, [r1, #16]
 8004ee8:	4607      	mov	r7, r0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	bfb8      	it	lt
 8004eee:	4613      	movlt	r3, r2
 8004ef0:	6033      	str	r3, [r6, #0]
 8004ef2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004efc:	b10a      	cbz	r2, 8004f02 <_printf_common+0x26>
 8004efe:	3301      	adds	r3, #1
 8004f00:	6033      	str	r3, [r6, #0]
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	0699      	lsls	r1, r3, #26
 8004f06:	bf42      	ittt	mi
 8004f08:	6833      	ldrmi	r3, [r6, #0]
 8004f0a:	3302      	addmi	r3, #2
 8004f0c:	6033      	strmi	r3, [r6, #0]
 8004f0e:	6825      	ldr	r5, [r4, #0]
 8004f10:	f015 0506 	ands.w	r5, r5, #6
 8004f14:	d106      	bne.n	8004f24 <_printf_common+0x48>
 8004f16:	f104 0a19 	add.w	sl, r4, #25
 8004f1a:	68e3      	ldr	r3, [r4, #12]
 8004f1c:	6832      	ldr	r2, [r6, #0]
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	dc28      	bgt.n	8004f76 <_printf_common+0x9a>
 8004f24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f28:	1e13      	subs	r3, r2, #0
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	bf18      	it	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	0692      	lsls	r2, r2, #26
 8004f32:	d42d      	bmi.n	8004f90 <_printf_common+0xb4>
 8004f34:	4649      	mov	r1, r9
 8004f36:	4638      	mov	r0, r7
 8004f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f3c:	47c0      	blx	r8
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d020      	beq.n	8004f84 <_printf_common+0xa8>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	68e5      	ldr	r5, [r4, #12]
 8004f46:	f003 0306 	and.w	r3, r3, #6
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	bf18      	it	ne
 8004f4e:	2500      	movne	r5, #0
 8004f50:	6832      	ldr	r2, [r6, #0]
 8004f52:	f04f 0600 	mov.w	r6, #0
 8004f56:	68a3      	ldr	r3, [r4, #8]
 8004f58:	bf08      	it	eq
 8004f5a:	1aad      	subeq	r5, r5, r2
 8004f5c:	6922      	ldr	r2, [r4, #16]
 8004f5e:	bf08      	it	eq
 8004f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f64:	4293      	cmp	r3, r2
 8004f66:	bfc4      	itt	gt
 8004f68:	1a9b      	subgt	r3, r3, r2
 8004f6a:	18ed      	addgt	r5, r5, r3
 8004f6c:	341a      	adds	r4, #26
 8004f6e:	42b5      	cmp	r5, r6
 8004f70:	d11a      	bne.n	8004fa8 <_printf_common+0xcc>
 8004f72:	2000      	movs	r0, #0
 8004f74:	e008      	b.n	8004f88 <_printf_common+0xac>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4652      	mov	r2, sl
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	47c0      	blx	r8
 8004f80:	3001      	adds	r0, #1
 8004f82:	d103      	bne.n	8004f8c <_printf_common+0xb0>
 8004f84:	f04f 30ff 	mov.w	r0, #4294967295
 8004f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	e7c4      	b.n	8004f1a <_printf_common+0x3e>
 8004f90:	2030      	movs	r0, #48	; 0x30
 8004f92:	18e1      	adds	r1, r4, r3
 8004f94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f98:	1c5a      	adds	r2, r3, #1
 8004f9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f9e:	4422      	add	r2, r4
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa6:	e7c5      	b.n	8004f34 <_printf_common+0x58>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4622      	mov	r2, r4
 8004fac:	4649      	mov	r1, r9
 8004fae:	4638      	mov	r0, r7
 8004fb0:	47c0      	blx	r8
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d0e6      	beq.n	8004f84 <_printf_common+0xa8>
 8004fb6:	3601      	adds	r6, #1
 8004fb8:	e7d9      	b.n	8004f6e <_printf_common+0x92>
	...

08004fbc <_printf_i>:
 8004fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	7e0f      	ldrb	r7, [r1, #24]
 8004fc2:	4691      	mov	r9, r2
 8004fc4:	2f78      	cmp	r7, #120	; 0x78
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	469a      	mov	sl, r3
 8004fcc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fd2:	d807      	bhi.n	8004fe4 <_printf_i+0x28>
 8004fd4:	2f62      	cmp	r7, #98	; 0x62
 8004fd6:	d80a      	bhi.n	8004fee <_printf_i+0x32>
 8004fd8:	2f00      	cmp	r7, #0
 8004fda:	f000 80d9 	beq.w	8005190 <_printf_i+0x1d4>
 8004fde:	2f58      	cmp	r7, #88	; 0x58
 8004fe0:	f000 80a4 	beq.w	800512c <_printf_i+0x170>
 8004fe4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fe8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fec:	e03a      	b.n	8005064 <_printf_i+0xa8>
 8004fee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004ff2:	2b15      	cmp	r3, #21
 8004ff4:	d8f6      	bhi.n	8004fe4 <_printf_i+0x28>
 8004ff6:	a101      	add	r1, pc, #4	; (adr r1, 8004ffc <_printf_i+0x40>)
 8004ff8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ffc:	08005055 	.word	0x08005055
 8005000:	08005069 	.word	0x08005069
 8005004:	08004fe5 	.word	0x08004fe5
 8005008:	08004fe5 	.word	0x08004fe5
 800500c:	08004fe5 	.word	0x08004fe5
 8005010:	08004fe5 	.word	0x08004fe5
 8005014:	08005069 	.word	0x08005069
 8005018:	08004fe5 	.word	0x08004fe5
 800501c:	08004fe5 	.word	0x08004fe5
 8005020:	08004fe5 	.word	0x08004fe5
 8005024:	08004fe5 	.word	0x08004fe5
 8005028:	08005177 	.word	0x08005177
 800502c:	08005099 	.word	0x08005099
 8005030:	08005159 	.word	0x08005159
 8005034:	08004fe5 	.word	0x08004fe5
 8005038:	08004fe5 	.word	0x08004fe5
 800503c:	08005199 	.word	0x08005199
 8005040:	08004fe5 	.word	0x08004fe5
 8005044:	08005099 	.word	0x08005099
 8005048:	08004fe5 	.word	0x08004fe5
 800504c:	08004fe5 	.word	0x08004fe5
 8005050:	08005161 	.word	0x08005161
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	1d1a      	adds	r2, r3, #4
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	602a      	str	r2, [r5, #0]
 800505c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005064:	2301      	movs	r3, #1
 8005066:	e0a4      	b.n	80051b2 <_printf_i+0x1f6>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	6829      	ldr	r1, [r5, #0]
 800506c:	0606      	lsls	r6, r0, #24
 800506e:	f101 0304 	add.w	r3, r1, #4
 8005072:	d50a      	bpl.n	800508a <_printf_i+0xce>
 8005074:	680e      	ldr	r6, [r1, #0]
 8005076:	602b      	str	r3, [r5, #0]
 8005078:	2e00      	cmp	r6, #0
 800507a:	da03      	bge.n	8005084 <_printf_i+0xc8>
 800507c:	232d      	movs	r3, #45	; 0x2d
 800507e:	4276      	negs	r6, r6
 8005080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005084:	230a      	movs	r3, #10
 8005086:	485e      	ldr	r0, [pc, #376]	; (8005200 <_printf_i+0x244>)
 8005088:	e019      	b.n	80050be <_printf_i+0x102>
 800508a:	680e      	ldr	r6, [r1, #0]
 800508c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005090:	602b      	str	r3, [r5, #0]
 8005092:	bf18      	it	ne
 8005094:	b236      	sxthne	r6, r6
 8005096:	e7ef      	b.n	8005078 <_printf_i+0xbc>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	6820      	ldr	r0, [r4, #0]
 800509c:	1d19      	adds	r1, r3, #4
 800509e:	6029      	str	r1, [r5, #0]
 80050a0:	0601      	lsls	r1, r0, #24
 80050a2:	d501      	bpl.n	80050a8 <_printf_i+0xec>
 80050a4:	681e      	ldr	r6, [r3, #0]
 80050a6:	e002      	b.n	80050ae <_printf_i+0xf2>
 80050a8:	0646      	lsls	r6, r0, #25
 80050aa:	d5fb      	bpl.n	80050a4 <_printf_i+0xe8>
 80050ac:	881e      	ldrh	r6, [r3, #0]
 80050ae:	2f6f      	cmp	r7, #111	; 0x6f
 80050b0:	bf0c      	ite	eq
 80050b2:	2308      	moveq	r3, #8
 80050b4:	230a      	movne	r3, #10
 80050b6:	4852      	ldr	r0, [pc, #328]	; (8005200 <_printf_i+0x244>)
 80050b8:	2100      	movs	r1, #0
 80050ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050be:	6865      	ldr	r5, [r4, #4]
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	bfa8      	it	ge
 80050c4:	6821      	ldrge	r1, [r4, #0]
 80050c6:	60a5      	str	r5, [r4, #8]
 80050c8:	bfa4      	itt	ge
 80050ca:	f021 0104 	bicge.w	r1, r1, #4
 80050ce:	6021      	strge	r1, [r4, #0]
 80050d0:	b90e      	cbnz	r6, 80050d6 <_printf_i+0x11a>
 80050d2:	2d00      	cmp	r5, #0
 80050d4:	d04d      	beq.n	8005172 <_printf_i+0x1b6>
 80050d6:	4615      	mov	r5, r2
 80050d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80050dc:	fb03 6711 	mls	r7, r3, r1, r6
 80050e0:	5dc7      	ldrb	r7, [r0, r7]
 80050e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050e6:	4637      	mov	r7, r6
 80050e8:	42bb      	cmp	r3, r7
 80050ea:	460e      	mov	r6, r1
 80050ec:	d9f4      	bls.n	80050d8 <_printf_i+0x11c>
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d10b      	bne.n	800510a <_printf_i+0x14e>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	07de      	lsls	r6, r3, #31
 80050f6:	d508      	bpl.n	800510a <_printf_i+0x14e>
 80050f8:	6923      	ldr	r3, [r4, #16]
 80050fa:	6861      	ldr	r1, [r4, #4]
 80050fc:	4299      	cmp	r1, r3
 80050fe:	bfde      	ittt	le
 8005100:	2330      	movle	r3, #48	; 0x30
 8005102:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005106:	f105 35ff 	addle.w	r5, r5, #4294967295
 800510a:	1b52      	subs	r2, r2, r5
 800510c:	6122      	str	r2, [r4, #16]
 800510e:	464b      	mov	r3, r9
 8005110:	4621      	mov	r1, r4
 8005112:	4640      	mov	r0, r8
 8005114:	f8cd a000 	str.w	sl, [sp]
 8005118:	aa03      	add	r2, sp, #12
 800511a:	f7ff fedf 	bl	8004edc <_printf_common>
 800511e:	3001      	adds	r0, #1
 8005120:	d14c      	bne.n	80051bc <_printf_i+0x200>
 8005122:	f04f 30ff 	mov.w	r0, #4294967295
 8005126:	b004      	add	sp, #16
 8005128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512c:	4834      	ldr	r0, [pc, #208]	; (8005200 <_printf_i+0x244>)
 800512e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005132:	6829      	ldr	r1, [r5, #0]
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	f851 6b04 	ldr.w	r6, [r1], #4
 800513a:	6029      	str	r1, [r5, #0]
 800513c:	061d      	lsls	r5, r3, #24
 800513e:	d514      	bpl.n	800516a <_printf_i+0x1ae>
 8005140:	07df      	lsls	r7, r3, #31
 8005142:	bf44      	itt	mi
 8005144:	f043 0320 	orrmi.w	r3, r3, #32
 8005148:	6023      	strmi	r3, [r4, #0]
 800514a:	b91e      	cbnz	r6, 8005154 <_printf_i+0x198>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f023 0320 	bic.w	r3, r3, #32
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	2310      	movs	r3, #16
 8005156:	e7af      	b.n	80050b8 <_printf_i+0xfc>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	f043 0320 	orr.w	r3, r3, #32
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	2378      	movs	r3, #120	; 0x78
 8005162:	4828      	ldr	r0, [pc, #160]	; (8005204 <_printf_i+0x248>)
 8005164:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005168:	e7e3      	b.n	8005132 <_printf_i+0x176>
 800516a:	0659      	lsls	r1, r3, #25
 800516c:	bf48      	it	mi
 800516e:	b2b6      	uxthmi	r6, r6
 8005170:	e7e6      	b.n	8005140 <_printf_i+0x184>
 8005172:	4615      	mov	r5, r2
 8005174:	e7bb      	b.n	80050ee <_printf_i+0x132>
 8005176:	682b      	ldr	r3, [r5, #0]
 8005178:	6826      	ldr	r6, [r4, #0]
 800517a:	1d18      	adds	r0, r3, #4
 800517c:	6961      	ldr	r1, [r4, #20]
 800517e:	6028      	str	r0, [r5, #0]
 8005180:	0635      	lsls	r5, r6, #24
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	d501      	bpl.n	800518a <_printf_i+0x1ce>
 8005186:	6019      	str	r1, [r3, #0]
 8005188:	e002      	b.n	8005190 <_printf_i+0x1d4>
 800518a:	0670      	lsls	r0, r6, #25
 800518c:	d5fb      	bpl.n	8005186 <_printf_i+0x1ca>
 800518e:	8019      	strh	r1, [r3, #0]
 8005190:	2300      	movs	r3, #0
 8005192:	4615      	mov	r5, r2
 8005194:	6123      	str	r3, [r4, #16]
 8005196:	e7ba      	b.n	800510e <_printf_i+0x152>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	2100      	movs	r1, #0
 800519c:	1d1a      	adds	r2, r3, #4
 800519e:	602a      	str	r2, [r5, #0]
 80051a0:	681d      	ldr	r5, [r3, #0]
 80051a2:	6862      	ldr	r2, [r4, #4]
 80051a4:	4628      	mov	r0, r5
 80051a6:	f001 fa21 	bl	80065ec <memchr>
 80051aa:	b108      	cbz	r0, 80051b0 <_printf_i+0x1f4>
 80051ac:	1b40      	subs	r0, r0, r5
 80051ae:	6060      	str	r0, [r4, #4]
 80051b0:	6863      	ldr	r3, [r4, #4]
 80051b2:	6123      	str	r3, [r4, #16]
 80051b4:	2300      	movs	r3, #0
 80051b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ba:	e7a8      	b.n	800510e <_printf_i+0x152>
 80051bc:	462a      	mov	r2, r5
 80051be:	4649      	mov	r1, r9
 80051c0:	4640      	mov	r0, r8
 80051c2:	6923      	ldr	r3, [r4, #16]
 80051c4:	47d0      	blx	sl
 80051c6:	3001      	adds	r0, #1
 80051c8:	d0ab      	beq.n	8005122 <_printf_i+0x166>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	079b      	lsls	r3, r3, #30
 80051ce:	d413      	bmi.n	80051f8 <_printf_i+0x23c>
 80051d0:	68e0      	ldr	r0, [r4, #12]
 80051d2:	9b03      	ldr	r3, [sp, #12]
 80051d4:	4298      	cmp	r0, r3
 80051d6:	bfb8      	it	lt
 80051d8:	4618      	movlt	r0, r3
 80051da:	e7a4      	b.n	8005126 <_printf_i+0x16a>
 80051dc:	2301      	movs	r3, #1
 80051de:	4632      	mov	r2, r6
 80051e0:	4649      	mov	r1, r9
 80051e2:	4640      	mov	r0, r8
 80051e4:	47d0      	blx	sl
 80051e6:	3001      	adds	r0, #1
 80051e8:	d09b      	beq.n	8005122 <_printf_i+0x166>
 80051ea:	3501      	adds	r5, #1
 80051ec:	68e3      	ldr	r3, [r4, #12]
 80051ee:	9903      	ldr	r1, [sp, #12]
 80051f0:	1a5b      	subs	r3, r3, r1
 80051f2:	42ab      	cmp	r3, r5
 80051f4:	dcf2      	bgt.n	80051dc <_printf_i+0x220>
 80051f6:	e7eb      	b.n	80051d0 <_printf_i+0x214>
 80051f8:	2500      	movs	r5, #0
 80051fa:	f104 0619 	add.w	r6, r4, #25
 80051fe:	e7f5      	b.n	80051ec <_printf_i+0x230>
 8005200:	080076fa 	.word	0x080076fa
 8005204:	0800770b 	.word	0x0800770b

08005208 <iprintf>:
 8005208:	b40f      	push	{r0, r1, r2, r3}
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <iprintf+0x2c>)
 800520c:	b513      	push	{r0, r1, r4, lr}
 800520e:	681c      	ldr	r4, [r3, #0]
 8005210:	b124      	cbz	r4, 800521c <iprintf+0x14>
 8005212:	69a3      	ldr	r3, [r4, #24]
 8005214:	b913      	cbnz	r3, 800521c <iprintf+0x14>
 8005216:	4620      	mov	r0, r4
 8005218:	f001 f8d6 	bl	80063c8 <__sinit>
 800521c:	ab05      	add	r3, sp, #20
 800521e:	4620      	mov	r0, r4
 8005220:	9a04      	ldr	r2, [sp, #16]
 8005222:	68a1      	ldr	r1, [r4, #8]
 8005224:	9301      	str	r3, [sp, #4]
 8005226:	f001 fe97 	bl	8006f58 <_vfiprintf_r>
 800522a:	b002      	add	sp, #8
 800522c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005230:	b004      	add	sp, #16
 8005232:	4770      	bx	lr
 8005234:	20000010 	.word	0x20000010

08005238 <_puts_r>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	460e      	mov	r6, r1
 800523c:	4605      	mov	r5, r0
 800523e:	b118      	cbz	r0, 8005248 <_puts_r+0x10>
 8005240:	6983      	ldr	r3, [r0, #24]
 8005242:	b90b      	cbnz	r3, 8005248 <_puts_r+0x10>
 8005244:	f001 f8c0 	bl	80063c8 <__sinit>
 8005248:	69ab      	ldr	r3, [r5, #24]
 800524a:	68ac      	ldr	r4, [r5, #8]
 800524c:	b913      	cbnz	r3, 8005254 <_puts_r+0x1c>
 800524e:	4628      	mov	r0, r5
 8005250:	f001 f8ba 	bl	80063c8 <__sinit>
 8005254:	4b2c      	ldr	r3, [pc, #176]	; (8005308 <_puts_r+0xd0>)
 8005256:	429c      	cmp	r4, r3
 8005258:	d120      	bne.n	800529c <_puts_r+0x64>
 800525a:	686c      	ldr	r4, [r5, #4]
 800525c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800525e:	07db      	lsls	r3, r3, #31
 8005260:	d405      	bmi.n	800526e <_puts_r+0x36>
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	0598      	lsls	r0, r3, #22
 8005266:	d402      	bmi.n	800526e <_puts_r+0x36>
 8005268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800526a:	f001 f950 	bl	800650e <__retarget_lock_acquire_recursive>
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	0719      	lsls	r1, r3, #28
 8005272:	d51d      	bpl.n	80052b0 <_puts_r+0x78>
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	b1db      	cbz	r3, 80052b0 <_puts_r+0x78>
 8005278:	3e01      	subs	r6, #1
 800527a:	68a3      	ldr	r3, [r4, #8]
 800527c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005280:	3b01      	subs	r3, #1
 8005282:	60a3      	str	r3, [r4, #8]
 8005284:	bb39      	cbnz	r1, 80052d6 <_puts_r+0x9e>
 8005286:	2b00      	cmp	r3, #0
 8005288:	da38      	bge.n	80052fc <_puts_r+0xc4>
 800528a:	4622      	mov	r2, r4
 800528c:	210a      	movs	r1, #10
 800528e:	4628      	mov	r0, r5
 8005290:	f000 f848 	bl	8005324 <__swbuf_r>
 8005294:	3001      	adds	r0, #1
 8005296:	d011      	beq.n	80052bc <_puts_r+0x84>
 8005298:	250a      	movs	r5, #10
 800529a:	e011      	b.n	80052c0 <_puts_r+0x88>
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <_puts_r+0xd4>)
 800529e:	429c      	cmp	r4, r3
 80052a0:	d101      	bne.n	80052a6 <_puts_r+0x6e>
 80052a2:	68ac      	ldr	r4, [r5, #8]
 80052a4:	e7da      	b.n	800525c <_puts_r+0x24>
 80052a6:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <_puts_r+0xd8>)
 80052a8:	429c      	cmp	r4, r3
 80052aa:	bf08      	it	eq
 80052ac:	68ec      	ldreq	r4, [r5, #12]
 80052ae:	e7d5      	b.n	800525c <_puts_r+0x24>
 80052b0:	4621      	mov	r1, r4
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f888 	bl	80053c8 <__swsetup_r>
 80052b8:	2800      	cmp	r0, #0
 80052ba:	d0dd      	beq.n	8005278 <_puts_r+0x40>
 80052bc:	f04f 35ff 	mov.w	r5, #4294967295
 80052c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052c2:	07da      	lsls	r2, r3, #31
 80052c4:	d405      	bmi.n	80052d2 <_puts_r+0x9a>
 80052c6:	89a3      	ldrh	r3, [r4, #12]
 80052c8:	059b      	lsls	r3, r3, #22
 80052ca:	d402      	bmi.n	80052d2 <_puts_r+0x9a>
 80052cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ce:	f001 f91f 	bl	8006510 <__retarget_lock_release_recursive>
 80052d2:	4628      	mov	r0, r5
 80052d4:	bd70      	pop	{r4, r5, r6, pc}
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	da04      	bge.n	80052e4 <_puts_r+0xac>
 80052da:	69a2      	ldr	r2, [r4, #24]
 80052dc:	429a      	cmp	r2, r3
 80052de:	dc06      	bgt.n	80052ee <_puts_r+0xb6>
 80052e0:	290a      	cmp	r1, #10
 80052e2:	d004      	beq.n	80052ee <_puts_r+0xb6>
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	6022      	str	r2, [r4, #0]
 80052ea:	7019      	strb	r1, [r3, #0]
 80052ec:	e7c5      	b.n	800527a <_puts_r+0x42>
 80052ee:	4622      	mov	r2, r4
 80052f0:	4628      	mov	r0, r5
 80052f2:	f000 f817 	bl	8005324 <__swbuf_r>
 80052f6:	3001      	adds	r0, #1
 80052f8:	d1bf      	bne.n	800527a <_puts_r+0x42>
 80052fa:	e7df      	b.n	80052bc <_puts_r+0x84>
 80052fc:	250a      	movs	r5, #10
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	6022      	str	r2, [r4, #0]
 8005304:	701d      	strb	r5, [r3, #0]
 8005306:	e7db      	b.n	80052c0 <_puts_r+0x88>
 8005308:	080077cc 	.word	0x080077cc
 800530c:	080077ec 	.word	0x080077ec
 8005310:	080077ac 	.word	0x080077ac

08005314 <puts>:
 8005314:	4b02      	ldr	r3, [pc, #8]	; (8005320 <puts+0xc>)
 8005316:	4601      	mov	r1, r0
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	f7ff bf8d 	b.w	8005238 <_puts_r>
 800531e:	bf00      	nop
 8005320:	20000010 	.word	0x20000010

08005324 <__swbuf_r>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	460e      	mov	r6, r1
 8005328:	4614      	mov	r4, r2
 800532a:	4605      	mov	r5, r0
 800532c:	b118      	cbz	r0, 8005336 <__swbuf_r+0x12>
 800532e:	6983      	ldr	r3, [r0, #24]
 8005330:	b90b      	cbnz	r3, 8005336 <__swbuf_r+0x12>
 8005332:	f001 f849 	bl	80063c8 <__sinit>
 8005336:	4b21      	ldr	r3, [pc, #132]	; (80053bc <__swbuf_r+0x98>)
 8005338:	429c      	cmp	r4, r3
 800533a:	d12b      	bne.n	8005394 <__swbuf_r+0x70>
 800533c:	686c      	ldr	r4, [r5, #4]
 800533e:	69a3      	ldr	r3, [r4, #24]
 8005340:	60a3      	str	r3, [r4, #8]
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	071a      	lsls	r2, r3, #28
 8005346:	d52f      	bpl.n	80053a8 <__swbuf_r+0x84>
 8005348:	6923      	ldr	r3, [r4, #16]
 800534a:	b36b      	cbz	r3, 80053a8 <__swbuf_r+0x84>
 800534c:	6923      	ldr	r3, [r4, #16]
 800534e:	6820      	ldr	r0, [r4, #0]
 8005350:	b2f6      	uxtb	r6, r6
 8005352:	1ac0      	subs	r0, r0, r3
 8005354:	6963      	ldr	r3, [r4, #20]
 8005356:	4637      	mov	r7, r6
 8005358:	4283      	cmp	r3, r0
 800535a:	dc04      	bgt.n	8005366 <__swbuf_r+0x42>
 800535c:	4621      	mov	r1, r4
 800535e:	4628      	mov	r0, r5
 8005360:	f000 ff9e 	bl	80062a0 <_fflush_r>
 8005364:	bb30      	cbnz	r0, 80053b4 <__swbuf_r+0x90>
 8005366:	68a3      	ldr	r3, [r4, #8]
 8005368:	3001      	adds	r0, #1
 800536a:	3b01      	subs	r3, #1
 800536c:	60a3      	str	r3, [r4, #8]
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	6022      	str	r2, [r4, #0]
 8005374:	701e      	strb	r6, [r3, #0]
 8005376:	6963      	ldr	r3, [r4, #20]
 8005378:	4283      	cmp	r3, r0
 800537a:	d004      	beq.n	8005386 <__swbuf_r+0x62>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	07db      	lsls	r3, r3, #31
 8005380:	d506      	bpl.n	8005390 <__swbuf_r+0x6c>
 8005382:	2e0a      	cmp	r6, #10
 8005384:	d104      	bne.n	8005390 <__swbuf_r+0x6c>
 8005386:	4621      	mov	r1, r4
 8005388:	4628      	mov	r0, r5
 800538a:	f000 ff89 	bl	80062a0 <_fflush_r>
 800538e:	b988      	cbnz	r0, 80053b4 <__swbuf_r+0x90>
 8005390:	4638      	mov	r0, r7
 8005392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005394:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <__swbuf_r+0x9c>)
 8005396:	429c      	cmp	r4, r3
 8005398:	d101      	bne.n	800539e <__swbuf_r+0x7a>
 800539a:	68ac      	ldr	r4, [r5, #8]
 800539c:	e7cf      	b.n	800533e <__swbuf_r+0x1a>
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <__swbuf_r+0xa0>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	bf08      	it	eq
 80053a4:	68ec      	ldreq	r4, [r5, #12]
 80053a6:	e7ca      	b.n	800533e <__swbuf_r+0x1a>
 80053a8:	4621      	mov	r1, r4
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f80c 	bl	80053c8 <__swsetup_r>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d0cb      	beq.n	800534c <__swbuf_r+0x28>
 80053b4:	f04f 37ff 	mov.w	r7, #4294967295
 80053b8:	e7ea      	b.n	8005390 <__swbuf_r+0x6c>
 80053ba:	bf00      	nop
 80053bc:	080077cc 	.word	0x080077cc
 80053c0:	080077ec 	.word	0x080077ec
 80053c4:	080077ac 	.word	0x080077ac

080053c8 <__swsetup_r>:
 80053c8:	4b32      	ldr	r3, [pc, #200]	; (8005494 <__swsetup_r+0xcc>)
 80053ca:	b570      	push	{r4, r5, r6, lr}
 80053cc:	681d      	ldr	r5, [r3, #0]
 80053ce:	4606      	mov	r6, r0
 80053d0:	460c      	mov	r4, r1
 80053d2:	b125      	cbz	r5, 80053de <__swsetup_r+0x16>
 80053d4:	69ab      	ldr	r3, [r5, #24]
 80053d6:	b913      	cbnz	r3, 80053de <__swsetup_r+0x16>
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 fff5 	bl	80063c8 <__sinit>
 80053de:	4b2e      	ldr	r3, [pc, #184]	; (8005498 <__swsetup_r+0xd0>)
 80053e0:	429c      	cmp	r4, r3
 80053e2:	d10f      	bne.n	8005404 <__swsetup_r+0x3c>
 80053e4:	686c      	ldr	r4, [r5, #4]
 80053e6:	89a3      	ldrh	r3, [r4, #12]
 80053e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053ec:	0719      	lsls	r1, r3, #28
 80053ee:	d42c      	bmi.n	800544a <__swsetup_r+0x82>
 80053f0:	06dd      	lsls	r5, r3, #27
 80053f2:	d411      	bmi.n	8005418 <__swsetup_r+0x50>
 80053f4:	2309      	movs	r3, #9
 80053f6:	6033      	str	r3, [r6, #0]
 80053f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	81a3      	strh	r3, [r4, #12]
 8005402:	e03e      	b.n	8005482 <__swsetup_r+0xba>
 8005404:	4b25      	ldr	r3, [pc, #148]	; (800549c <__swsetup_r+0xd4>)
 8005406:	429c      	cmp	r4, r3
 8005408:	d101      	bne.n	800540e <__swsetup_r+0x46>
 800540a:	68ac      	ldr	r4, [r5, #8]
 800540c:	e7eb      	b.n	80053e6 <__swsetup_r+0x1e>
 800540e:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <__swsetup_r+0xd8>)
 8005410:	429c      	cmp	r4, r3
 8005412:	bf08      	it	eq
 8005414:	68ec      	ldreq	r4, [r5, #12]
 8005416:	e7e6      	b.n	80053e6 <__swsetup_r+0x1e>
 8005418:	0758      	lsls	r0, r3, #29
 800541a:	d512      	bpl.n	8005442 <__swsetup_r+0x7a>
 800541c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800541e:	b141      	cbz	r1, 8005432 <__swsetup_r+0x6a>
 8005420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005424:	4299      	cmp	r1, r3
 8005426:	d002      	beq.n	800542e <__swsetup_r+0x66>
 8005428:	4630      	mov	r0, r6
 800542a:	f001 fc91 	bl	8006d50 <_free_r>
 800542e:	2300      	movs	r3, #0
 8005430:	6363      	str	r3, [r4, #52]	; 0x34
 8005432:	89a3      	ldrh	r3, [r4, #12]
 8005434:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005438:	81a3      	strh	r3, [r4, #12]
 800543a:	2300      	movs	r3, #0
 800543c:	6063      	str	r3, [r4, #4]
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f043 0308 	orr.w	r3, r3, #8
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	6923      	ldr	r3, [r4, #16]
 800544c:	b94b      	cbnz	r3, 8005462 <__swsetup_r+0x9a>
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005458:	d003      	beq.n	8005462 <__swsetup_r+0x9a>
 800545a:	4621      	mov	r1, r4
 800545c:	4630      	mov	r0, r6
 800545e:	f001 f87d 	bl	800655c <__smakebuf_r>
 8005462:	89a0      	ldrh	r0, [r4, #12]
 8005464:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005468:	f010 0301 	ands.w	r3, r0, #1
 800546c:	d00a      	beq.n	8005484 <__swsetup_r+0xbc>
 800546e:	2300      	movs	r3, #0
 8005470:	60a3      	str	r3, [r4, #8]
 8005472:	6963      	ldr	r3, [r4, #20]
 8005474:	425b      	negs	r3, r3
 8005476:	61a3      	str	r3, [r4, #24]
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	b943      	cbnz	r3, 800548e <__swsetup_r+0xc6>
 800547c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005480:	d1ba      	bne.n	80053f8 <__swsetup_r+0x30>
 8005482:	bd70      	pop	{r4, r5, r6, pc}
 8005484:	0781      	lsls	r1, r0, #30
 8005486:	bf58      	it	pl
 8005488:	6963      	ldrpl	r3, [r4, #20]
 800548a:	60a3      	str	r3, [r4, #8]
 800548c:	e7f4      	b.n	8005478 <__swsetup_r+0xb0>
 800548e:	2000      	movs	r0, #0
 8005490:	e7f7      	b.n	8005482 <__swsetup_r+0xba>
 8005492:	bf00      	nop
 8005494:	20000010 	.word	0x20000010
 8005498:	080077cc 	.word	0x080077cc
 800549c:	080077ec 	.word	0x080077ec
 80054a0:	080077ac 	.word	0x080077ac

080054a4 <quorem>:
 80054a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a8:	6903      	ldr	r3, [r0, #16]
 80054aa:	690c      	ldr	r4, [r1, #16]
 80054ac:	4607      	mov	r7, r0
 80054ae:	42a3      	cmp	r3, r4
 80054b0:	f2c0 8082 	blt.w	80055b8 <quorem+0x114>
 80054b4:	3c01      	subs	r4, #1
 80054b6:	f100 0514 	add.w	r5, r0, #20
 80054ba:	f101 0814 	add.w	r8, r1, #20
 80054be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054cc:	3301      	adds	r3, #1
 80054ce:	429a      	cmp	r2, r3
 80054d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80054d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054dc:	d331      	bcc.n	8005542 <quorem+0x9e>
 80054de:	f04f 0e00 	mov.w	lr, #0
 80054e2:	4640      	mov	r0, r8
 80054e4:	46ac      	mov	ip, r5
 80054e6:	46f2      	mov	sl, lr
 80054e8:	f850 2b04 	ldr.w	r2, [r0], #4
 80054ec:	b293      	uxth	r3, r2
 80054ee:	fb06 e303 	mla	r3, r6, r3, lr
 80054f2:	0c12      	lsrs	r2, r2, #16
 80054f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	fb06 e202 	mla	r2, r6, r2, lr
 80054fe:	ebaa 0303 	sub.w	r3, sl, r3
 8005502:	f8dc a000 	ldr.w	sl, [ip]
 8005506:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800550a:	fa1f fa8a 	uxth.w	sl, sl
 800550e:	4453      	add	r3, sl
 8005510:	f8dc a000 	ldr.w	sl, [ip]
 8005514:	b292      	uxth	r2, r2
 8005516:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800551a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800551e:	b29b      	uxth	r3, r3
 8005520:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005524:	4581      	cmp	r9, r0
 8005526:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800552a:	f84c 3b04 	str.w	r3, [ip], #4
 800552e:	d2db      	bcs.n	80054e8 <quorem+0x44>
 8005530:	f855 300b 	ldr.w	r3, [r5, fp]
 8005534:	b92b      	cbnz	r3, 8005542 <quorem+0x9e>
 8005536:	9b01      	ldr	r3, [sp, #4]
 8005538:	3b04      	subs	r3, #4
 800553a:	429d      	cmp	r5, r3
 800553c:	461a      	mov	r2, r3
 800553e:	d32f      	bcc.n	80055a0 <quorem+0xfc>
 8005540:	613c      	str	r4, [r7, #16]
 8005542:	4638      	mov	r0, r7
 8005544:	f001 faec 	bl	8006b20 <__mcmp>
 8005548:	2800      	cmp	r0, #0
 800554a:	db25      	blt.n	8005598 <quorem+0xf4>
 800554c:	4628      	mov	r0, r5
 800554e:	f04f 0c00 	mov.w	ip, #0
 8005552:	3601      	adds	r6, #1
 8005554:	f858 1b04 	ldr.w	r1, [r8], #4
 8005558:	f8d0 e000 	ldr.w	lr, [r0]
 800555c:	b28b      	uxth	r3, r1
 800555e:	ebac 0303 	sub.w	r3, ip, r3
 8005562:	fa1f f28e 	uxth.w	r2, lr
 8005566:	4413      	add	r3, r2
 8005568:	0c0a      	lsrs	r2, r1, #16
 800556a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800556e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005572:	b29b      	uxth	r3, r3
 8005574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005578:	45c1      	cmp	r9, r8
 800557a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800557e:	f840 3b04 	str.w	r3, [r0], #4
 8005582:	d2e7      	bcs.n	8005554 <quorem+0xb0>
 8005584:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005588:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800558c:	b922      	cbnz	r2, 8005598 <quorem+0xf4>
 800558e:	3b04      	subs	r3, #4
 8005590:	429d      	cmp	r5, r3
 8005592:	461a      	mov	r2, r3
 8005594:	d30a      	bcc.n	80055ac <quorem+0x108>
 8005596:	613c      	str	r4, [r7, #16]
 8005598:	4630      	mov	r0, r6
 800559a:	b003      	add	sp, #12
 800559c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a0:	6812      	ldr	r2, [r2, #0]
 80055a2:	3b04      	subs	r3, #4
 80055a4:	2a00      	cmp	r2, #0
 80055a6:	d1cb      	bne.n	8005540 <quorem+0x9c>
 80055a8:	3c01      	subs	r4, #1
 80055aa:	e7c6      	b.n	800553a <quorem+0x96>
 80055ac:	6812      	ldr	r2, [r2, #0]
 80055ae:	3b04      	subs	r3, #4
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	d1f0      	bne.n	8005596 <quorem+0xf2>
 80055b4:	3c01      	subs	r4, #1
 80055b6:	e7eb      	b.n	8005590 <quorem+0xec>
 80055b8:	2000      	movs	r0, #0
 80055ba:	e7ee      	b.n	800559a <quorem+0xf6>
 80055bc:	0000      	movs	r0, r0
	...

080055c0 <_dtoa_r>:
 80055c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	4616      	mov	r6, r2
 80055c6:	461f      	mov	r7, r3
 80055c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80055ca:	b099      	sub	sp, #100	; 0x64
 80055cc:	4605      	mov	r5, r0
 80055ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80055d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80055d6:	b974      	cbnz	r4, 80055f6 <_dtoa_r+0x36>
 80055d8:	2010      	movs	r0, #16
 80055da:	f000 ffff 	bl	80065dc <malloc>
 80055de:	4602      	mov	r2, r0
 80055e0:	6268      	str	r0, [r5, #36]	; 0x24
 80055e2:	b920      	cbnz	r0, 80055ee <_dtoa_r+0x2e>
 80055e4:	21ea      	movs	r1, #234	; 0xea
 80055e6:	4ba8      	ldr	r3, [pc, #672]	; (8005888 <_dtoa_r+0x2c8>)
 80055e8:	48a8      	ldr	r0, [pc, #672]	; (800588c <_dtoa_r+0x2cc>)
 80055ea:	f001 fe4b 	bl	8007284 <__assert_func>
 80055ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055f2:	6004      	str	r4, [r0, #0]
 80055f4:	60c4      	str	r4, [r0, #12]
 80055f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055f8:	6819      	ldr	r1, [r3, #0]
 80055fa:	b151      	cbz	r1, 8005612 <_dtoa_r+0x52>
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	2301      	movs	r3, #1
 8005600:	4093      	lsls	r3, r2
 8005602:	604a      	str	r2, [r1, #4]
 8005604:	608b      	str	r3, [r1, #8]
 8005606:	4628      	mov	r0, r5
 8005608:	f001 f84c 	bl	80066a4 <_Bfree>
 800560c:	2200      	movs	r2, #0
 800560e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	1e3b      	subs	r3, r7, #0
 8005614:	bfaf      	iteee	ge
 8005616:	2300      	movge	r3, #0
 8005618:	2201      	movlt	r2, #1
 800561a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800561e:	9305      	strlt	r3, [sp, #20]
 8005620:	bfa8      	it	ge
 8005622:	f8c8 3000 	strge.w	r3, [r8]
 8005626:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800562a:	4b99      	ldr	r3, [pc, #612]	; (8005890 <_dtoa_r+0x2d0>)
 800562c:	bfb8      	it	lt
 800562e:	f8c8 2000 	strlt.w	r2, [r8]
 8005632:	ea33 0309 	bics.w	r3, r3, r9
 8005636:	d119      	bne.n	800566c <_dtoa_r+0xac>
 8005638:	f242 730f 	movw	r3, #9999	; 0x270f
 800563c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800563e:	6013      	str	r3, [r2, #0]
 8005640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005644:	4333      	orrs	r3, r6
 8005646:	f000 857f 	beq.w	8006148 <_dtoa_r+0xb88>
 800564a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800564c:	b953      	cbnz	r3, 8005664 <_dtoa_r+0xa4>
 800564e:	4b91      	ldr	r3, [pc, #580]	; (8005894 <_dtoa_r+0x2d4>)
 8005650:	e022      	b.n	8005698 <_dtoa_r+0xd8>
 8005652:	4b91      	ldr	r3, [pc, #580]	; (8005898 <_dtoa_r+0x2d8>)
 8005654:	9303      	str	r3, [sp, #12]
 8005656:	3308      	adds	r3, #8
 8005658:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	9803      	ldr	r0, [sp, #12]
 800565e:	b019      	add	sp, #100	; 0x64
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	4b8b      	ldr	r3, [pc, #556]	; (8005894 <_dtoa_r+0x2d4>)
 8005666:	9303      	str	r3, [sp, #12]
 8005668:	3303      	adds	r3, #3
 800566a:	e7f5      	b.n	8005658 <_dtoa_r+0x98>
 800566c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005670:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005674:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005678:	2200      	movs	r2, #0
 800567a:	2300      	movs	r3, #0
 800567c:	f7fb f994 	bl	80009a8 <__aeabi_dcmpeq>
 8005680:	4680      	mov	r8, r0
 8005682:	b158      	cbz	r0, 800569c <_dtoa_r+0xdc>
 8005684:	2301      	movs	r3, #1
 8005686:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800568c:	2b00      	cmp	r3, #0
 800568e:	f000 8558 	beq.w	8006142 <_dtoa_r+0xb82>
 8005692:	4882      	ldr	r0, [pc, #520]	; (800589c <_dtoa_r+0x2dc>)
 8005694:	6018      	str	r0, [r3, #0]
 8005696:	1e43      	subs	r3, r0, #1
 8005698:	9303      	str	r3, [sp, #12]
 800569a:	e7df      	b.n	800565c <_dtoa_r+0x9c>
 800569c:	ab16      	add	r3, sp, #88	; 0x58
 800569e:	9301      	str	r3, [sp, #4]
 80056a0:	ab17      	add	r3, sp, #92	; 0x5c
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	4628      	mov	r0, r5
 80056a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80056aa:	f001 fae1 	bl	8006c70 <__d2b>
 80056ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80056b2:	4683      	mov	fp, r0
 80056b4:	2c00      	cmp	r4, #0
 80056b6:	d07f      	beq.n	80057b8 <_dtoa_r+0x1f8>
 80056b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80056bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80056c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80056ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80056ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80056d2:	2200      	movs	r2, #0
 80056d4:	4b72      	ldr	r3, [pc, #456]	; (80058a0 <_dtoa_r+0x2e0>)
 80056d6:	f7fa fd47 	bl	8000168 <__aeabi_dsub>
 80056da:	a365      	add	r3, pc, #404	; (adr r3, 8005870 <_dtoa_r+0x2b0>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f7fa fefa 	bl	80004d8 <__aeabi_dmul>
 80056e4:	a364      	add	r3, pc, #400	; (adr r3, 8005878 <_dtoa_r+0x2b8>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fd3f 	bl	800016c <__adddf3>
 80056ee:	4606      	mov	r6, r0
 80056f0:	4620      	mov	r0, r4
 80056f2:	460f      	mov	r7, r1
 80056f4:	f7fa fe86 	bl	8000404 <__aeabi_i2d>
 80056f8:	a361      	add	r3, pc, #388	; (adr r3, 8005880 <_dtoa_r+0x2c0>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fa feeb 	bl	80004d8 <__aeabi_dmul>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4630      	mov	r0, r6
 8005708:	4639      	mov	r1, r7
 800570a:	f7fa fd2f 	bl	800016c <__adddf3>
 800570e:	4606      	mov	r6, r0
 8005710:	460f      	mov	r7, r1
 8005712:	f7fb f991 	bl	8000a38 <__aeabi_d2iz>
 8005716:	2200      	movs	r2, #0
 8005718:	4682      	mov	sl, r0
 800571a:	2300      	movs	r3, #0
 800571c:	4630      	mov	r0, r6
 800571e:	4639      	mov	r1, r7
 8005720:	f7fb f94c 	bl	80009bc <__aeabi_dcmplt>
 8005724:	b148      	cbz	r0, 800573a <_dtoa_r+0x17a>
 8005726:	4650      	mov	r0, sl
 8005728:	f7fa fe6c 	bl	8000404 <__aeabi_i2d>
 800572c:	4632      	mov	r2, r6
 800572e:	463b      	mov	r3, r7
 8005730:	f7fb f93a 	bl	80009a8 <__aeabi_dcmpeq>
 8005734:	b908      	cbnz	r0, 800573a <_dtoa_r+0x17a>
 8005736:	f10a 3aff 	add.w	sl, sl, #4294967295
 800573a:	f1ba 0f16 	cmp.w	sl, #22
 800573e:	d858      	bhi.n	80057f2 <_dtoa_r+0x232>
 8005740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005744:	4b57      	ldr	r3, [pc, #348]	; (80058a4 <_dtoa_r+0x2e4>)
 8005746:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f7fb f935 	bl	80009bc <__aeabi_dcmplt>
 8005752:	2800      	cmp	r0, #0
 8005754:	d04f      	beq.n	80057f6 <_dtoa_r+0x236>
 8005756:	2300      	movs	r3, #0
 8005758:	f10a 3aff 	add.w	sl, sl, #4294967295
 800575c:	930f      	str	r3, [sp, #60]	; 0x3c
 800575e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005760:	1b1c      	subs	r4, r3, r4
 8005762:	1e63      	subs	r3, r4, #1
 8005764:	9309      	str	r3, [sp, #36]	; 0x24
 8005766:	bf49      	itett	mi
 8005768:	f1c4 0301 	rsbmi	r3, r4, #1
 800576c:	2300      	movpl	r3, #0
 800576e:	9306      	strmi	r3, [sp, #24]
 8005770:	2300      	movmi	r3, #0
 8005772:	bf54      	ite	pl
 8005774:	9306      	strpl	r3, [sp, #24]
 8005776:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005778:	f1ba 0f00 	cmp.w	sl, #0
 800577c:	db3d      	blt.n	80057fa <_dtoa_r+0x23a>
 800577e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005780:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005784:	4453      	add	r3, sl
 8005786:	9309      	str	r3, [sp, #36]	; 0x24
 8005788:	2300      	movs	r3, #0
 800578a:	930a      	str	r3, [sp, #40]	; 0x28
 800578c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800578e:	2b09      	cmp	r3, #9
 8005790:	f200 808c 	bhi.w	80058ac <_dtoa_r+0x2ec>
 8005794:	2b05      	cmp	r3, #5
 8005796:	bfc4      	itt	gt
 8005798:	3b04      	subgt	r3, #4
 800579a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800579c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800579e:	bfc8      	it	gt
 80057a0:	2400      	movgt	r4, #0
 80057a2:	f1a3 0302 	sub.w	r3, r3, #2
 80057a6:	bfd8      	it	le
 80057a8:	2401      	movle	r4, #1
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	f200 808a 	bhi.w	80058c4 <_dtoa_r+0x304>
 80057b0:	e8df f003 	tbb	[pc, r3]
 80057b4:	5b4d4f2d 	.word	0x5b4d4f2d
 80057b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80057bc:	441c      	add	r4, r3
 80057be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	bfc3      	ittte	gt
 80057c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057ca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80057ce:	fa09 f303 	lslgt.w	r3, r9, r3
 80057d2:	f1c3 0320 	rsble	r3, r3, #32
 80057d6:	bfc6      	itte	gt
 80057d8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80057dc:	4318      	orrgt	r0, r3
 80057de:	fa06 f003 	lslle.w	r0, r6, r3
 80057e2:	f7fa fdff 	bl	80003e4 <__aeabi_ui2d>
 80057e6:	2301      	movs	r3, #1
 80057e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80057ec:	3c01      	subs	r4, #1
 80057ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80057f0:	e76f      	b.n	80056d2 <_dtoa_r+0x112>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e7b2      	b.n	800575c <_dtoa_r+0x19c>
 80057f6:	900f      	str	r0, [sp, #60]	; 0x3c
 80057f8:	e7b1      	b.n	800575e <_dtoa_r+0x19e>
 80057fa:	9b06      	ldr	r3, [sp, #24]
 80057fc:	eba3 030a 	sub.w	r3, r3, sl
 8005800:	9306      	str	r3, [sp, #24]
 8005802:	f1ca 0300 	rsb	r3, sl, #0
 8005806:	930a      	str	r3, [sp, #40]	; 0x28
 8005808:	2300      	movs	r3, #0
 800580a:	930e      	str	r3, [sp, #56]	; 0x38
 800580c:	e7be      	b.n	800578c <_dtoa_r+0x1cc>
 800580e:	2300      	movs	r3, #0
 8005810:	930b      	str	r3, [sp, #44]	; 0x2c
 8005812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005814:	2b00      	cmp	r3, #0
 8005816:	dc58      	bgt.n	80058ca <_dtoa_r+0x30a>
 8005818:	f04f 0901 	mov.w	r9, #1
 800581c:	464b      	mov	r3, r9
 800581e:	f8cd 9020 	str.w	r9, [sp, #32]
 8005822:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005826:	2200      	movs	r2, #0
 8005828:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800582a:	6042      	str	r2, [r0, #4]
 800582c:	2204      	movs	r2, #4
 800582e:	f102 0614 	add.w	r6, r2, #20
 8005832:	429e      	cmp	r6, r3
 8005834:	6841      	ldr	r1, [r0, #4]
 8005836:	d94e      	bls.n	80058d6 <_dtoa_r+0x316>
 8005838:	4628      	mov	r0, r5
 800583a:	f000 fef3 	bl	8006624 <_Balloc>
 800583e:	9003      	str	r0, [sp, #12]
 8005840:	2800      	cmp	r0, #0
 8005842:	d14c      	bne.n	80058de <_dtoa_r+0x31e>
 8005844:	4602      	mov	r2, r0
 8005846:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <_dtoa_r+0x2e8>)
 800584c:	e6cc      	b.n	80055e8 <_dtoa_r+0x28>
 800584e:	2301      	movs	r3, #1
 8005850:	e7de      	b.n	8005810 <_dtoa_r+0x250>
 8005852:	2300      	movs	r3, #0
 8005854:	930b      	str	r3, [sp, #44]	; 0x2c
 8005856:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005858:	eb0a 0903 	add.w	r9, sl, r3
 800585c:	f109 0301 	add.w	r3, r9, #1
 8005860:	2b01      	cmp	r3, #1
 8005862:	9308      	str	r3, [sp, #32]
 8005864:	bfb8      	it	lt
 8005866:	2301      	movlt	r3, #1
 8005868:	e7dd      	b.n	8005826 <_dtoa_r+0x266>
 800586a:	2301      	movs	r3, #1
 800586c:	e7f2      	b.n	8005854 <_dtoa_r+0x294>
 800586e:	bf00      	nop
 8005870:	636f4361 	.word	0x636f4361
 8005874:	3fd287a7 	.word	0x3fd287a7
 8005878:	8b60c8b3 	.word	0x8b60c8b3
 800587c:	3fc68a28 	.word	0x3fc68a28
 8005880:	509f79fb 	.word	0x509f79fb
 8005884:	3fd34413 	.word	0x3fd34413
 8005888:	08007729 	.word	0x08007729
 800588c:	08007740 	.word	0x08007740
 8005890:	7ff00000 	.word	0x7ff00000
 8005894:	08007725 	.word	0x08007725
 8005898:	0800771c 	.word	0x0800771c
 800589c:	080076f9 	.word	0x080076f9
 80058a0:	3ff80000 	.word	0x3ff80000
 80058a4:	08007890 	.word	0x08007890
 80058a8:	0800779b 	.word	0x0800779b
 80058ac:	2401      	movs	r4, #1
 80058ae:	2300      	movs	r3, #0
 80058b0:	940b      	str	r4, [sp, #44]	; 0x2c
 80058b2:	9322      	str	r3, [sp, #136]	; 0x88
 80058b4:	f04f 39ff 	mov.w	r9, #4294967295
 80058b8:	2200      	movs	r2, #0
 80058ba:	2312      	movs	r3, #18
 80058bc:	f8cd 9020 	str.w	r9, [sp, #32]
 80058c0:	9223      	str	r2, [sp, #140]	; 0x8c
 80058c2:	e7b0      	b.n	8005826 <_dtoa_r+0x266>
 80058c4:	2301      	movs	r3, #1
 80058c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80058c8:	e7f4      	b.n	80058b4 <_dtoa_r+0x2f4>
 80058ca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80058ce:	464b      	mov	r3, r9
 80058d0:	f8cd 9020 	str.w	r9, [sp, #32]
 80058d4:	e7a7      	b.n	8005826 <_dtoa_r+0x266>
 80058d6:	3101      	adds	r1, #1
 80058d8:	6041      	str	r1, [r0, #4]
 80058da:	0052      	lsls	r2, r2, #1
 80058dc:	e7a7      	b.n	800582e <_dtoa_r+0x26e>
 80058de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80058e0:	9a03      	ldr	r2, [sp, #12]
 80058e2:	601a      	str	r2, [r3, #0]
 80058e4:	9b08      	ldr	r3, [sp, #32]
 80058e6:	2b0e      	cmp	r3, #14
 80058e8:	f200 80a8 	bhi.w	8005a3c <_dtoa_r+0x47c>
 80058ec:	2c00      	cmp	r4, #0
 80058ee:	f000 80a5 	beq.w	8005a3c <_dtoa_r+0x47c>
 80058f2:	f1ba 0f00 	cmp.w	sl, #0
 80058f6:	dd34      	ble.n	8005962 <_dtoa_r+0x3a2>
 80058f8:	4a9a      	ldr	r2, [pc, #616]	; (8005b64 <_dtoa_r+0x5a4>)
 80058fa:	f00a 030f 	and.w	r3, sl, #15
 80058fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005902:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800590a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800590e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8005912:	d016      	beq.n	8005942 <_dtoa_r+0x382>
 8005914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005918:	4b93      	ldr	r3, [pc, #588]	; (8005b68 <_dtoa_r+0x5a8>)
 800591a:	2703      	movs	r7, #3
 800591c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005920:	f7fa ff04 	bl	800072c <__aeabi_ddiv>
 8005924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005928:	f004 040f 	and.w	r4, r4, #15
 800592c:	4e8e      	ldr	r6, [pc, #568]	; (8005b68 <_dtoa_r+0x5a8>)
 800592e:	b954      	cbnz	r4, 8005946 <_dtoa_r+0x386>
 8005930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005934:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005938:	f7fa fef8 	bl	800072c <__aeabi_ddiv>
 800593c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005940:	e029      	b.n	8005996 <_dtoa_r+0x3d6>
 8005942:	2702      	movs	r7, #2
 8005944:	e7f2      	b.n	800592c <_dtoa_r+0x36c>
 8005946:	07e1      	lsls	r1, r4, #31
 8005948:	d508      	bpl.n	800595c <_dtoa_r+0x39c>
 800594a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800594e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005952:	f7fa fdc1 	bl	80004d8 <__aeabi_dmul>
 8005956:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800595a:	3701      	adds	r7, #1
 800595c:	1064      	asrs	r4, r4, #1
 800595e:	3608      	adds	r6, #8
 8005960:	e7e5      	b.n	800592e <_dtoa_r+0x36e>
 8005962:	f000 80a5 	beq.w	8005ab0 <_dtoa_r+0x4f0>
 8005966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800596a:	f1ca 0400 	rsb	r4, sl, #0
 800596e:	4b7d      	ldr	r3, [pc, #500]	; (8005b64 <_dtoa_r+0x5a4>)
 8005970:	f004 020f 	and.w	r2, r4, #15
 8005974:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597c:	f7fa fdac 	bl	80004d8 <__aeabi_dmul>
 8005980:	2702      	movs	r7, #2
 8005982:	2300      	movs	r3, #0
 8005984:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005988:	4e77      	ldr	r6, [pc, #476]	; (8005b68 <_dtoa_r+0x5a8>)
 800598a:	1124      	asrs	r4, r4, #4
 800598c:	2c00      	cmp	r4, #0
 800598e:	f040 8084 	bne.w	8005a9a <_dtoa_r+0x4da>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1d2      	bne.n	800593c <_dtoa_r+0x37c>
 8005996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 808b 	beq.w	8005ab4 <_dtoa_r+0x4f4>
 800599e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80059a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80059a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059aa:	2200      	movs	r2, #0
 80059ac:	4b6f      	ldr	r3, [pc, #444]	; (8005b6c <_dtoa_r+0x5ac>)
 80059ae:	f7fb f805 	bl	80009bc <__aeabi_dcmplt>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d07e      	beq.n	8005ab4 <_dtoa_r+0x4f4>
 80059b6:	9b08      	ldr	r3, [sp, #32]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d07b      	beq.n	8005ab4 <_dtoa_r+0x4f4>
 80059bc:	f1b9 0f00 	cmp.w	r9, #0
 80059c0:	dd38      	ble.n	8005a34 <_dtoa_r+0x474>
 80059c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059c6:	2200      	movs	r2, #0
 80059c8:	4b69      	ldr	r3, [pc, #420]	; (8005b70 <_dtoa_r+0x5b0>)
 80059ca:	f7fa fd85 	bl	80004d8 <__aeabi_dmul>
 80059ce:	464c      	mov	r4, r9
 80059d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059d4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80059d8:	3701      	adds	r7, #1
 80059da:	4638      	mov	r0, r7
 80059dc:	f7fa fd12 	bl	8000404 <__aeabi_i2d>
 80059e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059e4:	f7fa fd78 	bl	80004d8 <__aeabi_dmul>
 80059e8:	2200      	movs	r2, #0
 80059ea:	4b62      	ldr	r3, [pc, #392]	; (8005b74 <_dtoa_r+0x5b4>)
 80059ec:	f7fa fbbe 	bl	800016c <__adddf3>
 80059f0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80059f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059f8:	9611      	str	r6, [sp, #68]	; 0x44
 80059fa:	2c00      	cmp	r4, #0
 80059fc:	d15d      	bne.n	8005aba <_dtoa_r+0x4fa>
 80059fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a02:	2200      	movs	r2, #0
 8005a04:	4b5c      	ldr	r3, [pc, #368]	; (8005b78 <_dtoa_r+0x5b8>)
 8005a06:	f7fa fbaf 	bl	8000168 <__aeabi_dsub>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a12:	4633      	mov	r3, r6
 8005a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a16:	f7fa ffef 	bl	80009f8 <__aeabi_dcmpgt>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	f040 829c 	bne.w	8005f58 <_dtoa_r+0x998>
 8005a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005a2a:	f7fa ffc7 	bl	80009bc <__aeabi_dcmplt>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f040 8290 	bne.w	8005f54 <_dtoa_r+0x994>
 8005a34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005a38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f2c0 8152 	blt.w	8005ce8 <_dtoa_r+0x728>
 8005a44:	f1ba 0f0e 	cmp.w	sl, #14
 8005a48:	f300 814e 	bgt.w	8005ce8 <_dtoa_r+0x728>
 8005a4c:	4b45      	ldr	r3, [pc, #276]	; (8005b64 <_dtoa_r+0x5a4>)
 8005a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f280 80db 	bge.w	8005c18 <_dtoa_r+0x658>
 8005a62:	9b08      	ldr	r3, [sp, #32]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f300 80d7 	bgt.w	8005c18 <_dtoa_r+0x658>
 8005a6a:	f040 8272 	bne.w	8005f52 <_dtoa_r+0x992>
 8005a6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a72:	2200      	movs	r2, #0
 8005a74:	4b40      	ldr	r3, [pc, #256]	; (8005b78 <_dtoa_r+0x5b8>)
 8005a76:	f7fa fd2f 	bl	80004d8 <__aeabi_dmul>
 8005a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7e:	f7fa ffb1 	bl	80009e4 <__aeabi_dcmpge>
 8005a82:	9c08      	ldr	r4, [sp, #32]
 8005a84:	4626      	mov	r6, r4
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f040 8248 	bne.w	8005f1c <_dtoa_r+0x95c>
 8005a8c:	2331      	movs	r3, #49	; 0x31
 8005a8e:	9f03      	ldr	r7, [sp, #12]
 8005a90:	f10a 0a01 	add.w	sl, sl, #1
 8005a94:	f807 3b01 	strb.w	r3, [r7], #1
 8005a98:	e244      	b.n	8005f24 <_dtoa_r+0x964>
 8005a9a:	07e2      	lsls	r2, r4, #31
 8005a9c:	d505      	bpl.n	8005aaa <_dtoa_r+0x4ea>
 8005a9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005aa2:	f7fa fd19 	bl	80004d8 <__aeabi_dmul>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	3701      	adds	r7, #1
 8005aaa:	1064      	asrs	r4, r4, #1
 8005aac:	3608      	adds	r6, #8
 8005aae:	e76d      	b.n	800598c <_dtoa_r+0x3cc>
 8005ab0:	2702      	movs	r7, #2
 8005ab2:	e770      	b.n	8005996 <_dtoa_r+0x3d6>
 8005ab4:	46d0      	mov	r8, sl
 8005ab6:	9c08      	ldr	r4, [sp, #32]
 8005ab8:	e78f      	b.n	80059da <_dtoa_r+0x41a>
 8005aba:	9903      	ldr	r1, [sp, #12]
 8005abc:	4b29      	ldr	r3, [pc, #164]	; (8005b64 <_dtoa_r+0x5a4>)
 8005abe:	4421      	add	r1, r4
 8005ac0:	9112      	str	r1, [sp, #72]	; 0x48
 8005ac2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ac4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ac8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005acc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ad0:	2900      	cmp	r1, #0
 8005ad2:	d055      	beq.n	8005b80 <_dtoa_r+0x5c0>
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	4929      	ldr	r1, [pc, #164]	; (8005b7c <_dtoa_r+0x5bc>)
 8005ad8:	f7fa fe28 	bl	800072c <__aeabi_ddiv>
 8005adc:	463b      	mov	r3, r7
 8005ade:	4632      	mov	r2, r6
 8005ae0:	f7fa fb42 	bl	8000168 <__aeabi_dsub>
 8005ae4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005ae8:	9f03      	ldr	r7, [sp, #12]
 8005aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aee:	f7fa ffa3 	bl	8000a38 <__aeabi_d2iz>
 8005af2:	4604      	mov	r4, r0
 8005af4:	f7fa fc86 	bl	8000404 <__aeabi_i2d>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b00:	f7fa fb32 	bl	8000168 <__aeabi_dsub>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	3430      	adds	r4, #48	; 0x30
 8005b0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b12:	f807 4b01 	strb.w	r4, [r7], #1
 8005b16:	f7fa ff51 	bl	80009bc <__aeabi_dcmplt>
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d174      	bne.n	8005c08 <_dtoa_r+0x648>
 8005b1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b22:	2000      	movs	r0, #0
 8005b24:	4911      	ldr	r1, [pc, #68]	; (8005b6c <_dtoa_r+0x5ac>)
 8005b26:	f7fa fb1f 	bl	8000168 <__aeabi_dsub>
 8005b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b2e:	f7fa ff45 	bl	80009bc <__aeabi_dcmplt>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f040 80b7 	bne.w	8005ca6 <_dtoa_r+0x6e6>
 8005b38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b3a:	429f      	cmp	r7, r3
 8005b3c:	f43f af7a 	beq.w	8005a34 <_dtoa_r+0x474>
 8005b40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b44:	2200      	movs	r2, #0
 8005b46:	4b0a      	ldr	r3, [pc, #40]	; (8005b70 <_dtoa_r+0x5b0>)
 8005b48:	f7fa fcc6 	bl	80004d8 <__aeabi_dmul>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <_dtoa_r+0x5b0>)
 8005b58:	f7fa fcbe 	bl	80004d8 <__aeabi_dmul>
 8005b5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b60:	e7c3      	b.n	8005aea <_dtoa_r+0x52a>
 8005b62:	bf00      	nop
 8005b64:	08007890 	.word	0x08007890
 8005b68:	08007868 	.word	0x08007868
 8005b6c:	3ff00000 	.word	0x3ff00000
 8005b70:	40240000 	.word	0x40240000
 8005b74:	401c0000 	.word	0x401c0000
 8005b78:	40140000 	.word	0x40140000
 8005b7c:	3fe00000 	.word	0x3fe00000
 8005b80:	4630      	mov	r0, r6
 8005b82:	4639      	mov	r1, r7
 8005b84:	f7fa fca8 	bl	80004d8 <__aeabi_dmul>
 8005b88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b8e:	9c03      	ldr	r4, [sp, #12]
 8005b90:	9314      	str	r3, [sp, #80]	; 0x50
 8005b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b96:	f7fa ff4f 	bl	8000a38 <__aeabi_d2iz>
 8005b9a:	9015      	str	r0, [sp, #84]	; 0x54
 8005b9c:	f7fa fc32 	bl	8000404 <__aeabi_i2d>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ba8:	f7fa fade 	bl	8000168 <__aeabi_dsub>
 8005bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bae:	4606      	mov	r6, r0
 8005bb0:	3330      	adds	r3, #48	; 0x30
 8005bb2:	f804 3b01 	strb.w	r3, [r4], #1
 8005bb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bb8:	460f      	mov	r7, r1
 8005bba:	429c      	cmp	r4, r3
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	d124      	bne.n	8005c0c <_dtoa_r+0x64c>
 8005bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bc6:	4bb0      	ldr	r3, [pc, #704]	; (8005e88 <_dtoa_r+0x8c8>)
 8005bc8:	f7fa fad0 	bl	800016c <__adddf3>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa ff10 	bl	80009f8 <__aeabi_dcmpgt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	d163      	bne.n	8005ca4 <_dtoa_r+0x6e4>
 8005bdc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005be0:	2000      	movs	r0, #0
 8005be2:	49a9      	ldr	r1, [pc, #676]	; (8005e88 <_dtoa_r+0x8c8>)
 8005be4:	f7fa fac0 	bl	8000168 <__aeabi_dsub>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4630      	mov	r0, r6
 8005bee:	4639      	mov	r1, r7
 8005bf0:	f7fa fee4 	bl	80009bc <__aeabi_dcmplt>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	f43f af1d 	beq.w	8005a34 <_dtoa_r+0x474>
 8005bfa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005bfc:	1e7b      	subs	r3, r7, #1
 8005bfe:	9314      	str	r3, [sp, #80]	; 0x50
 8005c00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c04:	2b30      	cmp	r3, #48	; 0x30
 8005c06:	d0f8      	beq.n	8005bfa <_dtoa_r+0x63a>
 8005c08:	46c2      	mov	sl, r8
 8005c0a:	e03b      	b.n	8005c84 <_dtoa_r+0x6c4>
 8005c0c:	4b9f      	ldr	r3, [pc, #636]	; (8005e8c <_dtoa_r+0x8cc>)
 8005c0e:	f7fa fc63 	bl	80004d8 <__aeabi_dmul>
 8005c12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c16:	e7bc      	b.n	8005b92 <_dtoa_r+0x5d2>
 8005c18:	9f03      	ldr	r7, [sp, #12]
 8005c1a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005c1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c22:	4640      	mov	r0, r8
 8005c24:	4649      	mov	r1, r9
 8005c26:	f7fa fd81 	bl	800072c <__aeabi_ddiv>
 8005c2a:	f7fa ff05 	bl	8000a38 <__aeabi_d2iz>
 8005c2e:	4604      	mov	r4, r0
 8005c30:	f7fa fbe8 	bl	8000404 <__aeabi_i2d>
 8005c34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c38:	f7fa fc4e 	bl	80004d8 <__aeabi_dmul>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4640      	mov	r0, r8
 8005c42:	4649      	mov	r1, r9
 8005c44:	f7fa fa90 	bl	8000168 <__aeabi_dsub>
 8005c48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005c4c:	f807 6b01 	strb.w	r6, [r7], #1
 8005c50:	9e03      	ldr	r6, [sp, #12]
 8005c52:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005c56:	1bbe      	subs	r6, r7, r6
 8005c58:	45b4      	cmp	ip, r6
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	d136      	bne.n	8005cce <_dtoa_r+0x70e>
 8005c60:	f7fa fa84 	bl	800016c <__adddf3>
 8005c64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c68:	4680      	mov	r8, r0
 8005c6a:	4689      	mov	r9, r1
 8005c6c:	f7fa fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8005c70:	bb58      	cbnz	r0, 8005cca <_dtoa_r+0x70a>
 8005c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c76:	4640      	mov	r0, r8
 8005c78:	4649      	mov	r1, r9
 8005c7a:	f7fa fe95 	bl	80009a8 <__aeabi_dcmpeq>
 8005c7e:	b108      	cbz	r0, 8005c84 <_dtoa_r+0x6c4>
 8005c80:	07e1      	lsls	r1, r4, #31
 8005c82:	d422      	bmi.n	8005cca <_dtoa_r+0x70a>
 8005c84:	4628      	mov	r0, r5
 8005c86:	4659      	mov	r1, fp
 8005c88:	f000 fd0c 	bl	80066a4 <_Bfree>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	703b      	strb	r3, [r7, #0]
 8005c90:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005c92:	f10a 0001 	add.w	r0, sl, #1
 8005c96:	6018      	str	r0, [r3, #0]
 8005c98:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f43f acde 	beq.w	800565c <_dtoa_r+0x9c>
 8005ca0:	601f      	str	r7, [r3, #0]
 8005ca2:	e4db      	b.n	800565c <_dtoa_r+0x9c>
 8005ca4:	4627      	mov	r7, r4
 8005ca6:	463b      	mov	r3, r7
 8005ca8:	461f      	mov	r7, r3
 8005caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cae:	2a39      	cmp	r2, #57	; 0x39
 8005cb0:	d107      	bne.n	8005cc2 <_dtoa_r+0x702>
 8005cb2:	9a03      	ldr	r2, [sp, #12]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d1f7      	bne.n	8005ca8 <_dtoa_r+0x6e8>
 8005cb8:	2230      	movs	r2, #48	; 0x30
 8005cba:	9903      	ldr	r1, [sp, #12]
 8005cbc:	f108 0801 	add.w	r8, r8, #1
 8005cc0:	700a      	strb	r2, [r1, #0]
 8005cc2:	781a      	ldrb	r2, [r3, #0]
 8005cc4:	3201      	adds	r2, #1
 8005cc6:	701a      	strb	r2, [r3, #0]
 8005cc8:	e79e      	b.n	8005c08 <_dtoa_r+0x648>
 8005cca:	46d0      	mov	r8, sl
 8005ccc:	e7eb      	b.n	8005ca6 <_dtoa_r+0x6e6>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	4b6e      	ldr	r3, [pc, #440]	; (8005e8c <_dtoa_r+0x8cc>)
 8005cd2:	f7fa fc01 	bl	80004d8 <__aeabi_dmul>
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4680      	mov	r8, r0
 8005cdc:	4689      	mov	r9, r1
 8005cde:	f7fa fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d09b      	beq.n	8005c1e <_dtoa_r+0x65e>
 8005ce6:	e7cd      	b.n	8005c84 <_dtoa_r+0x6c4>
 8005ce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	f000 80d0 	beq.w	8005e90 <_dtoa_r+0x8d0>
 8005cf0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005cf2:	2a01      	cmp	r2, #1
 8005cf4:	f300 80ae 	bgt.w	8005e54 <_dtoa_r+0x894>
 8005cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005cfa:	2a00      	cmp	r2, #0
 8005cfc:	f000 80a6 	beq.w	8005e4c <_dtoa_r+0x88c>
 8005d00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d06:	9f06      	ldr	r7, [sp, #24]
 8005d08:	9a06      	ldr	r2, [sp, #24]
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	441a      	add	r2, r3
 8005d0e:	9206      	str	r2, [sp, #24]
 8005d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d12:	4628      	mov	r0, r5
 8005d14:	441a      	add	r2, r3
 8005d16:	9209      	str	r2, [sp, #36]	; 0x24
 8005d18:	f000 fd7a 	bl	8006810 <__i2b>
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	2f00      	cmp	r7, #0
 8005d20:	dd0c      	ble.n	8005d3c <_dtoa_r+0x77c>
 8005d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dd09      	ble.n	8005d3c <_dtoa_r+0x77c>
 8005d28:	42bb      	cmp	r3, r7
 8005d2a:	bfa8      	it	ge
 8005d2c:	463b      	movge	r3, r7
 8005d2e:	9a06      	ldr	r2, [sp, #24]
 8005d30:	1aff      	subs	r7, r7, r3
 8005d32:	1ad2      	subs	r2, r2, r3
 8005d34:	9206      	str	r2, [sp, #24]
 8005d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d3e:	b1f3      	cbz	r3, 8005d7e <_dtoa_r+0x7be>
 8005d40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 80a8 	beq.w	8005e98 <_dtoa_r+0x8d8>
 8005d48:	2c00      	cmp	r4, #0
 8005d4a:	dd10      	ble.n	8005d6e <_dtoa_r+0x7ae>
 8005d4c:	4631      	mov	r1, r6
 8005d4e:	4622      	mov	r2, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 fe1b 	bl	800698c <__pow5mult>
 8005d56:	465a      	mov	r2, fp
 8005d58:	4601      	mov	r1, r0
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	4628      	mov	r0, r5
 8005d5e:	f000 fd6d 	bl	800683c <__multiply>
 8005d62:	4680      	mov	r8, r0
 8005d64:	4659      	mov	r1, fp
 8005d66:	4628      	mov	r0, r5
 8005d68:	f000 fc9c 	bl	80066a4 <_Bfree>
 8005d6c:	46c3      	mov	fp, r8
 8005d6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d70:	1b1a      	subs	r2, r3, r4
 8005d72:	d004      	beq.n	8005d7e <_dtoa_r+0x7be>
 8005d74:	4659      	mov	r1, fp
 8005d76:	4628      	mov	r0, r5
 8005d78:	f000 fe08 	bl	800698c <__pow5mult>
 8005d7c:	4683      	mov	fp, r0
 8005d7e:	2101      	movs	r1, #1
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 fd45 	bl	8006810 <__i2b>
 8005d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d88:	4604      	mov	r4, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f340 8086 	ble.w	8005e9c <_dtoa_r+0x8dc>
 8005d90:	461a      	mov	r2, r3
 8005d92:	4601      	mov	r1, r0
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 fdf9 	bl	800698c <__pow5mult>
 8005d9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	dd7f      	ble.n	8005ea2 <_dtoa_r+0x8e2>
 8005da2:	f04f 0800 	mov.w	r8, #0
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005dac:	6918      	ldr	r0, [r3, #16]
 8005dae:	f000 fce1 	bl	8006774 <__hi0bits>
 8005db2:	f1c0 0020 	rsb	r0, r0, #32
 8005db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005db8:	4418      	add	r0, r3
 8005dba:	f010 001f 	ands.w	r0, r0, #31
 8005dbe:	f000 8092 	beq.w	8005ee6 <_dtoa_r+0x926>
 8005dc2:	f1c0 0320 	rsb	r3, r0, #32
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	f340 808a 	ble.w	8005ee0 <_dtoa_r+0x920>
 8005dcc:	f1c0 001c 	rsb	r0, r0, #28
 8005dd0:	9b06      	ldr	r3, [sp, #24]
 8005dd2:	4407      	add	r7, r0
 8005dd4:	4403      	add	r3, r0
 8005dd6:	9306      	str	r3, [sp, #24]
 8005dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dda:	4403      	add	r3, r0
 8005ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8005dde:	9b06      	ldr	r3, [sp, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	dd05      	ble.n	8005df0 <_dtoa_r+0x830>
 8005de4:	4659      	mov	r1, fp
 8005de6:	461a      	mov	r2, r3
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 fe29 	bl	8006a40 <__lshift>
 8005dee:	4683      	mov	fp, r0
 8005df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dd05      	ble.n	8005e02 <_dtoa_r+0x842>
 8005df6:	4621      	mov	r1, r4
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f000 fe20 	bl	8006a40 <__lshift>
 8005e00:	4604      	mov	r4, r0
 8005e02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d070      	beq.n	8005eea <_dtoa_r+0x92a>
 8005e08:	4621      	mov	r1, r4
 8005e0a:	4658      	mov	r0, fp
 8005e0c:	f000 fe88 	bl	8006b20 <__mcmp>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	da6a      	bge.n	8005eea <_dtoa_r+0x92a>
 8005e14:	2300      	movs	r3, #0
 8005e16:	4659      	mov	r1, fp
 8005e18:	220a      	movs	r2, #10
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 fc64 	bl	80066e8 <__multadd>
 8005e20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e22:	4683      	mov	fp, r0
 8005e24:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	f000 8194 	beq.w	8006156 <_dtoa_r+0xb96>
 8005e2e:	4631      	mov	r1, r6
 8005e30:	2300      	movs	r3, #0
 8005e32:	220a      	movs	r2, #10
 8005e34:	4628      	mov	r0, r5
 8005e36:	f000 fc57 	bl	80066e8 <__multadd>
 8005e3a:	f1b9 0f00 	cmp.w	r9, #0
 8005e3e:	4606      	mov	r6, r0
 8005e40:	f300 8093 	bgt.w	8005f6a <_dtoa_r+0x9aa>
 8005e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	dc57      	bgt.n	8005efa <_dtoa_r+0x93a>
 8005e4a:	e08e      	b.n	8005f6a <_dtoa_r+0x9aa>
 8005e4c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e52:	e757      	b.n	8005d04 <_dtoa_r+0x744>
 8005e54:	9b08      	ldr	r3, [sp, #32]
 8005e56:	1e5c      	subs	r4, r3, #1
 8005e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e5a:	42a3      	cmp	r3, r4
 8005e5c:	bfb7      	itett	lt
 8005e5e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e60:	1b1c      	subge	r4, r3, r4
 8005e62:	1ae2      	sublt	r2, r4, r3
 8005e64:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005e66:	bfbe      	ittt	lt
 8005e68:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005e6a:	189b      	addlt	r3, r3, r2
 8005e6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005e6e:	9b08      	ldr	r3, [sp, #32]
 8005e70:	bfb8      	it	lt
 8005e72:	2400      	movlt	r4, #0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bfbb      	ittet	lt
 8005e78:	9b06      	ldrlt	r3, [sp, #24]
 8005e7a:	9a08      	ldrlt	r2, [sp, #32]
 8005e7c:	9f06      	ldrge	r7, [sp, #24]
 8005e7e:	1a9f      	sublt	r7, r3, r2
 8005e80:	bfac      	ite	ge
 8005e82:	9b08      	ldrge	r3, [sp, #32]
 8005e84:	2300      	movlt	r3, #0
 8005e86:	e73f      	b.n	8005d08 <_dtoa_r+0x748>
 8005e88:	3fe00000 	.word	0x3fe00000
 8005e8c:	40240000 	.word	0x40240000
 8005e90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005e92:	9f06      	ldr	r7, [sp, #24]
 8005e94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005e96:	e742      	b.n	8005d1e <_dtoa_r+0x75e>
 8005e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e9a:	e76b      	b.n	8005d74 <_dtoa_r+0x7b4>
 8005e9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	dc19      	bgt.n	8005ed6 <_dtoa_r+0x916>
 8005ea2:	9b04      	ldr	r3, [sp, #16]
 8005ea4:	b9bb      	cbnz	r3, 8005ed6 <_dtoa_r+0x916>
 8005ea6:	9b05      	ldr	r3, [sp, #20]
 8005ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eac:	b99b      	cbnz	r3, 8005ed6 <_dtoa_r+0x916>
 8005eae:	9b05      	ldr	r3, [sp, #20]
 8005eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005eb4:	0d1b      	lsrs	r3, r3, #20
 8005eb6:	051b      	lsls	r3, r3, #20
 8005eb8:	b183      	cbz	r3, 8005edc <_dtoa_r+0x91c>
 8005eba:	f04f 0801 	mov.w	r8, #1
 8005ebe:	9b06      	ldr	r3, [sp, #24]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	9306      	str	r3, [sp, #24]
 8005ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f47f af6a 	bne.w	8005da6 <_dtoa_r+0x7e6>
 8005ed2:	2001      	movs	r0, #1
 8005ed4:	e76f      	b.n	8005db6 <_dtoa_r+0x7f6>
 8005ed6:	f04f 0800 	mov.w	r8, #0
 8005eda:	e7f6      	b.n	8005eca <_dtoa_r+0x90a>
 8005edc:	4698      	mov	r8, r3
 8005ede:	e7f4      	b.n	8005eca <_dtoa_r+0x90a>
 8005ee0:	f43f af7d 	beq.w	8005dde <_dtoa_r+0x81e>
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	301c      	adds	r0, #28
 8005ee8:	e772      	b.n	8005dd0 <_dtoa_r+0x810>
 8005eea:	9b08      	ldr	r3, [sp, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dc36      	bgt.n	8005f5e <_dtoa_r+0x99e>
 8005ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	dd33      	ble.n	8005f5e <_dtoa_r+0x99e>
 8005ef6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005efa:	f1b9 0f00 	cmp.w	r9, #0
 8005efe:	d10d      	bne.n	8005f1c <_dtoa_r+0x95c>
 8005f00:	4621      	mov	r1, r4
 8005f02:	464b      	mov	r3, r9
 8005f04:	2205      	movs	r2, #5
 8005f06:	4628      	mov	r0, r5
 8005f08:	f000 fbee 	bl	80066e8 <__multadd>
 8005f0c:	4601      	mov	r1, r0
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4658      	mov	r0, fp
 8005f12:	f000 fe05 	bl	8006b20 <__mcmp>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f73f adb8 	bgt.w	8005a8c <_dtoa_r+0x4cc>
 8005f1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f1e:	9f03      	ldr	r7, [sp, #12]
 8005f20:	ea6f 0a03 	mvn.w	sl, r3
 8005f24:	f04f 0800 	mov.w	r8, #0
 8005f28:	4621      	mov	r1, r4
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	f000 fbba 	bl	80066a4 <_Bfree>
 8005f30:	2e00      	cmp	r6, #0
 8005f32:	f43f aea7 	beq.w	8005c84 <_dtoa_r+0x6c4>
 8005f36:	f1b8 0f00 	cmp.w	r8, #0
 8005f3a:	d005      	beq.n	8005f48 <_dtoa_r+0x988>
 8005f3c:	45b0      	cmp	r8, r6
 8005f3e:	d003      	beq.n	8005f48 <_dtoa_r+0x988>
 8005f40:	4641      	mov	r1, r8
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 fbae 	bl	80066a4 <_Bfree>
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	f000 fbaa 	bl	80066a4 <_Bfree>
 8005f50:	e698      	b.n	8005c84 <_dtoa_r+0x6c4>
 8005f52:	2400      	movs	r4, #0
 8005f54:	4626      	mov	r6, r4
 8005f56:	e7e1      	b.n	8005f1c <_dtoa_r+0x95c>
 8005f58:	46c2      	mov	sl, r8
 8005f5a:	4626      	mov	r6, r4
 8005f5c:	e596      	b.n	8005a8c <_dtoa_r+0x4cc>
 8005f5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 80fd 	beq.w	8006164 <_dtoa_r+0xba4>
 8005f6a:	2f00      	cmp	r7, #0
 8005f6c:	dd05      	ble.n	8005f7a <_dtoa_r+0x9ba>
 8005f6e:	4631      	mov	r1, r6
 8005f70:	463a      	mov	r2, r7
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 fd64 	bl	8006a40 <__lshift>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	f1b8 0f00 	cmp.w	r8, #0
 8005f7e:	d05c      	beq.n	800603a <_dtoa_r+0xa7a>
 8005f80:	4628      	mov	r0, r5
 8005f82:	6871      	ldr	r1, [r6, #4]
 8005f84:	f000 fb4e 	bl	8006624 <_Balloc>
 8005f88:	4607      	mov	r7, r0
 8005f8a:	b928      	cbnz	r0, 8005f98 <_dtoa_r+0x9d8>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005f92:	4b7f      	ldr	r3, [pc, #508]	; (8006190 <_dtoa_r+0xbd0>)
 8005f94:	f7ff bb28 	b.w	80055e8 <_dtoa_r+0x28>
 8005f98:	6932      	ldr	r2, [r6, #16]
 8005f9a:	f106 010c 	add.w	r1, r6, #12
 8005f9e:	3202      	adds	r2, #2
 8005fa0:	0092      	lsls	r2, r2, #2
 8005fa2:	300c      	adds	r0, #12
 8005fa4:	f000 fb30 	bl	8006608 <memcpy>
 8005fa8:	2201      	movs	r2, #1
 8005faa:	4639      	mov	r1, r7
 8005fac:	4628      	mov	r0, r5
 8005fae:	f000 fd47 	bl	8006a40 <__lshift>
 8005fb2:	46b0      	mov	r8, r6
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	9b03      	ldr	r3, [sp, #12]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	9308      	str	r3, [sp, #32]
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	444b      	add	r3, r9
 8005fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005fca:	9b08      	ldr	r3, [sp, #32]
 8005fcc:	4621      	mov	r1, r4
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	4658      	mov	r0, fp
 8005fd2:	9304      	str	r3, [sp, #16]
 8005fd4:	f7ff fa66 	bl	80054a4 <quorem>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4641      	mov	r1, r8
 8005fdc:	3330      	adds	r3, #48	; 0x30
 8005fde:	9006      	str	r0, [sp, #24]
 8005fe0:	4658      	mov	r0, fp
 8005fe2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fe4:	f000 fd9c 	bl	8006b20 <__mcmp>
 8005fe8:	4632      	mov	r2, r6
 8005fea:	4681      	mov	r9, r0
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 fdb2 	bl	8006b58 <__mdiff>
 8005ff4:	68c2      	ldr	r2, [r0, #12]
 8005ff6:	4607      	mov	r7, r0
 8005ff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ffa:	bb02      	cbnz	r2, 800603e <_dtoa_r+0xa7e>
 8005ffc:	4601      	mov	r1, r0
 8005ffe:	4658      	mov	r0, fp
 8006000:	f000 fd8e 	bl	8006b20 <__mcmp>
 8006004:	4602      	mov	r2, r0
 8006006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006008:	4639      	mov	r1, r7
 800600a:	4628      	mov	r0, r5
 800600c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006010:	f000 fb48 	bl	80066a4 <_Bfree>
 8006014:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006016:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006018:	9f08      	ldr	r7, [sp, #32]
 800601a:	ea43 0102 	orr.w	r1, r3, r2
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	430b      	orrs	r3, r1
 8006022:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006024:	d10d      	bne.n	8006042 <_dtoa_r+0xa82>
 8006026:	2b39      	cmp	r3, #57	; 0x39
 8006028:	d029      	beq.n	800607e <_dtoa_r+0xabe>
 800602a:	f1b9 0f00 	cmp.w	r9, #0
 800602e:	dd01      	ble.n	8006034 <_dtoa_r+0xa74>
 8006030:	9b06      	ldr	r3, [sp, #24]
 8006032:	3331      	adds	r3, #49	; 0x31
 8006034:	9a04      	ldr	r2, [sp, #16]
 8006036:	7013      	strb	r3, [r2, #0]
 8006038:	e776      	b.n	8005f28 <_dtoa_r+0x968>
 800603a:	4630      	mov	r0, r6
 800603c:	e7b9      	b.n	8005fb2 <_dtoa_r+0x9f2>
 800603e:	2201      	movs	r2, #1
 8006040:	e7e2      	b.n	8006008 <_dtoa_r+0xa48>
 8006042:	f1b9 0f00 	cmp.w	r9, #0
 8006046:	db06      	blt.n	8006056 <_dtoa_r+0xa96>
 8006048:	9922      	ldr	r1, [sp, #136]	; 0x88
 800604a:	ea41 0909 	orr.w	r9, r1, r9
 800604e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006050:	ea59 0101 	orrs.w	r1, r9, r1
 8006054:	d120      	bne.n	8006098 <_dtoa_r+0xad8>
 8006056:	2a00      	cmp	r2, #0
 8006058:	ddec      	ble.n	8006034 <_dtoa_r+0xa74>
 800605a:	4659      	mov	r1, fp
 800605c:	2201      	movs	r2, #1
 800605e:	4628      	mov	r0, r5
 8006060:	9308      	str	r3, [sp, #32]
 8006062:	f000 fced 	bl	8006a40 <__lshift>
 8006066:	4621      	mov	r1, r4
 8006068:	4683      	mov	fp, r0
 800606a:	f000 fd59 	bl	8006b20 <__mcmp>
 800606e:	2800      	cmp	r0, #0
 8006070:	9b08      	ldr	r3, [sp, #32]
 8006072:	dc02      	bgt.n	800607a <_dtoa_r+0xaba>
 8006074:	d1de      	bne.n	8006034 <_dtoa_r+0xa74>
 8006076:	07da      	lsls	r2, r3, #31
 8006078:	d5dc      	bpl.n	8006034 <_dtoa_r+0xa74>
 800607a:	2b39      	cmp	r3, #57	; 0x39
 800607c:	d1d8      	bne.n	8006030 <_dtoa_r+0xa70>
 800607e:	2339      	movs	r3, #57	; 0x39
 8006080:	9a04      	ldr	r2, [sp, #16]
 8006082:	7013      	strb	r3, [r2, #0]
 8006084:	463b      	mov	r3, r7
 8006086:	461f      	mov	r7, r3
 8006088:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800608c:	3b01      	subs	r3, #1
 800608e:	2a39      	cmp	r2, #57	; 0x39
 8006090:	d050      	beq.n	8006134 <_dtoa_r+0xb74>
 8006092:	3201      	adds	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e747      	b.n	8005f28 <_dtoa_r+0x968>
 8006098:	2a00      	cmp	r2, #0
 800609a:	dd03      	ble.n	80060a4 <_dtoa_r+0xae4>
 800609c:	2b39      	cmp	r3, #57	; 0x39
 800609e:	d0ee      	beq.n	800607e <_dtoa_r+0xabe>
 80060a0:	3301      	adds	r3, #1
 80060a2:	e7c7      	b.n	8006034 <_dtoa_r+0xa74>
 80060a4:	9a08      	ldr	r2, [sp, #32]
 80060a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80060a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060ac:	428a      	cmp	r2, r1
 80060ae:	d02a      	beq.n	8006106 <_dtoa_r+0xb46>
 80060b0:	4659      	mov	r1, fp
 80060b2:	2300      	movs	r3, #0
 80060b4:	220a      	movs	r2, #10
 80060b6:	4628      	mov	r0, r5
 80060b8:	f000 fb16 	bl	80066e8 <__multadd>
 80060bc:	45b0      	cmp	r8, r6
 80060be:	4683      	mov	fp, r0
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	f04f 020a 	mov.w	r2, #10
 80060c8:	4641      	mov	r1, r8
 80060ca:	4628      	mov	r0, r5
 80060cc:	d107      	bne.n	80060de <_dtoa_r+0xb1e>
 80060ce:	f000 fb0b 	bl	80066e8 <__multadd>
 80060d2:	4680      	mov	r8, r0
 80060d4:	4606      	mov	r6, r0
 80060d6:	9b08      	ldr	r3, [sp, #32]
 80060d8:	3301      	adds	r3, #1
 80060da:	9308      	str	r3, [sp, #32]
 80060dc:	e775      	b.n	8005fca <_dtoa_r+0xa0a>
 80060de:	f000 fb03 	bl	80066e8 <__multadd>
 80060e2:	4631      	mov	r1, r6
 80060e4:	4680      	mov	r8, r0
 80060e6:	2300      	movs	r3, #0
 80060e8:	220a      	movs	r2, #10
 80060ea:	4628      	mov	r0, r5
 80060ec:	f000 fafc 	bl	80066e8 <__multadd>
 80060f0:	4606      	mov	r6, r0
 80060f2:	e7f0      	b.n	80060d6 <_dtoa_r+0xb16>
 80060f4:	f1b9 0f00 	cmp.w	r9, #0
 80060f8:	bfcc      	ite	gt
 80060fa:	464f      	movgt	r7, r9
 80060fc:	2701      	movle	r7, #1
 80060fe:	f04f 0800 	mov.w	r8, #0
 8006102:	9a03      	ldr	r2, [sp, #12]
 8006104:	4417      	add	r7, r2
 8006106:	4659      	mov	r1, fp
 8006108:	2201      	movs	r2, #1
 800610a:	4628      	mov	r0, r5
 800610c:	9308      	str	r3, [sp, #32]
 800610e:	f000 fc97 	bl	8006a40 <__lshift>
 8006112:	4621      	mov	r1, r4
 8006114:	4683      	mov	fp, r0
 8006116:	f000 fd03 	bl	8006b20 <__mcmp>
 800611a:	2800      	cmp	r0, #0
 800611c:	dcb2      	bgt.n	8006084 <_dtoa_r+0xac4>
 800611e:	d102      	bne.n	8006126 <_dtoa_r+0xb66>
 8006120:	9b08      	ldr	r3, [sp, #32]
 8006122:	07db      	lsls	r3, r3, #31
 8006124:	d4ae      	bmi.n	8006084 <_dtoa_r+0xac4>
 8006126:	463b      	mov	r3, r7
 8006128:	461f      	mov	r7, r3
 800612a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800612e:	2a30      	cmp	r2, #48	; 0x30
 8006130:	d0fa      	beq.n	8006128 <_dtoa_r+0xb68>
 8006132:	e6f9      	b.n	8005f28 <_dtoa_r+0x968>
 8006134:	9a03      	ldr	r2, [sp, #12]
 8006136:	429a      	cmp	r2, r3
 8006138:	d1a5      	bne.n	8006086 <_dtoa_r+0xac6>
 800613a:	2331      	movs	r3, #49	; 0x31
 800613c:	f10a 0a01 	add.w	sl, sl, #1
 8006140:	e779      	b.n	8006036 <_dtoa_r+0xa76>
 8006142:	4b14      	ldr	r3, [pc, #80]	; (8006194 <_dtoa_r+0xbd4>)
 8006144:	f7ff baa8 	b.w	8005698 <_dtoa_r+0xd8>
 8006148:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800614a:	2b00      	cmp	r3, #0
 800614c:	f47f aa81 	bne.w	8005652 <_dtoa_r+0x92>
 8006150:	4b11      	ldr	r3, [pc, #68]	; (8006198 <_dtoa_r+0xbd8>)
 8006152:	f7ff baa1 	b.w	8005698 <_dtoa_r+0xd8>
 8006156:	f1b9 0f00 	cmp.w	r9, #0
 800615a:	dc03      	bgt.n	8006164 <_dtoa_r+0xba4>
 800615c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800615e:	2b02      	cmp	r3, #2
 8006160:	f73f aecb 	bgt.w	8005efa <_dtoa_r+0x93a>
 8006164:	9f03      	ldr	r7, [sp, #12]
 8006166:	4621      	mov	r1, r4
 8006168:	4658      	mov	r0, fp
 800616a:	f7ff f99b 	bl	80054a4 <quorem>
 800616e:	9a03      	ldr	r2, [sp, #12]
 8006170:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006174:	f807 3b01 	strb.w	r3, [r7], #1
 8006178:	1aba      	subs	r2, r7, r2
 800617a:	4591      	cmp	r9, r2
 800617c:	ddba      	ble.n	80060f4 <_dtoa_r+0xb34>
 800617e:	4659      	mov	r1, fp
 8006180:	2300      	movs	r3, #0
 8006182:	220a      	movs	r2, #10
 8006184:	4628      	mov	r0, r5
 8006186:	f000 faaf 	bl	80066e8 <__multadd>
 800618a:	4683      	mov	fp, r0
 800618c:	e7eb      	b.n	8006166 <_dtoa_r+0xba6>
 800618e:	bf00      	nop
 8006190:	0800779b 	.word	0x0800779b
 8006194:	080076f8 	.word	0x080076f8
 8006198:	0800771c 	.word	0x0800771c

0800619c <__sflush_r>:
 800619c:	898a      	ldrh	r2, [r1, #12]
 800619e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a0:	4605      	mov	r5, r0
 80061a2:	0710      	lsls	r0, r2, #28
 80061a4:	460c      	mov	r4, r1
 80061a6:	d457      	bmi.n	8006258 <__sflush_r+0xbc>
 80061a8:	684b      	ldr	r3, [r1, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	dc04      	bgt.n	80061b8 <__sflush_r+0x1c>
 80061ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dc01      	bgt.n	80061b8 <__sflush_r+0x1c>
 80061b4:	2000      	movs	r0, #0
 80061b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061ba:	2e00      	cmp	r6, #0
 80061bc:	d0fa      	beq.n	80061b4 <__sflush_r+0x18>
 80061be:	2300      	movs	r3, #0
 80061c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061c4:	682f      	ldr	r7, [r5, #0]
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	d032      	beq.n	8006230 <__sflush_r+0x94>
 80061ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	075a      	lsls	r2, r3, #29
 80061d0:	d505      	bpl.n	80061de <__sflush_r+0x42>
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	1ac0      	subs	r0, r0, r3
 80061d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061d8:	b10b      	cbz	r3, 80061de <__sflush_r+0x42>
 80061da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061dc:	1ac0      	subs	r0, r0, r3
 80061de:	2300      	movs	r3, #0
 80061e0:	4602      	mov	r2, r0
 80061e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061e4:	4628      	mov	r0, r5
 80061e6:	6a21      	ldr	r1, [r4, #32]
 80061e8:	47b0      	blx	r6
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	d106      	bne.n	80061fe <__sflush_r+0x62>
 80061f0:	6829      	ldr	r1, [r5, #0]
 80061f2:	291d      	cmp	r1, #29
 80061f4:	d82c      	bhi.n	8006250 <__sflush_r+0xb4>
 80061f6:	4a29      	ldr	r2, [pc, #164]	; (800629c <__sflush_r+0x100>)
 80061f8:	40ca      	lsrs	r2, r1
 80061fa:	07d6      	lsls	r6, r2, #31
 80061fc:	d528      	bpl.n	8006250 <__sflush_r+0xb4>
 80061fe:	2200      	movs	r2, #0
 8006200:	6062      	str	r2, [r4, #4]
 8006202:	6922      	ldr	r2, [r4, #16]
 8006204:	04d9      	lsls	r1, r3, #19
 8006206:	6022      	str	r2, [r4, #0]
 8006208:	d504      	bpl.n	8006214 <__sflush_r+0x78>
 800620a:	1c42      	adds	r2, r0, #1
 800620c:	d101      	bne.n	8006212 <__sflush_r+0x76>
 800620e:	682b      	ldr	r3, [r5, #0]
 8006210:	b903      	cbnz	r3, 8006214 <__sflush_r+0x78>
 8006212:	6560      	str	r0, [r4, #84]	; 0x54
 8006214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006216:	602f      	str	r7, [r5, #0]
 8006218:	2900      	cmp	r1, #0
 800621a:	d0cb      	beq.n	80061b4 <__sflush_r+0x18>
 800621c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006220:	4299      	cmp	r1, r3
 8006222:	d002      	beq.n	800622a <__sflush_r+0x8e>
 8006224:	4628      	mov	r0, r5
 8006226:	f000 fd93 	bl	8006d50 <_free_r>
 800622a:	2000      	movs	r0, #0
 800622c:	6360      	str	r0, [r4, #52]	; 0x34
 800622e:	e7c2      	b.n	80061b6 <__sflush_r+0x1a>
 8006230:	6a21      	ldr	r1, [r4, #32]
 8006232:	2301      	movs	r3, #1
 8006234:	4628      	mov	r0, r5
 8006236:	47b0      	blx	r6
 8006238:	1c41      	adds	r1, r0, #1
 800623a:	d1c7      	bne.n	80061cc <__sflush_r+0x30>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0c4      	beq.n	80061cc <__sflush_r+0x30>
 8006242:	2b1d      	cmp	r3, #29
 8006244:	d001      	beq.n	800624a <__sflush_r+0xae>
 8006246:	2b16      	cmp	r3, #22
 8006248:	d101      	bne.n	800624e <__sflush_r+0xb2>
 800624a:	602f      	str	r7, [r5, #0]
 800624c:	e7b2      	b.n	80061b4 <__sflush_r+0x18>
 800624e:	89a3      	ldrh	r3, [r4, #12]
 8006250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006254:	81a3      	strh	r3, [r4, #12]
 8006256:	e7ae      	b.n	80061b6 <__sflush_r+0x1a>
 8006258:	690f      	ldr	r7, [r1, #16]
 800625a:	2f00      	cmp	r7, #0
 800625c:	d0aa      	beq.n	80061b4 <__sflush_r+0x18>
 800625e:	0793      	lsls	r3, r2, #30
 8006260:	bf18      	it	ne
 8006262:	2300      	movne	r3, #0
 8006264:	680e      	ldr	r6, [r1, #0]
 8006266:	bf08      	it	eq
 8006268:	694b      	ldreq	r3, [r1, #20]
 800626a:	1bf6      	subs	r6, r6, r7
 800626c:	600f      	str	r7, [r1, #0]
 800626e:	608b      	str	r3, [r1, #8]
 8006270:	2e00      	cmp	r6, #0
 8006272:	dd9f      	ble.n	80061b4 <__sflush_r+0x18>
 8006274:	4633      	mov	r3, r6
 8006276:	463a      	mov	r2, r7
 8006278:	4628      	mov	r0, r5
 800627a:	6a21      	ldr	r1, [r4, #32]
 800627c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006280:	47e0      	blx	ip
 8006282:	2800      	cmp	r0, #0
 8006284:	dc06      	bgt.n	8006294 <__sflush_r+0xf8>
 8006286:	89a3      	ldrh	r3, [r4, #12]
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006290:	81a3      	strh	r3, [r4, #12]
 8006292:	e790      	b.n	80061b6 <__sflush_r+0x1a>
 8006294:	4407      	add	r7, r0
 8006296:	1a36      	subs	r6, r6, r0
 8006298:	e7ea      	b.n	8006270 <__sflush_r+0xd4>
 800629a:	bf00      	nop
 800629c:	20400001 	.word	0x20400001

080062a0 <_fflush_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	690b      	ldr	r3, [r1, #16]
 80062a4:	4605      	mov	r5, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	b913      	cbnz	r3, 80062b0 <_fflush_r+0x10>
 80062aa:	2500      	movs	r5, #0
 80062ac:	4628      	mov	r0, r5
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	b118      	cbz	r0, 80062ba <_fflush_r+0x1a>
 80062b2:	6983      	ldr	r3, [r0, #24]
 80062b4:	b90b      	cbnz	r3, 80062ba <_fflush_r+0x1a>
 80062b6:	f000 f887 	bl	80063c8 <__sinit>
 80062ba:	4b14      	ldr	r3, [pc, #80]	; (800630c <_fflush_r+0x6c>)
 80062bc:	429c      	cmp	r4, r3
 80062be:	d11b      	bne.n	80062f8 <_fflush_r+0x58>
 80062c0:	686c      	ldr	r4, [r5, #4]
 80062c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d0ef      	beq.n	80062aa <_fflush_r+0xa>
 80062ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062cc:	07d0      	lsls	r0, r2, #31
 80062ce:	d404      	bmi.n	80062da <_fflush_r+0x3a>
 80062d0:	0599      	lsls	r1, r3, #22
 80062d2:	d402      	bmi.n	80062da <_fflush_r+0x3a>
 80062d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062d6:	f000 f91a 	bl	800650e <__retarget_lock_acquire_recursive>
 80062da:	4628      	mov	r0, r5
 80062dc:	4621      	mov	r1, r4
 80062de:	f7ff ff5d 	bl	800619c <__sflush_r>
 80062e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062e4:	4605      	mov	r5, r0
 80062e6:	07da      	lsls	r2, r3, #31
 80062e8:	d4e0      	bmi.n	80062ac <_fflush_r+0xc>
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	059b      	lsls	r3, r3, #22
 80062ee:	d4dd      	bmi.n	80062ac <_fflush_r+0xc>
 80062f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062f2:	f000 f90d 	bl	8006510 <__retarget_lock_release_recursive>
 80062f6:	e7d9      	b.n	80062ac <_fflush_r+0xc>
 80062f8:	4b05      	ldr	r3, [pc, #20]	; (8006310 <_fflush_r+0x70>)
 80062fa:	429c      	cmp	r4, r3
 80062fc:	d101      	bne.n	8006302 <_fflush_r+0x62>
 80062fe:	68ac      	ldr	r4, [r5, #8]
 8006300:	e7df      	b.n	80062c2 <_fflush_r+0x22>
 8006302:	4b04      	ldr	r3, [pc, #16]	; (8006314 <_fflush_r+0x74>)
 8006304:	429c      	cmp	r4, r3
 8006306:	bf08      	it	eq
 8006308:	68ec      	ldreq	r4, [r5, #12]
 800630a:	e7da      	b.n	80062c2 <_fflush_r+0x22>
 800630c:	080077cc 	.word	0x080077cc
 8006310:	080077ec 	.word	0x080077ec
 8006314:	080077ac 	.word	0x080077ac

08006318 <std>:
 8006318:	2300      	movs	r3, #0
 800631a:	b510      	push	{r4, lr}
 800631c:	4604      	mov	r4, r0
 800631e:	e9c0 3300 	strd	r3, r3, [r0]
 8006322:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006326:	6083      	str	r3, [r0, #8]
 8006328:	8181      	strh	r1, [r0, #12]
 800632a:	6643      	str	r3, [r0, #100]	; 0x64
 800632c:	81c2      	strh	r2, [r0, #14]
 800632e:	6183      	str	r3, [r0, #24]
 8006330:	4619      	mov	r1, r3
 8006332:	2208      	movs	r2, #8
 8006334:	305c      	adds	r0, #92	; 0x5c
 8006336:	f7fe faff 	bl	8004938 <memset>
 800633a:	4b05      	ldr	r3, [pc, #20]	; (8006350 <std+0x38>)
 800633c:	6224      	str	r4, [r4, #32]
 800633e:	6263      	str	r3, [r4, #36]	; 0x24
 8006340:	4b04      	ldr	r3, [pc, #16]	; (8006354 <std+0x3c>)
 8006342:	62a3      	str	r3, [r4, #40]	; 0x28
 8006344:	4b04      	ldr	r3, [pc, #16]	; (8006358 <std+0x40>)
 8006346:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006348:	4b04      	ldr	r3, [pc, #16]	; (800635c <std+0x44>)
 800634a:	6323      	str	r3, [r4, #48]	; 0x30
 800634c:	bd10      	pop	{r4, pc}
 800634e:	bf00      	nop
 8006350:	080071d9 	.word	0x080071d9
 8006354:	080071fb 	.word	0x080071fb
 8006358:	08007233 	.word	0x08007233
 800635c:	08007257 	.word	0x08007257

08006360 <_cleanup_r>:
 8006360:	4901      	ldr	r1, [pc, #4]	; (8006368 <_cleanup_r+0x8>)
 8006362:	f000 b8af 	b.w	80064c4 <_fwalk_reent>
 8006366:	bf00      	nop
 8006368:	080062a1 	.word	0x080062a1

0800636c <__sfmoreglue>:
 800636c:	2268      	movs	r2, #104	; 0x68
 800636e:	b570      	push	{r4, r5, r6, lr}
 8006370:	1e4d      	subs	r5, r1, #1
 8006372:	4355      	muls	r5, r2
 8006374:	460e      	mov	r6, r1
 8006376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800637a:	f000 fd51 	bl	8006e20 <_malloc_r>
 800637e:	4604      	mov	r4, r0
 8006380:	b140      	cbz	r0, 8006394 <__sfmoreglue+0x28>
 8006382:	2100      	movs	r1, #0
 8006384:	e9c0 1600 	strd	r1, r6, [r0]
 8006388:	300c      	adds	r0, #12
 800638a:	60a0      	str	r0, [r4, #8]
 800638c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006390:	f7fe fad2 	bl	8004938 <memset>
 8006394:	4620      	mov	r0, r4
 8006396:	bd70      	pop	{r4, r5, r6, pc}

08006398 <__sfp_lock_acquire>:
 8006398:	4801      	ldr	r0, [pc, #4]	; (80063a0 <__sfp_lock_acquire+0x8>)
 800639a:	f000 b8b8 	b.w	800650e <__retarget_lock_acquire_recursive>
 800639e:	bf00      	nop
 80063a0:	20000bc9 	.word	0x20000bc9

080063a4 <__sfp_lock_release>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__sfp_lock_release+0x8>)
 80063a6:	f000 b8b3 	b.w	8006510 <__retarget_lock_release_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000bc9 	.word	0x20000bc9

080063b0 <__sinit_lock_acquire>:
 80063b0:	4801      	ldr	r0, [pc, #4]	; (80063b8 <__sinit_lock_acquire+0x8>)
 80063b2:	f000 b8ac 	b.w	800650e <__retarget_lock_acquire_recursive>
 80063b6:	bf00      	nop
 80063b8:	20000bca 	.word	0x20000bca

080063bc <__sinit_lock_release>:
 80063bc:	4801      	ldr	r0, [pc, #4]	; (80063c4 <__sinit_lock_release+0x8>)
 80063be:	f000 b8a7 	b.w	8006510 <__retarget_lock_release_recursive>
 80063c2:	bf00      	nop
 80063c4:	20000bca 	.word	0x20000bca

080063c8 <__sinit>:
 80063c8:	b510      	push	{r4, lr}
 80063ca:	4604      	mov	r4, r0
 80063cc:	f7ff fff0 	bl	80063b0 <__sinit_lock_acquire>
 80063d0:	69a3      	ldr	r3, [r4, #24]
 80063d2:	b11b      	cbz	r3, 80063dc <__sinit+0x14>
 80063d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d8:	f7ff bff0 	b.w	80063bc <__sinit_lock_release>
 80063dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063e0:	6523      	str	r3, [r4, #80]	; 0x50
 80063e2:	4b13      	ldr	r3, [pc, #76]	; (8006430 <__sinit+0x68>)
 80063e4:	4a13      	ldr	r2, [pc, #76]	; (8006434 <__sinit+0x6c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80063ea:	42a3      	cmp	r3, r4
 80063ec:	bf08      	it	eq
 80063ee:	2301      	moveq	r3, #1
 80063f0:	4620      	mov	r0, r4
 80063f2:	bf08      	it	eq
 80063f4:	61a3      	streq	r3, [r4, #24]
 80063f6:	f000 f81f 	bl	8006438 <__sfp>
 80063fa:	6060      	str	r0, [r4, #4]
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 f81b 	bl	8006438 <__sfp>
 8006402:	60a0      	str	r0, [r4, #8]
 8006404:	4620      	mov	r0, r4
 8006406:	f000 f817 	bl	8006438 <__sfp>
 800640a:	2200      	movs	r2, #0
 800640c:	2104      	movs	r1, #4
 800640e:	60e0      	str	r0, [r4, #12]
 8006410:	6860      	ldr	r0, [r4, #4]
 8006412:	f7ff ff81 	bl	8006318 <std>
 8006416:	2201      	movs	r2, #1
 8006418:	2109      	movs	r1, #9
 800641a:	68a0      	ldr	r0, [r4, #8]
 800641c:	f7ff ff7c 	bl	8006318 <std>
 8006420:	2202      	movs	r2, #2
 8006422:	2112      	movs	r1, #18
 8006424:	68e0      	ldr	r0, [r4, #12]
 8006426:	f7ff ff77 	bl	8006318 <std>
 800642a:	2301      	movs	r3, #1
 800642c:	61a3      	str	r3, [r4, #24]
 800642e:	e7d1      	b.n	80063d4 <__sinit+0xc>
 8006430:	080076e4 	.word	0x080076e4
 8006434:	08006361 	.word	0x08006361

08006438 <__sfp>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	4607      	mov	r7, r0
 800643c:	f7ff ffac 	bl	8006398 <__sfp_lock_acquire>
 8006440:	4b1e      	ldr	r3, [pc, #120]	; (80064bc <__sfp+0x84>)
 8006442:	681e      	ldr	r6, [r3, #0]
 8006444:	69b3      	ldr	r3, [r6, #24]
 8006446:	b913      	cbnz	r3, 800644e <__sfp+0x16>
 8006448:	4630      	mov	r0, r6
 800644a:	f7ff ffbd 	bl	80063c8 <__sinit>
 800644e:	3648      	adds	r6, #72	; 0x48
 8006450:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006454:	3b01      	subs	r3, #1
 8006456:	d503      	bpl.n	8006460 <__sfp+0x28>
 8006458:	6833      	ldr	r3, [r6, #0]
 800645a:	b30b      	cbz	r3, 80064a0 <__sfp+0x68>
 800645c:	6836      	ldr	r6, [r6, #0]
 800645e:	e7f7      	b.n	8006450 <__sfp+0x18>
 8006460:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006464:	b9d5      	cbnz	r5, 800649c <__sfp+0x64>
 8006466:	4b16      	ldr	r3, [pc, #88]	; (80064c0 <__sfp+0x88>)
 8006468:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800646c:	60e3      	str	r3, [r4, #12]
 800646e:	6665      	str	r5, [r4, #100]	; 0x64
 8006470:	f000 f84c 	bl	800650c <__retarget_lock_init_recursive>
 8006474:	f7ff ff96 	bl	80063a4 <__sfp_lock_release>
 8006478:	2208      	movs	r2, #8
 800647a:	4629      	mov	r1, r5
 800647c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006480:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006484:	6025      	str	r5, [r4, #0]
 8006486:	61a5      	str	r5, [r4, #24]
 8006488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800648c:	f7fe fa54 	bl	8004938 <memset>
 8006490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006498:	4620      	mov	r0, r4
 800649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800649c:	3468      	adds	r4, #104	; 0x68
 800649e:	e7d9      	b.n	8006454 <__sfp+0x1c>
 80064a0:	2104      	movs	r1, #4
 80064a2:	4638      	mov	r0, r7
 80064a4:	f7ff ff62 	bl	800636c <__sfmoreglue>
 80064a8:	4604      	mov	r4, r0
 80064aa:	6030      	str	r0, [r6, #0]
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d1d5      	bne.n	800645c <__sfp+0x24>
 80064b0:	f7ff ff78 	bl	80063a4 <__sfp_lock_release>
 80064b4:	230c      	movs	r3, #12
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	e7ee      	b.n	8006498 <__sfp+0x60>
 80064ba:	bf00      	nop
 80064bc:	080076e4 	.word	0x080076e4
 80064c0:	ffff0001 	.word	0xffff0001

080064c4 <_fwalk_reent>:
 80064c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c8:	4606      	mov	r6, r0
 80064ca:	4688      	mov	r8, r1
 80064cc:	2700      	movs	r7, #0
 80064ce:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064d6:	f1b9 0901 	subs.w	r9, r9, #1
 80064da:	d505      	bpl.n	80064e8 <_fwalk_reent+0x24>
 80064dc:	6824      	ldr	r4, [r4, #0]
 80064de:	2c00      	cmp	r4, #0
 80064e0:	d1f7      	bne.n	80064d2 <_fwalk_reent+0xe>
 80064e2:	4638      	mov	r0, r7
 80064e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e8:	89ab      	ldrh	r3, [r5, #12]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d907      	bls.n	80064fe <_fwalk_reent+0x3a>
 80064ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064f2:	3301      	adds	r3, #1
 80064f4:	d003      	beq.n	80064fe <_fwalk_reent+0x3a>
 80064f6:	4629      	mov	r1, r5
 80064f8:	4630      	mov	r0, r6
 80064fa:	47c0      	blx	r8
 80064fc:	4307      	orrs	r7, r0
 80064fe:	3568      	adds	r5, #104	; 0x68
 8006500:	e7e9      	b.n	80064d6 <_fwalk_reent+0x12>
	...

08006504 <_localeconv_r>:
 8006504:	4800      	ldr	r0, [pc, #0]	; (8006508 <_localeconv_r+0x4>)
 8006506:	4770      	bx	lr
 8006508:	20000164 	.word	0x20000164

0800650c <__retarget_lock_init_recursive>:
 800650c:	4770      	bx	lr

0800650e <__retarget_lock_acquire_recursive>:
 800650e:	4770      	bx	lr

08006510 <__retarget_lock_release_recursive>:
 8006510:	4770      	bx	lr

08006512 <__swhatbuf_r>:
 8006512:	b570      	push	{r4, r5, r6, lr}
 8006514:	460e      	mov	r6, r1
 8006516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800651a:	4614      	mov	r4, r2
 800651c:	2900      	cmp	r1, #0
 800651e:	461d      	mov	r5, r3
 8006520:	b096      	sub	sp, #88	; 0x58
 8006522:	da08      	bge.n	8006536 <__swhatbuf_r+0x24>
 8006524:	2200      	movs	r2, #0
 8006526:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800652a:	602a      	str	r2, [r5, #0]
 800652c:	061a      	lsls	r2, r3, #24
 800652e:	d410      	bmi.n	8006552 <__swhatbuf_r+0x40>
 8006530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006534:	e00e      	b.n	8006554 <__swhatbuf_r+0x42>
 8006536:	466a      	mov	r2, sp
 8006538:	f000 fee4 	bl	8007304 <_fstat_r>
 800653c:	2800      	cmp	r0, #0
 800653e:	dbf1      	blt.n	8006524 <__swhatbuf_r+0x12>
 8006540:	9a01      	ldr	r2, [sp, #4]
 8006542:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006546:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800654a:	425a      	negs	r2, r3
 800654c:	415a      	adcs	r2, r3
 800654e:	602a      	str	r2, [r5, #0]
 8006550:	e7ee      	b.n	8006530 <__swhatbuf_r+0x1e>
 8006552:	2340      	movs	r3, #64	; 0x40
 8006554:	2000      	movs	r0, #0
 8006556:	6023      	str	r3, [r4, #0]
 8006558:	b016      	add	sp, #88	; 0x58
 800655a:	bd70      	pop	{r4, r5, r6, pc}

0800655c <__smakebuf_r>:
 800655c:	898b      	ldrh	r3, [r1, #12]
 800655e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006560:	079d      	lsls	r5, r3, #30
 8006562:	4606      	mov	r6, r0
 8006564:	460c      	mov	r4, r1
 8006566:	d507      	bpl.n	8006578 <__smakebuf_r+0x1c>
 8006568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	6123      	str	r3, [r4, #16]
 8006570:	2301      	movs	r3, #1
 8006572:	6163      	str	r3, [r4, #20]
 8006574:	b002      	add	sp, #8
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	466a      	mov	r2, sp
 800657a:	ab01      	add	r3, sp, #4
 800657c:	f7ff ffc9 	bl	8006512 <__swhatbuf_r>
 8006580:	9900      	ldr	r1, [sp, #0]
 8006582:	4605      	mov	r5, r0
 8006584:	4630      	mov	r0, r6
 8006586:	f000 fc4b 	bl	8006e20 <_malloc_r>
 800658a:	b948      	cbnz	r0, 80065a0 <__smakebuf_r+0x44>
 800658c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006590:	059a      	lsls	r2, r3, #22
 8006592:	d4ef      	bmi.n	8006574 <__smakebuf_r+0x18>
 8006594:	f023 0303 	bic.w	r3, r3, #3
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	e7e3      	b.n	8006568 <__smakebuf_r+0xc>
 80065a0:	4b0d      	ldr	r3, [pc, #52]	; (80065d8 <__smakebuf_r+0x7c>)
 80065a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	6020      	str	r0, [r4, #0]
 80065a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ac:	81a3      	strh	r3, [r4, #12]
 80065ae:	9b00      	ldr	r3, [sp, #0]
 80065b0:	6120      	str	r0, [r4, #16]
 80065b2:	6163      	str	r3, [r4, #20]
 80065b4:	9b01      	ldr	r3, [sp, #4]
 80065b6:	b15b      	cbz	r3, 80065d0 <__smakebuf_r+0x74>
 80065b8:	4630      	mov	r0, r6
 80065ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065be:	f000 feb3 	bl	8007328 <_isatty_r>
 80065c2:	b128      	cbz	r0, 80065d0 <__smakebuf_r+0x74>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	81a3      	strh	r3, [r4, #12]
 80065d0:	89a0      	ldrh	r0, [r4, #12]
 80065d2:	4305      	orrs	r5, r0
 80065d4:	81a5      	strh	r5, [r4, #12]
 80065d6:	e7cd      	b.n	8006574 <__smakebuf_r+0x18>
 80065d8:	08006361 	.word	0x08006361

080065dc <malloc>:
 80065dc:	4b02      	ldr	r3, [pc, #8]	; (80065e8 <malloc+0xc>)
 80065de:	4601      	mov	r1, r0
 80065e0:	6818      	ldr	r0, [r3, #0]
 80065e2:	f000 bc1d 	b.w	8006e20 <_malloc_r>
 80065e6:	bf00      	nop
 80065e8:	20000010 	.word	0x20000010

080065ec <memchr>:
 80065ec:	4603      	mov	r3, r0
 80065ee:	b510      	push	{r4, lr}
 80065f0:	b2c9      	uxtb	r1, r1
 80065f2:	4402      	add	r2, r0
 80065f4:	4293      	cmp	r3, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	d101      	bne.n	80065fe <memchr+0x12>
 80065fa:	2000      	movs	r0, #0
 80065fc:	e003      	b.n	8006606 <memchr+0x1a>
 80065fe:	7804      	ldrb	r4, [r0, #0]
 8006600:	3301      	adds	r3, #1
 8006602:	428c      	cmp	r4, r1
 8006604:	d1f6      	bne.n	80065f4 <memchr+0x8>
 8006606:	bd10      	pop	{r4, pc}

08006608 <memcpy>:
 8006608:	440a      	add	r2, r1
 800660a:	4291      	cmp	r1, r2
 800660c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006610:	d100      	bne.n	8006614 <memcpy+0xc>
 8006612:	4770      	bx	lr
 8006614:	b510      	push	{r4, lr}
 8006616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800661a:	4291      	cmp	r1, r2
 800661c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006620:	d1f9      	bne.n	8006616 <memcpy+0xe>
 8006622:	bd10      	pop	{r4, pc}

08006624 <_Balloc>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	b976      	cbnz	r6, 800664c <_Balloc+0x28>
 800662e:	2010      	movs	r0, #16
 8006630:	f7ff ffd4 	bl	80065dc <malloc>
 8006634:	4602      	mov	r2, r0
 8006636:	6260      	str	r0, [r4, #36]	; 0x24
 8006638:	b920      	cbnz	r0, 8006644 <_Balloc+0x20>
 800663a:	2166      	movs	r1, #102	; 0x66
 800663c:	4b17      	ldr	r3, [pc, #92]	; (800669c <_Balloc+0x78>)
 800663e:	4818      	ldr	r0, [pc, #96]	; (80066a0 <_Balloc+0x7c>)
 8006640:	f000 fe20 	bl	8007284 <__assert_func>
 8006644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006648:	6006      	str	r6, [r0, #0]
 800664a:	60c6      	str	r6, [r0, #12]
 800664c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800664e:	68f3      	ldr	r3, [r6, #12]
 8006650:	b183      	cbz	r3, 8006674 <_Balloc+0x50>
 8006652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800665a:	b9b8      	cbnz	r0, 800668c <_Balloc+0x68>
 800665c:	2101      	movs	r1, #1
 800665e:	fa01 f605 	lsl.w	r6, r1, r5
 8006662:	1d72      	adds	r2, r6, #5
 8006664:	4620      	mov	r0, r4
 8006666:	0092      	lsls	r2, r2, #2
 8006668:	f000 fb5e 	bl	8006d28 <_calloc_r>
 800666c:	b160      	cbz	r0, 8006688 <_Balloc+0x64>
 800666e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006672:	e00e      	b.n	8006692 <_Balloc+0x6e>
 8006674:	2221      	movs	r2, #33	; 0x21
 8006676:	2104      	movs	r1, #4
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fb55 	bl	8006d28 <_calloc_r>
 800667e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006680:	60f0      	str	r0, [r6, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e4      	bne.n	8006652 <_Balloc+0x2e>
 8006688:	2000      	movs	r0, #0
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	6802      	ldr	r2, [r0, #0]
 800668e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006692:	2300      	movs	r3, #0
 8006694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006698:	e7f7      	b.n	800668a <_Balloc+0x66>
 800669a:	bf00      	nop
 800669c:	08007729 	.word	0x08007729
 80066a0:	0800780c 	.word	0x0800780c

080066a4 <_Bfree>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066a8:	4605      	mov	r5, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	b976      	cbnz	r6, 80066cc <_Bfree+0x28>
 80066ae:	2010      	movs	r0, #16
 80066b0:	f7ff ff94 	bl	80065dc <malloc>
 80066b4:	4602      	mov	r2, r0
 80066b6:	6268      	str	r0, [r5, #36]	; 0x24
 80066b8:	b920      	cbnz	r0, 80066c4 <_Bfree+0x20>
 80066ba:	218a      	movs	r1, #138	; 0x8a
 80066bc:	4b08      	ldr	r3, [pc, #32]	; (80066e0 <_Bfree+0x3c>)
 80066be:	4809      	ldr	r0, [pc, #36]	; (80066e4 <_Bfree+0x40>)
 80066c0:	f000 fde0 	bl	8007284 <__assert_func>
 80066c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066c8:	6006      	str	r6, [r0, #0]
 80066ca:	60c6      	str	r6, [r0, #12]
 80066cc:	b13c      	cbz	r4, 80066de <_Bfree+0x3a>
 80066ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066d0:	6862      	ldr	r2, [r4, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066d8:	6021      	str	r1, [r4, #0]
 80066da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	08007729 	.word	0x08007729
 80066e4:	0800780c 	.word	0x0800780c

080066e8 <__multadd>:
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	4607      	mov	r7, r0
 80066ee:	460c      	mov	r4, r1
 80066f0:	461e      	mov	r6, r3
 80066f2:	2000      	movs	r0, #0
 80066f4:	690d      	ldr	r5, [r1, #16]
 80066f6:	f101 0c14 	add.w	ip, r1, #20
 80066fa:	f8dc 3000 	ldr.w	r3, [ip]
 80066fe:	3001      	adds	r0, #1
 8006700:	b299      	uxth	r1, r3
 8006702:	fb02 6101 	mla	r1, r2, r1, r6
 8006706:	0c1e      	lsrs	r6, r3, #16
 8006708:	0c0b      	lsrs	r3, r1, #16
 800670a:	fb02 3306 	mla	r3, r2, r6, r3
 800670e:	b289      	uxth	r1, r1
 8006710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006714:	4285      	cmp	r5, r0
 8006716:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800671a:	f84c 1b04 	str.w	r1, [ip], #4
 800671e:	dcec      	bgt.n	80066fa <__multadd+0x12>
 8006720:	b30e      	cbz	r6, 8006766 <__multadd+0x7e>
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	42ab      	cmp	r3, r5
 8006726:	dc19      	bgt.n	800675c <__multadd+0x74>
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	4638      	mov	r0, r7
 800672c:	3101      	adds	r1, #1
 800672e:	f7ff ff79 	bl	8006624 <_Balloc>
 8006732:	4680      	mov	r8, r0
 8006734:	b928      	cbnz	r0, 8006742 <__multadd+0x5a>
 8006736:	4602      	mov	r2, r0
 8006738:	21b5      	movs	r1, #181	; 0xb5
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <__multadd+0x84>)
 800673c:	480c      	ldr	r0, [pc, #48]	; (8006770 <__multadd+0x88>)
 800673e:	f000 fda1 	bl	8007284 <__assert_func>
 8006742:	6922      	ldr	r2, [r4, #16]
 8006744:	f104 010c 	add.w	r1, r4, #12
 8006748:	3202      	adds	r2, #2
 800674a:	0092      	lsls	r2, r2, #2
 800674c:	300c      	adds	r0, #12
 800674e:	f7ff ff5b 	bl	8006608 <memcpy>
 8006752:	4621      	mov	r1, r4
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff ffa5 	bl	80066a4 <_Bfree>
 800675a:	4644      	mov	r4, r8
 800675c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006760:	3501      	adds	r5, #1
 8006762:	615e      	str	r6, [r3, #20]
 8006764:	6125      	str	r5, [r4, #16]
 8006766:	4620      	mov	r0, r4
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	0800779b 	.word	0x0800779b
 8006770:	0800780c 	.word	0x0800780c

08006774 <__hi0bits>:
 8006774:	0c02      	lsrs	r2, r0, #16
 8006776:	0412      	lsls	r2, r2, #16
 8006778:	4603      	mov	r3, r0
 800677a:	b9ca      	cbnz	r2, 80067b0 <__hi0bits+0x3c>
 800677c:	0403      	lsls	r3, r0, #16
 800677e:	2010      	movs	r0, #16
 8006780:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006784:	bf04      	itt	eq
 8006786:	021b      	lsleq	r3, r3, #8
 8006788:	3008      	addeq	r0, #8
 800678a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800678e:	bf04      	itt	eq
 8006790:	011b      	lsleq	r3, r3, #4
 8006792:	3004      	addeq	r0, #4
 8006794:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006798:	bf04      	itt	eq
 800679a:	009b      	lsleq	r3, r3, #2
 800679c:	3002      	addeq	r0, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	db05      	blt.n	80067ae <__hi0bits+0x3a>
 80067a2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80067a6:	f100 0001 	add.w	r0, r0, #1
 80067aa:	bf08      	it	eq
 80067ac:	2020      	moveq	r0, #32
 80067ae:	4770      	bx	lr
 80067b0:	2000      	movs	r0, #0
 80067b2:	e7e5      	b.n	8006780 <__hi0bits+0xc>

080067b4 <__lo0bits>:
 80067b4:	6803      	ldr	r3, [r0, #0]
 80067b6:	4602      	mov	r2, r0
 80067b8:	f013 0007 	ands.w	r0, r3, #7
 80067bc:	d00b      	beq.n	80067d6 <__lo0bits+0x22>
 80067be:	07d9      	lsls	r1, r3, #31
 80067c0:	d421      	bmi.n	8006806 <__lo0bits+0x52>
 80067c2:	0798      	lsls	r0, r3, #30
 80067c4:	bf49      	itett	mi
 80067c6:	085b      	lsrmi	r3, r3, #1
 80067c8:	089b      	lsrpl	r3, r3, #2
 80067ca:	2001      	movmi	r0, #1
 80067cc:	6013      	strmi	r3, [r2, #0]
 80067ce:	bf5c      	itt	pl
 80067d0:	2002      	movpl	r0, #2
 80067d2:	6013      	strpl	r3, [r2, #0]
 80067d4:	4770      	bx	lr
 80067d6:	b299      	uxth	r1, r3
 80067d8:	b909      	cbnz	r1, 80067de <__lo0bits+0x2a>
 80067da:	2010      	movs	r0, #16
 80067dc:	0c1b      	lsrs	r3, r3, #16
 80067de:	b2d9      	uxtb	r1, r3
 80067e0:	b909      	cbnz	r1, 80067e6 <__lo0bits+0x32>
 80067e2:	3008      	adds	r0, #8
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	0719      	lsls	r1, r3, #28
 80067e8:	bf04      	itt	eq
 80067ea:	091b      	lsreq	r3, r3, #4
 80067ec:	3004      	addeq	r0, #4
 80067ee:	0799      	lsls	r1, r3, #30
 80067f0:	bf04      	itt	eq
 80067f2:	089b      	lsreq	r3, r3, #2
 80067f4:	3002      	addeq	r0, #2
 80067f6:	07d9      	lsls	r1, r3, #31
 80067f8:	d403      	bmi.n	8006802 <__lo0bits+0x4e>
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	f100 0001 	add.w	r0, r0, #1
 8006800:	d003      	beq.n	800680a <__lo0bits+0x56>
 8006802:	6013      	str	r3, [r2, #0]
 8006804:	4770      	bx	lr
 8006806:	2000      	movs	r0, #0
 8006808:	4770      	bx	lr
 800680a:	2020      	movs	r0, #32
 800680c:	4770      	bx	lr
	...

08006810 <__i2b>:
 8006810:	b510      	push	{r4, lr}
 8006812:	460c      	mov	r4, r1
 8006814:	2101      	movs	r1, #1
 8006816:	f7ff ff05 	bl	8006624 <_Balloc>
 800681a:	4602      	mov	r2, r0
 800681c:	b928      	cbnz	r0, 800682a <__i2b+0x1a>
 800681e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006822:	4b04      	ldr	r3, [pc, #16]	; (8006834 <__i2b+0x24>)
 8006824:	4804      	ldr	r0, [pc, #16]	; (8006838 <__i2b+0x28>)
 8006826:	f000 fd2d 	bl	8007284 <__assert_func>
 800682a:	2301      	movs	r3, #1
 800682c:	6144      	str	r4, [r0, #20]
 800682e:	6103      	str	r3, [r0, #16]
 8006830:	bd10      	pop	{r4, pc}
 8006832:	bf00      	nop
 8006834:	0800779b 	.word	0x0800779b
 8006838:	0800780c 	.word	0x0800780c

0800683c <__multiply>:
 800683c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	4691      	mov	r9, r2
 8006842:	690a      	ldr	r2, [r1, #16]
 8006844:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006848:	460c      	mov	r4, r1
 800684a:	429a      	cmp	r2, r3
 800684c:	bfbe      	ittt	lt
 800684e:	460b      	movlt	r3, r1
 8006850:	464c      	movlt	r4, r9
 8006852:	4699      	movlt	r9, r3
 8006854:	6927      	ldr	r7, [r4, #16]
 8006856:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800685a:	68a3      	ldr	r3, [r4, #8]
 800685c:	6861      	ldr	r1, [r4, #4]
 800685e:	eb07 060a 	add.w	r6, r7, sl
 8006862:	42b3      	cmp	r3, r6
 8006864:	b085      	sub	sp, #20
 8006866:	bfb8      	it	lt
 8006868:	3101      	addlt	r1, #1
 800686a:	f7ff fedb 	bl	8006624 <_Balloc>
 800686e:	b930      	cbnz	r0, 800687e <__multiply+0x42>
 8006870:	4602      	mov	r2, r0
 8006872:	f240 115d 	movw	r1, #349	; 0x15d
 8006876:	4b43      	ldr	r3, [pc, #268]	; (8006984 <__multiply+0x148>)
 8006878:	4843      	ldr	r0, [pc, #268]	; (8006988 <__multiply+0x14c>)
 800687a:	f000 fd03 	bl	8007284 <__assert_func>
 800687e:	f100 0514 	add.w	r5, r0, #20
 8006882:	462b      	mov	r3, r5
 8006884:	2200      	movs	r2, #0
 8006886:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800688a:	4543      	cmp	r3, r8
 800688c:	d321      	bcc.n	80068d2 <__multiply+0x96>
 800688e:	f104 0314 	add.w	r3, r4, #20
 8006892:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006896:	f109 0314 	add.w	r3, r9, #20
 800689a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800689e:	9202      	str	r2, [sp, #8]
 80068a0:	1b3a      	subs	r2, r7, r4
 80068a2:	3a15      	subs	r2, #21
 80068a4:	f022 0203 	bic.w	r2, r2, #3
 80068a8:	3204      	adds	r2, #4
 80068aa:	f104 0115 	add.w	r1, r4, #21
 80068ae:	428f      	cmp	r7, r1
 80068b0:	bf38      	it	cc
 80068b2:	2204      	movcc	r2, #4
 80068b4:	9201      	str	r2, [sp, #4]
 80068b6:	9a02      	ldr	r2, [sp, #8]
 80068b8:	9303      	str	r3, [sp, #12]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d80c      	bhi.n	80068d8 <__multiply+0x9c>
 80068be:	2e00      	cmp	r6, #0
 80068c0:	dd03      	ble.n	80068ca <__multiply+0x8e>
 80068c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d059      	beq.n	800697e <__multiply+0x142>
 80068ca:	6106      	str	r6, [r0, #16]
 80068cc:	b005      	add	sp, #20
 80068ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d2:	f843 2b04 	str.w	r2, [r3], #4
 80068d6:	e7d8      	b.n	800688a <__multiply+0x4e>
 80068d8:	f8b3 a000 	ldrh.w	sl, [r3]
 80068dc:	f1ba 0f00 	cmp.w	sl, #0
 80068e0:	d023      	beq.n	800692a <__multiply+0xee>
 80068e2:	46a9      	mov	r9, r5
 80068e4:	f04f 0c00 	mov.w	ip, #0
 80068e8:	f104 0e14 	add.w	lr, r4, #20
 80068ec:	f85e 2b04 	ldr.w	r2, [lr], #4
 80068f0:	f8d9 1000 	ldr.w	r1, [r9]
 80068f4:	fa1f fb82 	uxth.w	fp, r2
 80068f8:	b289      	uxth	r1, r1
 80068fa:	fb0a 110b 	mla	r1, sl, fp, r1
 80068fe:	4461      	add	r1, ip
 8006900:	f8d9 c000 	ldr.w	ip, [r9]
 8006904:	0c12      	lsrs	r2, r2, #16
 8006906:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800690a:	fb0a c202 	mla	r2, sl, r2, ip
 800690e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006912:	b289      	uxth	r1, r1
 8006914:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006918:	4577      	cmp	r7, lr
 800691a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800691e:	f849 1b04 	str.w	r1, [r9], #4
 8006922:	d8e3      	bhi.n	80068ec <__multiply+0xb0>
 8006924:	9a01      	ldr	r2, [sp, #4]
 8006926:	f845 c002 	str.w	ip, [r5, r2]
 800692a:	9a03      	ldr	r2, [sp, #12]
 800692c:	3304      	adds	r3, #4
 800692e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006932:	f1b9 0f00 	cmp.w	r9, #0
 8006936:	d020      	beq.n	800697a <__multiply+0x13e>
 8006938:	46ae      	mov	lr, r5
 800693a:	f04f 0a00 	mov.w	sl, #0
 800693e:	6829      	ldr	r1, [r5, #0]
 8006940:	f104 0c14 	add.w	ip, r4, #20
 8006944:	f8bc b000 	ldrh.w	fp, [ip]
 8006948:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800694c:	b289      	uxth	r1, r1
 800694e:	fb09 220b 	mla	r2, r9, fp, r2
 8006952:	4492      	add	sl, r2
 8006954:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006958:	f84e 1b04 	str.w	r1, [lr], #4
 800695c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006960:	f8be 1000 	ldrh.w	r1, [lr]
 8006964:	0c12      	lsrs	r2, r2, #16
 8006966:	fb09 1102 	mla	r1, r9, r2, r1
 800696a:	4567      	cmp	r7, ip
 800696c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006970:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006974:	d8e6      	bhi.n	8006944 <__multiply+0x108>
 8006976:	9a01      	ldr	r2, [sp, #4]
 8006978:	50a9      	str	r1, [r5, r2]
 800697a:	3504      	adds	r5, #4
 800697c:	e79b      	b.n	80068b6 <__multiply+0x7a>
 800697e:	3e01      	subs	r6, #1
 8006980:	e79d      	b.n	80068be <__multiply+0x82>
 8006982:	bf00      	nop
 8006984:	0800779b 	.word	0x0800779b
 8006988:	0800780c 	.word	0x0800780c

0800698c <__pow5mult>:
 800698c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006990:	4615      	mov	r5, r2
 8006992:	f012 0203 	ands.w	r2, r2, #3
 8006996:	4606      	mov	r6, r0
 8006998:	460f      	mov	r7, r1
 800699a:	d007      	beq.n	80069ac <__pow5mult+0x20>
 800699c:	4c25      	ldr	r4, [pc, #148]	; (8006a34 <__pow5mult+0xa8>)
 800699e:	3a01      	subs	r2, #1
 80069a0:	2300      	movs	r3, #0
 80069a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069a6:	f7ff fe9f 	bl	80066e8 <__multadd>
 80069aa:	4607      	mov	r7, r0
 80069ac:	10ad      	asrs	r5, r5, #2
 80069ae:	d03d      	beq.n	8006a2c <__pow5mult+0xa0>
 80069b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069b2:	b97c      	cbnz	r4, 80069d4 <__pow5mult+0x48>
 80069b4:	2010      	movs	r0, #16
 80069b6:	f7ff fe11 	bl	80065dc <malloc>
 80069ba:	4602      	mov	r2, r0
 80069bc:	6270      	str	r0, [r6, #36]	; 0x24
 80069be:	b928      	cbnz	r0, 80069cc <__pow5mult+0x40>
 80069c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80069c4:	4b1c      	ldr	r3, [pc, #112]	; (8006a38 <__pow5mult+0xac>)
 80069c6:	481d      	ldr	r0, [pc, #116]	; (8006a3c <__pow5mult+0xb0>)
 80069c8:	f000 fc5c 	bl	8007284 <__assert_func>
 80069cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069d0:	6004      	str	r4, [r0, #0]
 80069d2:	60c4      	str	r4, [r0, #12]
 80069d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069dc:	b94c      	cbnz	r4, 80069f2 <__pow5mult+0x66>
 80069de:	f240 2171 	movw	r1, #625	; 0x271
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ff14 	bl	8006810 <__i2b>
 80069e8:	2300      	movs	r3, #0
 80069ea:	4604      	mov	r4, r0
 80069ec:	f8c8 0008 	str.w	r0, [r8, #8]
 80069f0:	6003      	str	r3, [r0, #0]
 80069f2:	f04f 0900 	mov.w	r9, #0
 80069f6:	07eb      	lsls	r3, r5, #31
 80069f8:	d50a      	bpl.n	8006a10 <__pow5mult+0x84>
 80069fa:	4639      	mov	r1, r7
 80069fc:	4622      	mov	r2, r4
 80069fe:	4630      	mov	r0, r6
 8006a00:	f7ff ff1c 	bl	800683c <__multiply>
 8006a04:	4680      	mov	r8, r0
 8006a06:	4639      	mov	r1, r7
 8006a08:	4630      	mov	r0, r6
 8006a0a:	f7ff fe4b 	bl	80066a4 <_Bfree>
 8006a0e:	4647      	mov	r7, r8
 8006a10:	106d      	asrs	r5, r5, #1
 8006a12:	d00b      	beq.n	8006a2c <__pow5mult+0xa0>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	b938      	cbnz	r0, 8006a28 <__pow5mult+0x9c>
 8006a18:	4622      	mov	r2, r4
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7ff ff0d 	bl	800683c <__multiply>
 8006a22:	6020      	str	r0, [r4, #0]
 8006a24:	f8c0 9000 	str.w	r9, [r0]
 8006a28:	4604      	mov	r4, r0
 8006a2a:	e7e4      	b.n	80069f6 <__pow5mult+0x6a>
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a32:	bf00      	nop
 8006a34:	08007958 	.word	0x08007958
 8006a38:	08007729 	.word	0x08007729
 8006a3c:	0800780c 	.word	0x0800780c

08006a40 <__lshift>:
 8006a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a44:	460c      	mov	r4, r1
 8006a46:	4607      	mov	r7, r0
 8006a48:	4691      	mov	r9, r2
 8006a4a:	6923      	ldr	r3, [r4, #16]
 8006a4c:	6849      	ldr	r1, [r1, #4]
 8006a4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006a52:	68a3      	ldr	r3, [r4, #8]
 8006a54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a58:	f108 0601 	add.w	r6, r8, #1
 8006a5c:	42b3      	cmp	r3, r6
 8006a5e:	db0b      	blt.n	8006a78 <__lshift+0x38>
 8006a60:	4638      	mov	r0, r7
 8006a62:	f7ff fddf 	bl	8006624 <_Balloc>
 8006a66:	4605      	mov	r5, r0
 8006a68:	b948      	cbnz	r0, 8006a7e <__lshift+0x3e>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006a70:	4b29      	ldr	r3, [pc, #164]	; (8006b18 <__lshift+0xd8>)
 8006a72:	482a      	ldr	r0, [pc, #168]	; (8006b1c <__lshift+0xdc>)
 8006a74:	f000 fc06 	bl	8007284 <__assert_func>
 8006a78:	3101      	adds	r1, #1
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	e7ee      	b.n	8006a5c <__lshift+0x1c>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f100 0114 	add.w	r1, r0, #20
 8006a84:	f100 0210 	add.w	r2, r0, #16
 8006a88:	4618      	mov	r0, r3
 8006a8a:	4553      	cmp	r3, sl
 8006a8c:	db37      	blt.n	8006afe <__lshift+0xbe>
 8006a8e:	6920      	ldr	r0, [r4, #16]
 8006a90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a94:	f104 0314 	add.w	r3, r4, #20
 8006a98:	f019 091f 	ands.w	r9, r9, #31
 8006a9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006aa4:	d02f      	beq.n	8006b06 <__lshift+0xc6>
 8006aa6:	468a      	mov	sl, r1
 8006aa8:	f04f 0c00 	mov.w	ip, #0
 8006aac:	f1c9 0e20 	rsb	lr, r9, #32
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	fa02 f209 	lsl.w	r2, r2, r9
 8006ab6:	ea42 020c 	orr.w	r2, r2, ip
 8006aba:	f84a 2b04 	str.w	r2, [sl], #4
 8006abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ac2:	4298      	cmp	r0, r3
 8006ac4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ac8:	d8f2      	bhi.n	8006ab0 <__lshift+0x70>
 8006aca:	1b03      	subs	r3, r0, r4
 8006acc:	3b15      	subs	r3, #21
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	f104 0215 	add.w	r2, r4, #21
 8006ad8:	4290      	cmp	r0, r2
 8006ada:	bf38      	it	cc
 8006adc:	2304      	movcc	r3, #4
 8006ade:	f841 c003 	str.w	ip, [r1, r3]
 8006ae2:	f1bc 0f00 	cmp.w	ip, #0
 8006ae6:	d001      	beq.n	8006aec <__lshift+0xac>
 8006ae8:	f108 0602 	add.w	r6, r8, #2
 8006aec:	3e01      	subs	r6, #1
 8006aee:	4638      	mov	r0, r7
 8006af0:	4621      	mov	r1, r4
 8006af2:	612e      	str	r6, [r5, #16]
 8006af4:	f7ff fdd6 	bl	80066a4 <_Bfree>
 8006af8:	4628      	mov	r0, r5
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b02:	3301      	adds	r3, #1
 8006b04:	e7c1      	b.n	8006a8a <__lshift+0x4a>
 8006b06:	3904      	subs	r1, #4
 8006b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b0c:	4298      	cmp	r0, r3
 8006b0e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b12:	d8f9      	bhi.n	8006b08 <__lshift+0xc8>
 8006b14:	e7ea      	b.n	8006aec <__lshift+0xac>
 8006b16:	bf00      	nop
 8006b18:	0800779b 	.word	0x0800779b
 8006b1c:	0800780c 	.word	0x0800780c

08006b20 <__mcmp>:
 8006b20:	4603      	mov	r3, r0
 8006b22:	690a      	ldr	r2, [r1, #16]
 8006b24:	6900      	ldr	r0, [r0, #16]
 8006b26:	b530      	push	{r4, r5, lr}
 8006b28:	1a80      	subs	r0, r0, r2
 8006b2a:	d10d      	bne.n	8006b48 <__mcmp+0x28>
 8006b2c:	3314      	adds	r3, #20
 8006b2e:	3114      	adds	r1, #20
 8006b30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b40:	4295      	cmp	r5, r2
 8006b42:	d002      	beq.n	8006b4a <__mcmp+0x2a>
 8006b44:	d304      	bcc.n	8006b50 <__mcmp+0x30>
 8006b46:	2001      	movs	r0, #1
 8006b48:	bd30      	pop	{r4, r5, pc}
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	d3f4      	bcc.n	8006b38 <__mcmp+0x18>
 8006b4e:	e7fb      	b.n	8006b48 <__mcmp+0x28>
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	e7f8      	b.n	8006b48 <__mcmp+0x28>
	...

08006b58 <__mdiff>:
 8006b58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	460d      	mov	r5, r1
 8006b5e:	4607      	mov	r7, r0
 8006b60:	4611      	mov	r1, r2
 8006b62:	4628      	mov	r0, r5
 8006b64:	4614      	mov	r4, r2
 8006b66:	f7ff ffdb 	bl	8006b20 <__mcmp>
 8006b6a:	1e06      	subs	r6, r0, #0
 8006b6c:	d111      	bne.n	8006b92 <__mdiff+0x3a>
 8006b6e:	4631      	mov	r1, r6
 8006b70:	4638      	mov	r0, r7
 8006b72:	f7ff fd57 	bl	8006624 <_Balloc>
 8006b76:	4602      	mov	r2, r0
 8006b78:	b928      	cbnz	r0, 8006b86 <__mdiff+0x2e>
 8006b7a:	f240 2132 	movw	r1, #562	; 0x232
 8006b7e:	4b3a      	ldr	r3, [pc, #232]	; (8006c68 <__mdiff+0x110>)
 8006b80:	483a      	ldr	r0, [pc, #232]	; (8006c6c <__mdiff+0x114>)
 8006b82:	f000 fb7f 	bl	8007284 <__assert_func>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	bfa4      	itt	ge
 8006b94:	4623      	movge	r3, r4
 8006b96:	462c      	movge	r4, r5
 8006b98:	4638      	mov	r0, r7
 8006b9a:	6861      	ldr	r1, [r4, #4]
 8006b9c:	bfa6      	itte	ge
 8006b9e:	461d      	movge	r5, r3
 8006ba0:	2600      	movge	r6, #0
 8006ba2:	2601      	movlt	r6, #1
 8006ba4:	f7ff fd3e 	bl	8006624 <_Balloc>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	b918      	cbnz	r0, 8006bb4 <__mdiff+0x5c>
 8006bac:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006bb0:	4b2d      	ldr	r3, [pc, #180]	; (8006c68 <__mdiff+0x110>)
 8006bb2:	e7e5      	b.n	8006b80 <__mdiff+0x28>
 8006bb4:	f102 0814 	add.w	r8, r2, #20
 8006bb8:	46c2      	mov	sl, r8
 8006bba:	f04f 0c00 	mov.w	ip, #0
 8006bbe:	6927      	ldr	r7, [r4, #16]
 8006bc0:	60c6      	str	r6, [r0, #12]
 8006bc2:	692e      	ldr	r6, [r5, #16]
 8006bc4:	f104 0014 	add.w	r0, r4, #20
 8006bc8:	f105 0914 	add.w	r9, r5, #20
 8006bcc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006bd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006bd4:	3410      	adds	r4, #16
 8006bd6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006bda:	f859 3b04 	ldr.w	r3, [r9], #4
 8006bde:	fa1f f18b 	uxth.w	r1, fp
 8006be2:	448c      	add	ip, r1
 8006be4:	b299      	uxth	r1, r3
 8006be6:	0c1b      	lsrs	r3, r3, #16
 8006be8:	ebac 0101 	sub.w	r1, ip, r1
 8006bec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006bf0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bf4:	b289      	uxth	r1, r1
 8006bf6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006bfa:	454e      	cmp	r6, r9
 8006bfc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006c00:	f84a 3b04 	str.w	r3, [sl], #4
 8006c04:	d8e7      	bhi.n	8006bd6 <__mdiff+0x7e>
 8006c06:	1b73      	subs	r3, r6, r5
 8006c08:	3b15      	subs	r3, #21
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	3515      	adds	r5, #21
 8006c10:	3304      	adds	r3, #4
 8006c12:	42ae      	cmp	r6, r5
 8006c14:	bf38      	it	cc
 8006c16:	2304      	movcc	r3, #4
 8006c18:	4418      	add	r0, r3
 8006c1a:	4443      	add	r3, r8
 8006c1c:	461e      	mov	r6, r3
 8006c1e:	4605      	mov	r5, r0
 8006c20:	4575      	cmp	r5, lr
 8006c22:	d30e      	bcc.n	8006c42 <__mdiff+0xea>
 8006c24:	f10e 0103 	add.w	r1, lr, #3
 8006c28:	1a09      	subs	r1, r1, r0
 8006c2a:	f021 0103 	bic.w	r1, r1, #3
 8006c2e:	3803      	subs	r0, #3
 8006c30:	4586      	cmp	lr, r0
 8006c32:	bf38      	it	cc
 8006c34:	2100      	movcc	r1, #0
 8006c36:	4419      	add	r1, r3
 8006c38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006c3c:	b18b      	cbz	r3, 8006c62 <__mdiff+0x10a>
 8006c3e:	6117      	str	r7, [r2, #16]
 8006c40:	e7a4      	b.n	8006b8c <__mdiff+0x34>
 8006c42:	f855 8b04 	ldr.w	r8, [r5], #4
 8006c46:	fa1f f188 	uxth.w	r1, r8
 8006c4a:	4461      	add	r1, ip
 8006c4c:	140c      	asrs	r4, r1, #16
 8006c4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006c52:	b289      	uxth	r1, r1
 8006c54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c58:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006c5c:	f846 1b04 	str.w	r1, [r6], #4
 8006c60:	e7de      	b.n	8006c20 <__mdiff+0xc8>
 8006c62:	3f01      	subs	r7, #1
 8006c64:	e7e8      	b.n	8006c38 <__mdiff+0xe0>
 8006c66:	bf00      	nop
 8006c68:	0800779b 	.word	0x0800779b
 8006c6c:	0800780c 	.word	0x0800780c

08006c70 <__d2b>:
 8006c70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c74:	2101      	movs	r1, #1
 8006c76:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006c7a:	4690      	mov	r8, r2
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	f7ff fcd1 	bl	8006624 <_Balloc>
 8006c82:	4604      	mov	r4, r0
 8006c84:	b930      	cbnz	r0, 8006c94 <__d2b+0x24>
 8006c86:	4602      	mov	r2, r0
 8006c88:	f240 310a 	movw	r1, #778	; 0x30a
 8006c8c:	4b24      	ldr	r3, [pc, #144]	; (8006d20 <__d2b+0xb0>)
 8006c8e:	4825      	ldr	r0, [pc, #148]	; (8006d24 <__d2b+0xb4>)
 8006c90:	f000 faf8 	bl	8007284 <__assert_func>
 8006c94:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006c98:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006c9c:	bb2d      	cbnz	r5, 8006cea <__d2b+0x7a>
 8006c9e:	9301      	str	r3, [sp, #4]
 8006ca0:	f1b8 0300 	subs.w	r3, r8, #0
 8006ca4:	d026      	beq.n	8006cf4 <__d2b+0x84>
 8006ca6:	4668      	mov	r0, sp
 8006ca8:	9300      	str	r3, [sp, #0]
 8006caa:	f7ff fd83 	bl	80067b4 <__lo0bits>
 8006cae:	9900      	ldr	r1, [sp, #0]
 8006cb0:	b1f0      	cbz	r0, 8006cf0 <__d2b+0x80>
 8006cb2:	9a01      	ldr	r2, [sp, #4]
 8006cb4:	f1c0 0320 	rsb	r3, r0, #32
 8006cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cbc:	430b      	orrs	r3, r1
 8006cbe:	40c2      	lsrs	r2, r0
 8006cc0:	6163      	str	r3, [r4, #20]
 8006cc2:	9201      	str	r2, [sp, #4]
 8006cc4:	9b01      	ldr	r3, [sp, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bf14      	ite	ne
 8006cca:	2102      	movne	r1, #2
 8006ccc:	2101      	moveq	r1, #1
 8006cce:	61a3      	str	r3, [r4, #24]
 8006cd0:	6121      	str	r1, [r4, #16]
 8006cd2:	b1c5      	cbz	r5, 8006d06 <__d2b+0x96>
 8006cd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006cd8:	4405      	add	r5, r0
 8006cda:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006cde:	603d      	str	r5, [r7, #0]
 8006ce0:	6030      	str	r0, [r6, #0]
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	b002      	add	sp, #8
 8006ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cee:	e7d6      	b.n	8006c9e <__d2b+0x2e>
 8006cf0:	6161      	str	r1, [r4, #20]
 8006cf2:	e7e7      	b.n	8006cc4 <__d2b+0x54>
 8006cf4:	a801      	add	r0, sp, #4
 8006cf6:	f7ff fd5d 	bl	80067b4 <__lo0bits>
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	9b01      	ldr	r3, [sp, #4]
 8006cfe:	6121      	str	r1, [r4, #16]
 8006d00:	6163      	str	r3, [r4, #20]
 8006d02:	3020      	adds	r0, #32
 8006d04:	e7e5      	b.n	8006cd2 <__d2b+0x62>
 8006d06:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006d0a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d0e:	6038      	str	r0, [r7, #0]
 8006d10:	6918      	ldr	r0, [r3, #16]
 8006d12:	f7ff fd2f 	bl	8006774 <__hi0bits>
 8006d16:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006d1a:	6031      	str	r1, [r6, #0]
 8006d1c:	e7e1      	b.n	8006ce2 <__d2b+0x72>
 8006d1e:	bf00      	nop
 8006d20:	0800779b 	.word	0x0800779b
 8006d24:	0800780c 	.word	0x0800780c

08006d28 <_calloc_r>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	fba1 5402 	umull	r5, r4, r1, r2
 8006d2e:	b934      	cbnz	r4, 8006d3e <_calloc_r+0x16>
 8006d30:	4629      	mov	r1, r5
 8006d32:	f000 f875 	bl	8006e20 <_malloc_r>
 8006d36:	4606      	mov	r6, r0
 8006d38:	b928      	cbnz	r0, 8006d46 <_calloc_r+0x1e>
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	bd70      	pop	{r4, r5, r6, pc}
 8006d3e:	220c      	movs	r2, #12
 8006d40:	2600      	movs	r6, #0
 8006d42:	6002      	str	r2, [r0, #0]
 8006d44:	e7f9      	b.n	8006d3a <_calloc_r+0x12>
 8006d46:	462a      	mov	r2, r5
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f7fd fdf5 	bl	8004938 <memset>
 8006d4e:	e7f4      	b.n	8006d3a <_calloc_r+0x12>

08006d50 <_free_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4605      	mov	r5, r0
 8006d54:	2900      	cmp	r1, #0
 8006d56:	d040      	beq.n	8006dda <_free_r+0x8a>
 8006d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d5c:	1f0c      	subs	r4, r1, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfb8      	it	lt
 8006d62:	18e4      	addlt	r4, r4, r3
 8006d64:	f000 fb14 	bl	8007390 <__malloc_lock>
 8006d68:	4a1c      	ldr	r2, [pc, #112]	; (8006ddc <_free_r+0x8c>)
 8006d6a:	6813      	ldr	r3, [r2, #0]
 8006d6c:	b933      	cbnz	r3, 8006d7c <_free_r+0x2c>
 8006d6e:	6063      	str	r3, [r4, #4]
 8006d70:	6014      	str	r4, [r2, #0]
 8006d72:	4628      	mov	r0, r5
 8006d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d78:	f000 bb10 	b.w	800739c <__malloc_unlock>
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d908      	bls.n	8006d92 <_free_r+0x42>
 8006d80:	6820      	ldr	r0, [r4, #0]
 8006d82:	1821      	adds	r1, r4, r0
 8006d84:	428b      	cmp	r3, r1
 8006d86:	bf01      	itttt	eq
 8006d88:	6819      	ldreq	r1, [r3, #0]
 8006d8a:	685b      	ldreq	r3, [r3, #4]
 8006d8c:	1809      	addeq	r1, r1, r0
 8006d8e:	6021      	streq	r1, [r4, #0]
 8006d90:	e7ed      	b.n	8006d6e <_free_r+0x1e>
 8006d92:	461a      	mov	r2, r3
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b10b      	cbz	r3, 8006d9c <_free_r+0x4c>
 8006d98:	42a3      	cmp	r3, r4
 8006d9a:	d9fa      	bls.n	8006d92 <_free_r+0x42>
 8006d9c:	6811      	ldr	r1, [r2, #0]
 8006d9e:	1850      	adds	r0, r2, r1
 8006da0:	42a0      	cmp	r0, r4
 8006da2:	d10b      	bne.n	8006dbc <_free_r+0x6c>
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	4401      	add	r1, r0
 8006da8:	1850      	adds	r0, r2, r1
 8006daa:	4283      	cmp	r3, r0
 8006dac:	6011      	str	r1, [r2, #0]
 8006dae:	d1e0      	bne.n	8006d72 <_free_r+0x22>
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	4401      	add	r1, r0
 8006db6:	6011      	str	r1, [r2, #0]
 8006db8:	6053      	str	r3, [r2, #4]
 8006dba:	e7da      	b.n	8006d72 <_free_r+0x22>
 8006dbc:	d902      	bls.n	8006dc4 <_free_r+0x74>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	602b      	str	r3, [r5, #0]
 8006dc2:	e7d6      	b.n	8006d72 <_free_r+0x22>
 8006dc4:	6820      	ldr	r0, [r4, #0]
 8006dc6:	1821      	adds	r1, r4, r0
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	bf01      	itttt	eq
 8006dcc:	6819      	ldreq	r1, [r3, #0]
 8006dce:	685b      	ldreq	r3, [r3, #4]
 8006dd0:	1809      	addeq	r1, r1, r0
 8006dd2:	6021      	streq	r1, [r4, #0]
 8006dd4:	6063      	str	r3, [r4, #4]
 8006dd6:	6054      	str	r4, [r2, #4]
 8006dd8:	e7cb      	b.n	8006d72 <_free_r+0x22>
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	20000bcc 	.word	0x20000bcc

08006de0 <sbrk_aligned>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	4e0e      	ldr	r6, [pc, #56]	; (8006e1c <sbrk_aligned+0x3c>)
 8006de4:	460c      	mov	r4, r1
 8006de6:	6831      	ldr	r1, [r6, #0]
 8006de8:	4605      	mov	r5, r0
 8006dea:	b911      	cbnz	r1, 8006df2 <sbrk_aligned+0x12>
 8006dec:	f000 f9e4 	bl	80071b8 <_sbrk_r>
 8006df0:	6030      	str	r0, [r6, #0]
 8006df2:	4621      	mov	r1, r4
 8006df4:	4628      	mov	r0, r5
 8006df6:	f000 f9df 	bl	80071b8 <_sbrk_r>
 8006dfa:	1c43      	adds	r3, r0, #1
 8006dfc:	d00a      	beq.n	8006e14 <sbrk_aligned+0x34>
 8006dfe:	1cc4      	adds	r4, r0, #3
 8006e00:	f024 0403 	bic.w	r4, r4, #3
 8006e04:	42a0      	cmp	r0, r4
 8006e06:	d007      	beq.n	8006e18 <sbrk_aligned+0x38>
 8006e08:	1a21      	subs	r1, r4, r0
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 f9d4 	bl	80071b8 <_sbrk_r>
 8006e10:	3001      	adds	r0, #1
 8006e12:	d101      	bne.n	8006e18 <sbrk_aligned+0x38>
 8006e14:	f04f 34ff 	mov.w	r4, #4294967295
 8006e18:	4620      	mov	r0, r4
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	20000bd0 	.word	0x20000bd0

08006e20 <_malloc_r>:
 8006e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e24:	1ccd      	adds	r5, r1, #3
 8006e26:	f025 0503 	bic.w	r5, r5, #3
 8006e2a:	3508      	adds	r5, #8
 8006e2c:	2d0c      	cmp	r5, #12
 8006e2e:	bf38      	it	cc
 8006e30:	250c      	movcc	r5, #12
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	4607      	mov	r7, r0
 8006e36:	db01      	blt.n	8006e3c <_malloc_r+0x1c>
 8006e38:	42a9      	cmp	r1, r5
 8006e3a:	d905      	bls.n	8006e48 <_malloc_r+0x28>
 8006e3c:	230c      	movs	r3, #12
 8006e3e:	2600      	movs	r6, #0
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4630      	mov	r0, r6
 8006e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e48:	4e2e      	ldr	r6, [pc, #184]	; (8006f04 <_malloc_r+0xe4>)
 8006e4a:	f000 faa1 	bl	8007390 <__malloc_lock>
 8006e4e:	6833      	ldr	r3, [r6, #0]
 8006e50:	461c      	mov	r4, r3
 8006e52:	bb34      	cbnz	r4, 8006ea2 <_malloc_r+0x82>
 8006e54:	4629      	mov	r1, r5
 8006e56:	4638      	mov	r0, r7
 8006e58:	f7ff ffc2 	bl	8006de0 <sbrk_aligned>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	4604      	mov	r4, r0
 8006e60:	d14d      	bne.n	8006efe <_malloc_r+0xde>
 8006e62:	6834      	ldr	r4, [r6, #0]
 8006e64:	4626      	mov	r6, r4
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	d140      	bne.n	8006eec <_malloc_r+0xcc>
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4638      	mov	r0, r7
 8006e70:	eb04 0803 	add.w	r8, r4, r3
 8006e74:	f000 f9a0 	bl	80071b8 <_sbrk_r>
 8006e78:	4580      	cmp	r8, r0
 8006e7a:	d13a      	bne.n	8006ef2 <_malloc_r+0xd2>
 8006e7c:	6821      	ldr	r1, [r4, #0]
 8006e7e:	3503      	adds	r5, #3
 8006e80:	1a6d      	subs	r5, r5, r1
 8006e82:	f025 0503 	bic.w	r5, r5, #3
 8006e86:	3508      	adds	r5, #8
 8006e88:	2d0c      	cmp	r5, #12
 8006e8a:	bf38      	it	cc
 8006e8c:	250c      	movcc	r5, #12
 8006e8e:	4638      	mov	r0, r7
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7ff ffa5 	bl	8006de0 <sbrk_aligned>
 8006e96:	3001      	adds	r0, #1
 8006e98:	d02b      	beq.n	8006ef2 <_malloc_r+0xd2>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	442b      	add	r3, r5
 8006e9e:	6023      	str	r3, [r4, #0]
 8006ea0:	e00e      	b.n	8006ec0 <_malloc_r+0xa0>
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	1b52      	subs	r2, r2, r5
 8006ea6:	d41e      	bmi.n	8006ee6 <_malloc_r+0xc6>
 8006ea8:	2a0b      	cmp	r2, #11
 8006eaa:	d916      	bls.n	8006eda <_malloc_r+0xba>
 8006eac:	1961      	adds	r1, r4, r5
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	6025      	str	r5, [r4, #0]
 8006eb2:	bf18      	it	ne
 8006eb4:	6059      	strne	r1, [r3, #4]
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	bf08      	it	eq
 8006eba:	6031      	streq	r1, [r6, #0]
 8006ebc:	5162      	str	r2, [r4, r5]
 8006ebe:	604b      	str	r3, [r1, #4]
 8006ec0:	4638      	mov	r0, r7
 8006ec2:	f104 060b 	add.w	r6, r4, #11
 8006ec6:	f000 fa69 	bl	800739c <__malloc_unlock>
 8006eca:	f026 0607 	bic.w	r6, r6, #7
 8006ece:	1d23      	adds	r3, r4, #4
 8006ed0:	1af2      	subs	r2, r6, r3
 8006ed2:	d0b6      	beq.n	8006e42 <_malloc_r+0x22>
 8006ed4:	1b9b      	subs	r3, r3, r6
 8006ed6:	50a3      	str	r3, [r4, r2]
 8006ed8:	e7b3      	b.n	8006e42 <_malloc_r+0x22>
 8006eda:	6862      	ldr	r2, [r4, #4]
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	bf0c      	ite	eq
 8006ee0:	6032      	streq	r2, [r6, #0]
 8006ee2:	605a      	strne	r2, [r3, #4]
 8006ee4:	e7ec      	b.n	8006ec0 <_malloc_r+0xa0>
 8006ee6:	4623      	mov	r3, r4
 8006ee8:	6864      	ldr	r4, [r4, #4]
 8006eea:	e7b2      	b.n	8006e52 <_malloc_r+0x32>
 8006eec:	4634      	mov	r4, r6
 8006eee:	6876      	ldr	r6, [r6, #4]
 8006ef0:	e7b9      	b.n	8006e66 <_malloc_r+0x46>
 8006ef2:	230c      	movs	r3, #12
 8006ef4:	4638      	mov	r0, r7
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	f000 fa50 	bl	800739c <__malloc_unlock>
 8006efc:	e7a1      	b.n	8006e42 <_malloc_r+0x22>
 8006efe:	6025      	str	r5, [r4, #0]
 8006f00:	e7de      	b.n	8006ec0 <_malloc_r+0xa0>
 8006f02:	bf00      	nop
 8006f04:	20000bcc 	.word	0x20000bcc

08006f08 <__sfputc_r>:
 8006f08:	6893      	ldr	r3, [r2, #8]
 8006f0a:	b410      	push	{r4}
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	6093      	str	r3, [r2, #8]
 8006f12:	da07      	bge.n	8006f24 <__sfputc_r+0x1c>
 8006f14:	6994      	ldr	r4, [r2, #24]
 8006f16:	42a3      	cmp	r3, r4
 8006f18:	db01      	blt.n	8006f1e <__sfputc_r+0x16>
 8006f1a:	290a      	cmp	r1, #10
 8006f1c:	d102      	bne.n	8006f24 <__sfputc_r+0x1c>
 8006f1e:	bc10      	pop	{r4}
 8006f20:	f7fe ba00 	b.w	8005324 <__swbuf_r>
 8006f24:	6813      	ldr	r3, [r2, #0]
 8006f26:	1c58      	adds	r0, r3, #1
 8006f28:	6010      	str	r0, [r2, #0]
 8006f2a:	7019      	strb	r1, [r3, #0]
 8006f2c:	4608      	mov	r0, r1
 8006f2e:	bc10      	pop	{r4}
 8006f30:	4770      	bx	lr

08006f32 <__sfputs_r>:
 8006f32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f34:	4606      	mov	r6, r0
 8006f36:	460f      	mov	r7, r1
 8006f38:	4614      	mov	r4, r2
 8006f3a:	18d5      	adds	r5, r2, r3
 8006f3c:	42ac      	cmp	r4, r5
 8006f3e:	d101      	bne.n	8006f44 <__sfputs_r+0x12>
 8006f40:	2000      	movs	r0, #0
 8006f42:	e007      	b.n	8006f54 <__sfputs_r+0x22>
 8006f44:	463a      	mov	r2, r7
 8006f46:	4630      	mov	r0, r6
 8006f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f4c:	f7ff ffdc 	bl	8006f08 <__sfputc_r>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d1f3      	bne.n	8006f3c <__sfputs_r+0xa>
 8006f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f58 <_vfiprintf_r>:
 8006f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5c:	460d      	mov	r5, r1
 8006f5e:	4614      	mov	r4, r2
 8006f60:	4698      	mov	r8, r3
 8006f62:	4606      	mov	r6, r0
 8006f64:	b09d      	sub	sp, #116	; 0x74
 8006f66:	b118      	cbz	r0, 8006f70 <_vfiprintf_r+0x18>
 8006f68:	6983      	ldr	r3, [r0, #24]
 8006f6a:	b90b      	cbnz	r3, 8006f70 <_vfiprintf_r+0x18>
 8006f6c:	f7ff fa2c 	bl	80063c8 <__sinit>
 8006f70:	4b89      	ldr	r3, [pc, #548]	; (8007198 <_vfiprintf_r+0x240>)
 8006f72:	429d      	cmp	r5, r3
 8006f74:	d11b      	bne.n	8006fae <_vfiprintf_r+0x56>
 8006f76:	6875      	ldr	r5, [r6, #4]
 8006f78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f7a:	07d9      	lsls	r1, r3, #31
 8006f7c:	d405      	bmi.n	8006f8a <_vfiprintf_r+0x32>
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	059a      	lsls	r2, r3, #22
 8006f82:	d402      	bmi.n	8006f8a <_vfiprintf_r+0x32>
 8006f84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f86:	f7ff fac2 	bl	800650e <__retarget_lock_acquire_recursive>
 8006f8a:	89ab      	ldrh	r3, [r5, #12]
 8006f8c:	071b      	lsls	r3, r3, #28
 8006f8e:	d501      	bpl.n	8006f94 <_vfiprintf_r+0x3c>
 8006f90:	692b      	ldr	r3, [r5, #16]
 8006f92:	b9eb      	cbnz	r3, 8006fd0 <_vfiprintf_r+0x78>
 8006f94:	4629      	mov	r1, r5
 8006f96:	4630      	mov	r0, r6
 8006f98:	f7fe fa16 	bl	80053c8 <__swsetup_r>
 8006f9c:	b1c0      	cbz	r0, 8006fd0 <_vfiprintf_r+0x78>
 8006f9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fa0:	07dc      	lsls	r4, r3, #31
 8006fa2:	d50e      	bpl.n	8006fc2 <_vfiprintf_r+0x6a>
 8006fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa8:	b01d      	add	sp, #116	; 0x74
 8006faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fae:	4b7b      	ldr	r3, [pc, #492]	; (800719c <_vfiprintf_r+0x244>)
 8006fb0:	429d      	cmp	r5, r3
 8006fb2:	d101      	bne.n	8006fb8 <_vfiprintf_r+0x60>
 8006fb4:	68b5      	ldr	r5, [r6, #8]
 8006fb6:	e7df      	b.n	8006f78 <_vfiprintf_r+0x20>
 8006fb8:	4b79      	ldr	r3, [pc, #484]	; (80071a0 <_vfiprintf_r+0x248>)
 8006fba:	429d      	cmp	r5, r3
 8006fbc:	bf08      	it	eq
 8006fbe:	68f5      	ldreq	r5, [r6, #12]
 8006fc0:	e7da      	b.n	8006f78 <_vfiprintf_r+0x20>
 8006fc2:	89ab      	ldrh	r3, [r5, #12]
 8006fc4:	0598      	lsls	r0, r3, #22
 8006fc6:	d4ed      	bmi.n	8006fa4 <_vfiprintf_r+0x4c>
 8006fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fca:	f7ff faa1 	bl	8006510 <__retarget_lock_release_recursive>
 8006fce:	e7e9      	b.n	8006fa4 <_vfiprintf_r+0x4c>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd4:	2320      	movs	r3, #32
 8006fd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fda:	2330      	movs	r3, #48	; 0x30
 8006fdc:	f04f 0901 	mov.w	r9, #1
 8006fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fe4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80071a4 <_vfiprintf_r+0x24c>
 8006fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fec:	4623      	mov	r3, r4
 8006fee:	469a      	mov	sl, r3
 8006ff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ff4:	b10a      	cbz	r2, 8006ffa <_vfiprintf_r+0xa2>
 8006ff6:	2a25      	cmp	r2, #37	; 0x25
 8006ff8:	d1f9      	bne.n	8006fee <_vfiprintf_r+0x96>
 8006ffa:	ebba 0b04 	subs.w	fp, sl, r4
 8006ffe:	d00b      	beq.n	8007018 <_vfiprintf_r+0xc0>
 8007000:	465b      	mov	r3, fp
 8007002:	4622      	mov	r2, r4
 8007004:	4629      	mov	r1, r5
 8007006:	4630      	mov	r0, r6
 8007008:	f7ff ff93 	bl	8006f32 <__sfputs_r>
 800700c:	3001      	adds	r0, #1
 800700e:	f000 80aa 	beq.w	8007166 <_vfiprintf_r+0x20e>
 8007012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007014:	445a      	add	r2, fp
 8007016:	9209      	str	r2, [sp, #36]	; 0x24
 8007018:	f89a 3000 	ldrb.w	r3, [sl]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80a2 	beq.w	8007166 <_vfiprintf_r+0x20e>
 8007022:	2300      	movs	r3, #0
 8007024:	f04f 32ff 	mov.w	r2, #4294967295
 8007028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800702c:	f10a 0a01 	add.w	sl, sl, #1
 8007030:	9304      	str	r3, [sp, #16]
 8007032:	9307      	str	r3, [sp, #28]
 8007034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007038:	931a      	str	r3, [sp, #104]	; 0x68
 800703a:	4654      	mov	r4, sl
 800703c:	2205      	movs	r2, #5
 800703e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007042:	4858      	ldr	r0, [pc, #352]	; (80071a4 <_vfiprintf_r+0x24c>)
 8007044:	f7ff fad2 	bl	80065ec <memchr>
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	b9d8      	cbnz	r0, 8007084 <_vfiprintf_r+0x12c>
 800704c:	06d1      	lsls	r1, r2, #27
 800704e:	bf44      	itt	mi
 8007050:	2320      	movmi	r3, #32
 8007052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007056:	0713      	lsls	r3, r2, #28
 8007058:	bf44      	itt	mi
 800705a:	232b      	movmi	r3, #43	; 0x2b
 800705c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007060:	f89a 3000 	ldrb.w	r3, [sl]
 8007064:	2b2a      	cmp	r3, #42	; 0x2a
 8007066:	d015      	beq.n	8007094 <_vfiprintf_r+0x13c>
 8007068:	4654      	mov	r4, sl
 800706a:	2000      	movs	r0, #0
 800706c:	f04f 0c0a 	mov.w	ip, #10
 8007070:	9a07      	ldr	r2, [sp, #28]
 8007072:	4621      	mov	r1, r4
 8007074:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007078:	3b30      	subs	r3, #48	; 0x30
 800707a:	2b09      	cmp	r3, #9
 800707c:	d94e      	bls.n	800711c <_vfiprintf_r+0x1c4>
 800707e:	b1b0      	cbz	r0, 80070ae <_vfiprintf_r+0x156>
 8007080:	9207      	str	r2, [sp, #28]
 8007082:	e014      	b.n	80070ae <_vfiprintf_r+0x156>
 8007084:	eba0 0308 	sub.w	r3, r0, r8
 8007088:	fa09 f303 	lsl.w	r3, r9, r3
 800708c:	4313      	orrs	r3, r2
 800708e:	46a2      	mov	sl, r4
 8007090:	9304      	str	r3, [sp, #16]
 8007092:	e7d2      	b.n	800703a <_vfiprintf_r+0xe2>
 8007094:	9b03      	ldr	r3, [sp, #12]
 8007096:	1d19      	adds	r1, r3, #4
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	9103      	str	r1, [sp, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	bfbb      	ittet	lt
 80070a0:	425b      	neglt	r3, r3
 80070a2:	f042 0202 	orrlt.w	r2, r2, #2
 80070a6:	9307      	strge	r3, [sp, #28]
 80070a8:	9307      	strlt	r3, [sp, #28]
 80070aa:	bfb8      	it	lt
 80070ac:	9204      	strlt	r2, [sp, #16]
 80070ae:	7823      	ldrb	r3, [r4, #0]
 80070b0:	2b2e      	cmp	r3, #46	; 0x2e
 80070b2:	d10c      	bne.n	80070ce <_vfiprintf_r+0x176>
 80070b4:	7863      	ldrb	r3, [r4, #1]
 80070b6:	2b2a      	cmp	r3, #42	; 0x2a
 80070b8:	d135      	bne.n	8007126 <_vfiprintf_r+0x1ce>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	3402      	adds	r4, #2
 80070be:	1d1a      	adds	r2, r3, #4
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	9203      	str	r2, [sp, #12]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfb8      	it	lt
 80070c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80070cc:	9305      	str	r3, [sp, #20]
 80070ce:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80071a8 <_vfiprintf_r+0x250>
 80070d2:	2203      	movs	r2, #3
 80070d4:	4650      	mov	r0, sl
 80070d6:	7821      	ldrb	r1, [r4, #0]
 80070d8:	f7ff fa88 	bl	80065ec <memchr>
 80070dc:	b140      	cbz	r0, 80070f0 <_vfiprintf_r+0x198>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	eba0 000a 	sub.w	r0, r0, sl
 80070e4:	fa03 f000 	lsl.w	r0, r3, r0
 80070e8:	9b04      	ldr	r3, [sp, #16]
 80070ea:	3401      	adds	r4, #1
 80070ec:	4303      	orrs	r3, r0
 80070ee:	9304      	str	r3, [sp, #16]
 80070f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f4:	2206      	movs	r2, #6
 80070f6:	482d      	ldr	r0, [pc, #180]	; (80071ac <_vfiprintf_r+0x254>)
 80070f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070fc:	f7ff fa76 	bl	80065ec <memchr>
 8007100:	2800      	cmp	r0, #0
 8007102:	d03f      	beq.n	8007184 <_vfiprintf_r+0x22c>
 8007104:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <_vfiprintf_r+0x258>)
 8007106:	bb1b      	cbnz	r3, 8007150 <_vfiprintf_r+0x1f8>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	3307      	adds	r3, #7
 800710c:	f023 0307 	bic.w	r3, r3, #7
 8007110:	3308      	adds	r3, #8
 8007112:	9303      	str	r3, [sp, #12]
 8007114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007116:	443b      	add	r3, r7
 8007118:	9309      	str	r3, [sp, #36]	; 0x24
 800711a:	e767      	b.n	8006fec <_vfiprintf_r+0x94>
 800711c:	460c      	mov	r4, r1
 800711e:	2001      	movs	r0, #1
 8007120:	fb0c 3202 	mla	r2, ip, r2, r3
 8007124:	e7a5      	b.n	8007072 <_vfiprintf_r+0x11a>
 8007126:	2300      	movs	r3, #0
 8007128:	f04f 0c0a 	mov.w	ip, #10
 800712c:	4619      	mov	r1, r3
 800712e:	3401      	adds	r4, #1
 8007130:	9305      	str	r3, [sp, #20]
 8007132:	4620      	mov	r0, r4
 8007134:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007138:	3a30      	subs	r2, #48	; 0x30
 800713a:	2a09      	cmp	r2, #9
 800713c:	d903      	bls.n	8007146 <_vfiprintf_r+0x1ee>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d0c5      	beq.n	80070ce <_vfiprintf_r+0x176>
 8007142:	9105      	str	r1, [sp, #20]
 8007144:	e7c3      	b.n	80070ce <_vfiprintf_r+0x176>
 8007146:	4604      	mov	r4, r0
 8007148:	2301      	movs	r3, #1
 800714a:	fb0c 2101 	mla	r1, ip, r1, r2
 800714e:	e7f0      	b.n	8007132 <_vfiprintf_r+0x1da>
 8007150:	ab03      	add	r3, sp, #12
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	462a      	mov	r2, r5
 8007156:	4630      	mov	r0, r6
 8007158:	4b16      	ldr	r3, [pc, #88]	; (80071b4 <_vfiprintf_r+0x25c>)
 800715a:	a904      	add	r1, sp, #16
 800715c:	f7fd fc92 	bl	8004a84 <_printf_float>
 8007160:	4607      	mov	r7, r0
 8007162:	1c78      	adds	r0, r7, #1
 8007164:	d1d6      	bne.n	8007114 <_vfiprintf_r+0x1bc>
 8007166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007168:	07d9      	lsls	r1, r3, #31
 800716a:	d405      	bmi.n	8007178 <_vfiprintf_r+0x220>
 800716c:	89ab      	ldrh	r3, [r5, #12]
 800716e:	059a      	lsls	r2, r3, #22
 8007170:	d402      	bmi.n	8007178 <_vfiprintf_r+0x220>
 8007172:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007174:	f7ff f9cc 	bl	8006510 <__retarget_lock_release_recursive>
 8007178:	89ab      	ldrh	r3, [r5, #12]
 800717a:	065b      	lsls	r3, r3, #25
 800717c:	f53f af12 	bmi.w	8006fa4 <_vfiprintf_r+0x4c>
 8007180:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007182:	e711      	b.n	8006fa8 <_vfiprintf_r+0x50>
 8007184:	ab03      	add	r3, sp, #12
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462a      	mov	r2, r5
 800718a:	4630      	mov	r0, r6
 800718c:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <_vfiprintf_r+0x25c>)
 800718e:	a904      	add	r1, sp, #16
 8007190:	f7fd ff14 	bl	8004fbc <_printf_i>
 8007194:	e7e4      	b.n	8007160 <_vfiprintf_r+0x208>
 8007196:	bf00      	nop
 8007198:	080077cc 	.word	0x080077cc
 800719c:	080077ec 	.word	0x080077ec
 80071a0:	080077ac 	.word	0x080077ac
 80071a4:	08007964 	.word	0x08007964
 80071a8:	0800796a 	.word	0x0800796a
 80071ac:	0800796e 	.word	0x0800796e
 80071b0:	08004a85 	.word	0x08004a85
 80071b4:	08006f33 	.word	0x08006f33

080071b8 <_sbrk_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	2300      	movs	r3, #0
 80071bc:	4d05      	ldr	r5, [pc, #20]	; (80071d4 <_sbrk_r+0x1c>)
 80071be:	4604      	mov	r4, r0
 80071c0:	4608      	mov	r0, r1
 80071c2:	602b      	str	r3, [r5, #0]
 80071c4:	f7fb f828 	bl	8002218 <_sbrk>
 80071c8:	1c43      	adds	r3, r0, #1
 80071ca:	d102      	bne.n	80071d2 <_sbrk_r+0x1a>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b103      	cbz	r3, 80071d2 <_sbrk_r+0x1a>
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	20000bd4 	.word	0x20000bd4

080071d8 <__sread>:
 80071d8:	b510      	push	{r4, lr}
 80071da:	460c      	mov	r4, r1
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	f000 f8e2 	bl	80073a8 <_read_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	bfab      	itete	ge
 80071e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ea:	89a3      	ldrhlt	r3, [r4, #12]
 80071ec:	181b      	addge	r3, r3, r0
 80071ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071f2:	bfac      	ite	ge
 80071f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80071f6:	81a3      	strhlt	r3, [r4, #12]
 80071f8:	bd10      	pop	{r4, pc}

080071fa <__swrite>:
 80071fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071fe:	461f      	mov	r7, r3
 8007200:	898b      	ldrh	r3, [r1, #12]
 8007202:	4605      	mov	r5, r0
 8007204:	05db      	lsls	r3, r3, #23
 8007206:	460c      	mov	r4, r1
 8007208:	4616      	mov	r6, r2
 800720a:	d505      	bpl.n	8007218 <__swrite+0x1e>
 800720c:	2302      	movs	r3, #2
 800720e:	2200      	movs	r2, #0
 8007210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007214:	f000 f898 	bl	8007348 <_lseek_r>
 8007218:	89a3      	ldrh	r3, [r4, #12]
 800721a:	4632      	mov	r2, r6
 800721c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007220:	81a3      	strh	r3, [r4, #12]
 8007222:	4628      	mov	r0, r5
 8007224:	463b      	mov	r3, r7
 8007226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800722a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800722e:	f000 b817 	b.w	8007260 <_write_r>

08007232 <__sseek>:
 8007232:	b510      	push	{r4, lr}
 8007234:	460c      	mov	r4, r1
 8007236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723a:	f000 f885 	bl	8007348 <_lseek_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	89a3      	ldrh	r3, [r4, #12]
 8007242:	bf15      	itete	ne
 8007244:	6560      	strne	r0, [r4, #84]	; 0x54
 8007246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800724a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800724e:	81a3      	strheq	r3, [r4, #12]
 8007250:	bf18      	it	ne
 8007252:	81a3      	strhne	r3, [r4, #12]
 8007254:	bd10      	pop	{r4, pc}

08007256 <__sclose>:
 8007256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725a:	f000 b831 	b.w	80072c0 <_close_r>
	...

08007260 <_write_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	4611      	mov	r1, r2
 8007268:	2200      	movs	r2, #0
 800726a:	4d05      	ldr	r5, [pc, #20]	; (8007280 <_write_r+0x20>)
 800726c:	602a      	str	r2, [r5, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	f7fa ff86 	bl	8002180 <_write>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_write_r+0x1e>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_write_r+0x1e>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	20000bd4 	.word	0x20000bd4

08007284 <__assert_func>:
 8007284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007286:	4614      	mov	r4, r2
 8007288:	461a      	mov	r2, r3
 800728a:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <__assert_func+0x2c>)
 800728c:	4605      	mov	r5, r0
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68d8      	ldr	r0, [r3, #12]
 8007292:	b14c      	cbz	r4, 80072a8 <__assert_func+0x24>
 8007294:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <__assert_func+0x30>)
 8007296:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800729a:	9100      	str	r1, [sp, #0]
 800729c:	462b      	mov	r3, r5
 800729e:	4906      	ldr	r1, [pc, #24]	; (80072b8 <__assert_func+0x34>)
 80072a0:	f000 f81e 	bl	80072e0 <fiprintf>
 80072a4:	f000 f89f 	bl	80073e6 <abort>
 80072a8:	4b04      	ldr	r3, [pc, #16]	; (80072bc <__assert_func+0x38>)
 80072aa:	461c      	mov	r4, r3
 80072ac:	e7f3      	b.n	8007296 <__assert_func+0x12>
 80072ae:	bf00      	nop
 80072b0:	20000010 	.word	0x20000010
 80072b4:	08007975 	.word	0x08007975
 80072b8:	08007982 	.word	0x08007982
 80072bc:	080079b0 	.word	0x080079b0

080072c0 <_close_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	2300      	movs	r3, #0
 80072c4:	4d05      	ldr	r5, [pc, #20]	; (80072dc <_close_r+0x1c>)
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f7fa ff74 	bl	80021b8 <_close>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_close_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_close_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	20000bd4 	.word	0x20000bd4

080072e0 <fiprintf>:
 80072e0:	b40e      	push	{r1, r2, r3}
 80072e2:	b503      	push	{r0, r1, lr}
 80072e4:	4601      	mov	r1, r0
 80072e6:	ab03      	add	r3, sp, #12
 80072e8:	4805      	ldr	r0, [pc, #20]	; (8007300 <fiprintf+0x20>)
 80072ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ee:	6800      	ldr	r0, [r0, #0]
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	f7ff fe31 	bl	8006f58 <_vfiprintf_r>
 80072f6:	b002      	add	sp, #8
 80072f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072fc:	b003      	add	sp, #12
 80072fe:	4770      	bx	lr
 8007300:	20000010 	.word	0x20000010

08007304 <_fstat_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	2300      	movs	r3, #0
 8007308:	4d06      	ldr	r5, [pc, #24]	; (8007324 <_fstat_r+0x20>)
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	4611      	mov	r1, r2
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	f7fa ff5c 	bl	80021ce <_fstat>
 8007316:	1c43      	adds	r3, r0, #1
 8007318:	d102      	bne.n	8007320 <_fstat_r+0x1c>
 800731a:	682b      	ldr	r3, [r5, #0]
 800731c:	b103      	cbz	r3, 8007320 <_fstat_r+0x1c>
 800731e:	6023      	str	r3, [r4, #0]
 8007320:	bd38      	pop	{r3, r4, r5, pc}
 8007322:	bf00      	nop
 8007324:	20000bd4 	.word	0x20000bd4

08007328 <_isatty_r>:
 8007328:	b538      	push	{r3, r4, r5, lr}
 800732a:	2300      	movs	r3, #0
 800732c:	4d05      	ldr	r5, [pc, #20]	; (8007344 <_isatty_r+0x1c>)
 800732e:	4604      	mov	r4, r0
 8007330:	4608      	mov	r0, r1
 8007332:	602b      	str	r3, [r5, #0]
 8007334:	f7fa ff5a 	bl	80021ec <_isatty>
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d102      	bne.n	8007342 <_isatty_r+0x1a>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	b103      	cbz	r3, 8007342 <_isatty_r+0x1a>
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	bd38      	pop	{r3, r4, r5, pc}
 8007344:	20000bd4 	.word	0x20000bd4

08007348 <_lseek_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	4604      	mov	r4, r0
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	2200      	movs	r2, #0
 8007352:	4d05      	ldr	r5, [pc, #20]	; (8007368 <_lseek_r+0x20>)
 8007354:	602a      	str	r2, [r5, #0]
 8007356:	461a      	mov	r2, r3
 8007358:	f7fa ff52 	bl	8002200 <_lseek>
 800735c:	1c43      	adds	r3, r0, #1
 800735e:	d102      	bne.n	8007366 <_lseek_r+0x1e>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	b103      	cbz	r3, 8007366 <_lseek_r+0x1e>
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	bd38      	pop	{r3, r4, r5, pc}
 8007368:	20000bd4 	.word	0x20000bd4

0800736c <__ascii_mbtowc>:
 800736c:	b082      	sub	sp, #8
 800736e:	b901      	cbnz	r1, 8007372 <__ascii_mbtowc+0x6>
 8007370:	a901      	add	r1, sp, #4
 8007372:	b142      	cbz	r2, 8007386 <__ascii_mbtowc+0x1a>
 8007374:	b14b      	cbz	r3, 800738a <__ascii_mbtowc+0x1e>
 8007376:	7813      	ldrb	r3, [r2, #0]
 8007378:	600b      	str	r3, [r1, #0]
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	1e10      	subs	r0, r2, #0
 800737e:	bf18      	it	ne
 8007380:	2001      	movne	r0, #1
 8007382:	b002      	add	sp, #8
 8007384:	4770      	bx	lr
 8007386:	4610      	mov	r0, r2
 8007388:	e7fb      	b.n	8007382 <__ascii_mbtowc+0x16>
 800738a:	f06f 0001 	mvn.w	r0, #1
 800738e:	e7f8      	b.n	8007382 <__ascii_mbtowc+0x16>

08007390 <__malloc_lock>:
 8007390:	4801      	ldr	r0, [pc, #4]	; (8007398 <__malloc_lock+0x8>)
 8007392:	f7ff b8bc 	b.w	800650e <__retarget_lock_acquire_recursive>
 8007396:	bf00      	nop
 8007398:	20000bc8 	.word	0x20000bc8

0800739c <__malloc_unlock>:
 800739c:	4801      	ldr	r0, [pc, #4]	; (80073a4 <__malloc_unlock+0x8>)
 800739e:	f7ff b8b7 	b.w	8006510 <__retarget_lock_release_recursive>
 80073a2:	bf00      	nop
 80073a4:	20000bc8 	.word	0x20000bc8

080073a8 <_read_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	2200      	movs	r2, #0
 80073b2:	4d05      	ldr	r5, [pc, #20]	; (80073c8 <_read_r+0x20>)
 80073b4:	602a      	str	r2, [r5, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f7fa fec5 	bl	8002146 <_read>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_read_r+0x1e>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_read_r+0x1e>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20000bd4 	.word	0x20000bd4

080073cc <__ascii_wctomb>:
 80073cc:	4603      	mov	r3, r0
 80073ce:	4608      	mov	r0, r1
 80073d0:	b141      	cbz	r1, 80073e4 <__ascii_wctomb+0x18>
 80073d2:	2aff      	cmp	r2, #255	; 0xff
 80073d4:	d904      	bls.n	80073e0 <__ascii_wctomb+0x14>
 80073d6:	228a      	movs	r2, #138	; 0x8a
 80073d8:	f04f 30ff 	mov.w	r0, #4294967295
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	4770      	bx	lr
 80073e0:	2001      	movs	r0, #1
 80073e2:	700a      	strb	r2, [r1, #0]
 80073e4:	4770      	bx	lr

080073e6 <abort>:
 80073e6:	2006      	movs	r0, #6
 80073e8:	b508      	push	{r3, lr}
 80073ea:	f000 f82b 	bl	8007444 <raise>
 80073ee:	2001      	movs	r0, #1
 80073f0:	f7fa fe9f 	bl	8002132 <_exit>

080073f4 <_raise_r>:
 80073f4:	291f      	cmp	r1, #31
 80073f6:	b538      	push	{r3, r4, r5, lr}
 80073f8:	4604      	mov	r4, r0
 80073fa:	460d      	mov	r5, r1
 80073fc:	d904      	bls.n	8007408 <_raise_r+0x14>
 80073fe:	2316      	movs	r3, #22
 8007400:	6003      	str	r3, [r0, #0]
 8007402:	f04f 30ff 	mov.w	r0, #4294967295
 8007406:	bd38      	pop	{r3, r4, r5, pc}
 8007408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800740a:	b112      	cbz	r2, 8007412 <_raise_r+0x1e>
 800740c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007410:	b94b      	cbnz	r3, 8007426 <_raise_r+0x32>
 8007412:	4620      	mov	r0, r4
 8007414:	f000 f830 	bl	8007478 <_getpid_r>
 8007418:	462a      	mov	r2, r5
 800741a:	4601      	mov	r1, r0
 800741c:	4620      	mov	r0, r4
 800741e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007422:	f000 b817 	b.w	8007454 <_kill_r>
 8007426:	2b01      	cmp	r3, #1
 8007428:	d00a      	beq.n	8007440 <_raise_r+0x4c>
 800742a:	1c59      	adds	r1, r3, #1
 800742c:	d103      	bne.n	8007436 <_raise_r+0x42>
 800742e:	2316      	movs	r3, #22
 8007430:	6003      	str	r3, [r0, #0]
 8007432:	2001      	movs	r0, #1
 8007434:	e7e7      	b.n	8007406 <_raise_r+0x12>
 8007436:	2400      	movs	r4, #0
 8007438:	4628      	mov	r0, r5
 800743a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800743e:	4798      	blx	r3
 8007440:	2000      	movs	r0, #0
 8007442:	e7e0      	b.n	8007406 <_raise_r+0x12>

08007444 <raise>:
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <raise+0xc>)
 8007446:	4601      	mov	r1, r0
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	f7ff bfd3 	b.w	80073f4 <_raise_r>
 800744e:	bf00      	nop
 8007450:	20000010 	.word	0x20000010

08007454 <_kill_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	2300      	movs	r3, #0
 8007458:	4d06      	ldr	r5, [pc, #24]	; (8007474 <_kill_r+0x20>)
 800745a:	4604      	mov	r4, r0
 800745c:	4608      	mov	r0, r1
 800745e:	4611      	mov	r1, r2
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	f7fa fe56 	bl	8002112 <_kill>
 8007466:	1c43      	adds	r3, r0, #1
 8007468:	d102      	bne.n	8007470 <_kill_r+0x1c>
 800746a:	682b      	ldr	r3, [r5, #0]
 800746c:	b103      	cbz	r3, 8007470 <_kill_r+0x1c>
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	bd38      	pop	{r3, r4, r5, pc}
 8007472:	bf00      	nop
 8007474:	20000bd4 	.word	0x20000bd4

08007478 <_getpid_r>:
 8007478:	f7fa be44 	b.w	8002104 <_getpid>

0800747c <sqrt>:
 800747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800747e:	4606      	mov	r6, r0
 8007480:	460f      	mov	r7, r1
 8007482:	f000 f81f 	bl	80074c4 <__ieee754_sqrt>
 8007486:	4632      	mov	r2, r6
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	463b      	mov	r3, r7
 800748e:	4630      	mov	r0, r6
 8007490:	4639      	mov	r1, r7
 8007492:	f7f9 fabb 	bl	8000a0c <__aeabi_dcmpun>
 8007496:	b990      	cbnz	r0, 80074be <sqrt+0x42>
 8007498:	2200      	movs	r2, #0
 800749a:	2300      	movs	r3, #0
 800749c:	4630      	mov	r0, r6
 800749e:	4639      	mov	r1, r7
 80074a0:	f7f9 fa8c 	bl	80009bc <__aeabi_dcmplt>
 80074a4:	b158      	cbz	r0, 80074be <sqrt+0x42>
 80074a6:	f7fd fa1d 	bl	80048e4 <__errno>
 80074aa:	2321      	movs	r3, #33	; 0x21
 80074ac:	2200      	movs	r2, #0
 80074ae:	6003      	str	r3, [r0, #0]
 80074b0:	2300      	movs	r3, #0
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	f7f9 f939 	bl	800072c <__aeabi_ddiv>
 80074ba:	4604      	mov	r4, r0
 80074bc:	460d      	mov	r5, r1
 80074be:	4620      	mov	r0, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074c4 <__ieee754_sqrt>:
 80074c4:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007620 <__ieee754_sqrt+0x15c>
 80074c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074cc:	ea3c 0c01 	bics.w	ip, ip, r1
 80074d0:	4606      	mov	r6, r0
 80074d2:	460d      	mov	r5, r1
 80074d4:	460c      	mov	r4, r1
 80074d6:	460a      	mov	r2, r1
 80074d8:	4607      	mov	r7, r0
 80074da:	4603      	mov	r3, r0
 80074dc:	d10f      	bne.n	80074fe <__ieee754_sqrt+0x3a>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	f7f8 fff9 	bl	80004d8 <__aeabi_dmul>
 80074e6:	4602      	mov	r2, r0
 80074e8:	460b      	mov	r3, r1
 80074ea:	4630      	mov	r0, r6
 80074ec:	4629      	mov	r1, r5
 80074ee:	f7f8 fe3d 	bl	800016c <__adddf3>
 80074f2:	4606      	mov	r6, r0
 80074f4:	460d      	mov	r5, r1
 80074f6:	4630      	mov	r0, r6
 80074f8:	4629      	mov	r1, r5
 80074fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074fe:	2900      	cmp	r1, #0
 8007500:	dc0e      	bgt.n	8007520 <__ieee754_sqrt+0x5c>
 8007502:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8007506:	ea5c 0707 	orrs.w	r7, ip, r7
 800750a:	d0f4      	beq.n	80074f6 <__ieee754_sqrt+0x32>
 800750c:	b141      	cbz	r1, 8007520 <__ieee754_sqrt+0x5c>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	f7f8 fe29 	bl	8000168 <__aeabi_dsub>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	f7f9 f907 	bl	800072c <__aeabi_ddiv>
 800751e:	e7e8      	b.n	80074f2 <__ieee754_sqrt+0x2e>
 8007520:	1521      	asrs	r1, r4, #20
 8007522:	d075      	beq.n	8007610 <__ieee754_sqrt+0x14c>
 8007524:	07cc      	lsls	r4, r1, #31
 8007526:	f04f 0400 	mov.w	r4, #0
 800752a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800752e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007532:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007536:	bf5e      	ittt	pl
 8007538:	0fd9      	lsrpl	r1, r3, #31
 800753a:	005b      	lslpl	r3, r3, #1
 800753c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007540:	0fd9      	lsrs	r1, r3, #31
 8007542:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8007546:	2516      	movs	r5, #22
 8007548:	4620      	mov	r0, r4
 800754a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800754e:	107f      	asrs	r7, r7, #1
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	1846      	adds	r6, r0, r1
 8007554:	4296      	cmp	r6, r2
 8007556:	bfde      	ittt	le
 8007558:	1b92      	suble	r2, r2, r6
 800755a:	1870      	addle	r0, r6, r1
 800755c:	1864      	addle	r4, r4, r1
 800755e:	0052      	lsls	r2, r2, #1
 8007560:	3d01      	subs	r5, #1
 8007562:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007566:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800756a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800756e:	d1f0      	bne.n	8007552 <__ieee754_sqrt+0x8e>
 8007570:	4629      	mov	r1, r5
 8007572:	f04f 0e20 	mov.w	lr, #32
 8007576:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800757a:	4282      	cmp	r2, r0
 800757c:	eb06 0c05 	add.w	ip, r6, r5
 8007580:	dc02      	bgt.n	8007588 <__ieee754_sqrt+0xc4>
 8007582:	d113      	bne.n	80075ac <__ieee754_sqrt+0xe8>
 8007584:	459c      	cmp	ip, r3
 8007586:	d811      	bhi.n	80075ac <__ieee754_sqrt+0xe8>
 8007588:	f1bc 0f00 	cmp.w	ip, #0
 800758c:	eb0c 0506 	add.w	r5, ip, r6
 8007590:	da43      	bge.n	800761a <__ieee754_sqrt+0x156>
 8007592:	2d00      	cmp	r5, #0
 8007594:	db41      	blt.n	800761a <__ieee754_sqrt+0x156>
 8007596:	f100 0801 	add.w	r8, r0, #1
 800759a:	1a12      	subs	r2, r2, r0
 800759c:	4640      	mov	r0, r8
 800759e:	459c      	cmp	ip, r3
 80075a0:	bf88      	it	hi
 80075a2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80075a6:	eba3 030c 	sub.w	r3, r3, ip
 80075aa:	4431      	add	r1, r6
 80075ac:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80075b0:	f1be 0e01 	subs.w	lr, lr, #1
 80075b4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80075b8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80075bc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80075c0:	d1db      	bne.n	800757a <__ieee754_sqrt+0xb6>
 80075c2:	4313      	orrs	r3, r2
 80075c4:	d006      	beq.n	80075d4 <__ieee754_sqrt+0x110>
 80075c6:	1c48      	adds	r0, r1, #1
 80075c8:	bf0b      	itete	eq
 80075ca:	4671      	moveq	r1, lr
 80075cc:	3101      	addne	r1, #1
 80075ce:	3401      	addeq	r4, #1
 80075d0:	f021 0101 	bicne.w	r1, r1, #1
 80075d4:	1063      	asrs	r3, r4, #1
 80075d6:	0849      	lsrs	r1, r1, #1
 80075d8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80075dc:	07e2      	lsls	r2, r4, #31
 80075de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80075e2:	bf48      	it	mi
 80075e4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80075e8:	460e      	mov	r6, r1
 80075ea:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80075ee:	e782      	b.n	80074f6 <__ieee754_sqrt+0x32>
 80075f0:	0ada      	lsrs	r2, r3, #11
 80075f2:	3815      	subs	r0, #21
 80075f4:	055b      	lsls	r3, r3, #21
 80075f6:	2a00      	cmp	r2, #0
 80075f8:	d0fa      	beq.n	80075f0 <__ieee754_sqrt+0x12c>
 80075fa:	02d5      	lsls	r5, r2, #11
 80075fc:	d50a      	bpl.n	8007614 <__ieee754_sqrt+0x150>
 80075fe:	f1c1 0420 	rsb	r4, r1, #32
 8007602:	fa23 f404 	lsr.w	r4, r3, r4
 8007606:	1e4d      	subs	r5, r1, #1
 8007608:	408b      	lsls	r3, r1
 800760a:	4322      	orrs	r2, r4
 800760c:	1b41      	subs	r1, r0, r5
 800760e:	e789      	b.n	8007524 <__ieee754_sqrt+0x60>
 8007610:	4608      	mov	r0, r1
 8007612:	e7f0      	b.n	80075f6 <__ieee754_sqrt+0x132>
 8007614:	0052      	lsls	r2, r2, #1
 8007616:	3101      	adds	r1, #1
 8007618:	e7ef      	b.n	80075fa <__ieee754_sqrt+0x136>
 800761a:	4680      	mov	r8, r0
 800761c:	e7bd      	b.n	800759a <__ieee754_sqrt+0xd6>
 800761e:	bf00      	nop
 8007620:	7ff00000 	.word	0x7ff00000

08007624 <_init>:
 8007624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007626:	bf00      	nop
 8007628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800762a:	bc08      	pop	{r3}
 800762c:	469e      	mov	lr, r3
 800762e:	4770      	bx	lr

08007630 <_fini>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr


MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080041c0  080041c0  000141c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004294  08004294  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004294  08004294  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004294  08004294  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004298  08004298  00014298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800429c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004138  20000074  08004310  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200041ac  08004310  000241ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000944d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229c  00000000  00000000  000294ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002b788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a04  00000000  00000000  0002c9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdd6  00000000  00000000  000453d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b31  00000000  00000000  000511aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9cdb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c60  00000000  00000000  000d9d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080041a8 	.word	0x080041a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080041a8 	.word	0x080041a8

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000152:	2300      	movs	r3, #0
 8000154:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	463b      	mov	r3, r7
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b2e      	ldr	r3, [pc, #184]	; (800021c <MX_ADC1_Init+0xd0>)
 8000162:	4a2f      	ldr	r2, [pc, #188]	; (8000220 <MX_ADC1_Init+0xd4>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000166:	4b2d      	ldr	r3, [pc, #180]	; (800021c <MX_ADC1_Init+0xd0>)
 8000168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	4b2b      	ldr	r3, [pc, #172]	; (800021c <MX_ADC1_Init+0xd0>)
 8000170:	2201      	movs	r2, #1
 8000172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	4b29      	ldr	r3, [pc, #164]	; (800021c <MX_ADC1_Init+0xd0>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017a:	4b28      	ldr	r3, [pc, #160]	; (800021c <MX_ADC1_Init+0xd0>)
 800017c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <MX_ADC1_Init+0xd0>)
 8000184:	2200      	movs	r2, #0
 8000186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000188:	4b24      	ldr	r3, [pc, #144]	; (800021c <MX_ADC1_Init+0xd0>)
 800018a:	2203      	movs	r2, #3
 800018c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018e:	4823      	ldr	r0, [pc, #140]	; (800021c <MX_ADC1_Init+0xd0>)
 8000190:	f000 fe14 	bl	8000dbc <HAL_ADC_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 800019a:	f000 fbd6 	bl	800094a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800019e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80001a4:	f107 030c 	add.w	r3, r7, #12
 80001a8:	4619      	mov	r1, r3
 80001aa:	481c      	ldr	r0, [pc, #112]	; (800021c <MX_ADC1_Init+0xd0>)
 80001ac:	f001 fbc8 	bl	8001940 <HAL_ADCEx_MultiModeConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fbc8 	bl	800094a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001be:	2301      	movs	r3, #1
 80001c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001c2:	2307      	movs	r3, #7
 80001c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	463b      	mov	r3, r7
 80001c8:	4619      	mov	r1, r3
 80001ca:	4814      	ldr	r0, [pc, #80]	; (800021c <MX_ADC1_Init+0xd0>)
 80001cc:	f001 f852 	bl	8001274 <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80001d6:	f000 fbb8 	bl	800094a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80001da:	2304      	movs	r3, #4
 80001dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001de:	2302      	movs	r3, #2
 80001e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e2:	463b      	mov	r3, r7
 80001e4:	4619      	mov	r1, r3
 80001e6:	480d      	ldr	r0, [pc, #52]	; (800021c <MX_ADC1_Init+0xd0>)
 80001e8:	f001 f844 	bl	8001274 <HAL_ADC_ConfigChannel>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80001f2:	f000 fbaa 	bl	800094a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80001f6:	230b      	movs	r3, #11
 80001f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001fa:	2303      	movs	r3, #3
 80001fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fe:	463b      	mov	r3, r7
 8000200:	4619      	mov	r1, r3
 8000202:	4806      	ldr	r0, [pc, #24]	; (800021c <MX_ADC1_Init+0xd0>)
 8000204:	f001 f836 	bl	8001274 <HAL_ADC_ConfigChannel>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800020e:	f000 fb9c 	bl	800094a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000090 	.word	0x20000090
 8000220:	40012400 	.word	0x40012400

08000224 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000236:	4a28      	ldr	r2, [pc, #160]	; (80002d8 <MX_ADC2_Init+0xb4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000242:	4b24      	ldr	r3, [pc, #144]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000244:	2201      	movs	r2, #1
 8000246:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800025e:	2203      	movs	r2, #3
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000262:	481c      	ldr	r0, [pc, #112]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000264:	f000 fdaa 	bl	8000dbc <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 fb6c 	bl	800094a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000272:	2301      	movs	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800027a:	2307      	movs	r3, #7
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4814      	ldr	r0, [pc, #80]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000284:	f000 fff6 	bl	8001274 <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 fb5c 	bl	800094a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000292:	2308      	movs	r3, #8
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	480d      	ldr	r0, [pc, #52]	; (80002d4 <MX_ADC2_Init+0xb0>)
 80002a0:	f000 ffe8 	bl	8001274 <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 fb4e 	bl	800094a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002ae:	230a      	movs	r3, #10
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <MX_ADC2_Init+0xb0>)
 80002bc:	f000 ffda 	bl	8001274 <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 fb40 	bl	800094a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	200000c0 	.word	0x200000c0
 80002d8:	40012800 	.word	0x40012800

080002dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a65      	ldr	r2, [pc, #404]	; (800048c <HAL_ADC_MspInit+0x1b0>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d168      	bne.n	80003ce <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002fc:	4b64      	ldr	r3, [pc, #400]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a63      	ldr	r2, [pc, #396]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b61      	ldr	r3, [pc, #388]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000310:	627b      	str	r3, [r7, #36]	; 0x24
 8000312:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b5e      	ldr	r3, [pc, #376]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a5d      	ldr	r2, [pc, #372]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b5b      	ldr	r3, [pc, #364]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	623b      	str	r3, [r7, #32]
 800032a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b58      	ldr	r3, [pc, #352]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a57      	ldr	r2, [pc, #348]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b55      	ldr	r3, [pc, #340]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	61fb      	str	r3, [r7, #28]
 8000342:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000344:	2303      	movs	r3, #3
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000348:	2303      	movs	r3, #3
 800034a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800034c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000350:	4619      	mov	r1, r3
 8000352:	4850      	ldr	r0, [pc, #320]	; (8000494 <HAL_ADC_MspInit+0x1b8>)
 8000354:	f001 fe42 	bl	8001fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000358:	2311      	movs	r3, #17
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800035c:	2303      	movs	r3, #3
 800035e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000364:	4619      	mov	r1, r3
 8000366:	484c      	ldr	r0, [pc, #304]	; (8000498 <HAL_ADC_MspInit+0x1bc>)
 8000368:	f001 fe38 	bl	8001fdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800036c:	4b4b      	ldr	r3, [pc, #300]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800036e:	4a4c      	ldr	r2, [pc, #304]	; (80004a0 <HAL_ADC_MspInit+0x1c4>)
 8000370:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000372:	4b4a      	ldr	r3, [pc, #296]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000378:	4b48      	ldr	r3, [pc, #288]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037e:	4b47      	ldr	r3, [pc, #284]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000380:	2280      	movs	r2, #128	; 0x80
 8000382:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000384:	4b45      	ldr	r3, [pc, #276]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800038c:	4b43      	ldr	r3, [pc, #268]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800038e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000392:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000394:	4b41      	ldr	r3, [pc, #260]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000396:	2220      	movs	r2, #32
 8000398:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800039a:	4b40      	ldr	r3, [pc, #256]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800039c:	2200      	movs	r2, #0
 800039e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003a0:	483e      	ldr	r0, [pc, #248]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003a2:	f001 fc2d 	bl	8001c00 <HAL_DMA_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80003ac:	f000 facd 	bl	800094a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a3a      	ldr	r2, [pc, #232]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003b4:	621a      	str	r2, [r3, #32]
 80003b6:	4a39      	ldr	r2, [pc, #228]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2100      	movs	r1, #0
 80003c0:	2012      	movs	r0, #18
 80003c2:	f001 fbe6 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80003c6:	2012      	movs	r0, #18
 80003c8:	f001 fbff 	bl	8001bca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80003cc:	e05a      	b.n	8000484 <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a34      	ldr	r2, [pc, #208]	; (80004a4 <HAL_ADC_MspInit+0x1c8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d155      	bne.n	8000484 <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80003d8:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003ec:	61bb      	str	r3, [r7, #24]
 80003ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a26      	ldr	r2, [pc, #152]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0310 	and.w	r3, r3, #16
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a20      	ldr	r2, [pc, #128]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	613b      	str	r3, [r7, #16]
 800041e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1a      	ldr	r2, [pc, #104]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000438:	2303      	movs	r3, #3
 800043a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043c:	2303      	movs	r3, #3
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000444:	4619      	mov	r1, r3
 8000446:	4813      	ldr	r0, [pc, #76]	; (8000494 <HAL_ADC_MspInit+0x1b8>)
 8000448:	f001 fdc8 	bl	8001fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800044c:	2302      	movs	r3, #2
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000450:	2303      	movs	r3, #3
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000458:	4619      	mov	r1, r3
 800045a:	480f      	ldr	r0, [pc, #60]	; (8000498 <HAL_ADC_MspInit+0x1bc>)
 800045c:	f001 fdbe 	bl	8001fdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000460:	2301      	movs	r3, #1
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000464:	2303      	movs	r3, #3
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046c:	4619      	mov	r1, r3
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <HAL_ADC_MspInit+0x1cc>)
 8000470:	f001 fdb4 	bl	8001fdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2012      	movs	r0, #18
 800047a:	f001 fb8a 	bl	8001b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800047e:	2012      	movs	r0, #18
 8000480:	f001 fba3 	bl	8001bca <HAL_NVIC_EnableIRQ>
}
 8000484:	bf00      	nop
 8000486:	3738      	adds	r7, #56	; 0x38
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40012400 	.word	0x40012400
 8000490:	40021000 	.word	0x40021000
 8000494:	40011000 	.word	0x40011000
 8000498:	40010800 	.word	0x40010800
 800049c:	200000f0 	.word	0x200000f0
 80004a0:	40020008 	.word	0x40020008
 80004a4:	40012800 	.word	0x40012800
 80004a8:	40010c00 	.word	0x40010c00

080004ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_DMA_Init+0x38>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <MX_DMA_Init+0x38>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_DMA_Init+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	200b      	movs	r0, #11
 80004d0:	f001 fb5f 	bl	8001b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d4:	200b      	movs	r0, #11
 80004d6:	f001 fb78 	bl	8001bca <HAL_NVIC_EnableIRQ>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_GPIO_Init+0xcc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a1a      	ldr	r2, [pc, #104]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	4815      	ldr	r0, [pc, #84]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000562:	f001 febf 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_GPIO_Init+0xd4>)
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xd8>)
 800057c:	f001 fd2e 	bl	8001fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000580:	2320      	movs	r3, #32
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000598:	f001 fd20 	bl	8001fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	2028      	movs	r0, #40	; 0x28
 80005a2:	f001 faf6 	bl	8001b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a6:	2028      	movs	r0, #40	; 0x28
 80005a8:	f001 fb0f 	bl	8001bca <HAL_NVIC_EnableIRQ>

}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800
 80005bc:	10110000 	.word	0x10110000
 80005c0:	40011000 	.word	0x40011000

080005c4 <ADC_Start>:
/* USER CODE BEGIN 0 */



void ADC_Start(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 80005c8:	bf00      	nop
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <ADC_Start+0x3c>)
 80005cc:	f001 f84c 	bl	8001668 <HAL_ADCEx_Calibration_Start>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1f9      	bne.n	80005ca <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 80005d6:	bf00      	nop
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <ADC_Start+0x40>)
 80005da:	f001 f845 	bl	8001668 <HAL_ADCEx_Calibration_Start>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f9      	bne.n	80005d8 <ADC_Start+0x14>
	HAL_Delay(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 fbc5 	bl	8000d74 <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <ADC_Start+0x40>)
 80005ec:	f000 fcbe 	bl	8000f6c <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADC_Buffer, (uint32_t)2 * CHANNELS);
 80005f0:	2206      	movs	r2, #6
 80005f2:	4905      	ldr	r1, [pc, #20]	; (8000608 <ADC_Start+0x44>)
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <ADC_Start+0x3c>)
 80005f6:	f001 f8e3 	bl	80017c0 <HAL_ADCEx_MultiModeStart_DMA>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000090 	.word	0x20000090
 8000604:	200000c0 	.word	0x200000c0
 8000608:	20000134 	.word	0x20000134

0800060c <takeData>:

void takeData(uint32_t* buffer)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(oversamplingIndex == OVERSAMPLING)
 8000614:	4b4d      	ldr	r3, [pc, #308]	; (800074c <takeData+0x140>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b08      	cmp	r3, #8
 800061a:	d13a      	bne.n	8000692 <takeData+0x86>
	{
		oversamplingIndex = 0;
 800061c:	4b4b      	ldr	r3, [pc, #300]	; (800074c <takeData+0x140>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		time[indexCircBuffer] = getCurrentMicros();
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <takeData+0x144>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	461c      	mov	r4, r3
 8000628:	f000 f8e8 	bl	80007fc <getCurrentMicros>
 800062c:	4603      	mov	r3, r0
 800062e:	4a49      	ldr	r2, [pc, #292]	; (8000754 <takeData+0x148>)
 8000630:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		indexCircBuffer++;
 8000634:	4b46      	ldr	r3, [pc, #280]	; (8000750 <takeData+0x144>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	3301      	adds	r3, #1
 800063a:	b29a      	uxth	r2, r3
 800063c:	4b44      	ldr	r3, [pc, #272]	; (8000750 <takeData+0x144>)
 800063e:	801a      	strh	r2, [r3, #0]
		if(indexCircBuffer == BUFFERSIZE)
 8000640:	4b43      	ldr	r3, [pc, #268]	; (8000750 <takeData+0x144>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000648:	d10d      	bne.n	8000666 <takeData+0x5a>
		{
			indexCircBuffer = 0;
 800064a:	4b41      	ldr	r3, [pc, #260]	; (8000750 <takeData+0x144>)
 800064c:	2200      	movs	r2, #0
 800064e:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000650:	2120      	movs	r1, #32
 8000652:	4841      	ldr	r0, [pc, #260]	; (8000758 <takeData+0x14c>)
 8000654:	f001 fe5e 	bl	8002314 <HAL_GPIO_TogglePin>
			printf("%d\n",HAL_GetTick());
 8000658:	f000 fb82 	bl	8000d60 <HAL_GetTick>
 800065c:	4603      	mov	r3, r0
 800065e:	4619      	mov	r1, r3
 8000660:	483e      	ldr	r0, [pc, #248]	; (800075c <takeData+0x150>)
 8000662:	f002 fe0d 	bl	8003280 <iprintf>
		}
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e00f      	b.n	800068c <takeData+0x80>
		{
			data[indexCircBuffer][i] = 0;
 800066c:	4b38      	ldr	r3, [pc, #224]	; (8000750 <takeData+0x144>)
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	7bfa      	ldrb	r2, [r7, #15]
 8000674:	493a      	ldr	r1, [pc, #232]	; (8000760 <takeData+0x154>)
 8000676:	4603      	mov	r3, r0
 8000678:	005b      	lsls	r3, r3, #1
 800067a:	4403      	add	r3, r0
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	4413      	add	r3, r2
 8000680:	2200      	movs	r2, #0
 8000682:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b05      	cmp	r3, #5
 8000690:	d9ec      	bls.n	800066c <takeData+0x60>
		}
	}
	for(uint8_t i = 0; i < CHANNELS;i++)
 8000692:	2300      	movs	r3, #0
 8000694:	73bb      	strb	r3, [r7, #14]
 8000696:	e04b      	b.n	8000730 <takeData+0x124>
	{
		data[indexCircBuffer][2*i] += (uint16_t) buffer[i];
 8000698:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <takeData+0x144>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	7bbb      	ldrb	r3, [r7, #14]
 80006a0:	005a      	lsls	r2, r3, #1
 80006a2:	492f      	ldr	r1, [pc, #188]	; (8000760 <takeData+0x154>)
 80006a4:	4603      	mov	r3, r0
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4403      	add	r3, r0
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	4413      	add	r3, r2
 80006ae:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	b29b      	uxth	r3, r3
 80006be:	4a24      	ldr	r2, [pc, #144]	; (8000750 <takeData+0x144>)
 80006c0:	8812      	ldrh	r2, [r2, #0]
 80006c2:	4610      	mov	r0, r2
 80006c4:	7bba      	ldrb	r2, [r7, #14]
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	440b      	add	r3, r1
 80006ca:	b29c      	uxth	r4, r3
 80006cc:	4924      	ldr	r1, [pc, #144]	; (8000760 <takeData+0x154>)
 80006ce:	4603      	mov	r3, r0
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4403      	add	r3, r0
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	4413      	add	r3, r2
 80006d8:	4622      	mov	r2, r4
 80006da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		data[indexCircBuffer][2*i+1] += (uint16_t) (buffer[i] >> 16);
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <takeData+0x144>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	7bbb      	ldrb	r3, [r7, #14]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	491d      	ldr	r1, [pc, #116]	; (8000760 <takeData+0x154>)
 80006ec:	4603      	mov	r3, r0
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	4403      	add	r3, r0
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80006fa:	7bbb      	ldrb	r3, [r7, #14]
 80006fc:	009b      	lsls	r3, r3, #2
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	0c1b      	lsrs	r3, r3, #16
 8000706:	b29b      	uxth	r3, r3
 8000708:	4a11      	ldr	r2, [pc, #68]	; (8000750 <takeData+0x144>)
 800070a:	8812      	ldrh	r2, [r2, #0]
 800070c:	4610      	mov	r0, r2
 800070e:	7bba      	ldrb	r2, [r7, #14]
 8000710:	0052      	lsls	r2, r2, #1
 8000712:	3201      	adds	r2, #1
 8000714:	440b      	add	r3, r1
 8000716:	b29c      	uxth	r4, r3
 8000718:	4911      	ldr	r1, [pc, #68]	; (8000760 <takeData+0x154>)
 800071a:	4603      	mov	r3, r0
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4403      	add	r3, r0
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4413      	add	r3, r2
 8000724:	4622      	mov	r2, r4
 8000726:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t i = 0; i < CHANNELS;i++)
 800072a:	7bbb      	ldrb	r3, [r7, #14]
 800072c:	3301      	adds	r3, #1
 800072e:	73bb      	strb	r3, [r7, #14]
 8000730:	7bbb      	ldrb	r3, [r7, #14]
 8000732:	2b02      	cmp	r3, #2
 8000734:	d9b0      	bls.n	8000698 <takeData+0x8c>
	}
	oversamplingIndex++;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <takeData+0x140>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b03      	ldr	r3, [pc, #12]	; (800074c <takeData+0x140>)
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	bf00      	nop
 800074c:	2000414e 	.word	0x2000414e
 8000750:	2000414c 	.word	0x2000414c
 8000754:	2000314c 	.word	0x2000314c
 8000758:	40010800 	.word	0x40010800
 800075c:	080041c0 	.word	0x080041c0
 8000760:	2000014c 	.word	0x2000014c

08000764 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	if(hadc)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d002      	beq.n	8000778 <HAL_ADC_ConvHalfCpltCallback+0x14>
	{
		takeData(ADC_Buffer);
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000774:	f7ff ff4a 	bl	800060c <takeData>
	}
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000134 	.word	0x20000134

08000784 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	if(hadc)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d004      	beq.n	800079c <HAL_ADC_ConvCpltCallback+0x18>
	{
		takeData(halfOfADC_Buffer);
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <HAL_ADC_ConvCpltCallback+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff38 	bl	800060c <takeData>
	}
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000000 	.word	0x20000000

080007a8 <__io_putchar>:


int __io_putchar(int ch)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b0a      	cmp	r3, #10
 80007b4:	d102      	bne.n	80007bc <__io_putchar+0x14>
    __io_putchar('\r');
 80007b6:	200d      	movs	r0, #13
 80007b8:	f7ff fff6 	bl	80007a8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80007bc:	1d39      	adds	r1, r7, #4
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	2201      	movs	r2, #1
 80007c4:	4803      	ldr	r0, [pc, #12]	; (80007d4 <__io_putchar+0x2c>)
 80007c6:	f002 fbbe 	bl	8002f46 <HAL_UART_Transmit>

  return 1;
 80007ca:	2301      	movs	r3, #1
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20004154 	.word	0x20004154

080007d8 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007e8:	bf0c      	ite	eq
 80007ea:	2301      	moveq	r3, #1
 80007ec:	2300      	movne	r3, #0
 80007ee:	b2db      	uxtb	r3, r3
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	e000e010 	.word	0xe000e010

080007fc <getCurrentMicros>:

uint32_t getCurrentMicros(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 8000802:	f7ff ffe9 	bl	80007d8 <LL_SYSTICK_IsActiveCounterFlag>
  uint32_t m = HAL_GetTick();
 8000806:	f000 faab 	bl	8000d60 <HAL_GetTick>
 800080a:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <getCurrentMicros+0x60>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <getCurrentMicros+0x60>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 800081e:	f7ff ffdb 	bl	80007d8 <LL_SYSTICK_IsActiveCounterFlag>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d007      	beq.n	8000838 <getCurrentMicros+0x3c>
    m = HAL_GetTick();
 8000828:	f000 fa9a 	bl	8000d60 <HAL_GetTick>
 800082c:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <getCurrentMicros+0x60>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	1ad3      	subs	r3, r2, r3
 8000836:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800083e:	fb03 f202 	mul.w	r2, r3, r2
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000848:	fb03 f101 	mul.w	r1, r3, r1
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000852:	4413      	add	r3, r2
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	e000e010 	.word	0xe000e010

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000864:	f000 fa24 	bl	8000cb0 <HAL_Init>

  /* USER CODE BEGIN Init */
  indexCircBuffer = 0;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <main+0x34>)
 800086a:	2200      	movs	r2, #0
 800086c:	801a      	strh	r2, [r3, #0]
  oversamplingIndex = 0;
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <main+0x38>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000874:	f000 f812 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000878:	f7ff fe36 	bl	80004e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800087c:	f7ff fe16 	bl	80004ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000880:	f000 f988 	bl	8000b94 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000884:	f7ff fc62 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000888:	f7ff fccc 	bl	8000224 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 800088c:	f7ff fe9a 	bl	80005c4 <ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000890:	e7fe      	b.n	8000890 <main+0x30>
 8000892:	bf00      	nop
 8000894:	2000414c 	.word	0x2000414c
 8000898:	2000414e 	.word	0x2000414e

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008a6:	2228      	movs	r2, #40	; 0x28
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f002 fce0 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008cc:	2302      	movs	r3, #2
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	2310      	movs	r3, #16
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d8:	2302      	movs	r3, #2
 80008da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80008dc:	2300      	movs	r3, #0
 80008de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80008e0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fd4e 	bl	800238c <HAL_RCC_OscConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80008f6:	f000 f828 	bl	800094a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fa:	230f      	movs	r3, #15
 80008fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fe:	2302      	movs	r3, #2
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800090a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 ffba 	bl	8002890 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000922:	f000 f812 	bl	800094a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000926:	2302      	movs	r3, #2
 8000928:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800092a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800092e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4618      	mov	r0, r3
 8000934:	f002 f944 	bl	8002bc0 <HAL_RCCEx_PeriphCLKConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800093e:	f000 f804 	bl	800094a <Error_Handler>
  }
}
 8000942:	bf00      	nop
 8000944:	3750      	adds	r7, #80	; 0x50
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094e:	b672      	cpsid	i
}
 8000950:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000952:	e7fe      	b.n	8000952 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_MspInit+0x5c>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_MspInit+0x5c>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_MspInit+0x5c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <HAL_MspInit+0x5c>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a0e      	ldr	r2, [pc, #56]	; (80009b0 <HAL_MspInit+0x5c>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <HAL_MspInit+0x5c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_MspInit+0x60>)
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <HAL_MspInit+0x60>)
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010000 	.word	0x40010000

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f99d 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a0c:	4802      	ldr	r0, [pc, #8]	; (8000a18 <DMA1_Channel1_IRQHandler+0x10>)
 8000a0e:	f001 f9b1 	bl	8001d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000f0 	.word	0x200000f0

08000a1c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a20:	4803      	ldr	r0, [pc, #12]	; (8000a30 <ADC1_2_IRQHandler+0x14>)
 8000a22:	f000 fb51 	bl	80010c8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <ADC1_2_IRQHandler+0x18>)
 8000a28:	f000 fb4e 	bl	80010c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000090 	.word	0x20000090
 8000a34:	200000c0 	.word	0x200000c0

08000a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a40:	f001 fc82 	bl	8002348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
	}

return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fe83 	bl	80007a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
	}
	return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f002 fb66 	bl	800321c <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20005000 	.word	0x20005000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	20004150 	.word	0x20004150
 8000b84:	200041b0 	.word	0x200041b0

08000b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_USART2_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	f002 f96e 	bl	8002eac <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f7ff feb8 	bl	800094a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20004154 	.word	0x20004154
 8000be4:	40004400 	.word	0x40004400

08000be8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a15      	ldr	r2, [pc, #84]	; (8000c58 <HAL_UART_MspInit+0x70>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d123      	bne.n	8000c50 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_UART_MspInit+0x74>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_UART_MspInit+0x74>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	61d3      	str	r3, [r2, #28]
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_UART_MspInit+0x74>)
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c20:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <HAL_UART_MspInit+0x74>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_UART_MspInit+0x74>)
 8000c26:	f043 0304 	orr.w	r3, r3, #4
 8000c2a:	6193      	str	r3, [r2, #24]
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_UART_MspInit+0x74>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	f003 0304 	and.w	r3, r3, #4
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c38:	230c      	movs	r3, #12
 8000c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_UART_MspInit+0x78>)
 8000c4c:	f001 f9c6 	bl	8001fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40004400 	.word	0x40004400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010800 	.word	0x40010800

08000c64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c8a:	f7ff ff7d 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f002 facb 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c92:	f7ff fde5 	bl	8000860 <main>
  bx lr
 8000c96:	4770      	bx	lr
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ca0:	0800429c 	.word	0x0800429c
  ldr r2, =_sbss
 8000ca4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ca8:	200041ac 	.word	0x200041ac

08000cac <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <CAN1_RX1_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x28>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x28>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 ff5b 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fe42 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 ff73 	bl	8001be6 <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 ff3b 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000004 	.word	0x20000004
 8000d34:	2000000c 	.word	0x2000000c
 8000d38:	20000008 	.word	0x20000008

08000d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <HAL_IncTick+0x1c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_IncTick+0x20>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a03      	ldr	r2, [pc, #12]	; (8000d5c <HAL_IncTick+0x20>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	2000000c 	.word	0x2000000c
 8000d5c:	20004198 	.word	0x20004198

08000d60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b02      	ldr	r3, [pc, #8]	; (8000d70 <HAL_GetTick+0x10>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20004198 	.word	0x20004198

08000d74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff fff0 	bl	8000d60 <HAL_GetTick>
 8000d80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d8c:	d005      	beq.n	8000d9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_Delay+0x44>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	461a      	mov	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4413      	add	r3, r2
 8000d98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d9a:	bf00      	nop
 8000d9c:	f7ff ffe0 	bl	8000d60 <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d8f7      	bhi.n	8000d9c <HAL_Delay+0x28>
  {
  }
}
 8000dac:	bf00      	nop
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	2000000c 	.word	0x2000000c

08000dbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e0be      	b.n	8000f5c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff fa6e 	bl	80002dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fb89 	bl	8001518 <ADC_ConversionStop_Disable>
 8000e06:	4603      	mov	r3, r0
 8000e08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 8099 	bne.w	8000f4a <HAL_ADC_Init+0x18e>
 8000e18:	7dfb      	ldrb	r3, [r7, #23]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f040 8095 	bne.w	8000f4a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e28:	f023 0302 	bic.w	r3, r3, #2
 8000e2c:	f043 0202 	orr.w	r2, r3, #2
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7b1b      	ldrb	r3, [r3, #12]
 8000e42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000e44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e54:	d003      	beq.n	8000e5e <HAL_ADC_Init+0xa2>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <HAL_ADC_Init+0xa8>
 8000e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e62:	e000      	b.n	8000e66 <HAL_ADC_Init+0xaa>
 8000e64:	2300      	movs	r3, #0
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7d1b      	ldrb	r3, [r3, #20]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d119      	bne.n	8000ea8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7b1b      	ldrb	r3, [r3, #12]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d109      	bne.n	8000e90 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	035a      	lsls	r2, r3, #13
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	e00b      	b.n	8000ea8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	f043 0220 	orr.w	r2, r3, #32
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea0:	f043 0201 	orr.w	r2, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689a      	ldr	r2, [r3, #8]
 8000ec2:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <HAL_ADC_Init+0x1a8>)
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	68b9      	ldr	r1, [r7, #8]
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ed8:	d003      	beq.n	8000ee2 <HAL_ADC_Init+0x126>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d104      	bne.n	8000eec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	051b      	lsls	r3, r3, #20
 8000eea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_ADC_Init+0x1ac>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d10b      	bne.n	8000f28 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1a:	f023 0303 	bic.w	r3, r3, #3
 8000f1e:	f043 0201 	orr.w	r2, r3, #1
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f26:	e018      	b.n	8000f5a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2c:	f023 0312 	bic.w	r3, r3, #18
 8000f30:	f043 0210 	orr.w	r2, r3, #16
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f3c:	f043 0201 	orr.w	r2, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000f48:	e007      	b.n	8000f5a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4e:	f043 0210 	orr.w	r2, r3, #16
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	ffe1f7fd 	.word	0xffe1f7fd
 8000f68:	ff1f0efe 	.word	0xff1f0efe

08000f6c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Start+0x1a>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e098      	b.n	80010b8 <HAL_ADC_Start+0x14c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f000 fa68 	bl	8001464 <ADC_Enable>
 8000f94:	4603      	mov	r3, r0
 8000f96:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8087 	bne.w	80010ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a41      	ldr	r2, [pc, #260]	; (80010c0 <HAL_ADC_Start+0x154>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d105      	bne.n	8000fca <HAL_ADC_Start+0x5e>
 8000fbe:	4b41      	ldr	r3, [pc, #260]	; (80010c4 <HAL_ADC_Start+0x158>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d115      	bne.n	8000ff6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d026      	beq.n	8001032 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ff4:	e01d      	b.n	8001032 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2f      	ldr	r2, [pc, #188]	; (80010c4 <HAL_ADC_Start+0x158>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d004      	beq.n	8001016 <HAL_ADC_Start+0xaa>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a2b      	ldr	r2, [pc, #172]	; (80010c0 <HAL_ADC_Start+0x154>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10d      	bne.n	8001032 <HAL_ADC_Start+0xc6>
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_ADC_Start+0x158>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d007      	beq.n	8001032 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800102a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001042:	f023 0206 	bic.w	r2, r3, #6
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
 800104a:	e002      	b.n	8001052 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f06f 0202 	mvn.w	r2, #2
 8001062:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800106e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001072:	d113      	bne.n	800109c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <HAL_ADC_Start+0x154>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d105      	bne.n	800108a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <HAL_ADC_Start+0x158>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d108      	bne.n	800109c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	e00c      	b.n	80010b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	e003      	b.n	80010b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40012800 	.word	0x40012800
 80010c4:	40012400 	.word	0x40012400

080010c8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b20      	cmp	r3, #32
 80010dc:	d140      	bne.n	8001160 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d139      	bne.n	8001160 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d105      	bne.n	8001104 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800110e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001112:	d11d      	bne.n	8001150 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001118:	2b00      	cmp	r3, #0
 800111a:	d119      	bne.n	8001150 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0220 	bic.w	r2, r2, #32
 800112a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d105      	bne.n	8001150 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fb17 	bl	8000784 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f06f 0212 	mvn.w	r2, #18
 800115e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	2b80      	cmp	r3, #128	; 0x80
 800116c:	d14f      	bne.n	800120e <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b04      	cmp	r3, #4
 800117a:	d148      	bne.n	800120e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f003 0310 	and.w	r3, r3, #16
 8001184:	2b00      	cmp	r3, #0
 8001186:	d105      	bne.n	8001194 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800119e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80011a2:	d012      	beq.n	80011ca <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d125      	bne.n	80011fe <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80011bc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011c0:	d11d      	bne.n	80011fe <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d119      	bne.n	80011fe <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011d8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d105      	bne.n	80011fe <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fb94 	bl	800192c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f06f 020c 	mvn.w	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001218:	2b40      	cmp	r3, #64	; 0x40
 800121a:	d114      	bne.n	8001246 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10d      	bne.n	8001246 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f809 	bl	800124e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f06f 0201 	mvn.w	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
	...

08001274 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800128c:	2b01      	cmp	r3, #1
 800128e:	d101      	bne.n	8001294 <HAL_ADC_ConfigChannel+0x20>
 8001290:	2302      	movs	r3, #2
 8001292:	e0dc      	b.n	800144e <HAL_ADC_ConfigChannel+0x1da>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b06      	cmp	r3, #6
 80012a2:	d81c      	bhi.n	80012de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685a      	ldr	r2, [r3, #4]
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	3b05      	subs	r3, #5
 80012b6:	221f      	movs	r2, #31
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	4019      	ands	r1, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	3b05      	subs	r3, #5
 80012d0:	fa00 f203 	lsl.w	r2, r0, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	635a      	str	r2, [r3, #52]	; 0x34
 80012dc:	e03c      	b.n	8001358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	d81c      	bhi.n	8001320 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	3b23      	subs	r3, #35	; 0x23
 80012f8:	221f      	movs	r2, #31
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	4019      	ands	r1, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	3b23      	subs	r3, #35	; 0x23
 8001312:	fa00 f203 	lsl.w	r2, r0, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
 800131e:	e01b      	b.n	8001358 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b41      	subs	r3, #65	; 0x41
 8001332:	221f      	movs	r2, #31
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	4019      	ands	r1, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	3b41      	subs	r3, #65	; 0x41
 800134c:	fa00 f203 	lsl.w	r2, r0, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b09      	cmp	r3, #9
 800135e:	d91c      	bls.n	800139a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68d9      	ldr	r1, [r3, #12]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	3b1e      	subs	r3, #30
 8001372:	2207      	movs	r2, #7
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	4019      	ands	r1, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6898      	ldr	r0, [r3, #8]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4613      	mov	r3, r2
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	4413      	add	r3, r2
 800138a:	3b1e      	subs	r3, #30
 800138c:	fa00 f203 	lsl.w	r2, r0, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	e019      	b.n	80013ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6919      	ldr	r1, [r3, #16]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	4413      	add	r3, r2
 80013aa:	2207      	movs	r2, #7
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	4019      	ands	r1, r3
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6898      	ldr	r0, [r3, #8]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4613      	mov	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	4413      	add	r3, r2
 80013c2:	fa00 f203 	lsl.w	r2, r0, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b10      	cmp	r3, #16
 80013d4:	d003      	beq.n	80013de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013da:	2b11      	cmp	r3, #17
 80013dc:	d132      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a1d      	ldr	r2, [pc, #116]	; (8001458 <HAL_ADC_ConfigChannel+0x1e4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d125      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d126      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001404:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b10      	cmp	r3, #16
 800140c:	d11a      	bne.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <HAL_ADC_ConfigChannel+0x1e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <HAL_ADC_ConfigChannel+0x1ec>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	0c9a      	lsrs	r2, r3, #18
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001424:	e002      	b.n	800142c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x1b2>
 8001432:	e007      	b.n	8001444 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	f043 0220 	orr.w	r2, r3, #32
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800144c:	7bfb      	ldrb	r3, [r7, #15]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3714      	adds	r7, #20
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	40012400 	.word	0x40012400
 800145c:	20000004 	.word	0x20000004
 8001460:	431bde83 	.word	0x431bde83

08001464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b01      	cmp	r3, #1
 8001480:	d040      	beq.n	8001504 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <ADC_Enable+0xac>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1f      	ldr	r2, [pc, #124]	; (8001514 <ADC_Enable+0xb0>)
 8001498:	fba2 2303 	umull	r2, r3, r2, r3
 800149c:	0c9b      	lsrs	r3, r3, #18
 800149e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a0:	e002      	b.n	80014a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d1f9      	bne.n	80014a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ae:	f7ff fc57 	bl	8000d60 <HAL_GetTick>
 80014b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014b4:	e01f      	b.n	80014f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014b6:	f7ff fc53 	bl	8000d60 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d918      	bls.n	80014f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d011      	beq.n	80014f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	f043 0210 	orr.w	r2, r3, #16
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f043 0201 	orr.w	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e007      	b.n	8001506 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d1d8      	bne.n	80014b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000004 	.word	0x20000004
 8001514:	431bde83 	.word	0x431bde83

08001518 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b01      	cmp	r3, #1
 8001530:	d12e      	bne.n	8001590 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001542:	f7ff fc0d 	bl	8000d60 <HAL_GetTick>
 8001546:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001548:	e01b      	b.n	8001582 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800154a:	f7ff fc09 	bl	8000d60 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d914      	bls.n	8001582 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b01      	cmp	r3, #1
 8001564:	d10d      	bne.n	8001582 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	f043 0210 	orr.w	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001576:	f043 0201 	orr.w	r2, r3, #1
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e007      	b.n	8001592 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d0dc      	beq.n	800154a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b084      	sub	sp, #16
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d127      	bne.n	8001604 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ce:	d115      	bne.n	80015fc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d105      	bne.n	80015fc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f7ff f8c1 	bl	8000784 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001602:	e004      	b.n	800160e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	4798      	blx	r3
}
 800160e:	bf00      	nop
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b084      	sub	sp, #16
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff f89d 	bl	8000764 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b084      	sub	sp, #16
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f043 0204 	orr.w	r2, r3, #4
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001658:	68f8      	ldr	r0, [r7, #12]
 800165a:	f7ff fe01 	bl	8001260 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADCEx_Calibration_Start+0x1e>
 8001682:	2302      	movs	r3, #2
 8001684:	e095      	b.n	80017b2 <HAL_ADCEx_Calibration_Start+0x14a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ff42 	bl	8001518 <ADC_ConversionStop_Disable>
 8001694:	4603      	mov	r3, r0
 8001696:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001698:	7dfb      	ldrb	r3, [r7, #23]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 8084 	bne.w	80017a8 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a8:	f023 0302 	bic.w	r3, r3, #2
 80016ac:	f043 0202 	orr.w	r2, r3, #2
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016b4:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_ADCEx_Calibration_Start+0x154>)
 80016b6:	681c      	ldr	r4, [r3, #0]
 80016b8:	2002      	movs	r0, #2
 80016ba:	f001 fb37 	bl	8002d2c <HAL_RCCEx_GetPeriphCLKFreq>
 80016be:	4603      	mov	r3, r0
 80016c0:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80016c4:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80016c6:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80016c8:	e002      	b.n	80016d0 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3b01      	subs	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f9      	bne.n	80016ca <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fec4 	bl	8001464 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0208 	orr.w	r2, r2, #8
 80016ea:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80016ec:	f7ff fb38 	bl	8000d60 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80016f2:	e01b      	b.n	800172c <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80016f4:	f7ff fb34 	bl	8000d60 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b0a      	cmp	r3, #10
 8001700:	d914      	bls.n	800172c <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00d      	beq.n	800172c <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f023 0312 	bic.w	r3, r3, #18
 8001718:	f043 0210 	orr.w	r2, r3, #16
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e042      	b.n	80017b2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dc      	bne.n	80016f4 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0204 	orr.w	r2, r2, #4
 8001748:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800174a:	f7ff fb09 	bl	8000d60 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001750:	e01b      	b.n	800178a <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001752:	f7ff fb05 	bl	8000d60 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b0a      	cmp	r3, #10
 800175e:	d914      	bls.n	800178a <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00d      	beq.n	800178a <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	f023 0312 	bic.w	r3, r3, #18
 8001776:	f043 0210 	orr.w	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e013      	b.n	80017b2 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1dc      	bne.n	8001752 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f023 0303 	bic.w	r3, r3, #3
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b092      	sub	sp, #72	; 0x48
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2230      	movs	r2, #48	; 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f001 fd48 	bl	8003270 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d101      	bne.n	80017ee <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80017ea:	2302      	movs	r3, #2
 80017ec:	e08f      	b.n	800190e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80017f6:	4b48      	ldr	r3, [pc, #288]	; (8001918 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80017f8:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001802:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001806:	d00b      	beq.n	8001820 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	f043 0220 	orr.w	r2, r3, #32
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e076      	b.n	800190e <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff fe1f 	bl	8001464 <ADC_Enable>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 800182c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001830:	2b00      	cmp	r3, #0
 8001832:	d107      	bne.n	8001844 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe13 	bl	8001464 <ADC_Enable>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001844:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001848:	2b00      	cmp	r3, #0
 800184a:	d15a      	bne.n	8001902 <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001850:	4b32      	ldr	r3, [pc, #200]	; (800191c <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8001852:	4013      	ands	r3, r2
 8001854:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001872:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2200      	movs	r2, #0
 8001886:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4a24      	ldr	r2, [pc, #144]	; (8001920 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 800188e:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a23      	ldr	r2, [pc, #140]	; (8001924 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4a22      	ldr	r2, [pc, #136]	; (8001928 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 800189e:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0202 	mvn.w	r2, #2
 80018a8:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b8:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6a18      	ldr	r0, [r3, #32]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	334c      	adds	r3, #76	; 0x4c
 80018c4:	4619      	mov	r1, r3
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f000 f9f3 	bl	8001cb4 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018dc:	d108      	bne.n	80018f0 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	e00c      	b.n	800190a <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	e003      	b.n	800190a <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800190a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800190e:	4618      	mov	r0, r3
 8001910:	3748      	adds	r7, #72	; 0x48
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40012800 	.word	0x40012800
 800191c:	ffeffcfe 	.word	0xffeffcfe
 8001920:	0800159b 	.word	0x0800159b
 8001924:	08001617 	.word	0x08001617
 8001928:	08001633 	.word	0x08001633

0800192c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
	...

08001940 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b090      	sub	sp, #64	; 0x40
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2230      	movs	r2, #48	; 0x30
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fc89 	bl	8003270 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8001968:	2302      	movs	r3, #2
 800196a:	e032      	b.n	80019d2 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8001976:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d016      	beq.n	80019b4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 800198e:	2b01      	cmp	r3, #1
 8001990:	d010      	beq.n	80019b4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d10b      	bne.n	80019b4 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	e008      	b.n	80019c6 <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b8:	f043 0220 	orr.w	r2, r3, #32
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80019ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 80019d2:	4618      	mov	r0, r3
 80019d4:	3740      	adds	r7, #64	; 0x40
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012800 	.word	0x40012800
 80019e0:	40012400 	.word	0x40012400

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4906      	ldr	r1, [pc, #24]	; (8001a7c <__NVIC_EnableIRQ+0x34>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	; (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	; (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	; 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	; 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5c:	f7ff ff90 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff2d 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff42 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff90 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5f 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff ff35 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff ffa2 	bl	8001b38 <SysTick_Config>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
	...

08001c00 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e043      	b.n	8001c9e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <HAL_DMA_Init+0xa8>)
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a22      	ldr	r2, [pc, #136]	; (8001cac <HAL_DMA_Init+0xac>)
 8001c22:	fba2 2303 	umull	r2, r3, r2, r3
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	009a      	lsls	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_DMA_Init+0xb0>)
 8001c32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c78:	68fa      	ldr	r2, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	bffdfff8 	.word	0xbffdfff8
 8001cac:	cccccccd 	.word	0xcccccccd
 8001cb0:	40020000 	.word	0x40020000

08001cb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_DMA_Start_IT+0x20>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e04a      	b.n	8001d6a <HAL_DMA_Start_IT+0xb6>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d13a      	bne.n	8001d5c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	68b9      	ldr	r1, [r7, #8]
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 f938 	bl	8001f80 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d008      	beq.n	8001d2a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 020e 	orr.w	r2, r2, #14
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e00f      	b.n	8001d4a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0204 	bic.w	r2, r2, #4
 8001d38:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 020a 	orr.w	r2, r2, #10
 8001d48:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f042 0201 	orr.w	r2, r2, #1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	e005      	b.n	8001d68 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
 8001d66:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	2204      	movs	r2, #4
 8001d92:	409a      	lsls	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d04f      	beq.n	8001e3c <HAL_DMA_IRQHandler+0xc8>
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d04a      	beq.n	8001e3c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0320 	and.w	r3, r3, #32
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0204 	bic.w	r2, r2, #4
 8001dc2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a66      	ldr	r2, [pc, #408]	; (8001f64 <HAL_DMA_IRQHandler+0x1f0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d029      	beq.n	8001e22 <HAL_DMA_IRQHandler+0xae>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a65      	ldr	r2, [pc, #404]	; (8001f68 <HAL_DMA_IRQHandler+0x1f4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d022      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xaa>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a63      	ldr	r2, [pc, #396]	; (8001f6c <HAL_DMA_IRQHandler+0x1f8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01a      	beq.n	8001e18 <HAL_DMA_IRQHandler+0xa4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a62      	ldr	r2, [pc, #392]	; (8001f70 <HAL_DMA_IRQHandler+0x1fc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d012      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x9e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a60      	ldr	r2, [pc, #384]	; (8001f74 <HAL_DMA_IRQHandler+0x200>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d00a      	beq.n	8001e0c <HAL_DMA_IRQHandler+0x98>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a5f      	ldr	r2, [pc, #380]	; (8001f78 <HAL_DMA_IRQHandler+0x204>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d102      	bne.n	8001e06 <HAL_DMA_IRQHandler+0x92>
 8001e00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e04:	e00e      	b.n	8001e24 <HAL_DMA_IRQHandler+0xb0>
 8001e06:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e0a:	e00b      	b.n	8001e24 <HAL_DMA_IRQHandler+0xb0>
 8001e0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e10:	e008      	b.n	8001e24 <HAL_DMA_IRQHandler+0xb0>
 8001e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e16:	e005      	b.n	8001e24 <HAL_DMA_IRQHandler+0xb0>
 8001e18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e1c:	e002      	b.n	8001e24 <HAL_DMA_IRQHandler+0xb0>
 8001e1e:	2340      	movs	r3, #64	; 0x40
 8001e20:	e000      	b.n	8001e24 <HAL_DMA_IRQHandler+0xb0>
 8001e22:	2304      	movs	r3, #4
 8001e24:	4a55      	ldr	r2, [pc, #340]	; (8001f7c <HAL_DMA_IRQHandler+0x208>)
 8001e26:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8094 	beq.w	8001f5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001e3a:	e08e      	b.n	8001f5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2202      	movs	r2, #2
 8001e42:	409a      	lsls	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4013      	ands	r3, r2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d056      	beq.n	8001efa <HAL_DMA_IRQHandler+0x186>
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d051      	beq.n	8001efa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0320 	and.w	r3, r3, #32
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 020a 	bic.w	r2, r2, #10
 8001e72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a38      	ldr	r2, [pc, #224]	; (8001f64 <HAL_DMA_IRQHandler+0x1f0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d029      	beq.n	8001eda <HAL_DMA_IRQHandler+0x166>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a37      	ldr	r2, [pc, #220]	; (8001f68 <HAL_DMA_IRQHandler+0x1f4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d022      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x162>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a35      	ldr	r2, [pc, #212]	; (8001f6c <HAL_DMA_IRQHandler+0x1f8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d01a      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x15c>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a34      	ldr	r2, [pc, #208]	; (8001f70 <HAL_DMA_IRQHandler+0x1fc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d012      	beq.n	8001eca <HAL_DMA_IRQHandler+0x156>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a32      	ldr	r2, [pc, #200]	; (8001f74 <HAL_DMA_IRQHandler+0x200>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00a      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x150>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <HAL_DMA_IRQHandler+0x204>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d102      	bne.n	8001ebe <HAL_DMA_IRQHandler+0x14a>
 8001eb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ebc:	e00e      	b.n	8001edc <HAL_DMA_IRQHandler+0x168>
 8001ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec2:	e00b      	b.n	8001edc <HAL_DMA_IRQHandler+0x168>
 8001ec4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ec8:	e008      	b.n	8001edc <HAL_DMA_IRQHandler+0x168>
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	e005      	b.n	8001edc <HAL_DMA_IRQHandler+0x168>
 8001ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed4:	e002      	b.n	8001edc <HAL_DMA_IRQHandler+0x168>
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e000      	b.n	8001edc <HAL_DMA_IRQHandler+0x168>
 8001eda:	2302      	movs	r3, #2
 8001edc:	4a27      	ldr	r2, [pc, #156]	; (8001f7c <HAL_DMA_IRQHandler+0x208>)
 8001ede:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d034      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ef8:	e02f      	b.n	8001f5a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	2208      	movs	r2, #8
 8001f00:	409a      	lsls	r2, r3
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d028      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x1e8>
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d023      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 020e 	bic.w	r2, r2, #14
 8001f22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	4798      	blx	r3
    }
  }
  return;
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
}
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020008 	.word	0x40020008
 8001f68:	4002001c 	.word	0x4002001c
 8001f6c:	40020030 	.word	0x40020030
 8001f70:	40020044 	.word	0x40020044
 8001f74:	40020058 	.word	0x40020058
 8001f78:	4002006c 	.word	0x4002006c
 8001f7c:	40020000 	.word	0x40020000

08001f80 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]
 8001f8c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b10      	cmp	r3, #16
 8001fac:	d108      	bne.n	8001fc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001fbe:	e007      	b.n	8001fd0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b08b      	sub	sp, #44	; 0x2c
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fee:	e169      	b.n	80022c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	429a      	cmp	r2, r3
 800200a:	f040 8158 	bne.w	80022be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a9a      	ldr	r2, [pc, #616]	; (800227c <HAL_GPIO_Init+0x2a0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d05e      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002018:	4a98      	ldr	r2, [pc, #608]	; (800227c <HAL_GPIO_Init+0x2a0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d875      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800201e:	4a98      	ldr	r2, [pc, #608]	; (8002280 <HAL_GPIO_Init+0x2a4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d058      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002024:	4a96      	ldr	r2, [pc, #600]	; (8002280 <HAL_GPIO_Init+0x2a4>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d86f      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800202a:	4a96      	ldr	r2, [pc, #600]	; (8002284 <HAL_GPIO_Init+0x2a8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d052      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002030:	4a94      	ldr	r2, [pc, #592]	; (8002284 <HAL_GPIO_Init+0x2a8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d869      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002036:	4a94      	ldr	r2, [pc, #592]	; (8002288 <HAL_GPIO_Init+0x2ac>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d04c      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 800203c:	4a92      	ldr	r2, [pc, #584]	; (8002288 <HAL_GPIO_Init+0x2ac>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d863      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002042:	4a92      	ldr	r2, [pc, #584]	; (800228c <HAL_GPIO_Init+0x2b0>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d046      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
 8002048:	4a90      	ldr	r2, [pc, #576]	; (800228c <HAL_GPIO_Init+0x2b0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d85d      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 800204e:	2b12      	cmp	r3, #18
 8002050:	d82a      	bhi.n	80020a8 <HAL_GPIO_Init+0xcc>
 8002052:	2b12      	cmp	r3, #18
 8002054:	d859      	bhi.n	800210a <HAL_GPIO_Init+0x12e>
 8002056:	a201      	add	r2, pc, #4	; (adr r2, 800205c <HAL_GPIO_Init+0x80>)
 8002058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205c:	080020d7 	.word	0x080020d7
 8002060:	080020b1 	.word	0x080020b1
 8002064:	080020c3 	.word	0x080020c3
 8002068:	08002105 	.word	0x08002105
 800206c:	0800210b 	.word	0x0800210b
 8002070:	0800210b 	.word	0x0800210b
 8002074:	0800210b 	.word	0x0800210b
 8002078:	0800210b 	.word	0x0800210b
 800207c:	0800210b 	.word	0x0800210b
 8002080:	0800210b 	.word	0x0800210b
 8002084:	0800210b 	.word	0x0800210b
 8002088:	0800210b 	.word	0x0800210b
 800208c:	0800210b 	.word	0x0800210b
 8002090:	0800210b 	.word	0x0800210b
 8002094:	0800210b 	.word	0x0800210b
 8002098:	0800210b 	.word	0x0800210b
 800209c:	0800210b 	.word	0x0800210b
 80020a0:	080020b9 	.word	0x080020b9
 80020a4:	080020cd 	.word	0x080020cd
 80020a8:	4a79      	ldr	r2, [pc, #484]	; (8002290 <HAL_GPIO_Init+0x2b4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ae:	e02c      	b.n	800210a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	623b      	str	r3, [r7, #32]
          break;
 80020b6:	e029      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	3304      	adds	r3, #4
 80020be:	623b      	str	r3, [r7, #32]
          break;
 80020c0:	e024      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	3308      	adds	r3, #8
 80020c8:	623b      	str	r3, [r7, #32]
          break;
 80020ca:	e01f      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	330c      	adds	r3, #12
 80020d2:	623b      	str	r3, [r7, #32]
          break;
 80020d4:	e01a      	b.n	800210c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020de:	2304      	movs	r3, #4
 80020e0:	623b      	str	r3, [r7, #32]
          break;
 80020e2:	e013      	b.n	800210c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020ec:	2308      	movs	r3, #8
 80020ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	69fa      	ldr	r2, [r7, #28]
 80020f4:	611a      	str	r2, [r3, #16]
          break;
 80020f6:	e009      	b.n	800210c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f8:	2308      	movs	r3, #8
 80020fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	615a      	str	r2, [r3, #20]
          break;
 8002102:	e003      	b.n	800210c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
          break;
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x130>
          break;
 800210a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d801      	bhi.n	8002116 <HAL_GPIO_Init+0x13a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	e001      	b.n	800211a <HAL_GPIO_Init+0x13e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	2bff      	cmp	r3, #255	; 0xff
 8002120:	d802      	bhi.n	8002128 <HAL_GPIO_Init+0x14c>
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x152>
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	3b08      	subs	r3, #8
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	210f      	movs	r1, #15
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	6a39      	ldr	r1, [r7, #32]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	431a      	orrs	r2, r3
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	f000 80b1 	beq.w	80022be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800215c:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	4a4c      	ldr	r2, [pc, #304]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6193      	str	r3, [r2, #24]
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_GPIO_Init+0x2b8>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002174:	4a48      	ldr	r2, [pc, #288]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_GPIO_Init+0x2c0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d013      	beq.n	80021c8 <HAL_GPIO_Init+0x1ec>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3f      	ldr	r2, [pc, #252]	; (80022a0 <HAL_GPIO_Init+0x2c4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d00d      	beq.n	80021c4 <HAL_GPIO_Init+0x1e8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3e      	ldr	r2, [pc, #248]	; (80022a4 <HAL_GPIO_Init+0x2c8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d007      	beq.n	80021c0 <HAL_GPIO_Init+0x1e4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3d      	ldr	r2, [pc, #244]	; (80022a8 <HAL_GPIO_Init+0x2cc>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d101      	bne.n	80021bc <HAL_GPIO_Init+0x1e0>
 80021b8:	2303      	movs	r3, #3
 80021ba:	e006      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021bc:	2304      	movs	r3, #4
 80021be:	e004      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e002      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <HAL_GPIO_Init+0x1ee>
 80021c8:	2300      	movs	r3, #0
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	f002 0203 	and.w	r2, r2, #3
 80021d0:	0092      	lsls	r2, r2, #2
 80021d2:	4093      	lsls	r3, r2
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021da:	492f      	ldr	r1, [pc, #188]	; (8002298 <HAL_GPIO_Init+0x2bc>)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	492c      	ldr	r1, [pc, #176]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	600b      	str	r3, [r1, #0]
 8002200:	e006      	b.n	8002210 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002202:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	43db      	mvns	r3, r3
 800220a:	4928      	ldr	r1, [pc, #160]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800220c:	4013      	ands	r3, r2
 800220e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d006      	beq.n	800222a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800221c:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	43db      	mvns	r3, r3
 8002232:	491e      	ldr	r1, [pc, #120]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002234:	4013      	ands	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002244:	4b19      	ldr	r3, [pc, #100]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4918      	ldr	r1, [pc, #96]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	608b      	str	r3, [r1, #8]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002252:	4b16      	ldr	r3, [pc, #88]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	4914      	ldr	r1, [pc, #80]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800225c:	4013      	ands	r3, r2
 800225e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d021      	beq.n	80022b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800226c:	4b0f      	ldr	r3, [pc, #60]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 800226e:	68da      	ldr	r2, [r3, #12]
 8002270:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	60cb      	str	r3, [r1, #12]
 8002278:	e021      	b.n	80022be <HAL_GPIO_Init+0x2e2>
 800227a:	bf00      	nop
 800227c:	10320000 	.word	0x10320000
 8002280:	10310000 	.word	0x10310000
 8002284:	10220000 	.word	0x10220000
 8002288:	10210000 	.word	0x10210000
 800228c:	10120000 	.word	0x10120000
 8002290:	10110000 	.word	0x10110000
 8002294:	40021000 	.word	0x40021000
 8002298:	40010000 	.word	0x40010000
 800229c:	40010800 	.word	0x40010800
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	40011000 	.word	0x40011000
 80022a8:	40011400 	.word	0x40011400
 80022ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	4909      	ldr	r1, [pc, #36]	; (80022e0 <HAL_GPIO_Init+0x304>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	3301      	adds	r3, #1
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f47f ae8e 	bne.w	8001ff0 <HAL_GPIO_Init+0x14>
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	372c      	adds	r7, #44	; 0x2c
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	40010400 	.word	0x40010400

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	041a      	lsls	r2, r3, #16
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	43d9      	mvns	r1, r3
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	400b      	ands	r3, r1
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	611a      	str	r2, [r3, #16]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
	...

08002348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002352:	4b08      	ldr	r3, [pc, #32]	; (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002354:	695a      	ldr	r2, [r3, #20]
 8002356:	88fb      	ldrh	r3, [r7, #6]
 8002358:	4013      	ands	r3, r2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f806 	bl	8002378 <HAL_GPIO_EXTI_Callback>
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40010400 	.word	0x40010400

08002378 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr

0800238c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e272      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ac:	4b92      	ldr	r3, [pc, #584]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d00c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023b8:	4b8f      	ldr	r3, [pc, #572]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d112      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
 80023c4:	4b8c      	ldr	r3, [pc, #560]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d10b      	bne.n	80023ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d06c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x12c>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d168      	bne.n	80024b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e24c      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x76>
 80023f4:	4b80      	ldr	r3, [pc, #512]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a7f      	ldr	r2, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e02e      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x98>
 800240a:	4b7b      	ldr	r3, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7a      	ldr	r2, [pc, #488]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xbc>
 800242e:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6e      	ldr	r2, [pc, #440]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xd4>
 8002448:	4b6b      	ldr	r3, [pc, #428]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6a      	ldr	r2, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a67      	ldr	r2, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fc7a 	bl	8000d60 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7fe fc76 	bl	8000d60 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e200      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b5d      	ldr	r3, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xe4>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7fe fc66 	bl	8000d60 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7fe fc62 	bl	8000d60 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e1ec      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b53      	ldr	r3, [pc, #332]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x10c>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d063      	beq.n	800258e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024d2:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
 80024de:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b43      	ldr	r3, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1c0      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4939      	ldr	r1, [pc, #228]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e03a      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002522:	2201      	movs	r2, #1
 8002524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7fe fc1b 	bl	8000d60 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800252e:	f7fe fc17 	bl	8000d60 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1a1      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002540:	4b2d      	ldr	r3, [pc, #180]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254c:	4b2a      	ldr	r3, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4927      	ldr	r1, [pc, #156]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_OscConfig+0x270>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7fe fbfa 	bl	8000d60 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002570:	f7fe fbf6 	bl	8000d60 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e180      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d03a      	beq.n	8002610 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d019      	beq.n	80025d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7fe fbda 	bl	8000d60 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b0:	f7fe fbd6 	bl	8000d60 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e160      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f000 fad8 	bl	8002b84 <RCC_Delay>
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7fe fbc0 	bl	8000d60 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e2:	e00f      	b.n	8002604 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe fbbc 	bl	8000d60 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d908      	bls.n	8002604 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e146      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	42420000 	.word	0x42420000
 8002600:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	4b92      	ldr	r3, [pc, #584]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1e9      	bne.n	80025e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	f000 80a6 	beq.w	800276a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002622:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10d      	bne.n	800264a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	4a87      	ldr	r2, [pc, #540]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	61d3      	str	r3, [r2, #28]
 800263a:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	60bb      	str	r3, [r7, #8]
 8002644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002646:	2301      	movs	r3, #1
 8002648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264a:	4b82      	ldr	r3, [pc, #520]	; (8002854 <HAL_RCC_OscConfig+0x4c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002652:	2b00      	cmp	r3, #0
 8002654:	d118      	bne.n	8002688 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002656:	4b7f      	ldr	r3, [pc, #508]	; (8002854 <HAL_RCC_OscConfig+0x4c8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7e      	ldr	r2, [pc, #504]	; (8002854 <HAL_RCC_OscConfig+0x4c8>)
 800265c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002662:	f7fe fb7d 	bl	8000d60 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002668:	e008      	b.n	800267c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266a:	f7fe fb79 	bl	8000d60 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b64      	cmp	r3, #100	; 0x64
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e103      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b75      	ldr	r3, [pc, #468]	; (8002854 <HAL_RCC_OscConfig+0x4c8>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f0      	beq.n	800266a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d106      	bne.n	800269e <HAL_RCC_OscConfig+0x312>
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6213      	str	r3, [r2, #32]
 800269c:	e02d      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x334>
 80026a6:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a69      	ldr	r2, [pc, #420]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	4b67      	ldr	r3, [pc, #412]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a66      	ldr	r2, [pc, #408]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f023 0304 	bic.w	r3, r3, #4
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	e01c      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b05      	cmp	r3, #5
 80026c6:	d10c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x356>
 80026c8:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a60      	ldr	r2, [pc, #384]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	f043 0304 	orr.w	r3, r3, #4
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	4b5e      	ldr	r3, [pc, #376]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4a5d      	ldr	r2, [pc, #372]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6213      	str	r3, [r2, #32]
 80026e0:	e00b      	b.n	80026fa <HAL_RCC_OscConfig+0x36e>
 80026e2:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a5a      	ldr	r2, [pc, #360]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6213      	str	r3, [r2, #32]
 80026ee:	4b58      	ldr	r3, [pc, #352]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	4a57      	ldr	r2, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80026f4:	f023 0304 	bic.w	r3, r3, #4
 80026f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d015      	beq.n	800272e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe fb2d 	bl	8000d60 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe fb29 	bl	8000d60 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0b1      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002720:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ee      	beq.n	800270a <HAL_RCC_OscConfig+0x37e>
 800272c:	e014      	b.n	8002758 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272e:	f7fe fb17 	bl	8000d60 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002734:	e00a      	b.n	800274c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f7fe fb13 	bl	8000d60 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e09b      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274c:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d105      	bne.n	800276a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275e:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	4a3b      	ldr	r2, [pc, #236]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002768:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8087 	beq.w	8002882 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002774:	4b36      	ldr	r3, [pc, #216]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d061      	beq.n	8002844 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d146      	bne.n	8002816 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002788:	4b33      	ldr	r3, [pc, #204]	; (8002858 <HAL_RCC_OscConfig+0x4cc>)
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278e:	f7fe fae7 	bl	8000d60 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002796:	f7fe fae3 	bl	8000d60 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e06d      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f0      	bne.n	8002796 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027bc:	d108      	bne.n	80027d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027be:	4b24      	ldr	r3, [pc, #144]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	4921      	ldr	r1, [pc, #132]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a19      	ldr	r1, [r3, #32]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	430b      	orrs	r3, r1
 80027e2:	491b      	ldr	r1, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e8:	4b1b      	ldr	r3, [pc, #108]	; (8002858 <HAL_RCC_OscConfig+0x4cc>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ee:	f7fe fab7 	bl	8000d60 <HAL_GetTick>
 80027f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f6:	f7fe fab3 	bl	8000d60 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e03d      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x46a>
 8002814:	e035      	b.n	8002882 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <HAL_RCC_OscConfig+0x4cc>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe faa0 	bl	8000d60 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002824:	f7fe fa9c 	bl	8000d60 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e026      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002836:	4b06      	ldr	r3, [pc, #24]	; (8002850 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f0      	bne.n	8002824 <HAL_RCC_OscConfig+0x498>
 8002842:	e01e      	b.n	8002882 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d107      	bne.n	800285c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e019      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
 8002850:	40021000 	.word	0x40021000
 8002854:	40007000 	.word	0x40007000
 8002858:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_OscConfig+0x500>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	429a      	cmp	r2, r3
 800286e:	d106      	bne.n	800287e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0d0      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b6a      	ldr	r3, [pc, #424]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d910      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b67      	ldr	r3, [pc, #412]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0207 	bic.w	r2, r3, #7
 80028ba:	4965      	ldr	r1, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	4313      	orrs	r3, r2
 80028c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80028f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80028f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800290a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800290e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d040      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d115      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e073      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e06b      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b39      	ldr	r3, [pc, #228]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4936      	ldr	r1, [pc, #216]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002980:	f7fe f9ee 	bl	8000d60 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe f9ea 	bl	8000d60 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e053      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d210      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4922      	ldr	r1, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f821 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1cc>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1d0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe f94c 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	080041e4 	.word	0x080041e4
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	20000008 	.word	0x20000008

08002a64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	b490      	push	{r4, r7}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a6a:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <HAL_RCC_GetSysClockFreq+0xac>)
 8002a6c:	1d3c      	adds	r4, r7, #4
 8002a6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a74:	f240 2301 	movw	r3, #513	; 0x201
 8002a78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
 8002a82:	2300      	movs	r3, #0
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a8e:	4b21      	ldr	r3, [pc, #132]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f003 030c 	and.w	r3, r3, #12
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d002      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d003      	beq.n	8002aaa <HAL_RCC_GetSysClockFreq+0x46>
 8002aa2:	e02b      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002aa6:	623b      	str	r3, [r7, #32]
      break;
 8002aa8:	e02b      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	0c9b      	lsrs	r3, r3, #18
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3328      	adds	r3, #40	; 0x28
 8002ab4:	443b      	add	r3, r7
 8002ab6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aba:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d012      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	0c5b      	lsrs	r3, r3, #17
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	3328      	adds	r3, #40	; 0x28
 8002ad2:	443b      	add	r3, r7
 8002ad4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ad8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4a0e      	ldr	r2, [pc, #56]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ade:	fb03 f202 	mul.w	r2, r3, r2
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	e004      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	4a0b      	ldr	r2, [pc, #44]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	623b      	str	r3, [r7, #32]
      break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002afe:	623b      	str	r3, [r7, #32]
      break;
 8002b00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b02:	6a3b      	ldr	r3, [r7, #32]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bc90      	pop	{r4, r7}
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	080041c4 	.word	0x080041c4
 8002b14:	40021000 	.word	0x40021000
 8002b18:	007a1200 	.word	0x007a1200
 8002b1c:	003d0900 	.word	0x003d0900

08002b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b24:	4b02      	ldr	r3, [pc, #8]	; (8002b30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b26:	681b      	ldr	r3, [r3, #0]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr
 8002b30:	20000004 	.word	0x20000004

08002b34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b38:	f7ff fff2 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	4903      	ldr	r1, [pc, #12]	; (8002b58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b4a:	5ccb      	ldrb	r3, [r1, r3]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000
 8002b58:	080041f4 	.word	0x080041f4

08002b5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b60:	f7ff ffde 	bl	8002b20 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0adb      	lsrs	r3, r3, #11
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4903      	ldr	r1, [pc, #12]	; (8002b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	080041f4 	.word	0x080041f4

08002b84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <RCC_Delay+0x34>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <RCC_Delay+0x38>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0a5b      	lsrs	r3, r3, #9
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ba0:	bf00      	nop
  }
  while (Delay --);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f9      	bne.n	8002ba0 <RCC_Delay+0x1c>
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3714      	adds	r7, #20
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000004 	.word	0x20000004
 8002bbc:	10624dd3 	.word	0x10624dd3

08002bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	613b      	str	r3, [r7, #16]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d07d      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be0:	4b4f      	ldr	r3, [pc, #316]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10d      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b4c      	ldr	r3, [pc, #304]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4a4b      	ldr	r2, [pc, #300]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	61d3      	str	r3, [r2, #28]
 8002bf8:	4b49      	ldr	r3, [pc, #292]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c04:	2301      	movs	r3, #1
 8002c06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c08:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d118      	bne.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c14:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a42      	ldr	r2, [pc, #264]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c20:	f7fe f89e 	bl	8000d60 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c26:	e008      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7fe f89a 	bl	8000d60 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e06d      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3a:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c46:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d02e      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d027      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c64:	4b2e      	ldr	r3, [pc, #184]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c6e:	4b2e      	ldr	r3, [pc, #184]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c74:	4b2c      	ldr	r3, [pc, #176]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c7a:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d014      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8a:	f7fe f869 	bl	8000d60 <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe f865 	bl	8000d60 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e036      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ee      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb4:	4b1a      	ldr	r3, [pc, #104]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4917      	ldr	r1, [pc, #92]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	4a13      	ldr	r2, [pc, #76]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d008      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	490b      	ldr	r1, [pc, #44]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0310 	and.w	r3, r3, #16
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d02:	4b07      	ldr	r3, [pc, #28]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	4904      	ldr	r1, [pc, #16]	; (8002d20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3718      	adds	r7, #24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42420440 	.word	0x42420440

08002d2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d2c:	b590      	push	{r4, r7, lr}
 8002d2e:	b08d      	sub	sp, #52	; 0x34
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002d34:	4b58      	ldr	r3, [pc, #352]	; (8002e98 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002d36:	f107 040c 	add.w	r4, r7, #12
 8002d3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002d40:	f240 2301 	movw	r3, #513	; 0x201
 8002d44:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	2300      	movs	r3, #0
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d00a      	beq.n	8002d76 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	f200 808e 	bhi.w	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d049      	beq.n	8002e02 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d079      	beq.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d74:	e086      	b.n	8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002d76:	4b49      	ldr	r3, [pc, #292]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d07f      	beq.n	8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	0c9b      	lsrs	r3, r3, #18
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	3330      	adds	r3, #48	; 0x30
 8002d92:	443b      	add	r3, r7
 8002d94:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d98:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d017      	beq.n	8002dd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002da4:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	0c5b      	lsrs	r3, r3, #17
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	3330      	adds	r3, #48	; 0x30
 8002db0:	443b      	add	r3, r7
 8002db2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002dc2:	4a37      	ldr	r2, [pc, #220]	; (8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	e004      	b.n	8002dde <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	4a33      	ldr	r2, [pc, #204]	; (8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002dd8:	fb02 f303 	mul.w	r3, r2, r3
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002dde:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dea:	d102      	bne.n	8002df2 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002df0:	e04a      	b.n	8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	085b      	lsrs	r3, r3, #1
 8002dfe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e00:	e042      	b.n	8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002e02:	4b26      	ldr	r3, [pc, #152]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e12:	d108      	bne.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e24:	e01f      	b.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d109      	bne.n	8002e46 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002e3e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e44:	e00f      	b.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e50:	d11c      	bne.n	8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002e52:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002e5e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e64:	e012      	b.n	8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002e66:	e011      	b.n	8002e8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e68:	f7ff fe78 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	0b9b      	lsrs	r3, r3, #14
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e82:	e004      	b.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002e84:	bf00      	nop
 8002e86:	e002      	b.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002e8c:	bf00      	nop
    }
  }
  return (frequency);
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3734      	adds	r7, #52	; 0x34
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}
 8002e98:	080041d4 	.word	0x080041d4
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	007a1200 	.word	0x007a1200
 8002ea4:	003d0900 	.word	0x003d0900
 8002ea8:	aaaaaaab 	.word	0xaaaaaaab

08002eac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e03f      	b.n	8002f3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd fe88 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	; 0x24
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68da      	ldr	r2, [r3, #12]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002eee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f905 	bl	8003100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2220      	movs	r2, #32
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b08a      	sub	sp, #40	; 0x28
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	603b      	str	r3, [r7, #0]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	d17c      	bne.n	8003060 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_UART_Transmit+0x2c>
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e075      	b.n	8003062 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_UART_Transmit+0x3e>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e06e      	b.n	8003062 <HAL_UART_Transmit+0x11c>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2221      	movs	r2, #33	; 0x21
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f9a:	f7fd fee1 	bl	8000d60 <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d108      	bne.n	8002fc8 <HAL_UART_Transmit+0x82>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d104      	bne.n	8002fc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	e003      	b.n	8002fd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fd8:	e02a      	b.n	8003030 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2180      	movs	r1, #128	; 0x80
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f840 	bl	800306a <UART_WaitOnFlagUntilTimeout>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e036      	b.n	8003062 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10b      	bne.n	8003012 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	3302      	adds	r3, #2
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	e007      	b.n	8003022 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	781a      	ldrb	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	3301      	adds	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003026:	b29b      	uxth	r3, r3
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1cf      	bne.n	8002fda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2200      	movs	r2, #0
 8003042:	2140      	movs	r1, #64	; 0x40
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f810 	bl	800306a <UART_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e006      	b.n	8003062 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800307a:	e02c      	b.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d028      	beq.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <UART_WaitOnFlagUntilTimeout+0x30>
 800308a:	f7fd fe69 	bl	8000d60 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	429a      	cmp	r2, r3
 8003098:	d21d      	bcs.n	80030d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	695a      	ldr	r2, [r3, #20]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2220      	movs	r2, #32
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e00f      	b.n	80030f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	4013      	ands	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	bf0c      	ite	eq
 80030e6:	2301      	moveq	r3, #1
 80030e8:	2300      	movne	r3, #0
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	79fb      	ldrb	r3, [r7, #7]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d0c3      	beq.n	800307c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800313a:	f023 030c 	bic.w	r3, r3, #12
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	68b9      	ldr	r1, [r7, #8]
 8003144:	430b      	orrs	r3, r1
 8003146:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a2c      	ldr	r2, [pc, #176]	; (8003214 <UART_SetConfig+0x114>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d103      	bne.n	8003170 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003168:	f7ff fcf8 	bl	8002b5c <HAL_RCC_GetPCLK2Freq>
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	e002      	b.n	8003176 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003170:	f7ff fce0 	bl	8002b34 <HAL_RCC_GetPCLK1Freq>
 8003174:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009a      	lsls	r2, r3, #2
 8003180:	441a      	add	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	fbb2 f3f3 	udiv	r3, r2, r3
 800318c:	4a22      	ldr	r2, [pc, #136]	; (8003218 <UART_SetConfig+0x118>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	0119      	lsls	r1, r3, #4
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009a      	lsls	r2, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <UART_SetConfig+0x118>)
 80031ae:	fba3 0302 	umull	r0, r3, r3, r2
 80031b2:	095b      	lsrs	r3, r3, #5
 80031b4:	2064      	movs	r0, #100	; 0x64
 80031b6:	fb00 f303 	mul.w	r3, r0, r3
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	3332      	adds	r3, #50	; 0x32
 80031c0:	4a15      	ldr	r2, [pc, #84]	; (8003218 <UART_SetConfig+0x118>)
 80031c2:	fba2 2303 	umull	r2, r3, r2, r3
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031cc:	4419      	add	r1, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009a      	lsls	r2, r3, #2
 80031d8:	441a      	add	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <UART_SetConfig+0x118>)
 80031e6:	fba3 0302 	umull	r0, r3, r3, r2
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2064      	movs	r0, #100	; 0x64
 80031ee:	fb00 f303 	mul.w	r3, r0, r3
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	3332      	adds	r3, #50	; 0x32
 80031f8:	4a07      	ldr	r2, [pc, #28]	; (8003218 <UART_SetConfig+0x118>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	440a      	add	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40013800 	.word	0x40013800
 8003218:	51eb851f 	.word	0x51eb851f

0800321c <__errno>:
 800321c:	4b01      	ldr	r3, [pc, #4]	; (8003224 <__errno+0x8>)
 800321e:	6818      	ldr	r0, [r3, #0]
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000010 	.word	0x20000010

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	2600      	movs	r6, #0
 800322c:	4d0c      	ldr	r5, [pc, #48]	; (8003260 <__libc_init_array+0x38>)
 800322e:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 8003230:	1b64      	subs	r4, r4, r5
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	42a6      	cmp	r6, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	f000 ffb6 	bl	80041a8 <_init>
 800323c:	2600      	movs	r6, #0
 800323e:	4d0a      	ldr	r5, [pc, #40]	; (8003268 <__libc_init_array+0x40>)
 8003240:	4c0a      	ldr	r4, [pc, #40]	; (800326c <__libc_init_array+0x44>)
 8003242:	1b64      	subs	r4, r4, r5
 8003244:	10a4      	asrs	r4, r4, #2
 8003246:	42a6      	cmp	r6, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003250:	4798      	blx	r3
 8003252:	3601      	adds	r6, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	f855 3b04 	ldr.w	r3, [r5], #4
 800325a:	4798      	blx	r3
 800325c:	3601      	adds	r6, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	08004294 	.word	0x08004294
 8003264:	08004294 	.word	0x08004294
 8003268:	08004294 	.word	0x08004294
 800326c:	08004298 	.word	0x08004298

08003270 <memset>:
 8003270:	4603      	mov	r3, r0
 8003272:	4402      	add	r2, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <iprintf>:
 8003280:	b40f      	push	{r0, r1, r2, r3}
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <iprintf+0x2c>)
 8003284:	b513      	push	{r0, r1, r4, lr}
 8003286:	681c      	ldr	r4, [r3, #0]
 8003288:	b124      	cbz	r4, 8003294 <iprintf+0x14>
 800328a:	69a3      	ldr	r3, [r4, #24]
 800328c:	b913      	cbnz	r3, 8003294 <iprintf+0x14>
 800328e:	4620      	mov	r0, r4
 8003290:	f000 f866 	bl	8003360 <__sinit>
 8003294:	ab05      	add	r3, sp, #20
 8003296:	4620      	mov	r0, r4
 8003298:	9a04      	ldr	r2, [sp, #16]
 800329a:	68a1      	ldr	r1, [r4, #8]
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	f000 f9bb 	bl	8003618 <_vfiprintf_r>
 80032a2:	b002      	add	sp, #8
 80032a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032a8:	b004      	add	sp, #16
 80032aa:	4770      	bx	lr
 80032ac:	20000010 	.word	0x20000010

080032b0 <std>:
 80032b0:	2300      	movs	r3, #0
 80032b2:	b510      	push	{r4, lr}
 80032b4:	4604      	mov	r4, r0
 80032b6:	e9c0 3300 	strd	r3, r3, [r0]
 80032ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032be:	6083      	str	r3, [r0, #8]
 80032c0:	8181      	strh	r1, [r0, #12]
 80032c2:	6643      	str	r3, [r0, #100]	; 0x64
 80032c4:	81c2      	strh	r2, [r0, #14]
 80032c6:	6183      	str	r3, [r0, #24]
 80032c8:	4619      	mov	r1, r3
 80032ca:	2208      	movs	r2, #8
 80032cc:	305c      	adds	r0, #92	; 0x5c
 80032ce:	f7ff ffcf 	bl	8003270 <memset>
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <std+0x38>)
 80032d4:	6224      	str	r4, [r4, #32]
 80032d6:	6263      	str	r3, [r4, #36]	; 0x24
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <std+0x3c>)
 80032da:	62a3      	str	r3, [r4, #40]	; 0x28
 80032dc:	4b04      	ldr	r3, [pc, #16]	; (80032f0 <std+0x40>)
 80032de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032e0:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <std+0x44>)
 80032e2:	6323      	str	r3, [r4, #48]	; 0x30
 80032e4:	bd10      	pop	{r4, pc}
 80032e6:	bf00      	nop
 80032e8:	08003bc5 	.word	0x08003bc5
 80032ec:	08003be7 	.word	0x08003be7
 80032f0:	08003c1f 	.word	0x08003c1f
 80032f4:	08003c43 	.word	0x08003c43

080032f8 <_cleanup_r>:
 80032f8:	4901      	ldr	r1, [pc, #4]	; (8003300 <_cleanup_r+0x8>)
 80032fa:	f000 b8af 	b.w	800345c <_fwalk_reent>
 80032fe:	bf00      	nop
 8003300:	08003f15 	.word	0x08003f15

08003304 <__sfmoreglue>:
 8003304:	2268      	movs	r2, #104	; 0x68
 8003306:	b570      	push	{r4, r5, r6, lr}
 8003308:	1e4d      	subs	r5, r1, #1
 800330a:	4355      	muls	r5, r2
 800330c:	460e      	mov	r6, r1
 800330e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003312:	f000 f8e5 	bl	80034e0 <_malloc_r>
 8003316:	4604      	mov	r4, r0
 8003318:	b140      	cbz	r0, 800332c <__sfmoreglue+0x28>
 800331a:	2100      	movs	r1, #0
 800331c:	e9c0 1600 	strd	r1, r6, [r0]
 8003320:	300c      	adds	r0, #12
 8003322:	60a0      	str	r0, [r4, #8]
 8003324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003328:	f7ff ffa2 	bl	8003270 <memset>
 800332c:	4620      	mov	r0, r4
 800332e:	bd70      	pop	{r4, r5, r6, pc}

08003330 <__sfp_lock_acquire>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__sfp_lock_acquire+0x8>)
 8003332:	f000 b8b3 	b.w	800349c <__retarget_lock_acquire_recursive>
 8003336:	bf00      	nop
 8003338:	2000419d 	.word	0x2000419d

0800333c <__sfp_lock_release>:
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <__sfp_lock_release+0x8>)
 800333e:	f000 b8ae 	b.w	800349e <__retarget_lock_release_recursive>
 8003342:	bf00      	nop
 8003344:	2000419d 	.word	0x2000419d

08003348 <__sinit_lock_acquire>:
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <__sinit_lock_acquire+0x8>)
 800334a:	f000 b8a7 	b.w	800349c <__retarget_lock_acquire_recursive>
 800334e:	bf00      	nop
 8003350:	2000419e 	.word	0x2000419e

08003354 <__sinit_lock_release>:
 8003354:	4801      	ldr	r0, [pc, #4]	; (800335c <__sinit_lock_release+0x8>)
 8003356:	f000 b8a2 	b.w	800349e <__retarget_lock_release_recursive>
 800335a:	bf00      	nop
 800335c:	2000419e 	.word	0x2000419e

08003360 <__sinit>:
 8003360:	b510      	push	{r4, lr}
 8003362:	4604      	mov	r4, r0
 8003364:	f7ff fff0 	bl	8003348 <__sinit_lock_acquire>
 8003368:	69a3      	ldr	r3, [r4, #24]
 800336a:	b11b      	cbz	r3, 8003374 <__sinit+0x14>
 800336c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003370:	f7ff bff0 	b.w	8003354 <__sinit_lock_release>
 8003374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003378:	6523      	str	r3, [r4, #80]	; 0x50
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <__sinit+0x68>)
 800337c:	4a13      	ldr	r2, [pc, #76]	; (80033cc <__sinit+0x6c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	62a2      	str	r2, [r4, #40]	; 0x28
 8003382:	42a3      	cmp	r3, r4
 8003384:	bf08      	it	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	4620      	mov	r0, r4
 800338a:	bf08      	it	eq
 800338c:	61a3      	streq	r3, [r4, #24]
 800338e:	f000 f81f 	bl	80033d0 <__sfp>
 8003392:	6060      	str	r0, [r4, #4]
 8003394:	4620      	mov	r0, r4
 8003396:	f000 f81b 	bl	80033d0 <__sfp>
 800339a:	60a0      	str	r0, [r4, #8]
 800339c:	4620      	mov	r0, r4
 800339e:	f000 f817 	bl	80033d0 <__sfp>
 80033a2:	2200      	movs	r2, #0
 80033a4:	2104      	movs	r1, #4
 80033a6:	60e0      	str	r0, [r4, #12]
 80033a8:	6860      	ldr	r0, [r4, #4]
 80033aa:	f7ff ff81 	bl	80032b0 <std>
 80033ae:	2201      	movs	r2, #1
 80033b0:	2109      	movs	r1, #9
 80033b2:	68a0      	ldr	r0, [r4, #8]
 80033b4:	f7ff ff7c 	bl	80032b0 <std>
 80033b8:	2202      	movs	r2, #2
 80033ba:	2112      	movs	r1, #18
 80033bc:	68e0      	ldr	r0, [r4, #12]
 80033be:	f7ff ff77 	bl	80032b0 <std>
 80033c2:	2301      	movs	r3, #1
 80033c4:	61a3      	str	r3, [r4, #24]
 80033c6:	e7d1      	b.n	800336c <__sinit+0xc>
 80033c8:	080041fc 	.word	0x080041fc
 80033cc:	080032f9 	.word	0x080032f9

080033d0 <__sfp>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	4607      	mov	r7, r0
 80033d4:	f7ff ffac 	bl	8003330 <__sfp_lock_acquire>
 80033d8:	4b1e      	ldr	r3, [pc, #120]	; (8003454 <__sfp+0x84>)
 80033da:	681e      	ldr	r6, [r3, #0]
 80033dc:	69b3      	ldr	r3, [r6, #24]
 80033de:	b913      	cbnz	r3, 80033e6 <__sfp+0x16>
 80033e0:	4630      	mov	r0, r6
 80033e2:	f7ff ffbd 	bl	8003360 <__sinit>
 80033e6:	3648      	adds	r6, #72	; 0x48
 80033e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	d503      	bpl.n	80033f8 <__sfp+0x28>
 80033f0:	6833      	ldr	r3, [r6, #0]
 80033f2:	b30b      	cbz	r3, 8003438 <__sfp+0x68>
 80033f4:	6836      	ldr	r6, [r6, #0]
 80033f6:	e7f7      	b.n	80033e8 <__sfp+0x18>
 80033f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033fc:	b9d5      	cbnz	r5, 8003434 <__sfp+0x64>
 80033fe:	4b16      	ldr	r3, [pc, #88]	; (8003458 <__sfp+0x88>)
 8003400:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003404:	60e3      	str	r3, [r4, #12]
 8003406:	6665      	str	r5, [r4, #100]	; 0x64
 8003408:	f000 f847 	bl	800349a <__retarget_lock_init_recursive>
 800340c:	f7ff ff96 	bl	800333c <__sfp_lock_release>
 8003410:	2208      	movs	r2, #8
 8003412:	4629      	mov	r1, r5
 8003414:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003418:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800341c:	6025      	str	r5, [r4, #0]
 800341e:	61a5      	str	r5, [r4, #24]
 8003420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003424:	f7ff ff24 	bl	8003270 <memset>
 8003428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800342c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003430:	4620      	mov	r0, r4
 8003432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003434:	3468      	adds	r4, #104	; 0x68
 8003436:	e7d9      	b.n	80033ec <__sfp+0x1c>
 8003438:	2104      	movs	r1, #4
 800343a:	4638      	mov	r0, r7
 800343c:	f7ff ff62 	bl	8003304 <__sfmoreglue>
 8003440:	4604      	mov	r4, r0
 8003442:	6030      	str	r0, [r6, #0]
 8003444:	2800      	cmp	r0, #0
 8003446:	d1d5      	bne.n	80033f4 <__sfp+0x24>
 8003448:	f7ff ff78 	bl	800333c <__sfp_lock_release>
 800344c:	230c      	movs	r3, #12
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	e7ee      	b.n	8003430 <__sfp+0x60>
 8003452:	bf00      	nop
 8003454:	080041fc 	.word	0x080041fc
 8003458:	ffff0001 	.word	0xffff0001

0800345c <_fwalk_reent>:
 800345c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003460:	4606      	mov	r6, r0
 8003462:	4688      	mov	r8, r1
 8003464:	2700      	movs	r7, #0
 8003466:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800346a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800346e:	f1b9 0901 	subs.w	r9, r9, #1
 8003472:	d505      	bpl.n	8003480 <_fwalk_reent+0x24>
 8003474:	6824      	ldr	r4, [r4, #0]
 8003476:	2c00      	cmp	r4, #0
 8003478:	d1f7      	bne.n	800346a <_fwalk_reent+0xe>
 800347a:	4638      	mov	r0, r7
 800347c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003480:	89ab      	ldrh	r3, [r5, #12]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d907      	bls.n	8003496 <_fwalk_reent+0x3a>
 8003486:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800348a:	3301      	adds	r3, #1
 800348c:	d003      	beq.n	8003496 <_fwalk_reent+0x3a>
 800348e:	4629      	mov	r1, r5
 8003490:	4630      	mov	r0, r6
 8003492:	47c0      	blx	r8
 8003494:	4307      	orrs	r7, r0
 8003496:	3568      	adds	r5, #104	; 0x68
 8003498:	e7e9      	b.n	800346e <_fwalk_reent+0x12>

0800349a <__retarget_lock_init_recursive>:
 800349a:	4770      	bx	lr

0800349c <__retarget_lock_acquire_recursive>:
 800349c:	4770      	bx	lr

0800349e <__retarget_lock_release_recursive>:
 800349e:	4770      	bx	lr

080034a0 <sbrk_aligned>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	4e0e      	ldr	r6, [pc, #56]	; (80034dc <sbrk_aligned+0x3c>)
 80034a4:	460c      	mov	r4, r1
 80034a6:	6831      	ldr	r1, [r6, #0]
 80034a8:	4605      	mov	r5, r0
 80034aa:	b911      	cbnz	r1, 80034b2 <sbrk_aligned+0x12>
 80034ac:	f000 fb7a 	bl	8003ba4 <_sbrk_r>
 80034b0:	6030      	str	r0, [r6, #0]
 80034b2:	4621      	mov	r1, r4
 80034b4:	4628      	mov	r0, r5
 80034b6:	f000 fb75 	bl	8003ba4 <_sbrk_r>
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	d00a      	beq.n	80034d4 <sbrk_aligned+0x34>
 80034be:	1cc4      	adds	r4, r0, #3
 80034c0:	f024 0403 	bic.w	r4, r4, #3
 80034c4:	42a0      	cmp	r0, r4
 80034c6:	d007      	beq.n	80034d8 <sbrk_aligned+0x38>
 80034c8:	1a21      	subs	r1, r4, r0
 80034ca:	4628      	mov	r0, r5
 80034cc:	f000 fb6a 	bl	8003ba4 <_sbrk_r>
 80034d0:	3001      	adds	r0, #1
 80034d2:	d101      	bne.n	80034d8 <sbrk_aligned+0x38>
 80034d4:	f04f 34ff 	mov.w	r4, #4294967295
 80034d8:	4620      	mov	r0, r4
 80034da:	bd70      	pop	{r4, r5, r6, pc}
 80034dc:	200041a4 	.word	0x200041a4

080034e0 <_malloc_r>:
 80034e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034e4:	1ccd      	adds	r5, r1, #3
 80034e6:	f025 0503 	bic.w	r5, r5, #3
 80034ea:	3508      	adds	r5, #8
 80034ec:	2d0c      	cmp	r5, #12
 80034ee:	bf38      	it	cc
 80034f0:	250c      	movcc	r5, #12
 80034f2:	2d00      	cmp	r5, #0
 80034f4:	4607      	mov	r7, r0
 80034f6:	db01      	blt.n	80034fc <_malloc_r+0x1c>
 80034f8:	42a9      	cmp	r1, r5
 80034fa:	d905      	bls.n	8003508 <_malloc_r+0x28>
 80034fc:	230c      	movs	r3, #12
 80034fe:	2600      	movs	r6, #0
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4630      	mov	r0, r6
 8003504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003508:	4e2e      	ldr	r6, [pc, #184]	; (80035c4 <_malloc_r+0xe4>)
 800350a:	f000 fdc5 	bl	8004098 <__malloc_lock>
 800350e:	6833      	ldr	r3, [r6, #0]
 8003510:	461c      	mov	r4, r3
 8003512:	bb34      	cbnz	r4, 8003562 <_malloc_r+0x82>
 8003514:	4629      	mov	r1, r5
 8003516:	4638      	mov	r0, r7
 8003518:	f7ff ffc2 	bl	80034a0 <sbrk_aligned>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	4604      	mov	r4, r0
 8003520:	d14d      	bne.n	80035be <_malloc_r+0xde>
 8003522:	6834      	ldr	r4, [r6, #0]
 8003524:	4626      	mov	r6, r4
 8003526:	2e00      	cmp	r6, #0
 8003528:	d140      	bne.n	80035ac <_malloc_r+0xcc>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	4631      	mov	r1, r6
 800352e:	4638      	mov	r0, r7
 8003530:	eb04 0803 	add.w	r8, r4, r3
 8003534:	f000 fb36 	bl	8003ba4 <_sbrk_r>
 8003538:	4580      	cmp	r8, r0
 800353a:	d13a      	bne.n	80035b2 <_malloc_r+0xd2>
 800353c:	6821      	ldr	r1, [r4, #0]
 800353e:	3503      	adds	r5, #3
 8003540:	1a6d      	subs	r5, r5, r1
 8003542:	f025 0503 	bic.w	r5, r5, #3
 8003546:	3508      	adds	r5, #8
 8003548:	2d0c      	cmp	r5, #12
 800354a:	bf38      	it	cc
 800354c:	250c      	movcc	r5, #12
 800354e:	4638      	mov	r0, r7
 8003550:	4629      	mov	r1, r5
 8003552:	f7ff ffa5 	bl	80034a0 <sbrk_aligned>
 8003556:	3001      	adds	r0, #1
 8003558:	d02b      	beq.n	80035b2 <_malloc_r+0xd2>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	442b      	add	r3, r5
 800355e:	6023      	str	r3, [r4, #0]
 8003560:	e00e      	b.n	8003580 <_malloc_r+0xa0>
 8003562:	6822      	ldr	r2, [r4, #0]
 8003564:	1b52      	subs	r2, r2, r5
 8003566:	d41e      	bmi.n	80035a6 <_malloc_r+0xc6>
 8003568:	2a0b      	cmp	r2, #11
 800356a:	d916      	bls.n	800359a <_malloc_r+0xba>
 800356c:	1961      	adds	r1, r4, r5
 800356e:	42a3      	cmp	r3, r4
 8003570:	6025      	str	r5, [r4, #0]
 8003572:	bf18      	it	ne
 8003574:	6059      	strne	r1, [r3, #4]
 8003576:	6863      	ldr	r3, [r4, #4]
 8003578:	bf08      	it	eq
 800357a:	6031      	streq	r1, [r6, #0]
 800357c:	5162      	str	r2, [r4, r5]
 800357e:	604b      	str	r3, [r1, #4]
 8003580:	4638      	mov	r0, r7
 8003582:	f104 060b 	add.w	r6, r4, #11
 8003586:	f000 fd8d 	bl	80040a4 <__malloc_unlock>
 800358a:	f026 0607 	bic.w	r6, r6, #7
 800358e:	1d23      	adds	r3, r4, #4
 8003590:	1af2      	subs	r2, r6, r3
 8003592:	d0b6      	beq.n	8003502 <_malloc_r+0x22>
 8003594:	1b9b      	subs	r3, r3, r6
 8003596:	50a3      	str	r3, [r4, r2]
 8003598:	e7b3      	b.n	8003502 <_malloc_r+0x22>
 800359a:	6862      	ldr	r2, [r4, #4]
 800359c:	42a3      	cmp	r3, r4
 800359e:	bf0c      	ite	eq
 80035a0:	6032      	streq	r2, [r6, #0]
 80035a2:	605a      	strne	r2, [r3, #4]
 80035a4:	e7ec      	b.n	8003580 <_malloc_r+0xa0>
 80035a6:	4623      	mov	r3, r4
 80035a8:	6864      	ldr	r4, [r4, #4]
 80035aa:	e7b2      	b.n	8003512 <_malloc_r+0x32>
 80035ac:	4634      	mov	r4, r6
 80035ae:	6876      	ldr	r6, [r6, #4]
 80035b0:	e7b9      	b.n	8003526 <_malloc_r+0x46>
 80035b2:	230c      	movs	r3, #12
 80035b4:	4638      	mov	r0, r7
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	f000 fd74 	bl	80040a4 <__malloc_unlock>
 80035bc:	e7a1      	b.n	8003502 <_malloc_r+0x22>
 80035be:	6025      	str	r5, [r4, #0]
 80035c0:	e7de      	b.n	8003580 <_malloc_r+0xa0>
 80035c2:	bf00      	nop
 80035c4:	200041a0 	.word	0x200041a0

080035c8 <__sfputc_r>:
 80035c8:	6893      	ldr	r3, [r2, #8]
 80035ca:	b410      	push	{r4}
 80035cc:	3b01      	subs	r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	6093      	str	r3, [r2, #8]
 80035d2:	da07      	bge.n	80035e4 <__sfputc_r+0x1c>
 80035d4:	6994      	ldr	r4, [r2, #24]
 80035d6:	42a3      	cmp	r3, r4
 80035d8:	db01      	blt.n	80035de <__sfputc_r+0x16>
 80035da:	290a      	cmp	r1, #10
 80035dc:	d102      	bne.n	80035e4 <__sfputc_r+0x1c>
 80035de:	bc10      	pop	{r4}
 80035e0:	f000 bb34 	b.w	8003c4c <__swbuf_r>
 80035e4:	6813      	ldr	r3, [r2, #0]
 80035e6:	1c58      	adds	r0, r3, #1
 80035e8:	6010      	str	r0, [r2, #0]
 80035ea:	7019      	strb	r1, [r3, #0]
 80035ec:	4608      	mov	r0, r1
 80035ee:	bc10      	pop	{r4}
 80035f0:	4770      	bx	lr

080035f2 <__sfputs_r>:
 80035f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035f4:	4606      	mov	r6, r0
 80035f6:	460f      	mov	r7, r1
 80035f8:	4614      	mov	r4, r2
 80035fa:	18d5      	adds	r5, r2, r3
 80035fc:	42ac      	cmp	r4, r5
 80035fe:	d101      	bne.n	8003604 <__sfputs_r+0x12>
 8003600:	2000      	movs	r0, #0
 8003602:	e007      	b.n	8003614 <__sfputs_r+0x22>
 8003604:	463a      	mov	r2, r7
 8003606:	4630      	mov	r0, r6
 8003608:	f814 1b01 	ldrb.w	r1, [r4], #1
 800360c:	f7ff ffdc 	bl	80035c8 <__sfputc_r>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d1f3      	bne.n	80035fc <__sfputs_r+0xa>
 8003614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003618 <_vfiprintf_r>:
 8003618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800361c:	460d      	mov	r5, r1
 800361e:	4614      	mov	r4, r2
 8003620:	4698      	mov	r8, r3
 8003622:	4606      	mov	r6, r0
 8003624:	b09d      	sub	sp, #116	; 0x74
 8003626:	b118      	cbz	r0, 8003630 <_vfiprintf_r+0x18>
 8003628:	6983      	ldr	r3, [r0, #24]
 800362a:	b90b      	cbnz	r3, 8003630 <_vfiprintf_r+0x18>
 800362c:	f7ff fe98 	bl	8003360 <__sinit>
 8003630:	4b89      	ldr	r3, [pc, #548]	; (8003858 <_vfiprintf_r+0x240>)
 8003632:	429d      	cmp	r5, r3
 8003634:	d11b      	bne.n	800366e <_vfiprintf_r+0x56>
 8003636:	6875      	ldr	r5, [r6, #4]
 8003638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800363a:	07d9      	lsls	r1, r3, #31
 800363c:	d405      	bmi.n	800364a <_vfiprintf_r+0x32>
 800363e:	89ab      	ldrh	r3, [r5, #12]
 8003640:	059a      	lsls	r2, r3, #22
 8003642:	d402      	bmi.n	800364a <_vfiprintf_r+0x32>
 8003644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003646:	f7ff ff29 	bl	800349c <__retarget_lock_acquire_recursive>
 800364a:	89ab      	ldrh	r3, [r5, #12]
 800364c:	071b      	lsls	r3, r3, #28
 800364e:	d501      	bpl.n	8003654 <_vfiprintf_r+0x3c>
 8003650:	692b      	ldr	r3, [r5, #16]
 8003652:	b9eb      	cbnz	r3, 8003690 <_vfiprintf_r+0x78>
 8003654:	4629      	mov	r1, r5
 8003656:	4630      	mov	r0, r6
 8003658:	f000 fb5c 	bl	8003d14 <__swsetup_r>
 800365c:	b1c0      	cbz	r0, 8003690 <_vfiprintf_r+0x78>
 800365e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003660:	07dc      	lsls	r4, r3, #31
 8003662:	d50e      	bpl.n	8003682 <_vfiprintf_r+0x6a>
 8003664:	f04f 30ff 	mov.w	r0, #4294967295
 8003668:	b01d      	add	sp, #116	; 0x74
 800366a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366e:	4b7b      	ldr	r3, [pc, #492]	; (800385c <_vfiprintf_r+0x244>)
 8003670:	429d      	cmp	r5, r3
 8003672:	d101      	bne.n	8003678 <_vfiprintf_r+0x60>
 8003674:	68b5      	ldr	r5, [r6, #8]
 8003676:	e7df      	b.n	8003638 <_vfiprintf_r+0x20>
 8003678:	4b79      	ldr	r3, [pc, #484]	; (8003860 <_vfiprintf_r+0x248>)
 800367a:	429d      	cmp	r5, r3
 800367c:	bf08      	it	eq
 800367e:	68f5      	ldreq	r5, [r6, #12]
 8003680:	e7da      	b.n	8003638 <_vfiprintf_r+0x20>
 8003682:	89ab      	ldrh	r3, [r5, #12]
 8003684:	0598      	lsls	r0, r3, #22
 8003686:	d4ed      	bmi.n	8003664 <_vfiprintf_r+0x4c>
 8003688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800368a:	f7ff ff08 	bl	800349e <__retarget_lock_release_recursive>
 800368e:	e7e9      	b.n	8003664 <_vfiprintf_r+0x4c>
 8003690:	2300      	movs	r3, #0
 8003692:	9309      	str	r3, [sp, #36]	; 0x24
 8003694:	2320      	movs	r3, #32
 8003696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800369a:	2330      	movs	r3, #48	; 0x30
 800369c:	f04f 0901 	mov.w	r9, #1
 80036a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80036a4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003864 <_vfiprintf_r+0x24c>
 80036a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036ac:	4623      	mov	r3, r4
 80036ae:	469a      	mov	sl, r3
 80036b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036b4:	b10a      	cbz	r2, 80036ba <_vfiprintf_r+0xa2>
 80036b6:	2a25      	cmp	r2, #37	; 0x25
 80036b8:	d1f9      	bne.n	80036ae <_vfiprintf_r+0x96>
 80036ba:	ebba 0b04 	subs.w	fp, sl, r4
 80036be:	d00b      	beq.n	80036d8 <_vfiprintf_r+0xc0>
 80036c0:	465b      	mov	r3, fp
 80036c2:	4622      	mov	r2, r4
 80036c4:	4629      	mov	r1, r5
 80036c6:	4630      	mov	r0, r6
 80036c8:	f7ff ff93 	bl	80035f2 <__sfputs_r>
 80036cc:	3001      	adds	r0, #1
 80036ce:	f000 80aa 	beq.w	8003826 <_vfiprintf_r+0x20e>
 80036d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036d4:	445a      	add	r2, fp
 80036d6:	9209      	str	r2, [sp, #36]	; 0x24
 80036d8:	f89a 3000 	ldrb.w	r3, [sl]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80a2 	beq.w	8003826 <_vfiprintf_r+0x20e>
 80036e2:	2300      	movs	r3, #0
 80036e4:	f04f 32ff 	mov.w	r2, #4294967295
 80036e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036ec:	f10a 0a01 	add.w	sl, sl, #1
 80036f0:	9304      	str	r3, [sp, #16]
 80036f2:	9307      	str	r3, [sp, #28]
 80036f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036f8:	931a      	str	r3, [sp, #104]	; 0x68
 80036fa:	4654      	mov	r4, sl
 80036fc:	2205      	movs	r2, #5
 80036fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003702:	4858      	ldr	r0, [pc, #352]	; (8003864 <_vfiprintf_r+0x24c>)
 8003704:	f000 fcba 	bl	800407c <memchr>
 8003708:	9a04      	ldr	r2, [sp, #16]
 800370a:	b9d8      	cbnz	r0, 8003744 <_vfiprintf_r+0x12c>
 800370c:	06d1      	lsls	r1, r2, #27
 800370e:	bf44      	itt	mi
 8003710:	2320      	movmi	r3, #32
 8003712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003716:	0713      	lsls	r3, r2, #28
 8003718:	bf44      	itt	mi
 800371a:	232b      	movmi	r3, #43	; 0x2b
 800371c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003720:	f89a 3000 	ldrb.w	r3, [sl]
 8003724:	2b2a      	cmp	r3, #42	; 0x2a
 8003726:	d015      	beq.n	8003754 <_vfiprintf_r+0x13c>
 8003728:	4654      	mov	r4, sl
 800372a:	2000      	movs	r0, #0
 800372c:	f04f 0c0a 	mov.w	ip, #10
 8003730:	9a07      	ldr	r2, [sp, #28]
 8003732:	4621      	mov	r1, r4
 8003734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003738:	3b30      	subs	r3, #48	; 0x30
 800373a:	2b09      	cmp	r3, #9
 800373c:	d94e      	bls.n	80037dc <_vfiprintf_r+0x1c4>
 800373e:	b1b0      	cbz	r0, 800376e <_vfiprintf_r+0x156>
 8003740:	9207      	str	r2, [sp, #28]
 8003742:	e014      	b.n	800376e <_vfiprintf_r+0x156>
 8003744:	eba0 0308 	sub.w	r3, r0, r8
 8003748:	fa09 f303 	lsl.w	r3, r9, r3
 800374c:	4313      	orrs	r3, r2
 800374e:	46a2      	mov	sl, r4
 8003750:	9304      	str	r3, [sp, #16]
 8003752:	e7d2      	b.n	80036fa <_vfiprintf_r+0xe2>
 8003754:	9b03      	ldr	r3, [sp, #12]
 8003756:	1d19      	adds	r1, r3, #4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	9103      	str	r1, [sp, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	bfbb      	ittet	lt
 8003760:	425b      	neglt	r3, r3
 8003762:	f042 0202 	orrlt.w	r2, r2, #2
 8003766:	9307      	strge	r3, [sp, #28]
 8003768:	9307      	strlt	r3, [sp, #28]
 800376a:	bfb8      	it	lt
 800376c:	9204      	strlt	r2, [sp, #16]
 800376e:	7823      	ldrb	r3, [r4, #0]
 8003770:	2b2e      	cmp	r3, #46	; 0x2e
 8003772:	d10c      	bne.n	800378e <_vfiprintf_r+0x176>
 8003774:	7863      	ldrb	r3, [r4, #1]
 8003776:	2b2a      	cmp	r3, #42	; 0x2a
 8003778:	d135      	bne.n	80037e6 <_vfiprintf_r+0x1ce>
 800377a:	9b03      	ldr	r3, [sp, #12]
 800377c:	3402      	adds	r4, #2
 800377e:	1d1a      	adds	r2, r3, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	9203      	str	r2, [sp, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	bfb8      	it	lt
 8003788:	f04f 33ff 	movlt.w	r3, #4294967295
 800378c:	9305      	str	r3, [sp, #20]
 800378e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003868 <_vfiprintf_r+0x250>
 8003792:	2203      	movs	r2, #3
 8003794:	4650      	mov	r0, sl
 8003796:	7821      	ldrb	r1, [r4, #0]
 8003798:	f000 fc70 	bl	800407c <memchr>
 800379c:	b140      	cbz	r0, 80037b0 <_vfiprintf_r+0x198>
 800379e:	2340      	movs	r3, #64	; 0x40
 80037a0:	eba0 000a 	sub.w	r0, r0, sl
 80037a4:	fa03 f000 	lsl.w	r0, r3, r0
 80037a8:	9b04      	ldr	r3, [sp, #16]
 80037aa:	3401      	adds	r4, #1
 80037ac:	4303      	orrs	r3, r0
 80037ae:	9304      	str	r3, [sp, #16]
 80037b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b4:	2206      	movs	r2, #6
 80037b6:	482d      	ldr	r0, [pc, #180]	; (800386c <_vfiprintf_r+0x254>)
 80037b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037bc:	f000 fc5e 	bl	800407c <memchr>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d03f      	beq.n	8003844 <_vfiprintf_r+0x22c>
 80037c4:	4b2a      	ldr	r3, [pc, #168]	; (8003870 <_vfiprintf_r+0x258>)
 80037c6:	bb1b      	cbnz	r3, 8003810 <_vfiprintf_r+0x1f8>
 80037c8:	9b03      	ldr	r3, [sp, #12]
 80037ca:	3307      	adds	r3, #7
 80037cc:	f023 0307 	bic.w	r3, r3, #7
 80037d0:	3308      	adds	r3, #8
 80037d2:	9303      	str	r3, [sp, #12]
 80037d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037d6:	443b      	add	r3, r7
 80037d8:	9309      	str	r3, [sp, #36]	; 0x24
 80037da:	e767      	b.n	80036ac <_vfiprintf_r+0x94>
 80037dc:	460c      	mov	r4, r1
 80037de:	2001      	movs	r0, #1
 80037e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80037e4:	e7a5      	b.n	8003732 <_vfiprintf_r+0x11a>
 80037e6:	2300      	movs	r3, #0
 80037e8:	f04f 0c0a 	mov.w	ip, #10
 80037ec:	4619      	mov	r1, r3
 80037ee:	3401      	adds	r4, #1
 80037f0:	9305      	str	r3, [sp, #20]
 80037f2:	4620      	mov	r0, r4
 80037f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037f8:	3a30      	subs	r2, #48	; 0x30
 80037fa:	2a09      	cmp	r2, #9
 80037fc:	d903      	bls.n	8003806 <_vfiprintf_r+0x1ee>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0c5      	beq.n	800378e <_vfiprintf_r+0x176>
 8003802:	9105      	str	r1, [sp, #20]
 8003804:	e7c3      	b.n	800378e <_vfiprintf_r+0x176>
 8003806:	4604      	mov	r4, r0
 8003808:	2301      	movs	r3, #1
 800380a:	fb0c 2101 	mla	r1, ip, r1, r2
 800380e:	e7f0      	b.n	80037f2 <_vfiprintf_r+0x1da>
 8003810:	ab03      	add	r3, sp, #12
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	462a      	mov	r2, r5
 8003816:	4630      	mov	r0, r6
 8003818:	4b16      	ldr	r3, [pc, #88]	; (8003874 <_vfiprintf_r+0x25c>)
 800381a:	a904      	add	r1, sp, #16
 800381c:	f3af 8000 	nop.w
 8003820:	4607      	mov	r7, r0
 8003822:	1c78      	adds	r0, r7, #1
 8003824:	d1d6      	bne.n	80037d4 <_vfiprintf_r+0x1bc>
 8003826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003828:	07d9      	lsls	r1, r3, #31
 800382a:	d405      	bmi.n	8003838 <_vfiprintf_r+0x220>
 800382c:	89ab      	ldrh	r3, [r5, #12]
 800382e:	059a      	lsls	r2, r3, #22
 8003830:	d402      	bmi.n	8003838 <_vfiprintf_r+0x220>
 8003832:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003834:	f7ff fe33 	bl	800349e <__retarget_lock_release_recursive>
 8003838:	89ab      	ldrh	r3, [r5, #12]
 800383a:	065b      	lsls	r3, r3, #25
 800383c:	f53f af12 	bmi.w	8003664 <_vfiprintf_r+0x4c>
 8003840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003842:	e711      	b.n	8003668 <_vfiprintf_r+0x50>
 8003844:	ab03      	add	r3, sp, #12
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	462a      	mov	r2, r5
 800384a:	4630      	mov	r0, r6
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <_vfiprintf_r+0x25c>)
 800384e:	a904      	add	r1, sp, #16
 8003850:	f000 f882 	bl	8003958 <_printf_i>
 8003854:	e7e4      	b.n	8003820 <_vfiprintf_r+0x208>
 8003856:	bf00      	nop
 8003858:	08004220 	.word	0x08004220
 800385c:	08004240 	.word	0x08004240
 8003860:	08004200 	.word	0x08004200
 8003864:	08004260 	.word	0x08004260
 8003868:	08004266 	.word	0x08004266
 800386c:	0800426a 	.word	0x0800426a
 8003870:	00000000 	.word	0x00000000
 8003874:	080035f3 	.word	0x080035f3

08003878 <_printf_common>:
 8003878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800387c:	4616      	mov	r6, r2
 800387e:	4699      	mov	r9, r3
 8003880:	688a      	ldr	r2, [r1, #8]
 8003882:	690b      	ldr	r3, [r1, #16]
 8003884:	4607      	mov	r7, r0
 8003886:	4293      	cmp	r3, r2
 8003888:	bfb8      	it	lt
 800388a:	4613      	movlt	r3, r2
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003892:	460c      	mov	r4, r1
 8003894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003898:	b10a      	cbz	r2, 800389e <_printf_common+0x26>
 800389a:	3301      	adds	r3, #1
 800389c:	6033      	str	r3, [r6, #0]
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	0699      	lsls	r1, r3, #26
 80038a2:	bf42      	ittt	mi
 80038a4:	6833      	ldrmi	r3, [r6, #0]
 80038a6:	3302      	addmi	r3, #2
 80038a8:	6033      	strmi	r3, [r6, #0]
 80038aa:	6825      	ldr	r5, [r4, #0]
 80038ac:	f015 0506 	ands.w	r5, r5, #6
 80038b0:	d106      	bne.n	80038c0 <_printf_common+0x48>
 80038b2:	f104 0a19 	add.w	sl, r4, #25
 80038b6:	68e3      	ldr	r3, [r4, #12]
 80038b8:	6832      	ldr	r2, [r6, #0]
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	42ab      	cmp	r3, r5
 80038be:	dc28      	bgt.n	8003912 <_printf_common+0x9a>
 80038c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038c4:	1e13      	subs	r3, r2, #0
 80038c6:	6822      	ldr	r2, [r4, #0]
 80038c8:	bf18      	it	ne
 80038ca:	2301      	movne	r3, #1
 80038cc:	0692      	lsls	r2, r2, #26
 80038ce:	d42d      	bmi.n	800392c <_printf_common+0xb4>
 80038d0:	4649      	mov	r1, r9
 80038d2:	4638      	mov	r0, r7
 80038d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038d8:	47c0      	blx	r8
 80038da:	3001      	adds	r0, #1
 80038dc:	d020      	beq.n	8003920 <_printf_common+0xa8>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	68e5      	ldr	r5, [r4, #12]
 80038e2:	f003 0306 	and.w	r3, r3, #6
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	bf18      	it	ne
 80038ea:	2500      	movne	r5, #0
 80038ec:	6832      	ldr	r2, [r6, #0]
 80038ee:	f04f 0600 	mov.w	r6, #0
 80038f2:	68a3      	ldr	r3, [r4, #8]
 80038f4:	bf08      	it	eq
 80038f6:	1aad      	subeq	r5, r5, r2
 80038f8:	6922      	ldr	r2, [r4, #16]
 80038fa:	bf08      	it	eq
 80038fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003900:	4293      	cmp	r3, r2
 8003902:	bfc4      	itt	gt
 8003904:	1a9b      	subgt	r3, r3, r2
 8003906:	18ed      	addgt	r5, r5, r3
 8003908:	341a      	adds	r4, #26
 800390a:	42b5      	cmp	r5, r6
 800390c:	d11a      	bne.n	8003944 <_printf_common+0xcc>
 800390e:	2000      	movs	r0, #0
 8003910:	e008      	b.n	8003924 <_printf_common+0xac>
 8003912:	2301      	movs	r3, #1
 8003914:	4652      	mov	r2, sl
 8003916:	4649      	mov	r1, r9
 8003918:	4638      	mov	r0, r7
 800391a:	47c0      	blx	r8
 800391c:	3001      	adds	r0, #1
 800391e:	d103      	bne.n	8003928 <_printf_common+0xb0>
 8003920:	f04f 30ff 	mov.w	r0, #4294967295
 8003924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003928:	3501      	adds	r5, #1
 800392a:	e7c4      	b.n	80038b6 <_printf_common+0x3e>
 800392c:	2030      	movs	r0, #48	; 0x30
 800392e:	18e1      	adds	r1, r4, r3
 8003930:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800393a:	4422      	add	r2, r4
 800393c:	3302      	adds	r3, #2
 800393e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003942:	e7c5      	b.n	80038d0 <_printf_common+0x58>
 8003944:	2301      	movs	r3, #1
 8003946:	4622      	mov	r2, r4
 8003948:	4649      	mov	r1, r9
 800394a:	4638      	mov	r0, r7
 800394c:	47c0      	blx	r8
 800394e:	3001      	adds	r0, #1
 8003950:	d0e6      	beq.n	8003920 <_printf_common+0xa8>
 8003952:	3601      	adds	r6, #1
 8003954:	e7d9      	b.n	800390a <_printf_common+0x92>
	...

08003958 <_printf_i>:
 8003958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800395c:	7e0f      	ldrb	r7, [r1, #24]
 800395e:	4691      	mov	r9, r2
 8003960:	2f78      	cmp	r7, #120	; 0x78
 8003962:	4680      	mov	r8, r0
 8003964:	460c      	mov	r4, r1
 8003966:	469a      	mov	sl, r3
 8003968:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800396a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800396e:	d807      	bhi.n	8003980 <_printf_i+0x28>
 8003970:	2f62      	cmp	r7, #98	; 0x62
 8003972:	d80a      	bhi.n	800398a <_printf_i+0x32>
 8003974:	2f00      	cmp	r7, #0
 8003976:	f000 80d9 	beq.w	8003b2c <_printf_i+0x1d4>
 800397a:	2f58      	cmp	r7, #88	; 0x58
 800397c:	f000 80a4 	beq.w	8003ac8 <_printf_i+0x170>
 8003980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003984:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003988:	e03a      	b.n	8003a00 <_printf_i+0xa8>
 800398a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800398e:	2b15      	cmp	r3, #21
 8003990:	d8f6      	bhi.n	8003980 <_printf_i+0x28>
 8003992:	a101      	add	r1, pc, #4	; (adr r1, 8003998 <_printf_i+0x40>)
 8003994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003998:	080039f1 	.word	0x080039f1
 800399c:	08003a05 	.word	0x08003a05
 80039a0:	08003981 	.word	0x08003981
 80039a4:	08003981 	.word	0x08003981
 80039a8:	08003981 	.word	0x08003981
 80039ac:	08003981 	.word	0x08003981
 80039b0:	08003a05 	.word	0x08003a05
 80039b4:	08003981 	.word	0x08003981
 80039b8:	08003981 	.word	0x08003981
 80039bc:	08003981 	.word	0x08003981
 80039c0:	08003981 	.word	0x08003981
 80039c4:	08003b13 	.word	0x08003b13
 80039c8:	08003a35 	.word	0x08003a35
 80039cc:	08003af5 	.word	0x08003af5
 80039d0:	08003981 	.word	0x08003981
 80039d4:	08003981 	.word	0x08003981
 80039d8:	08003b35 	.word	0x08003b35
 80039dc:	08003981 	.word	0x08003981
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003981 	.word	0x08003981
 80039e8:	08003981 	.word	0x08003981
 80039ec:	08003afd 	.word	0x08003afd
 80039f0:	682b      	ldr	r3, [r5, #0]
 80039f2:	1d1a      	adds	r2, r3, #4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	602a      	str	r2, [r5, #0]
 80039f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a00:	2301      	movs	r3, #1
 8003a02:	e0a4      	b.n	8003b4e <_printf_i+0x1f6>
 8003a04:	6820      	ldr	r0, [r4, #0]
 8003a06:	6829      	ldr	r1, [r5, #0]
 8003a08:	0606      	lsls	r6, r0, #24
 8003a0a:	f101 0304 	add.w	r3, r1, #4
 8003a0e:	d50a      	bpl.n	8003a26 <_printf_i+0xce>
 8003a10:	680e      	ldr	r6, [r1, #0]
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	2e00      	cmp	r6, #0
 8003a16:	da03      	bge.n	8003a20 <_printf_i+0xc8>
 8003a18:	232d      	movs	r3, #45	; 0x2d
 8003a1a:	4276      	negs	r6, r6
 8003a1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a20:	230a      	movs	r3, #10
 8003a22:	485e      	ldr	r0, [pc, #376]	; (8003b9c <_printf_i+0x244>)
 8003a24:	e019      	b.n	8003a5a <_printf_i+0x102>
 8003a26:	680e      	ldr	r6, [r1, #0]
 8003a28:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a2c:	602b      	str	r3, [r5, #0]
 8003a2e:	bf18      	it	ne
 8003a30:	b236      	sxthne	r6, r6
 8003a32:	e7ef      	b.n	8003a14 <_printf_i+0xbc>
 8003a34:	682b      	ldr	r3, [r5, #0]
 8003a36:	6820      	ldr	r0, [r4, #0]
 8003a38:	1d19      	adds	r1, r3, #4
 8003a3a:	6029      	str	r1, [r5, #0]
 8003a3c:	0601      	lsls	r1, r0, #24
 8003a3e:	d501      	bpl.n	8003a44 <_printf_i+0xec>
 8003a40:	681e      	ldr	r6, [r3, #0]
 8003a42:	e002      	b.n	8003a4a <_printf_i+0xf2>
 8003a44:	0646      	lsls	r6, r0, #25
 8003a46:	d5fb      	bpl.n	8003a40 <_printf_i+0xe8>
 8003a48:	881e      	ldrh	r6, [r3, #0]
 8003a4a:	2f6f      	cmp	r7, #111	; 0x6f
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2308      	moveq	r3, #8
 8003a50:	230a      	movne	r3, #10
 8003a52:	4852      	ldr	r0, [pc, #328]	; (8003b9c <_printf_i+0x244>)
 8003a54:	2100      	movs	r1, #0
 8003a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a5a:	6865      	ldr	r5, [r4, #4]
 8003a5c:	2d00      	cmp	r5, #0
 8003a5e:	bfa8      	it	ge
 8003a60:	6821      	ldrge	r1, [r4, #0]
 8003a62:	60a5      	str	r5, [r4, #8]
 8003a64:	bfa4      	itt	ge
 8003a66:	f021 0104 	bicge.w	r1, r1, #4
 8003a6a:	6021      	strge	r1, [r4, #0]
 8003a6c:	b90e      	cbnz	r6, 8003a72 <_printf_i+0x11a>
 8003a6e:	2d00      	cmp	r5, #0
 8003a70:	d04d      	beq.n	8003b0e <_printf_i+0x1b6>
 8003a72:	4615      	mov	r5, r2
 8003a74:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a78:	fb03 6711 	mls	r7, r3, r1, r6
 8003a7c:	5dc7      	ldrb	r7, [r0, r7]
 8003a7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a82:	4637      	mov	r7, r6
 8003a84:	42bb      	cmp	r3, r7
 8003a86:	460e      	mov	r6, r1
 8003a88:	d9f4      	bls.n	8003a74 <_printf_i+0x11c>
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d10b      	bne.n	8003aa6 <_printf_i+0x14e>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	07de      	lsls	r6, r3, #31
 8003a92:	d508      	bpl.n	8003aa6 <_printf_i+0x14e>
 8003a94:	6923      	ldr	r3, [r4, #16]
 8003a96:	6861      	ldr	r1, [r4, #4]
 8003a98:	4299      	cmp	r1, r3
 8003a9a:	bfde      	ittt	le
 8003a9c:	2330      	movle	r3, #48	; 0x30
 8003a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003aa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003aa6:	1b52      	subs	r2, r2, r5
 8003aa8:	6122      	str	r2, [r4, #16]
 8003aaa:	464b      	mov	r3, r9
 8003aac:	4621      	mov	r1, r4
 8003aae:	4640      	mov	r0, r8
 8003ab0:	f8cd a000 	str.w	sl, [sp]
 8003ab4:	aa03      	add	r2, sp, #12
 8003ab6:	f7ff fedf 	bl	8003878 <_printf_common>
 8003aba:	3001      	adds	r0, #1
 8003abc:	d14c      	bne.n	8003b58 <_printf_i+0x200>
 8003abe:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac2:	b004      	add	sp, #16
 8003ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ac8:	4834      	ldr	r0, [pc, #208]	; (8003b9c <_printf_i+0x244>)
 8003aca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003ace:	6829      	ldr	r1, [r5, #0]
 8003ad0:	6823      	ldr	r3, [r4, #0]
 8003ad2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ad6:	6029      	str	r1, [r5, #0]
 8003ad8:	061d      	lsls	r5, r3, #24
 8003ada:	d514      	bpl.n	8003b06 <_printf_i+0x1ae>
 8003adc:	07df      	lsls	r7, r3, #31
 8003ade:	bf44      	itt	mi
 8003ae0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ae4:	6023      	strmi	r3, [r4, #0]
 8003ae6:	b91e      	cbnz	r6, 8003af0 <_printf_i+0x198>
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	6023      	str	r3, [r4, #0]
 8003af0:	2310      	movs	r3, #16
 8003af2:	e7af      	b.n	8003a54 <_printf_i+0xfc>
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	f043 0320 	orr.w	r3, r3, #32
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	2378      	movs	r3, #120	; 0x78
 8003afe:	4828      	ldr	r0, [pc, #160]	; (8003ba0 <_printf_i+0x248>)
 8003b00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b04:	e7e3      	b.n	8003ace <_printf_i+0x176>
 8003b06:	0659      	lsls	r1, r3, #25
 8003b08:	bf48      	it	mi
 8003b0a:	b2b6      	uxthmi	r6, r6
 8003b0c:	e7e6      	b.n	8003adc <_printf_i+0x184>
 8003b0e:	4615      	mov	r5, r2
 8003b10:	e7bb      	b.n	8003a8a <_printf_i+0x132>
 8003b12:	682b      	ldr	r3, [r5, #0]
 8003b14:	6826      	ldr	r6, [r4, #0]
 8003b16:	1d18      	adds	r0, r3, #4
 8003b18:	6961      	ldr	r1, [r4, #20]
 8003b1a:	6028      	str	r0, [r5, #0]
 8003b1c:	0635      	lsls	r5, r6, #24
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	d501      	bpl.n	8003b26 <_printf_i+0x1ce>
 8003b22:	6019      	str	r1, [r3, #0]
 8003b24:	e002      	b.n	8003b2c <_printf_i+0x1d4>
 8003b26:	0670      	lsls	r0, r6, #25
 8003b28:	d5fb      	bpl.n	8003b22 <_printf_i+0x1ca>
 8003b2a:	8019      	strh	r1, [r3, #0]
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	4615      	mov	r5, r2
 8003b30:	6123      	str	r3, [r4, #16]
 8003b32:	e7ba      	b.n	8003aaa <_printf_i+0x152>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	2100      	movs	r1, #0
 8003b38:	1d1a      	adds	r2, r3, #4
 8003b3a:	602a      	str	r2, [r5, #0]
 8003b3c:	681d      	ldr	r5, [r3, #0]
 8003b3e:	6862      	ldr	r2, [r4, #4]
 8003b40:	4628      	mov	r0, r5
 8003b42:	f000 fa9b 	bl	800407c <memchr>
 8003b46:	b108      	cbz	r0, 8003b4c <_printf_i+0x1f4>
 8003b48:	1b40      	subs	r0, r0, r5
 8003b4a:	6060      	str	r0, [r4, #4]
 8003b4c:	6863      	ldr	r3, [r4, #4]
 8003b4e:	6123      	str	r3, [r4, #16]
 8003b50:	2300      	movs	r3, #0
 8003b52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b56:	e7a8      	b.n	8003aaa <_printf_i+0x152>
 8003b58:	462a      	mov	r2, r5
 8003b5a:	4649      	mov	r1, r9
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	6923      	ldr	r3, [r4, #16]
 8003b60:	47d0      	blx	sl
 8003b62:	3001      	adds	r0, #1
 8003b64:	d0ab      	beq.n	8003abe <_printf_i+0x166>
 8003b66:	6823      	ldr	r3, [r4, #0]
 8003b68:	079b      	lsls	r3, r3, #30
 8003b6a:	d413      	bmi.n	8003b94 <_printf_i+0x23c>
 8003b6c:	68e0      	ldr	r0, [r4, #12]
 8003b6e:	9b03      	ldr	r3, [sp, #12]
 8003b70:	4298      	cmp	r0, r3
 8003b72:	bfb8      	it	lt
 8003b74:	4618      	movlt	r0, r3
 8003b76:	e7a4      	b.n	8003ac2 <_printf_i+0x16a>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	4632      	mov	r2, r6
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	4640      	mov	r0, r8
 8003b80:	47d0      	blx	sl
 8003b82:	3001      	adds	r0, #1
 8003b84:	d09b      	beq.n	8003abe <_printf_i+0x166>
 8003b86:	3501      	adds	r5, #1
 8003b88:	68e3      	ldr	r3, [r4, #12]
 8003b8a:	9903      	ldr	r1, [sp, #12]
 8003b8c:	1a5b      	subs	r3, r3, r1
 8003b8e:	42ab      	cmp	r3, r5
 8003b90:	dcf2      	bgt.n	8003b78 <_printf_i+0x220>
 8003b92:	e7eb      	b.n	8003b6c <_printf_i+0x214>
 8003b94:	2500      	movs	r5, #0
 8003b96:	f104 0619 	add.w	r6, r4, #25
 8003b9a:	e7f5      	b.n	8003b88 <_printf_i+0x230>
 8003b9c:	08004271 	.word	0x08004271
 8003ba0:	08004282 	.word	0x08004282

08003ba4 <_sbrk_r>:
 8003ba4:	b538      	push	{r3, r4, r5, lr}
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	4d05      	ldr	r5, [pc, #20]	; (8003bc0 <_sbrk_r+0x1c>)
 8003baa:	4604      	mov	r4, r0
 8003bac:	4608      	mov	r0, r1
 8003bae:	602b      	str	r3, [r5, #0]
 8003bb0:	f7fc ffb4 	bl	8000b1c <_sbrk>
 8003bb4:	1c43      	adds	r3, r0, #1
 8003bb6:	d102      	bne.n	8003bbe <_sbrk_r+0x1a>
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	b103      	cbz	r3, 8003bbe <_sbrk_r+0x1a>
 8003bbc:	6023      	str	r3, [r4, #0]
 8003bbe:	bd38      	pop	{r3, r4, r5, pc}
 8003bc0:	200041a8 	.word	0x200041a8

08003bc4 <__sread>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bcc:	f000 fab8 	bl	8004140 <_read_r>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	bfab      	itete	ge
 8003bd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003bd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003bd8:	181b      	addge	r3, r3, r0
 8003bda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bde:	bfac      	ite	ge
 8003be0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003be2:	81a3      	strhlt	r3, [r4, #12]
 8003be4:	bd10      	pop	{r4, pc}

08003be6 <__swrite>:
 8003be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bea:	461f      	mov	r7, r3
 8003bec:	898b      	ldrh	r3, [r1, #12]
 8003bee:	4605      	mov	r5, r0
 8003bf0:	05db      	lsls	r3, r3, #23
 8003bf2:	460c      	mov	r4, r1
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	d505      	bpl.n	8003c04 <__swrite+0x1e>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c00:	f000 f9c4 	bl	8003f8c <_lseek_r>
 8003c04:	89a3      	ldrh	r3, [r4, #12]
 8003c06:	4632      	mov	r2, r6
 8003c08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c0c:	81a3      	strh	r3, [r4, #12]
 8003c0e:	4628      	mov	r0, r5
 8003c10:	463b      	mov	r3, r7
 8003c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c1a:	f000 b869 	b.w	8003cf0 <_write_r>

08003c1e <__sseek>:
 8003c1e:	b510      	push	{r4, lr}
 8003c20:	460c      	mov	r4, r1
 8003c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c26:	f000 f9b1 	bl	8003f8c <_lseek_r>
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	89a3      	ldrh	r3, [r4, #12]
 8003c2e:	bf15      	itete	ne
 8003c30:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c3a:	81a3      	strheq	r3, [r4, #12]
 8003c3c:	bf18      	it	ne
 8003c3e:	81a3      	strhne	r3, [r4, #12]
 8003c40:	bd10      	pop	{r4, pc}

08003c42 <__sclose>:
 8003c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c46:	f000 b8d3 	b.w	8003df0 <_close_r>
	...

08003c4c <__swbuf_r>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	460e      	mov	r6, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	4605      	mov	r5, r0
 8003c54:	b118      	cbz	r0, 8003c5e <__swbuf_r+0x12>
 8003c56:	6983      	ldr	r3, [r0, #24]
 8003c58:	b90b      	cbnz	r3, 8003c5e <__swbuf_r+0x12>
 8003c5a:	f7ff fb81 	bl	8003360 <__sinit>
 8003c5e:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <__swbuf_r+0x98>)
 8003c60:	429c      	cmp	r4, r3
 8003c62:	d12b      	bne.n	8003cbc <__swbuf_r+0x70>
 8003c64:	686c      	ldr	r4, [r5, #4]
 8003c66:	69a3      	ldr	r3, [r4, #24]
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	89a3      	ldrh	r3, [r4, #12]
 8003c6c:	071a      	lsls	r2, r3, #28
 8003c6e:	d52f      	bpl.n	8003cd0 <__swbuf_r+0x84>
 8003c70:	6923      	ldr	r3, [r4, #16]
 8003c72:	b36b      	cbz	r3, 8003cd0 <__swbuf_r+0x84>
 8003c74:	6923      	ldr	r3, [r4, #16]
 8003c76:	6820      	ldr	r0, [r4, #0]
 8003c78:	b2f6      	uxtb	r6, r6
 8003c7a:	1ac0      	subs	r0, r0, r3
 8003c7c:	6963      	ldr	r3, [r4, #20]
 8003c7e:	4637      	mov	r7, r6
 8003c80:	4283      	cmp	r3, r0
 8003c82:	dc04      	bgt.n	8003c8e <__swbuf_r+0x42>
 8003c84:	4621      	mov	r1, r4
 8003c86:	4628      	mov	r0, r5
 8003c88:	f000 f944 	bl	8003f14 <_fflush_r>
 8003c8c:	bb30      	cbnz	r0, 8003cdc <__swbuf_r+0x90>
 8003c8e:	68a3      	ldr	r3, [r4, #8]
 8003c90:	3001      	adds	r0, #1
 8003c92:	3b01      	subs	r3, #1
 8003c94:	60a3      	str	r3, [r4, #8]
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	6022      	str	r2, [r4, #0]
 8003c9c:	701e      	strb	r6, [r3, #0]
 8003c9e:	6963      	ldr	r3, [r4, #20]
 8003ca0:	4283      	cmp	r3, r0
 8003ca2:	d004      	beq.n	8003cae <__swbuf_r+0x62>
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	07db      	lsls	r3, r3, #31
 8003ca8:	d506      	bpl.n	8003cb8 <__swbuf_r+0x6c>
 8003caa:	2e0a      	cmp	r6, #10
 8003cac:	d104      	bne.n	8003cb8 <__swbuf_r+0x6c>
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f000 f92f 	bl	8003f14 <_fflush_r>
 8003cb6:	b988      	cbnz	r0, 8003cdc <__swbuf_r+0x90>
 8003cb8:	4638      	mov	r0, r7
 8003cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <__swbuf_r+0x9c>)
 8003cbe:	429c      	cmp	r4, r3
 8003cc0:	d101      	bne.n	8003cc6 <__swbuf_r+0x7a>
 8003cc2:	68ac      	ldr	r4, [r5, #8]
 8003cc4:	e7cf      	b.n	8003c66 <__swbuf_r+0x1a>
 8003cc6:	4b09      	ldr	r3, [pc, #36]	; (8003cec <__swbuf_r+0xa0>)
 8003cc8:	429c      	cmp	r4, r3
 8003cca:	bf08      	it	eq
 8003ccc:	68ec      	ldreq	r4, [r5, #12]
 8003cce:	e7ca      	b.n	8003c66 <__swbuf_r+0x1a>
 8003cd0:	4621      	mov	r1, r4
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 f81e 	bl	8003d14 <__swsetup_r>
 8003cd8:	2800      	cmp	r0, #0
 8003cda:	d0cb      	beq.n	8003c74 <__swbuf_r+0x28>
 8003cdc:	f04f 37ff 	mov.w	r7, #4294967295
 8003ce0:	e7ea      	b.n	8003cb8 <__swbuf_r+0x6c>
 8003ce2:	bf00      	nop
 8003ce4:	08004220 	.word	0x08004220
 8003ce8:	08004240 	.word	0x08004240
 8003cec:	08004200 	.word	0x08004200

08003cf0 <_write_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	4d05      	ldr	r5, [pc, #20]	; (8003d10 <_write_r+0x20>)
 8003cfc:	602a      	str	r2, [r5, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f7fc febf 	bl	8000a82 <_write>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_write_r+0x1e>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_write_r+0x1e>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	200041a8 	.word	0x200041a8

08003d14 <__swsetup_r>:
 8003d14:	4b32      	ldr	r3, [pc, #200]	; (8003de0 <__swsetup_r+0xcc>)
 8003d16:	b570      	push	{r4, r5, r6, lr}
 8003d18:	681d      	ldr	r5, [r3, #0]
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	460c      	mov	r4, r1
 8003d1e:	b125      	cbz	r5, 8003d2a <__swsetup_r+0x16>
 8003d20:	69ab      	ldr	r3, [r5, #24]
 8003d22:	b913      	cbnz	r3, 8003d2a <__swsetup_r+0x16>
 8003d24:	4628      	mov	r0, r5
 8003d26:	f7ff fb1b 	bl	8003360 <__sinit>
 8003d2a:	4b2e      	ldr	r3, [pc, #184]	; (8003de4 <__swsetup_r+0xd0>)
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	d10f      	bne.n	8003d50 <__swsetup_r+0x3c>
 8003d30:	686c      	ldr	r4, [r5, #4]
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003d38:	0719      	lsls	r1, r3, #28
 8003d3a:	d42c      	bmi.n	8003d96 <__swsetup_r+0x82>
 8003d3c:	06dd      	lsls	r5, r3, #27
 8003d3e:	d411      	bmi.n	8003d64 <__swsetup_r+0x50>
 8003d40:	2309      	movs	r3, #9
 8003d42:	6033      	str	r3, [r6, #0]
 8003d44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003d48:	f04f 30ff 	mov.w	r0, #4294967295
 8003d4c:	81a3      	strh	r3, [r4, #12]
 8003d4e:	e03e      	b.n	8003dce <__swsetup_r+0xba>
 8003d50:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <__swsetup_r+0xd4>)
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d101      	bne.n	8003d5a <__swsetup_r+0x46>
 8003d56:	68ac      	ldr	r4, [r5, #8]
 8003d58:	e7eb      	b.n	8003d32 <__swsetup_r+0x1e>
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <__swsetup_r+0xd8>)
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	bf08      	it	eq
 8003d60:	68ec      	ldreq	r4, [r5, #12]
 8003d62:	e7e6      	b.n	8003d32 <__swsetup_r+0x1e>
 8003d64:	0758      	lsls	r0, r3, #29
 8003d66:	d512      	bpl.n	8003d8e <__swsetup_r+0x7a>
 8003d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d6a:	b141      	cbz	r1, 8003d7e <__swsetup_r+0x6a>
 8003d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003d70:	4299      	cmp	r1, r3
 8003d72:	d002      	beq.n	8003d7a <__swsetup_r+0x66>
 8003d74:	4630      	mov	r0, r6
 8003d76:	f000 f99b 	bl	80040b0 <_free_r>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6363      	str	r3, [r4, #52]	; 0x34
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d84:	81a3      	strh	r3, [r4, #12]
 8003d86:	2300      	movs	r3, #0
 8003d88:	6063      	str	r3, [r4, #4]
 8003d8a:	6923      	ldr	r3, [r4, #16]
 8003d8c:	6023      	str	r3, [r4, #0]
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	f043 0308 	orr.w	r3, r3, #8
 8003d94:	81a3      	strh	r3, [r4, #12]
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	b94b      	cbnz	r3, 8003dae <__swsetup_r+0x9a>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da4:	d003      	beq.n	8003dae <__swsetup_r+0x9a>
 8003da6:	4621      	mov	r1, r4
 8003da8:	4630      	mov	r0, r6
 8003daa:	f000 f927 	bl	8003ffc <__smakebuf_r>
 8003dae:	89a0      	ldrh	r0, [r4, #12]
 8003db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003db4:	f010 0301 	ands.w	r3, r0, #1
 8003db8:	d00a      	beq.n	8003dd0 <__swsetup_r+0xbc>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60a3      	str	r3, [r4, #8]
 8003dbe:	6963      	ldr	r3, [r4, #20]
 8003dc0:	425b      	negs	r3, r3
 8003dc2:	61a3      	str	r3, [r4, #24]
 8003dc4:	6923      	ldr	r3, [r4, #16]
 8003dc6:	b943      	cbnz	r3, 8003dda <__swsetup_r+0xc6>
 8003dc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003dcc:	d1ba      	bne.n	8003d44 <__swsetup_r+0x30>
 8003dce:	bd70      	pop	{r4, r5, r6, pc}
 8003dd0:	0781      	lsls	r1, r0, #30
 8003dd2:	bf58      	it	pl
 8003dd4:	6963      	ldrpl	r3, [r4, #20]
 8003dd6:	60a3      	str	r3, [r4, #8]
 8003dd8:	e7f4      	b.n	8003dc4 <__swsetup_r+0xb0>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	e7f7      	b.n	8003dce <__swsetup_r+0xba>
 8003dde:	bf00      	nop
 8003de0:	20000010 	.word	0x20000010
 8003de4:	08004220 	.word	0x08004220
 8003de8:	08004240 	.word	0x08004240
 8003dec:	08004200 	.word	0x08004200

08003df0 <_close_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	2300      	movs	r3, #0
 8003df4:	4d05      	ldr	r5, [pc, #20]	; (8003e0c <_close_r+0x1c>)
 8003df6:	4604      	mov	r4, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	602b      	str	r3, [r5, #0]
 8003dfc:	f7fc fe5d 	bl	8000aba <_close>
 8003e00:	1c43      	adds	r3, r0, #1
 8003e02:	d102      	bne.n	8003e0a <_close_r+0x1a>
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	b103      	cbz	r3, 8003e0a <_close_r+0x1a>
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	bd38      	pop	{r3, r4, r5, pc}
 8003e0c:	200041a8 	.word	0x200041a8

08003e10 <__sflush_r>:
 8003e10:	898a      	ldrh	r2, [r1, #12]
 8003e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e14:	4605      	mov	r5, r0
 8003e16:	0710      	lsls	r0, r2, #28
 8003e18:	460c      	mov	r4, r1
 8003e1a:	d457      	bmi.n	8003ecc <__sflush_r+0xbc>
 8003e1c:	684b      	ldr	r3, [r1, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	dc04      	bgt.n	8003e2c <__sflush_r+0x1c>
 8003e22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	dc01      	bgt.n	8003e2c <__sflush_r+0x1c>
 8003e28:	2000      	movs	r0, #0
 8003e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	d0fa      	beq.n	8003e28 <__sflush_r+0x18>
 8003e32:	2300      	movs	r3, #0
 8003e34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e38:	682f      	ldr	r7, [r5, #0]
 8003e3a:	602b      	str	r3, [r5, #0]
 8003e3c:	d032      	beq.n	8003ea4 <__sflush_r+0x94>
 8003e3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	075a      	lsls	r2, r3, #29
 8003e44:	d505      	bpl.n	8003e52 <__sflush_r+0x42>
 8003e46:	6863      	ldr	r3, [r4, #4]
 8003e48:	1ac0      	subs	r0, r0, r3
 8003e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e4c:	b10b      	cbz	r3, 8003e52 <__sflush_r+0x42>
 8003e4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e50:	1ac0      	subs	r0, r0, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	4602      	mov	r2, r0
 8003e56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e58:	4628      	mov	r0, r5
 8003e5a:	6a21      	ldr	r1, [r4, #32]
 8003e5c:	47b0      	blx	r6
 8003e5e:	1c43      	adds	r3, r0, #1
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	d106      	bne.n	8003e72 <__sflush_r+0x62>
 8003e64:	6829      	ldr	r1, [r5, #0]
 8003e66:	291d      	cmp	r1, #29
 8003e68:	d82c      	bhi.n	8003ec4 <__sflush_r+0xb4>
 8003e6a:	4a29      	ldr	r2, [pc, #164]	; (8003f10 <__sflush_r+0x100>)
 8003e6c:	40ca      	lsrs	r2, r1
 8003e6e:	07d6      	lsls	r6, r2, #31
 8003e70:	d528      	bpl.n	8003ec4 <__sflush_r+0xb4>
 8003e72:	2200      	movs	r2, #0
 8003e74:	6062      	str	r2, [r4, #4]
 8003e76:	6922      	ldr	r2, [r4, #16]
 8003e78:	04d9      	lsls	r1, r3, #19
 8003e7a:	6022      	str	r2, [r4, #0]
 8003e7c:	d504      	bpl.n	8003e88 <__sflush_r+0x78>
 8003e7e:	1c42      	adds	r2, r0, #1
 8003e80:	d101      	bne.n	8003e86 <__sflush_r+0x76>
 8003e82:	682b      	ldr	r3, [r5, #0]
 8003e84:	b903      	cbnz	r3, 8003e88 <__sflush_r+0x78>
 8003e86:	6560      	str	r0, [r4, #84]	; 0x54
 8003e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e8a:	602f      	str	r7, [r5, #0]
 8003e8c:	2900      	cmp	r1, #0
 8003e8e:	d0cb      	beq.n	8003e28 <__sflush_r+0x18>
 8003e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e94:	4299      	cmp	r1, r3
 8003e96:	d002      	beq.n	8003e9e <__sflush_r+0x8e>
 8003e98:	4628      	mov	r0, r5
 8003e9a:	f000 f909 	bl	80040b0 <_free_r>
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	6360      	str	r0, [r4, #52]	; 0x34
 8003ea2:	e7c2      	b.n	8003e2a <__sflush_r+0x1a>
 8003ea4:	6a21      	ldr	r1, [r4, #32]
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	4628      	mov	r0, r5
 8003eaa:	47b0      	blx	r6
 8003eac:	1c41      	adds	r1, r0, #1
 8003eae:	d1c7      	bne.n	8003e40 <__sflush_r+0x30>
 8003eb0:	682b      	ldr	r3, [r5, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d0c4      	beq.n	8003e40 <__sflush_r+0x30>
 8003eb6:	2b1d      	cmp	r3, #29
 8003eb8:	d001      	beq.n	8003ebe <__sflush_r+0xae>
 8003eba:	2b16      	cmp	r3, #22
 8003ebc:	d101      	bne.n	8003ec2 <__sflush_r+0xb2>
 8003ebe:	602f      	str	r7, [r5, #0]
 8003ec0:	e7b2      	b.n	8003e28 <__sflush_r+0x18>
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	e7ae      	b.n	8003e2a <__sflush_r+0x1a>
 8003ecc:	690f      	ldr	r7, [r1, #16]
 8003ece:	2f00      	cmp	r7, #0
 8003ed0:	d0aa      	beq.n	8003e28 <__sflush_r+0x18>
 8003ed2:	0793      	lsls	r3, r2, #30
 8003ed4:	bf18      	it	ne
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	680e      	ldr	r6, [r1, #0]
 8003eda:	bf08      	it	eq
 8003edc:	694b      	ldreq	r3, [r1, #20]
 8003ede:	1bf6      	subs	r6, r6, r7
 8003ee0:	600f      	str	r7, [r1, #0]
 8003ee2:	608b      	str	r3, [r1, #8]
 8003ee4:	2e00      	cmp	r6, #0
 8003ee6:	dd9f      	ble.n	8003e28 <__sflush_r+0x18>
 8003ee8:	4633      	mov	r3, r6
 8003eea:	463a      	mov	r2, r7
 8003eec:	4628      	mov	r0, r5
 8003eee:	6a21      	ldr	r1, [r4, #32]
 8003ef0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003ef4:	47e0      	blx	ip
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	dc06      	bgt.n	8003f08 <__sflush_r+0xf8>
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	f04f 30ff 	mov.w	r0, #4294967295
 8003f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	e790      	b.n	8003e2a <__sflush_r+0x1a>
 8003f08:	4407      	add	r7, r0
 8003f0a:	1a36      	subs	r6, r6, r0
 8003f0c:	e7ea      	b.n	8003ee4 <__sflush_r+0xd4>
 8003f0e:	bf00      	nop
 8003f10:	20400001 	.word	0x20400001

08003f14 <_fflush_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	690b      	ldr	r3, [r1, #16]
 8003f18:	4605      	mov	r5, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	b913      	cbnz	r3, 8003f24 <_fflush_r+0x10>
 8003f1e:	2500      	movs	r5, #0
 8003f20:	4628      	mov	r0, r5
 8003f22:	bd38      	pop	{r3, r4, r5, pc}
 8003f24:	b118      	cbz	r0, 8003f2e <_fflush_r+0x1a>
 8003f26:	6983      	ldr	r3, [r0, #24]
 8003f28:	b90b      	cbnz	r3, 8003f2e <_fflush_r+0x1a>
 8003f2a:	f7ff fa19 	bl	8003360 <__sinit>
 8003f2e:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <_fflush_r+0x6c>)
 8003f30:	429c      	cmp	r4, r3
 8003f32:	d11b      	bne.n	8003f6c <_fflush_r+0x58>
 8003f34:	686c      	ldr	r4, [r5, #4]
 8003f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ef      	beq.n	8003f1e <_fflush_r+0xa>
 8003f3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f40:	07d0      	lsls	r0, r2, #31
 8003f42:	d404      	bmi.n	8003f4e <_fflush_r+0x3a>
 8003f44:	0599      	lsls	r1, r3, #22
 8003f46:	d402      	bmi.n	8003f4e <_fflush_r+0x3a>
 8003f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f4a:	f7ff faa7 	bl	800349c <__retarget_lock_acquire_recursive>
 8003f4e:	4628      	mov	r0, r5
 8003f50:	4621      	mov	r1, r4
 8003f52:	f7ff ff5d 	bl	8003e10 <__sflush_r>
 8003f56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f58:	4605      	mov	r5, r0
 8003f5a:	07da      	lsls	r2, r3, #31
 8003f5c:	d4e0      	bmi.n	8003f20 <_fflush_r+0xc>
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	059b      	lsls	r3, r3, #22
 8003f62:	d4dd      	bmi.n	8003f20 <_fflush_r+0xc>
 8003f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f66:	f7ff fa9a 	bl	800349e <__retarget_lock_release_recursive>
 8003f6a:	e7d9      	b.n	8003f20 <_fflush_r+0xc>
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <_fflush_r+0x70>)
 8003f6e:	429c      	cmp	r4, r3
 8003f70:	d101      	bne.n	8003f76 <_fflush_r+0x62>
 8003f72:	68ac      	ldr	r4, [r5, #8]
 8003f74:	e7df      	b.n	8003f36 <_fflush_r+0x22>
 8003f76:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <_fflush_r+0x74>)
 8003f78:	429c      	cmp	r4, r3
 8003f7a:	bf08      	it	eq
 8003f7c:	68ec      	ldreq	r4, [r5, #12]
 8003f7e:	e7da      	b.n	8003f36 <_fflush_r+0x22>
 8003f80:	08004220 	.word	0x08004220
 8003f84:	08004240 	.word	0x08004240
 8003f88:	08004200 	.word	0x08004200

08003f8c <_lseek_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4604      	mov	r4, r0
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	2200      	movs	r2, #0
 8003f96:	4d05      	ldr	r5, [pc, #20]	; (8003fac <_lseek_r+0x20>)
 8003f98:	602a      	str	r2, [r5, #0]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	f7fc fdb1 	bl	8000b02 <_lseek>
 8003fa0:	1c43      	adds	r3, r0, #1
 8003fa2:	d102      	bne.n	8003faa <_lseek_r+0x1e>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	b103      	cbz	r3, 8003faa <_lseek_r+0x1e>
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	bd38      	pop	{r3, r4, r5, pc}
 8003fac:	200041a8 	.word	0x200041a8

08003fb0 <__swhatbuf_r>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	460e      	mov	r6, r1
 8003fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb8:	4614      	mov	r4, r2
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	461d      	mov	r5, r3
 8003fbe:	b096      	sub	sp, #88	; 0x58
 8003fc0:	da08      	bge.n	8003fd4 <__swhatbuf_r+0x24>
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003fc8:	602a      	str	r2, [r5, #0]
 8003fca:	061a      	lsls	r2, r3, #24
 8003fcc:	d410      	bmi.n	8003ff0 <__swhatbuf_r+0x40>
 8003fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fd2:	e00e      	b.n	8003ff2 <__swhatbuf_r+0x42>
 8003fd4:	466a      	mov	r2, sp
 8003fd6:	f000 f8c5 	bl	8004164 <_fstat_r>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	dbf1      	blt.n	8003fc2 <__swhatbuf_r+0x12>
 8003fde:	9a01      	ldr	r2, [sp, #4]
 8003fe0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003fe4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003fe8:	425a      	negs	r2, r3
 8003fea:	415a      	adcs	r2, r3
 8003fec:	602a      	str	r2, [r5, #0]
 8003fee:	e7ee      	b.n	8003fce <__swhatbuf_r+0x1e>
 8003ff0:	2340      	movs	r3, #64	; 0x40
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	b016      	add	sp, #88	; 0x58
 8003ff8:	bd70      	pop	{r4, r5, r6, pc}
	...

08003ffc <__smakebuf_r>:
 8003ffc:	898b      	ldrh	r3, [r1, #12]
 8003ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004000:	079d      	lsls	r5, r3, #30
 8004002:	4606      	mov	r6, r0
 8004004:	460c      	mov	r4, r1
 8004006:	d507      	bpl.n	8004018 <__smakebuf_r+0x1c>
 8004008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800400c:	6023      	str	r3, [r4, #0]
 800400e:	6123      	str	r3, [r4, #16]
 8004010:	2301      	movs	r3, #1
 8004012:	6163      	str	r3, [r4, #20]
 8004014:	b002      	add	sp, #8
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	466a      	mov	r2, sp
 800401a:	ab01      	add	r3, sp, #4
 800401c:	f7ff ffc8 	bl	8003fb0 <__swhatbuf_r>
 8004020:	9900      	ldr	r1, [sp, #0]
 8004022:	4605      	mov	r5, r0
 8004024:	4630      	mov	r0, r6
 8004026:	f7ff fa5b 	bl	80034e0 <_malloc_r>
 800402a:	b948      	cbnz	r0, 8004040 <__smakebuf_r+0x44>
 800402c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004030:	059a      	lsls	r2, r3, #22
 8004032:	d4ef      	bmi.n	8004014 <__smakebuf_r+0x18>
 8004034:	f023 0303 	bic.w	r3, r3, #3
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	81a3      	strh	r3, [r4, #12]
 800403e:	e7e3      	b.n	8004008 <__smakebuf_r+0xc>
 8004040:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <__smakebuf_r+0x7c>)
 8004042:	62b3      	str	r3, [r6, #40]	; 0x28
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	6020      	str	r0, [r4, #0]
 8004048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800404c:	81a3      	strh	r3, [r4, #12]
 800404e:	9b00      	ldr	r3, [sp, #0]
 8004050:	6120      	str	r0, [r4, #16]
 8004052:	6163      	str	r3, [r4, #20]
 8004054:	9b01      	ldr	r3, [sp, #4]
 8004056:	b15b      	cbz	r3, 8004070 <__smakebuf_r+0x74>
 8004058:	4630      	mov	r0, r6
 800405a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800405e:	f000 f893 	bl	8004188 <_isatty_r>
 8004062:	b128      	cbz	r0, 8004070 <__smakebuf_r+0x74>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	81a3      	strh	r3, [r4, #12]
 8004070:	89a0      	ldrh	r0, [r4, #12]
 8004072:	4305      	orrs	r5, r0
 8004074:	81a5      	strh	r5, [r4, #12]
 8004076:	e7cd      	b.n	8004014 <__smakebuf_r+0x18>
 8004078:	080032f9 	.word	0x080032f9

0800407c <memchr>:
 800407c:	4603      	mov	r3, r0
 800407e:	b510      	push	{r4, lr}
 8004080:	b2c9      	uxtb	r1, r1
 8004082:	4402      	add	r2, r0
 8004084:	4293      	cmp	r3, r2
 8004086:	4618      	mov	r0, r3
 8004088:	d101      	bne.n	800408e <memchr+0x12>
 800408a:	2000      	movs	r0, #0
 800408c:	e003      	b.n	8004096 <memchr+0x1a>
 800408e:	7804      	ldrb	r4, [r0, #0]
 8004090:	3301      	adds	r3, #1
 8004092:	428c      	cmp	r4, r1
 8004094:	d1f6      	bne.n	8004084 <memchr+0x8>
 8004096:	bd10      	pop	{r4, pc}

08004098 <__malloc_lock>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__malloc_lock+0x8>)
 800409a:	f7ff b9ff 	b.w	800349c <__retarget_lock_acquire_recursive>
 800409e:	bf00      	nop
 80040a0:	2000419c 	.word	0x2000419c

080040a4 <__malloc_unlock>:
 80040a4:	4801      	ldr	r0, [pc, #4]	; (80040ac <__malloc_unlock+0x8>)
 80040a6:	f7ff b9fa 	b.w	800349e <__retarget_lock_release_recursive>
 80040aa:	bf00      	nop
 80040ac:	2000419c 	.word	0x2000419c

080040b0 <_free_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	4605      	mov	r5, r0
 80040b4:	2900      	cmp	r1, #0
 80040b6:	d040      	beq.n	800413a <_free_r+0x8a>
 80040b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040bc:	1f0c      	subs	r4, r1, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bfb8      	it	lt
 80040c2:	18e4      	addlt	r4, r4, r3
 80040c4:	f7ff ffe8 	bl	8004098 <__malloc_lock>
 80040c8:	4a1c      	ldr	r2, [pc, #112]	; (800413c <_free_r+0x8c>)
 80040ca:	6813      	ldr	r3, [r2, #0]
 80040cc:	b933      	cbnz	r3, 80040dc <_free_r+0x2c>
 80040ce:	6063      	str	r3, [r4, #4]
 80040d0:	6014      	str	r4, [r2, #0]
 80040d2:	4628      	mov	r0, r5
 80040d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040d8:	f7ff bfe4 	b.w	80040a4 <__malloc_unlock>
 80040dc:	42a3      	cmp	r3, r4
 80040de:	d908      	bls.n	80040f2 <_free_r+0x42>
 80040e0:	6820      	ldr	r0, [r4, #0]
 80040e2:	1821      	adds	r1, r4, r0
 80040e4:	428b      	cmp	r3, r1
 80040e6:	bf01      	itttt	eq
 80040e8:	6819      	ldreq	r1, [r3, #0]
 80040ea:	685b      	ldreq	r3, [r3, #4]
 80040ec:	1809      	addeq	r1, r1, r0
 80040ee:	6021      	streq	r1, [r4, #0]
 80040f0:	e7ed      	b.n	80040ce <_free_r+0x1e>
 80040f2:	461a      	mov	r2, r3
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	b10b      	cbz	r3, 80040fc <_free_r+0x4c>
 80040f8:	42a3      	cmp	r3, r4
 80040fa:	d9fa      	bls.n	80040f2 <_free_r+0x42>
 80040fc:	6811      	ldr	r1, [r2, #0]
 80040fe:	1850      	adds	r0, r2, r1
 8004100:	42a0      	cmp	r0, r4
 8004102:	d10b      	bne.n	800411c <_free_r+0x6c>
 8004104:	6820      	ldr	r0, [r4, #0]
 8004106:	4401      	add	r1, r0
 8004108:	1850      	adds	r0, r2, r1
 800410a:	4283      	cmp	r3, r0
 800410c:	6011      	str	r1, [r2, #0]
 800410e:	d1e0      	bne.n	80040d2 <_free_r+0x22>
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4401      	add	r1, r0
 8004116:	6011      	str	r1, [r2, #0]
 8004118:	6053      	str	r3, [r2, #4]
 800411a:	e7da      	b.n	80040d2 <_free_r+0x22>
 800411c:	d902      	bls.n	8004124 <_free_r+0x74>
 800411e:	230c      	movs	r3, #12
 8004120:	602b      	str	r3, [r5, #0]
 8004122:	e7d6      	b.n	80040d2 <_free_r+0x22>
 8004124:	6820      	ldr	r0, [r4, #0]
 8004126:	1821      	adds	r1, r4, r0
 8004128:	428b      	cmp	r3, r1
 800412a:	bf01      	itttt	eq
 800412c:	6819      	ldreq	r1, [r3, #0]
 800412e:	685b      	ldreq	r3, [r3, #4]
 8004130:	1809      	addeq	r1, r1, r0
 8004132:	6021      	streq	r1, [r4, #0]
 8004134:	6063      	str	r3, [r4, #4]
 8004136:	6054      	str	r4, [r2, #4]
 8004138:	e7cb      	b.n	80040d2 <_free_r+0x22>
 800413a:	bd38      	pop	{r3, r4, r5, pc}
 800413c:	200041a0 	.word	0x200041a0

08004140 <_read_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4604      	mov	r4, r0
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	2200      	movs	r2, #0
 800414a:	4d05      	ldr	r5, [pc, #20]	; (8004160 <_read_r+0x20>)
 800414c:	602a      	str	r2, [r5, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	f7fc fc7a 	bl	8000a48 <_read>
 8004154:	1c43      	adds	r3, r0, #1
 8004156:	d102      	bne.n	800415e <_read_r+0x1e>
 8004158:	682b      	ldr	r3, [r5, #0]
 800415a:	b103      	cbz	r3, 800415e <_read_r+0x1e>
 800415c:	6023      	str	r3, [r4, #0]
 800415e:	bd38      	pop	{r3, r4, r5, pc}
 8004160:	200041a8 	.word	0x200041a8

08004164 <_fstat_r>:
 8004164:	b538      	push	{r3, r4, r5, lr}
 8004166:	2300      	movs	r3, #0
 8004168:	4d06      	ldr	r5, [pc, #24]	; (8004184 <_fstat_r+0x20>)
 800416a:	4604      	mov	r4, r0
 800416c:	4608      	mov	r0, r1
 800416e:	4611      	mov	r1, r2
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	f7fc fcad 	bl	8000ad0 <_fstat>
 8004176:	1c43      	adds	r3, r0, #1
 8004178:	d102      	bne.n	8004180 <_fstat_r+0x1c>
 800417a:	682b      	ldr	r3, [r5, #0]
 800417c:	b103      	cbz	r3, 8004180 <_fstat_r+0x1c>
 800417e:	6023      	str	r3, [r4, #0]
 8004180:	bd38      	pop	{r3, r4, r5, pc}
 8004182:	bf00      	nop
 8004184:	200041a8 	.word	0x200041a8

08004188 <_isatty_r>:
 8004188:	b538      	push	{r3, r4, r5, lr}
 800418a:	2300      	movs	r3, #0
 800418c:	4d05      	ldr	r5, [pc, #20]	; (80041a4 <_isatty_r+0x1c>)
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	f7fc fcab 	bl	8000aee <_isatty>
 8004198:	1c43      	adds	r3, r0, #1
 800419a:	d102      	bne.n	80041a2 <_isatty_r+0x1a>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	b103      	cbz	r3, 80041a2 <_isatty_r+0x1a>
 80041a0:	6023      	str	r3, [r4, #0]
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
 80041a4:	200041a8 	.word	0x200041a8

080041a8 <_init>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr

080041b4 <_fini>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr

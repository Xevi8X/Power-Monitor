
MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008154  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08008268  08008268  00018268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086e4  080086e4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080086e4  080086e4  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080086e4  080086e4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086e4  080086e4  000186e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e8  080086e8  000186e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080086ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  200001e8  080088d0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000c38  080088d0  00020c38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb25  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a3e  00000000  00000000  0002cd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002f770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  000304a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b84  00000000  00000000  000310c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011913  00000000  00000000  0004ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbf1  00000000  00000000  0005c557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e8148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004628  00000000  00000000  000e8198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800824c 	.word	0x0800824c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800824c 	.word	0x0800824c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_f2iz>:
 8000fe4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fec:	d30f      	bcc.n	800100e <__aeabi_f2iz+0x2a>
 8000fee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ff2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ff6:	d90d      	bls.n	8001014 <__aeabi_f2iz+0x30>
 8000ff8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ffc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001000:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001004:	fa23 f002 	lsr.w	r0, r3, r2
 8001008:	bf18      	it	ne
 800100a:	4240      	negne	r0, r0
 800100c:	4770      	bx	lr
 800100e:	f04f 0000 	mov.w	r0, #0
 8001012:	4770      	bx	lr
 8001014:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001018:	d101      	bne.n	800101e <__aeabi_f2iz+0x3a>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	d105      	bne.n	800102a <__aeabi_f2iz+0x46>
 800101e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001022:	bf08      	it	eq
 8001024:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001028:	4770      	bx	lr
 800102a:	f04f 0000 	mov.w	r0, #0
 800102e:	4770      	bx	lr

08001030 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 800103a:	463b      	mov	r3, r7
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001044:	4b2e      	ldr	r3, [pc, #184]	; (8001100 <MX_ADC1_Init+0xd0>)
 8001046:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <MX_ADC1_Init+0xd4>)
 8001048:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <MX_ADC1_Init+0xd0>)
 800104c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001052:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <MX_ADC1_Init+0xd0>)
 8001054:	2201      	movs	r2, #1
 8001056:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <MX_ADC1_Init+0xd0>)
 800105a:	2200      	movs	r2, #0
 800105c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <MX_ADC1_Init+0xd0>)
 8001060:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001064:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_ADC1_Init+0xd0>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 800106c:	4b24      	ldr	r3, [pc, #144]	; (8001100 <MX_ADC1_Init+0xd0>)
 800106e:	2203      	movs	r2, #3
 8001070:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001072:	4823      	ldr	r0, [pc, #140]	; (8001100 <MX_ADC1_Init+0xd0>)
 8001074:	f001 fbec 	bl	8002850 <HAL_ADC_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 fc32 	bl	80018e6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001082:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001086:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	4619      	mov	r1, r3
 800108e:	481c      	ldr	r0, [pc, #112]	; (8001100 <MX_ADC1_Init+0xd0>)
 8001090:	f002 f9a0 	bl	80033d4 <HAL_ADCEx_MultiModeConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 fc24 	bl	80018e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010a6:	2307      	movs	r3, #7
 80010a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010aa:	463b      	mov	r3, r7
 80010ac:	4619      	mov	r1, r3
 80010ae:	4814      	ldr	r0, [pc, #80]	; (8001100 <MX_ADC1_Init+0xd0>)
 80010b0:	f001 fe2a 	bl	8002d08 <HAL_ADC_ConfigChannel>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ba:	f000 fc14 	bl	80018e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010be:	2304      	movs	r3, #4
 80010c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c6:	463b      	mov	r3, r7
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	; (8001100 <MX_ADC1_Init+0xd0>)
 80010cc:	f001 fe1c 	bl	8002d08 <HAL_ADC_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80010d6:	f000 fc06 	bl	80018e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010da:	230b      	movs	r3, #11
 80010dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010de:	2303      	movs	r3, #3
 80010e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <MX_ADC1_Init+0xd0>)
 80010e8:	f001 fe0e 	bl	8002d08 <HAL_ADC_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010f2:	f000 fbf8 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000204 	.word	0x20000204
 8001104:	40012400 	.word	0x40012400

08001108 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <MX_ADC2_Init+0xb0>)
 800111a:	4a28      	ldr	r2, [pc, #160]	; (80011bc <MX_ADC2_Init+0xb4>)
 800111c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800111e:	4b26      	ldr	r3, [pc, #152]	; (80011b8 <MX_ADC2_Init+0xb0>)
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <MX_ADC2_Init+0xb0>)
 8001128:	2201      	movs	r2, #1
 800112a:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <MX_ADC2_Init+0xb0>)
 800112e:	2200      	movs	r2, #0
 8001130:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_ADC2_Init+0xb0>)
 8001134:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001138:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113a:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_ADC2_Init+0xb0>)
 800113c:	2200      	movs	r2, #0
 800113e:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 8001140:	4b1d      	ldr	r3, [pc, #116]	; (80011b8 <MX_ADC2_Init+0xb0>)
 8001142:	2203      	movs	r2, #3
 8001144:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001146:	481c      	ldr	r0, [pc, #112]	; (80011b8 <MX_ADC2_Init+0xb0>)
 8001148:	f001 fb82 	bl	8002850 <HAL_ADC_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8001152:	f000 fbc8 	bl	80018e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001156:	2301      	movs	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800115a:	2301      	movs	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800115e:	2307      	movs	r3, #7
 8001160:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4619      	mov	r1, r3
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <MX_ADC2_Init+0xb0>)
 8001168:	f001 fdce 	bl	8002d08 <HAL_ADC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001172:	f000 fbb8 	bl	80018e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001176:	2308      	movs	r3, #8
 8001178:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800117a:	2302      	movs	r3, #2
 800117c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_ADC2_Init+0xb0>)
 8001184:	f001 fdc0 	bl	8002d08 <HAL_ADC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800118e:	f000 fbaa 	bl	80018e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001192:	230a      	movs	r3, #10
 8001194:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001196:	2303      	movs	r3, #3
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_ADC2_Init+0xb0>)
 80011a0:	f001 fdb2 	bl	8002d08 <HAL_ADC_ConfigChannel>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 80011aa:	f000 fb9c 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000234 	.word	0x20000234
 80011bc:	40012800 	.word	0x40012800

080011c0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a65      	ldr	r2, [pc, #404]	; (8001370 <HAL_ADC_MspInit+0x1b0>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d168      	bne.n	80012b2 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e0:	4b64      	ldr	r3, [pc, #400]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a63      	ldr	r2, [pc, #396]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80011e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b61      	ldr	r3, [pc, #388]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
 80011f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f8:	4b5e      	ldr	r3, [pc, #376]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	4a5d      	ldr	r2, [pc, #372]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6193      	str	r3, [r2, #24]
 8001204:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	623b      	str	r3, [r7, #32]
 800120e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b58      	ldr	r3, [pc, #352]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	4a57      	ldr	r2, [pc, #348]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	6193      	str	r3, [r2, #24]
 800121c:	4b55      	ldr	r3, [pc, #340]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001228:	2303      	movs	r3, #3
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001234:	4619      	mov	r1, r3
 8001236:	4850      	ldr	r0, [pc, #320]	; (8001378 <HAL_ADC_MspInit+0x1b8>)
 8001238:	f002 fc1a 	bl	8003a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800123c:	2311      	movs	r3, #17
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001248:	4619      	mov	r1, r3
 800124a:	484c      	ldr	r0, [pc, #304]	; (800137c <HAL_ADC_MspInit+0x1bc>)
 800124c:	f002 fc10 	bl	8003a70 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 8001252:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_ADC_MspInit+0x1c4>)
 8001254:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001256:	4b4a      	ldr	r3, [pc, #296]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 8001258:	2200      	movs	r2, #0
 800125a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001262:	4b47      	ldr	r3, [pc, #284]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 8001264:	2280      	movs	r2, #128	; 0x80
 8001266:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001268:	4b45      	ldr	r3, [pc, #276]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 800126a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001270:	4b43      	ldr	r3, [pc, #268]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 8001272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001276:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 800127a:	2220      	movs	r2, #32
 800127c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800127e:	4b40      	ldr	r3, [pc, #256]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 8001280:	2200      	movs	r2, #0
 8001282:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001284:	483e      	ldr	r0, [pc, #248]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 8001286:	f002 fa05 	bl	8003694 <HAL_DMA_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001290:	f000 fb29 	bl	80018e6 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a3a      	ldr	r2, [pc, #232]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 8001298:	621a      	str	r2, [r3, #32]
 800129a:	4a39      	ldr	r2, [pc, #228]	; (8001380 <HAL_ADC_MspInit+0x1c0>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	2012      	movs	r0, #18
 80012a6:	f002 f9be 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80012aa:	2012      	movs	r0, #18
 80012ac:	f002 f9d7 	bl	800365e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80012b0:	e05a      	b.n	8001368 <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a34      	ldr	r2, [pc, #208]	; (8001388 <HAL_ADC_MspInit+0x1c8>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d155      	bne.n	8001368 <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80012bc:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6193      	str	r3, [r2, #24]
 80012c8:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012d0:	61bb      	str	r3, [r7, #24]
 80012d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012da:	f043 0310 	orr.w	r3, r3, #16
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ec:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	4a20      	ldr	r2, [pc, #128]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012f2:	f043 0304 	orr.w	r3, r3, #4
 80012f6:	6193      	str	r3, [r2, #24]
 80012f8:	4b1e      	ldr	r3, [pc, #120]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_ADC_MspInit+0x1b4>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800131c:	2303      	movs	r3, #3
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001320:	2303      	movs	r3, #3
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001328:	4619      	mov	r1, r3
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <HAL_ADC_MspInit+0x1b8>)
 800132c:	f002 fba0 	bl	8003a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001334:	2303      	movs	r3, #3
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133c:	4619      	mov	r1, r3
 800133e:	480f      	ldr	r0, [pc, #60]	; (800137c <HAL_ADC_MspInit+0x1bc>)
 8001340:	f002 fb96 	bl	8003a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001344:	2301      	movs	r3, #1
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001348:	2303      	movs	r3, #3
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001350:	4619      	mov	r1, r3
 8001352:	480e      	ldr	r0, [pc, #56]	; (800138c <HAL_ADC_MspInit+0x1cc>)
 8001354:	f002 fb8c 	bl	8003a70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2012      	movs	r0, #18
 800135e:	f002 f962 	bl	8003626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001362:	2012      	movs	r0, #18
 8001364:	f002 f97b 	bl	800365e <HAL_NVIC_EnableIRQ>
}
 8001368:	bf00      	nop
 800136a:	3738      	adds	r7, #56	; 0x38
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40012400 	.word	0x40012400
 8001374:	40021000 	.word	0x40021000
 8001378:	40011000 	.word	0x40011000
 800137c:	40010800 	.word	0x40010800
 8001380:	20000264 	.word	0x20000264
 8001384:	40020008 	.word	0x40020008
 8001388:	40012800 	.word	0x40012800
 800138c:	40010c00 	.word	0x40010c00

08001390 <ADC_Start>:
  }
}

/* USER CODE BEGIN 1 */
void ADC_Start(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001394:	bf00      	nop
 8001396:	480e      	ldr	r0, [pc, #56]	; (80013d0 <ADC_Start+0x40>)
 8001398:	f001 feb0 	bl	80030fc <HAL_ADCEx_Calibration_Start>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f9      	bne.n	8001396 <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 80013a2:	bf00      	nop
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <ADC_Start+0x44>)
 80013a6:	f001 fea9 	bl	80030fc <HAL_ADCEx_Calibration_Start>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f9      	bne.n	80013a4 <ADC_Start+0x14>
	HAL_Delay(10);
 80013b0:	200a      	movs	r0, #10
 80013b2:	f001 fa29 	bl	8002808 <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <ADC_Start+0x44>)
 80013b8:	f001 fb22 	bl	8002a00 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, getADC_Buffer(), (uint32_t)2 * CHANNELS);
 80013bc:	f000 fe84 	bl	80020c8 <getADC_Buffer>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2206      	movs	r2, #6
 80013c4:	4619      	mov	r1, r3
 80013c6:	4802      	ldr	r0, [pc, #8]	; (80013d0 <ADC_Start+0x40>)
 80013c8:	f001 ff44 	bl	8003254 <HAL_ADCEx_MultiModeStart_DMA>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000204 	.word	0x20000204
 80013d4:	20000234 	.word	0x20000234

080013d8 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if(hadc)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <HAL_ADC_ConvHalfCpltCallback+0x1a>
	{
		takeData(getADC_Buffer());
 80013e6:	f000 fe6f 	bl	80020c8 <getADC_Buffer>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fba5 	bl	8001b3c <takeData>
	}
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	if(hadc)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <HAL_ADC_ConvCpltCallback+0x1a>
	{
		takeData(gethalfOfADC_Buffer());
 8001408:	f000 fe68 	bl	80020dc <gethalfOfADC_Buffer>
 800140c:	4603      	mov	r3, r0
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fb94 	bl	8001b3c <takeData>
	}
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_DMA_Init+0x38>)
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <MX_DMA_Init+0x38>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6153      	str	r3, [r2, #20]
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_DMA_Init+0x38>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	200b      	movs	r0, #11
 8001440:	f002 f8f1 	bl	8003626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001444:	200b      	movs	r0, #11
 8001446:	f002 f90a 	bl	800365e <HAL_NVIC_EnableIRQ>

}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146c:	4b24      	ldr	r3, [pc, #144]	; (8001500 <MX_GPIO_Init+0xa8>)
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	4a23      	ldr	r2, [pc, #140]	; (8001500 <MX_GPIO_Init+0xa8>)
 8001472:	f043 0310 	orr.w	r3, r3, #16
 8001476:	6193      	str	r3, [r2, #24]
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <MX_GPIO_Init+0xa8>)
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0310 	and.w	r3, r3, #16
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_GPIO_Init+0xa8>)
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <MX_GPIO_Init+0xa8>)
 800148a:	f043 0320 	orr.w	r3, r3, #32
 800148e:	6193      	str	r3, [r2, #24]
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_GPIO_Init+0xa8>)
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	f003 0320 	and.w	r3, r3, #32
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_GPIO_Init+0xa8>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a17      	ldr	r2, [pc, #92]	; (8001500 <MX_GPIO_Init+0xa8>)
 80014a2:	f043 0304 	orr.w	r3, r3, #4
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_GPIO_Init+0xa8>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0304 	and.w	r3, r3, #4
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_GPIO_Init+0xa8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a11      	ldr	r2, [pc, #68]	; (8001500 <MX_GPIO_Init+0xa8>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_GPIO_Init+0xa8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_GPIO_Init+0xac>)
 80014d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0310 	add.w	r3, r7, #16
 80014de:	4619      	mov	r1, r3
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <MX_GPIO_Init+0xb0>)
 80014e2:	f002 fac5 	bl	8003a70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2028      	movs	r0, #40	; 0x28
 80014ec:	f002 f89b 	bl	8003626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014f0:	2028      	movs	r0, #40	; 0x28
 80014f2:	f002 f8b4 	bl	800365e <HAL_NVIC_EnableIRQ>

}
 80014f6:	bf00      	nop
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	10110000 	.word	0x10110000
 8001508:	40011000 	.word	0x40011000

0800150c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_I2C1_Init+0x54>)
 8001512:	4a14      	ldr	r2, [pc, #80]	; (8001564 <MX_I2C1_Init+0x58>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_I2C1_Init+0x54>)
 8001518:	4a13      	ldr	r2, [pc, #76]	; (8001568 <MX_I2C1_Init+0x5c>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_I2C1_Init+0x54>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_I2C1_Init+0x54>)
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <MX_I2C1_Init+0x54>)
 800152a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800152e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_I2C1_Init+0x54>)
 8001532:	2200      	movs	r2, #0
 8001534:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <MX_I2C1_Init+0x54>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_I2C1_Init+0x54>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <MX_I2C1_Init+0x54>)
 8001544:	2200      	movs	r2, #0
 8001546:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_I2C1_Init+0x54>)
 800154a:	f002 fc4f 	bl	8003dec <HAL_I2C_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001554:	f000 f9c7 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  PCF8574_update();
 8001558:	f000 f8a4 	bl	80016a4 <PCF8574_update>
  /* USER CODE END I2C1_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200002a8 	.word	0x200002a8
 8001564:	40005400 	.word	0x40005400
 8001568:	000186a0 	.word	0x000186a0

0800156c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <HAL_I2C_MspInit+0x90>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d132      	bne.n	80015f2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_I2C_MspInit+0x94>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	4a1b      	ldr	r2, [pc, #108]	; (8001600 <HAL_I2C_MspInit+0x94>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6193      	str	r3, [r2, #24]
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <HAL_I2C_MspInit+0x94>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015aa:	2312      	movs	r3, #18
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <HAL_I2C_MspInit+0x98>)
 80015ba:	f002 fa59 	bl	8003a70 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_I2C_MspInit+0x9c>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	627b      	str	r3, [r7, #36]	; 0x24
 80015d4:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <HAL_I2C_MspInit+0x9c>)
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_I2C_MspInit+0x94>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_I2C_MspInit+0x94>)
 80015e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_I2C_MspInit+0x94>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40005400 	.word	0x40005400
 8001600:	40021000 	.word	0x40021000
 8001604:	40010c00 	.word	0x40010c00
 8001608:	40010000 	.word	0x40010000

0800160c <PCF8574_turnOn>:
  }
}

/* USER CODE BEGIN 1 */
void PCF8574_turnOn(uint8_t pin)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	PCF8574_check(pin);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4618      	mov	r0, r3
 800161a:	f000 f835 	bl	8001688 <PCF8574_check>
	pinState &= (~(1 << pin));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2201      	movs	r2, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	b25a      	sxtb	r2, r3
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <PCF8574_turnOn+0x3c>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b25b      	sxtb	r3, r3
 8001632:	4013      	ands	r3, r2
 8001634:	b25b      	sxtb	r3, r3
 8001636:	b2da      	uxtb	r2, r3
 8001638:	4b03      	ldr	r3, [pc, #12]	; (8001648 <PCF8574_turnOn+0x3c>)
 800163a:	701a      	strb	r2, [r3, #0]
	PCF8574_update();
 800163c:	f000 f832 	bl	80016a4 <PCF8574_update>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000000 	.word	0x20000000

0800164c <PCF8574_turnOff>:

void PCF8574_turnOff(uint8_t pin)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
	PCF8574_check(pin);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f815 	bl	8001688 <PCF8574_check>
	pinState |= (1 << pin);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2201      	movs	r2, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	b25a      	sxtb	r2, r3
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <PCF8574_turnOff+0x38>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b25b      	sxtb	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b25b      	sxtb	r3, r3
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <PCF8574_turnOff+0x38>)
 8001676:	701a      	strb	r2, [r3, #0]
	PCF8574_update();
 8001678:	f000 f814 	bl	80016a4 <PCF8574_update>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000000 	.word	0x20000000

08001688 <PCF8574_check>:
	PCF8574_update();
}


void PCF8574_check(uint8_t pin)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	if(pin >= 8)
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b07      	cmp	r3, #7
 8001696:	d901      	bls.n	800169c <PCF8574_check+0x14>
	{
		Error_Handler();
 8001698:	f000 f925 	bl	80018e6 <Error_Handler>
	}
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <PCF8574_update>:

void PCF8574_update()
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1,PCF8574_ADDRESS,(uint8_t*)&pinState,sizeof(pinState),HAL_MAX_DELAY);
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <PCF8574_update+0x20>)
 80016b4:	2170      	movs	r1, #112	; 0x70
 80016b6:	4804      	ldr	r0, [pc, #16]	; (80016c8 <PCF8574_update+0x24>)
 80016b8:	f002 fcdc 	bl	8004074 <HAL_I2C_Master_Transmit>
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000000 	.word	0x20000000
 80016c8:	200002a8 	.word	0x200002a8

080016cc <showControls>:




void showControls(float Q)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	uint8_t i = ((int) Q) / 250;
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fc85 	bl	8000fe4 <__aeabi_f2iz>
 80016da:	4603      	mov	r3, r0
 80016dc:	4a10      	ldr	r2, [pc, #64]	; (8001720 <showControls+0x54>)
 80016de:	fb82 1203 	smull	r1, r2, r2, r3
 80016e2:	1112      	asrs	r2, r2, #4
 80016e4:	17db      	asrs	r3, r3, #31
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	73bb      	strb	r3, [r7, #14]

	for(uint8_t j = 0; j < 8; j++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	e00f      	b.n	8001710 <showControls+0x44>
	{
		if(j < i)
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	7bbb      	ldrb	r3, [r7, #14]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d204      	bcs.n	8001702 <showControls+0x36>
			PCF8574_turnOn(j);
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff86 	bl	800160c <PCF8574_turnOn>
 8001700:	e003      	b.n	800170a <showControls+0x3e>
		else
			PCF8574_turnOff(j);
 8001702:	7bfb      	ldrb	r3, [r7, #15]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ffa1 	bl	800164c <PCF8574_turnOff>
	for(uint8_t j = 0; j < 8; j++)
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	3301      	adds	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	2b07      	cmp	r3, #7
 8001714:	d9ec      	bls.n	80016f0 <showControls+0x24>
	}
}
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001728:	b08c      	sub	sp, #48	; 0x30
 800172a:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172c:	f001 f80a 	bl	8002744 <HAL_Init>

  uint32_t lastGetTick;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001730:	f000 f882 	bl	8001838 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  powerParamInit();
 8001734:	f000 f8dc 	bl	80018f0 <powerParamInit>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001738:	f7ff fe8e 	bl	8001458 <MX_GPIO_Init>
  MX_DMA_Init();
 800173c:	f7ff fe6e 	bl	800141c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001740:	f000 ff72 	bl	8002628 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001744:	f7ff fc74 	bl	8001030 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001748:	f7ff fcde 	bl	8001108 <MX_ADC2_Init>
  MX_I2C1_Init();
 800174c:	f7ff fede 	bl	800150c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 8001750:	f7ff fe1e 	bl	8001390 <ADC_Start>
  HAL_Delay(1500);
 8001754:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001758:	f001 f856 	bl	8002808 <HAL_Delay>
  CalibrateZero();
 800175c:	f000 f93a 	bl	80019d4 <CalibrateZero>
  CalcRMScorection();
 8001760:	f000 f8e6 	bl	8001930 <CalcRMScorection>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001768:	4830      	ldr	r0, [pc, #192]	; (800182c <main+0x108>)
 800176a:	f002 fb05 	bl	8003d78 <HAL_GPIO_ReadPin>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <main+0x54>
	  {
		  CalibrateZero();
 8001774:	f000 f92e 	bl	80019d4 <CalibrateZero>
	  }

	  if((HAL_GetTick()-lastGetTick)>=SHOWDATAPERIOD)
 8001778:	f001 f83c 	bl	80027f4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001786:	d3ed      	bcc.n	8001764 <main+0x40>
	  {


		  printf("RMS: V: %.1f,  I:%.2f,  P:%.2f,  Q:%.2f,  S:%.2f\n",getV(0) ,getI(0), getP(0), getQ(0), getS(0));
 8001788:	2000      	movs	r0, #0
 800178a:	f000 fcb1 	bl	80020f0 <getV>
 800178e:	4603      	mov	r3, r0
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fe49 	bl	8000428 <__aeabi_f2d>
 8001796:	e9c7 0100 	strd	r0, r1, [r7]
 800179a:	2000      	movs	r0, #0
 800179c:	f000 fce8 	bl	8002170 <getI>
 80017a0:	4603      	mov	r3, r0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fe40 	bl	8000428 <__aeabi_f2d>
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
 80017ac:	2000      	movs	r0, #0
 80017ae:	f000 fd1f 	bl	80021f0 <getP>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe37 	bl	8000428 <__aeabi_f2d>
 80017ba:	4680      	mov	r8, r0
 80017bc:	4689      	mov	r9, r1
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 fd62 	bl	8002288 <getQ>
 80017c4:	4603      	mov	r3, r0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fe2e 	bl	8000428 <__aeabi_f2d>
 80017cc:	4682      	mov	sl, r0
 80017ce:	468b      	mov	fp, r1
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 fd41 	bl	8002258 <getS>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fe25 	bl	8000428 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80017e6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80017ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017ee:	e9cd 4500 	strd	r4, r5, [sp]
 80017f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017f6:	480e      	ldr	r0, [pc, #56]	; (8001830 <main+0x10c>)
 80017f8:	f004 fb1c 	bl	8005e34 <iprintf>
		  printf("Fi: %f\n", calcXOR(0));
 80017fc:	2000      	movs	r0, #0
 80017fe:	f000 fbf7 	bl	8001ff0 <calcXOR>
 8001802:	4603      	mov	r3, r0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe0f 	bl	8000428 <__aeabi_f2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4809      	ldr	r0, [pc, #36]	; (8001834 <main+0x110>)
 8001810:	f004 fb10 	bl	8005e34 <iprintf>

		  showControls(getQ(0));
 8001814:	2000      	movs	r0, #0
 8001816:	f000 fd37 	bl	8002288 <getQ>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff55 	bl	80016cc <showControls>

		  lastGetTick=HAL_GetTick();
 8001822:	f000 ffe7 	bl	80027f4 <HAL_GetTick>
 8001826:	60f8      	str	r0, [r7, #12]
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001828:	e79c      	b.n	8001764 <main+0x40>
 800182a:	bf00      	nop
 800182c:	40011000 	.word	0x40011000
 8001830:	08008268 	.word	0x08008268
 8001834:	0800829c 	.word	0x0800829c

08001838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	; 0x50
 800183c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001842:	2228      	movs	r2, #40	; 0x28
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f003 fe8c 	bl	8005564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001868:	2302      	movs	r3, #2
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800186c:	2301      	movs	r3, #1
 800186e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001870:	2310      	movs	r3, #16
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001874:	2302      	movs	r3, #2
 8001876:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001878:	2300      	movs	r3, #0
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800187c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001880:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fefa 	bl	8004680 <HAL_RCC_OscConfig>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001892:	f000 f828 	bl	80018e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001896:	230f      	movs	r3, #15
 8001898:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2102      	movs	r1, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 f966 	bl	8004b84 <HAL_RCC_ClockConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018be:	f000 f812 	bl	80018e6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018c2:	2302      	movs	r3, #2
 80018c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80018c6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018ca:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 faf0 	bl	8004eb4 <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018da:	f000 f804 	bl	80018e6 <Error_Handler>
  }
}
 80018de:	bf00      	nop
 80018e0:	3750      	adds	r7, #80	; 0x50
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ea:	b672      	cpsid	i
}
 80018ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ee:	e7fe      	b.n	80018ee <Error_Handler+0x8>

080018f0 <powerParamInit>:
uint8_t sign[2*CHANNELS][BUFFERSIZE/8] = {0};
uint8_t disableSetting;


void powerParamInit()
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
	indexCircBuffer = 0;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <powerParamInit+0x2c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	801a      	strh	r2, [r3, #0]
	oversamplingIndex = 0;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <powerParamInit+0x30>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
	correctionRMS = 1;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <powerParamInit+0x34>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
	calibCounter = 0;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <powerParamInit+0x38>)
 8001908:	2200      	movs	r2, #0
 800190a:	801a      	strh	r2, [r3, #0]
	disableSetting = 0;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <powerParamInit+0x3c>)
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
}
 8001912:	bf00      	nop
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000b18 	.word	0x20000b18
 8001920:	20000b1a 	.word	0x20000b1a
 8001924:	20000b58 	.word	0x20000b58
 8001928:	20000b5a 	.word	0x20000b5a
 800192c:	20000bd8 	.word	0x20000bd8

08001930 <CalcRMScorection>:

void CalcRMScorection()
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
		while(indexCircBuffer!= 0);
 8001936:	bf00      	nop
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <CalcRMScorection+0x94>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1fb      	bne.n	8001938 <CalcRMScorection+0x8>
  __ASM volatile ("cpsid i" : : : "memory");
 8001940:	b672      	cpsid	i
}
 8001942:	bf00      	nop
		__disable_irq();
		uint32_t timeOfBufforing = time[BUFFERSIZE-1]- time[0];
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <CalcRMScorection+0x98>)
 8001946:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <CalcRMScorection+0x98>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	60fb      	str	r3, [r7, #12]
		uint32_t halfPhase = 1000000/EXPECTEDFREQ/2;
 8001952:	f242 7310 	movw	r3, #10000	; 0x2710
 8001956:	60bb      	str	r3, [r7, #8]
		uint16_t halfPeriods = timeOfBufforing/halfPhase;
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001960:	80fb      	strh	r3, [r7, #6]
		Tinterval = halfPhase*halfPeriods;
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	461a      	mov	r2, r3
 800196c:	4b17      	ldr	r3, [pc, #92]	; (80019cc <CalcRMScorection+0x9c>)
 800196e:	601a      	str	r2, [r3, #0]
		while(time[BUFFERSIZE-1-correctionRMS] > time[0] + Tinterval) correctionRMS++;
 8001970:	e005      	b.n	800197e <CalcRMScorection+0x4e>
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <CalcRMScorection+0xa0>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	3301      	adds	r3, #1
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <CalcRMScorection+0xa0>)
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <CalcRMScorection+0xa0>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <CalcRMScorection+0x98>)
 8001988:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <CalcRMScorection+0x98>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	490e      	ldr	r1, [pc, #56]	; (80019cc <CalcRMScorection+0x9c>)
 8001992:	6809      	ldr	r1, [r1, #0]
 8001994:	440b      	add	r3, r1
 8001996:	429a      	cmp	r2, r3
 8001998:	d8eb      	bhi.n	8001972 <CalcRMScorection+0x42>
		Tinterval = time[BUFFERSIZE-1-correctionRMS] - time[0];
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <CalcRMScorection+0xa0>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <CalcRMScorection+0x98>)
 80019a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <CalcRMScorection+0x98>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <CalcRMScorection+0x9c>)
 80019b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019b4:	b662      	cpsie	i
}
 80019b6:	bf00      	nop
		__enable_irq();
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000b18 	.word	0x20000b18
 80019c8:	20000914 	.word	0x20000914
 80019cc:	20000b14 	.word	0x20000b14
 80019d0:	20000b58 	.word	0x20000b58

080019d4 <CalibrateZero>:

void CalibrateZero()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0

	printf("Starting calibration...\n");
 80019da:	4850      	ldr	r0, [pc, #320]	; (8001b1c <CalibrateZero+0x148>)
 80019dc:	f004 fab0 	bl	8005f40 <puts>
	while(indexCircBuffer!= 0);
 80019e0:	bf00      	nop
 80019e2:	4b4f      	ldr	r3, [pc, #316]	; (8001b20 <CalibrateZero+0x14c>)
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1fb      	bne.n	80019e2 <CalibrateZero+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 80019ea:	b672      	cpsid	i
}
 80019ec:	bf00      	nop
	__disable_irq();

	//Vpp calibration
	int32_t min = 1 << 16, max = 0;
 80019ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	71fb      	strb	r3, [r7, #7]
 80019fc:	e06f      	b.n	8001ade <CalibrateZero+0x10a>
	{
		for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <CalibrateZero+0x150>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	80bb      	strh	r3, [r7, #4]
 8001a04:	e03f      	b.n	8001a86 <CalibrateZero+0xb2>
		{
			if(max < data[i][j]) max = data[i][j];
 8001a06:	88ba      	ldrh	r2, [r7, #4]
 8001a08:	79f9      	ldrb	r1, [r7, #7]
 8001a0a:	4847      	ldr	r0, [pc, #284]	; (8001b28 <CalibrateZero+0x154>)
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	440b      	add	r3, r1
 8001a16:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	da0a      	bge.n	8001a38 <CalibrateZero+0x64>
 8001a22:	88ba      	ldrh	r2, [r7, #4]
 8001a24:	79f9      	ldrb	r1, [r7, #7]
 8001a26:	4840      	ldr	r0, [pc, #256]	; (8001b28 <CalibrateZero+0x154>)
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	440b      	add	r3, r1
 8001a32:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8001a36:	60bb      	str	r3, [r7, #8]
			if(min > data[i][j]) min = data[i][j];
 8001a38:	88ba      	ldrh	r2, [r7, #4]
 8001a3a:	79f9      	ldrb	r1, [r7, #7]
 8001a3c:	483a      	ldr	r0, [pc, #232]	; (8001b28 <CalibrateZero+0x154>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	440b      	add	r3, r1
 8001a48:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4293      	cmp	r3, r2
 8001a52:	dd0a      	ble.n	8001a6a <CalibrateZero+0x96>
 8001a54:	88ba      	ldrh	r2, [r7, #4]
 8001a56:	79f9      	ldrb	r1, [r7, #7]
 8001a58:	4833      	ldr	r0, [pc, #204]	; (8001b28 <CalibrateZero+0x154>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	440b      	add	r3, r1
 8001a64:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8001a68:	60fb      	str	r3, [r7, #12]
			data[i][j] = 0;
 8001a6a:	88ba      	ldrh	r2, [r7, #4]
 8001a6c:	79f9      	ldrb	r1, [r7, #7]
 8001a6e:	482e      	ldr	r0, [pc, #184]	; (8001b28 <CalibrateZero+0x154>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	440b      	add	r3, r1
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 8001a80:	88bb      	ldrh	r3, [r7, #4]
 8001a82:	3301      	adds	r3, #1
 8001a84:	80bb      	strh	r3, [r7, #4]
 8001a86:	88bb      	ldrh	r3, [r7, #4]
 8001a88:	2b7f      	cmp	r3, #127	; 0x7f
 8001a8a:	d9bc      	bls.n	8001a06 <CalibrateZero+0x32>
		}
		calibZeros[j] += (min+max)/2;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	4a27      	ldr	r2, [pc, #156]	; (8001b2c <CalibrateZero+0x158>)
 8001a90:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	4413      	add	r3, r2
 8001a9a:	0fda      	lsrs	r2, r3, #31
 8001a9c:	4413      	add	r3, r2
 8001a9e:	105b      	asrs	r3, r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	440a      	add	r2, r1
 8001aa6:	b291      	uxth	r1, r2
 8001aa8:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <CalibrateZero+0x158>)
 8001aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data[0][j] = -calibZeros[j];
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <CalibrateZero+0x158>)
 8001ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	b211      	sxth	r1, r2
 8001abe:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <CalibrateZero+0x154>)
 8001ac0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RMS[j] = 0;
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <CalibrateZero+0x15c>)
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	18d1      	adds	r1, r2, r3
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	3301      	adds	r3, #1
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d98c      	bls.n	80019fe <CalibrateZero+0x2a>
	}
	for(uint8_t j = 0; j < CHANNELS;j++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	70fb      	strb	r3, [r7, #3]
 8001ae8:	e00c      	b.n	8001b04 <CalibrateZero+0x130>
	{
		P[j] = 0;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	4a11      	ldr	r2, [pc, #68]	; (8001b34 <CalibrateZero+0x160>)
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	18d1      	adds	r1, r2, r3
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS;j++)
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	3301      	adds	r3, #1
 8001b02:	70fb      	strb	r3, [r7, #3]
 8001b04:	78fb      	ldrb	r3, [r7, #3]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d9ef      	bls.n	8001aea <CalibrateZero+0x116>
	}
	printf("Calibration completed\n");
 8001b0a:	480b      	ldr	r0, [pc, #44]	; (8001b38 <CalibrateZero+0x164>)
 8001b0c:	f004 fa18 	bl	8005f40 <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b10:	b662      	cpsie	i
}
 8001b12:	bf00      	nop
	__enable_irq();
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	080082a4 	.word	0x080082a4
 8001b20:	20000b18 	.word	0x20000b18
 8001b24:	20000b58 	.word	0x20000b58
 8001b28:	20000314 	.word	0x20000314
 8001b2c:	20000b1c 	.word	0x20000b1c
 8001b30:	20000b28 	.word	0x20000b28
 8001b34:	20000b60 	.word	0x20000b60
 8001b38:	080082bc 	.word	0x080082bc

08001b3c <takeData>:

void takeData(uint32_t* buffer)
{
 8001b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b40:	b091      	sub	sp, #68	; 0x44
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6378      	str	r0, [r7, #52]	; 0x34
	if(oversamplingIndex == OVERSAMPLING)
 8001b46:	4b7e      	ldr	r3, [pc, #504]	; (8001d40 <takeData+0x204>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	f040 8182 	bne.w	8001e54 <takeData+0x318>
	{
		oversamplingIndex = 0;
 8001b50:	4a7b      	ldr	r2, [pc, #492]	; (8001d40 <takeData+0x204>)
 8001b52:	2300      	movs	r3, #0
 8001b54:	7013      	strb	r3, [r2, #0]
		time[indexCircBuffer] = getCurrentMicros();
 8001b56:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <takeData+0x208>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	461c      	mov	r4, r3
 8001b5c:	f000 fbf2 	bl	8002344 <getCurrentMicros>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <takeData+0x20c>)
 8001b64:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001b6e:	e036      	b.n	8001bde <takeData+0xa2>
		{
			RMS[i] += data[indexCircBuffer][i]*data[indexCircBuffer][i];
 8001b70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001b74:	4a75      	ldr	r2, [pc, #468]	; (8001d4c <takeData+0x210>)
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	4413      	add	r3, r2
 8001b7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b7e:	4b71      	ldr	r3, [pc, #452]	; (8001d44 <takeData+0x208>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	461c      	mov	r4, r3
 8001b84:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001b88:	4d71      	ldr	r5, [pc, #452]	; (8001d50 <takeData+0x214>)
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4423      	add	r3, r4
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8001b98:	461e      	mov	r6, r3
 8001b9a:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <takeData+0x208>)
 8001b9c:	881b      	ldrh	r3, [r3, #0]
 8001b9e:	461c      	mov	r4, r3
 8001ba0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001ba4:	4d6a      	ldr	r5, [pc, #424]	; (8001d50 <takeData+0x214>)
 8001ba6:	4623      	mov	r3, r4
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4423      	add	r3, r4
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8001bb4:	fb06 f303 	mul.w	r3, r6, r3
 8001bb8:	17da      	asrs	r2, r3, #31
 8001bba:	4698      	mov	r8, r3
 8001bbc:	4691      	mov	r9, r2
 8001bbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bc2:	eb10 0a08 	adds.w	sl, r0, r8
 8001bc6:	eb41 0b09 	adc.w	fp, r1, r9
 8001bca:	4a60      	ldr	r2, [pc, #384]	; (8001d4c <takeData+0x210>)
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	e9c3 ab00 	strd	sl, fp, [r3]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001bd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001bde:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001be2:	2b05      	cmp	r3, #5
 8001be4:	d9c4      	bls.n	8001b70 <takeData+0x34>
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001bec:	e040      	b.n	8001c70 <takeData+0x134>
		{
			P[i] += data[indexCircBuffer][2*i]*data[indexCircBuffer][2*i+1];
 8001bee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001bf2:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <takeData+0x218>)
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4413      	add	r3, r2
 8001bf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bfc:	4b51      	ldr	r3, [pc, #324]	; (8001d44 <takeData+0x208>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	461d      	mov	r5, r3
 8001c02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c06:	005a      	lsls	r2, r3, #1
 8001c08:	4c51      	ldr	r4, [pc, #324]	; (8001d50 <takeData+0x214>)
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	442b      	add	r3, r5
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8001c18:	461e      	mov	r6, r3
 8001c1a:	4b4a      	ldr	r3, [pc, #296]	; (8001d44 <takeData+0x208>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	461d      	mov	r5, r3
 8001c20:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	4c49      	ldr	r4, [pc, #292]	; (8001d50 <takeData+0x214>)
 8001c2a:	462b      	mov	r3, r5
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	442b      	add	r3, r5
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8001c38:	fb06 f303 	mul.w	r3, r6, r3
 8001c3c:	17da      	asrs	r2, r3, #31
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c42:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c46:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	1882      	adds	r2, r0, r2
 8001c4e:	623a      	str	r2, [r7, #32]
 8001c50:	462a      	mov	r2, r5
 8001c52:	eb41 0202 	adc.w	r2, r1, r2
 8001c56:	627a      	str	r2, [r7, #36]	; 0x24
 8001c58:	4a3e      	ldr	r2, [pc, #248]	; (8001d54 <takeData+0x218>)
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001c62:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 8001c66:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001c70:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d9ba      	bls.n	8001bee <takeData+0xb2>
		}
		indexCircBuffer++;
 8001c78:	4b32      	ldr	r3, [pc, #200]	; (8001d44 <takeData+0x208>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	4b30      	ldr	r3, [pc, #192]	; (8001d44 <takeData+0x208>)
 8001c82:	801a      	strh	r2, [r3, #0]
		if(indexCircBuffer == BUFFERSIZE)
 8001c84:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <takeData+0x208>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	2b80      	cmp	r3, #128	; 0x80
 8001c8a:	d102      	bne.n	8001c92 <takeData+0x156>
		{
			indexCircBuffer = 0;
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <takeData+0x208>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	801a      	strh	r2, [r3, #0]
			//	calibCounter = 0;
			//	CalibrateZero();
			//}
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001c98:	e04a      	b.n	8001d30 <takeData+0x1f4>
		{
			P[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i]*data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i+1];
 8001c9a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c9e:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <takeData+0x218>)
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca8:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <takeData+0x208>)
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <takeData+0x21c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cb8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001cbc:	005c      	lsls	r4, r3, #1
 8001cbe:	4d24      	ldr	r5, [pc, #144]	; (8001d50 <takeData+0x214>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4423      	add	r3, r4
 8001cca:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8001cce:	461e      	mov	r6, r3
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <takeData+0x208>)
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <takeData+0x21c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ce0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	1c5c      	adds	r4, r3, #1
 8001ce8:	4d19      	ldr	r5, [pc, #100]	; (8001d50 <takeData+0x214>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4423      	add	r3, r4
 8001cf4:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8001cf8:	fb06 f303 	mul.w	r3, r6, r3
 8001cfc:	17da      	asrs	r2, r3, #31
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	61fa      	str	r2, [r7, #28]
 8001d02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d06:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001d0a:	4622      	mov	r2, r4
 8001d0c:	1a82      	subs	r2, r0, r2
 8001d0e:	613a      	str	r2, [r7, #16]
 8001d10:	462a      	mov	r2, r5
 8001d12:	eb61 0202 	sbc.w	r2, r1, r2
 8001d16:	617a      	str	r2, [r7, #20]
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <takeData+0x218>)
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001d22:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 8001d26:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001d30:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d9b0      	bls.n	8001c9a <takeData+0x15e>
		}
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001d3e:	e085      	b.n	8001e4c <takeData+0x310>
 8001d40:	20000b1a 	.word	0x20000b1a
 8001d44:	20000b18 	.word	0x20000b18
 8001d48:	20000914 	.word	0x20000914
 8001d4c:	20000b28 	.word	0x20000b28
 8001d50:	20000314 	.word	0x20000314
 8001d54:	20000b60 	.word	0x20000b60
 8001d58:	20000b58 	.word	0x20000b58
		{
			RMS[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][i]*data[(indexCircBuffer+ correctionRMS)% BUFFERSIZE][i];
 8001d5c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001d60:	4a72      	ldr	r2, [pc, #456]	; (8001f2c <takeData+0x3f0>)
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d6a:	4b71      	ldr	r3, [pc, #452]	; (8001f30 <takeData+0x3f4>)
 8001d6c:	881b      	ldrh	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b70      	ldr	r3, [pc, #448]	; (8001f34 <takeData+0x3f8>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4413      	add	r3, r2
 8001d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d7a:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 8001d7e:	4d6e      	ldr	r5, [pc, #440]	; (8001f38 <takeData+0x3fc>)
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4423      	add	r3, r4
 8001d8a:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8001d8e:	461e      	mov	r6, r3
 8001d90:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <takeData+0x3f4>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b67      	ldr	r3, [pc, #412]	; (8001f34 <takeData+0x3f8>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001da0:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 8001da4:	4d64      	ldr	r5, [pc, #400]	; (8001f38 <takeData+0x3fc>)
 8001da6:	4613      	mov	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4413      	add	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4423      	add	r3, r4
 8001db0:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8001db4:	fb06 f303 	mul.w	r3, r6, r3
 8001db8:	17da      	asrs	r2, r3, #31
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	60fa      	str	r2, [r7, #12]
 8001dbe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001dc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dc6:	4622      	mov	r2, r4
 8001dc8:	1a82      	subs	r2, r0, r2
 8001dca:	603a      	str	r2, [r7, #0]
 8001dcc:	462a      	mov	r2, r5
 8001dce:	eb61 0202 	sbc.w	r2, r1, r2
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	4a55      	ldr	r2, [pc, #340]	; (8001f2c <takeData+0x3f0>)
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001dde:	e9c3 1200 	strd	r1, r2, [r3]
			setSign(i,indexCircBuffer, (data[indexCircBuffer][i]> 0) ? 1: 0);
 8001de2:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <takeData+0x3f4>)
 8001de4:	8819      	ldrh	r1, [r3, #0]
 8001de6:	4b52      	ldr	r3, [pc, #328]	; (8001f30 <takeData+0x3f4>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	461c      	mov	r4, r3
 8001dec:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001df0:	4851      	ldr	r0, [pc, #324]	; (8001f38 <takeData+0x3fc>)
 8001df2:	4623      	mov	r3, r4
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4423      	add	r3, r4
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bfcc      	ite	gt
 8001e04:	2301      	movgt	r3, #1
 8001e06:	2300      	movle	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e10:	4618      	mov	r0, r3
 8001e12:	f000 f897 	bl	8001f44 <setSign>
			data[indexCircBuffer][i] = -calibZeros[i];
 8001e16:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e1a:	4a48      	ldr	r2, [pc, #288]	; (8001f3c <takeData+0x400>)
 8001e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e20:	425b      	negs	r3, r3
 8001e22:	b299      	uxth	r1, r3
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <takeData+0x3f4>)
 8001e26:	881b      	ldrh	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001e2e:	b20c      	sxth	r4, r1
 8001e30:	4941      	ldr	r1, [pc, #260]	; (8001f38 <takeData+0x3fc>)
 8001e32:	4603      	mov	r3, r0
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4403      	add	r3, r0
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4622      	mov	r2, r4
 8001e3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001e42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e46:	3301      	adds	r3, #1
 8001e48:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001e4c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d983      	bls.n	8001d5c <takeData+0x220>
		}


	}
	for(uint8_t i = 0; i < CHANNELS;i++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001e5a:	e057      	b.n	8001f0c <takeData+0x3d0>
	{
		data[indexCircBuffer][2*i] += (uint16_t) buffer[i];
 8001e5c:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <takeData+0x3f4>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e66:	005a      	lsls	r2, r3, #1
 8001e68:	4933      	ldr	r1, [pc, #204]	; (8001f38 <takeData+0x3fc>)
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	4403      	add	r3, r0
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e82:	440b      	add	r3, r1
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	b299      	uxth	r1, r3
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <takeData+0x3f4>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001e96:	005a      	lsls	r2, r3, #1
 8001e98:	b20c      	sxth	r4, r1
 8001e9a:	4927      	ldr	r1, [pc, #156]	; (8001f38 <takeData+0x3fc>)
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	4403      	add	r3, r0
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		data[indexCircBuffer][2*i+1] += (uint16_t) (buffer[i] >> 16);
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <takeData+0x3f4>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	491f      	ldr	r1, [pc, #124]	; (8001f38 <takeData+0x3fc>)
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4403      	add	r3, r0
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ed4:	440b      	add	r3, r1
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	0c1b      	lsrs	r3, r3, #16
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	b299      	uxth	r1, r3
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <takeData+0x3f4>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	b20c      	sxth	r4, r1
 8001ef0:	4911      	ldr	r1, [pc, #68]	; (8001f38 <takeData+0x3fc>)
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4403      	add	r3, r0
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	4622      	mov	r2, r4
 8001efe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t i = 0; i < CHANNELS;i++)
 8001f02:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f06:	3301      	adds	r3, #1
 8001f08:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001f0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d9a3      	bls.n	8001e5c <takeData+0x320>
	}
	oversamplingIndex++;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <takeData+0x404>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <takeData+0x404>)
 8001f1e:	701a      	strb	r2, [r3, #0]
}
 8001f20:	bf00      	nop
 8001f22:	3744      	adds	r7, #68	; 0x44
 8001f24:	46bd      	mov	sp, r7
 8001f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000b28 	.word	0x20000b28
 8001f30:	20000b18 	.word	0x20000b18
 8001f34:	20000b58 	.word	0x20000b58
 8001f38:	20000314 	.word	0x20000314
 8001f3c:	20000b1c 	.word	0x20000b1c
 8001f40:	20000b1a 	.word	0x20000b1a

08001f44 <setSign>:

void setSign(uint8_t channel, uint16_t index,uint8_t value)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	71fb      	strb	r3, [r7, #7]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	80bb      	strh	r3, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	71bb      	strb	r3, [r7, #6]
	if(disableSetting != 0) return;
 8001f56:	4b24      	ldr	r3, [pc, #144]	; (8001fe8 <setSign+0xa4>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d13e      	bne.n	8001fdc <setSign+0x98>
	if(value == 1)
 8001f5e:	79bb      	ldrb	r3, [r7, #6]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d11c      	bne.n	8001f9e <setSign+0x5a>
	{
		sign[channel][index/8] |= (1 << (index % 8));
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	88ba      	ldrh	r2, [r7, #4]
 8001f68:	08d2      	lsrs	r2, r2, #3
 8001f6a:	b290      	uxth	r0, r2
 8001f6c:	4601      	mov	r1, r0
 8001f6e:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <setSign+0xa8>)
 8001f70:	011b      	lsls	r3, r3, #4
 8001f72:	4413      	add	r3, r2
 8001f74:	440b      	add	r3, r1
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b25a      	sxtb	r2, r3
 8001f7a:	88bb      	ldrh	r3, [r7, #4]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	2101      	movs	r1, #1
 8001f82:	fa01 f303 	lsl.w	r3, r1, r3
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b25a      	sxtb	r2, r3
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	b2d1      	uxtb	r1, r2
 8001f90:	4a16      	ldr	r2, [pc, #88]	; (8001fec <setSign+0xa8>)
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	4403      	add	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e01f      	b.n	8001fde <setSign+0x9a>
	}
	else
	{
		sign[channel][index/8] &= ~(1 << (index % 8));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	88ba      	ldrh	r2, [r7, #4]
 8001fa2:	08d2      	lsrs	r2, r2, #3
 8001fa4:	b290      	uxth	r0, r2
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <setSign+0xa8>)
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	4413      	add	r3, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	b25a      	sxtb	r2, r3
 8001fb4:	88bb      	ldrh	r3, [r7, #4]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	2101      	movs	r1, #1
 8001fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	b25a      	sxtb	r2, r3
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	b2d1      	uxtb	r1, r2
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <setSign+0xa8>)
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4413      	add	r3, r2
 8001fd4:	4403      	add	r3, r0
 8001fd6:	460a      	mov	r2, r1
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	e000      	b.n	8001fde <setSign+0x9a>
	if(disableSetting != 0) return;
 8001fdc:	bf00      	nop
	}
}
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000bd8 	.word	0x20000bd8
 8001fec:	20000b78 	.word	0x20000b78

08001ff0 <calcXOR>:

float calcXOR(uint8_t channel)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
	disableSetting = 1;
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <calcXOR+0xc8>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
	uint16_t count = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	82fb      	strh	r3, [r7, #22]
	uint16_t counter = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i = 0; i < (BUFFERSIZE)/8; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	74fb      	strb	r3, [r7, #19]
 800200c:	e02e      	b.n	800206c <calcXOR+0x7c>
	{
		uint8_t xor = (sign[channel*2][i]) ^ (sign[channel*2 + 1][i]);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	005a      	lsls	r2, r3, #1
 8002012:	7cfb      	ldrb	r3, [r7, #19]
 8002014:	4929      	ldr	r1, [pc, #164]	; (80020bc <calcXOR+0xcc>)
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	440a      	add	r2, r1
 800201a:	4413      	add	r3, r2
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	4825      	ldr	r0, [pc, #148]	; (80020bc <calcXOR+0xcc>)
 8002028:	0109      	lsls	r1, r1, #4
 800202a:	4401      	add	r1, r0
 800202c:	440b      	add	r3, r1
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	4053      	eors	r3, r2
 8002032:	74bb      	strb	r3, [r7, #18]
		while (xor > 0)
 8002034:	e014      	b.n	8002060 <calcXOR+0x70>
		{
			if(counter < BUFFERSIZE - correctionRMS)
 8002036:	8aba      	ldrh	r2, [r7, #20]
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <calcXOR+0xd0>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002040:	429a      	cmp	r2, r3
 8002042:	da07      	bge.n	8002054 <calcXOR+0x64>
			{
				count += xor & 1;
 8002044:	7cbb      	ldrb	r3, [r7, #18]
 8002046:	b29b      	uxth	r3, r3
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	8afb      	ldrh	r3, [r7, #22]
 8002050:	4413      	add	r3, r2
 8002052:	82fb      	strh	r3, [r7, #22]
			}
			xor >>= 1;
 8002054:	7cbb      	ldrb	r3, [r7, #18]
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	74bb      	strb	r3, [r7, #18]
			counter++;
 800205a:	8abb      	ldrh	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	82bb      	strh	r3, [r7, #20]
		while (xor > 0)
 8002060:	7cbb      	ldrb	r3, [r7, #18]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1e7      	bne.n	8002036 <calcXOR+0x46>
	for(uint8_t i = 0; i < (BUFFERSIZE)/8; i++)
 8002066:	7cfb      	ldrb	r3, [r7, #19]
 8002068:	3301      	adds	r3, #1
 800206a:	74fb      	strb	r3, [r7, #19]
 800206c:	7cfb      	ldrb	r3, [r7, #19]
 800206e:	2b0f      	cmp	r3, #15
 8002070:	d9cd      	bls.n	800200e <calcXOR+0x1e>
		}
	}


	float angle = count;
 8002072:	8afb      	ldrh	r3, [r7, #22]
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fe0d 	bl	8000c94 <__aeabi_ui2f>
 800207a:	4603      	mov	r3, r0
 800207c:	60fb      	str	r3, [r7, #12]
	angle /= (BUFFERSIZE-correctionRMS);
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <calcXOR+0xd0>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fe08 	bl	8000c9c <__aeabi_i2f>
 800208c:	4603      	mov	r3, r0
 800208e:	4619      	mov	r1, r3
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7fe ff0b 	bl	8000eac <__aeabi_fdiv>
 8002096:	4603      	mov	r3, r0
 8002098:	60fb      	str	r3, [r7, #12]
	//angle = 1 - angle;
	angle *= 180.0f;
 800209a:	490a      	ldr	r1, [pc, #40]	; (80020c4 <calcXOR+0xd4>)
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f7fe fe51 	bl	8000d44 <__aeabi_fmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	60fb      	str	r3, [r7, #12]
	disableSetting = 0;
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <calcXOR+0xc8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
	return angle;
 80020ac:	68fb      	ldr	r3, [r7, #12]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000bd8 	.word	0x20000bd8
 80020bc:	20000b78 	.word	0x20000b78
 80020c0:	20000b58 	.word	0x20000b58
 80020c4:	43340000 	.word	0x43340000

080020c8 <getADC_Buffer>:

uint32_t* getADC_Buffer()
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	return ADC_Buffer;
 80020cc:	4b02      	ldr	r3, [pc, #8]	; (80020d8 <getADC_Buffer+0x10>)
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	200002fc 	.word	0x200002fc

080020dc <gethalfOfADC_Buffer>:

uint32_t* gethalfOfADC_Buffer()
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
	return halfOfADC_Buffer;
 80020e0:	4b02      	ldr	r3, [pc, #8]	; (80020ec <gethalfOfADC_Buffer+0x10>)
 80020e2:	681b      	ldr	r3, [r3, #0]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	20000004 	.word	0x20000004

080020f0 <getV>:

float getV(uint8_t channel)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	return sqrt(((float)RMS[2*channel+1])/(BUFFERSIZE - correctionRMS)) / (VOLTAGESCALE * OVERSAMPLING);
 80020fa:	79fb      	ldrb	r3, [r7, #7]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	3301      	adds	r3, #1
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <getV+0x78>)
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f7fe fdd3 	bl	8000cb8 <__aeabi_ul2f>
 8002112:	4604      	mov	r4, r0
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <getV+0x7c>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe fdbd 	bl	8000c9c <__aeabi_i2f>
 8002122:	4603      	mov	r3, r0
 8002124:	4619      	mov	r1, r3
 8002126:	4620      	mov	r0, r4
 8002128:	f7fe fec0 	bl	8000eac <__aeabi_fdiv>
 800212c:	4603      	mov	r3, r0
 800212e:	4618      	mov	r0, r3
 8002130:	f7fe f97a 	bl	8000428 <__aeabi_f2d>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4610      	mov	r0, r2
 800213a:	4619      	mov	r1, r3
 800213c:	f005 ffb2 	bl	80080a4 <sqrt>
 8002140:	a307      	add	r3, pc, #28	; (adr r3, 8002160 <getV+0x70>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe faf1 	bl	800072c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fc99 	bl	8000a88 <__aeabi_d2f>
 8002156:	4603      	mov	r3, r0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}
 8002160:	f0068db9 	.word	0xf0068db9
 8002164:	40428816 	.word	0x40428816
 8002168:	20000b28 	.word	0x20000b28
 800216c:	20000b58 	.word	0x20000b58

08002170 <getI>:

float getI(uint8_t channel)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
	return sqrt(((float)RMS[2*channel])/(BUFFERSIZE - correctionRMS)) / (CURRENTSCALE * OVERSAMPLING);
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4a1a      	ldr	r2, [pc, #104]	; (80021e8 <getI+0x78>)
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002188:	4610      	mov	r0, r2
 800218a:	4619      	mov	r1, r3
 800218c:	f7fe fd94 	bl	8000cb8 <__aeabi_ul2f>
 8002190:	4604      	mov	r4, r0
 8002192:	4b16      	ldr	r3, [pc, #88]	; (80021ec <getI+0x7c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fd7e 	bl	8000c9c <__aeabi_i2f>
 80021a0:	4603      	mov	r3, r0
 80021a2:	4619      	mov	r1, r3
 80021a4:	4620      	mov	r0, r4
 80021a6:	f7fe fe81 	bl	8000eac <__aeabi_fdiv>
 80021aa:	4603      	mov	r3, r0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe f93b 	bl	8000428 <__aeabi_f2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f005 ff73 	bl	80080a4 <sqrt>
 80021be:	a308      	add	r3, pc, #32	; (adr r3, 80021e0 <getI+0x70>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe fab2 	bl	800072c <__aeabi_ddiv>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	4610      	mov	r0, r2
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7fe fc5a 	bl	8000a88 <__aeabi_d2f>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop
 80021e0:	60418937 	.word	0x60418937
 80021e4:	407b60e5 	.word	0x407b60e5
 80021e8:	20000b28 	.word	0x20000b28
 80021ec:	20000b58 	.word	0x20000b58

080021f0 <getP>:

float getP(uint8_t channel)
{
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	return P[channel] / ((Tinterval)*(VOLTAGESCALE*CURRENTSCALE));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	4a14      	ldr	r2, [pc, #80]	; (8002250 <getP+0x60>)
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe f937 	bl	800047c <__aeabi_l2d>
 800220e:	4604      	mov	r4, r0
 8002210:	460d      	mov	r5, r1
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <getP+0x64>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f8f4 	bl	8000404 <__aeabi_i2d>
 800221c:	a30a      	add	r3, pc, #40	; (adr r3, 8002248 <getP+0x58>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe f959 	bl	80004d8 <__aeabi_dmul>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4620      	mov	r0, r4
 800222c:	4629      	mov	r1, r5
 800222e:	f7fe fa7d 	bl	800072c <__aeabi_ddiv>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7fe fc25 	bl	8000a88 <__aeabi_d2f>
 800223e:	4603      	mov	r3, r0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bdb0      	pop	{r4, r5, r7, pc}
 8002248:	e9eff343 	.word	0xe9eff343
 800224c:	406fb5e0 	.word	0x406fb5e0
 8002250:	20000b60 	.word	0x20000b60
 8002254:	20000b14 	.word	0x20000b14

08002258 <getS>:

float getS(uint8_t channel)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
	return getV(channel) * getI(channel);
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff43 	bl	80020f0 <getV>
 800226a:	4604      	mov	r4, r0
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff7e 	bl	8002170 <getI>
 8002274:	4603      	mov	r3, r0
 8002276:	4619      	mov	r1, r3
 8002278:	4620      	mov	r0, r4
 800227a:	f7fe fd63 	bl	8000d44 <__aeabi_fmul>
 800227e:	4603      	mov	r3, r0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	bd90      	pop	{r4, r7, pc}

08002288 <getQ>:

float getQ(uint8_t channel)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
	float P = getP(channel);
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ffab 	bl	80021f0 <getP>
 800229a:	60f8      	str	r0, [r7, #12]
	float S = getS(channel);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ffda 	bl	8002258 <getS>
 80022a4:	60b8      	str	r0, [r7, #8]
	return sqrt(S*S-P*P);
 80022a6:	68b9      	ldr	r1, [r7, #8]
 80022a8:	68b8      	ldr	r0, [r7, #8]
 80022aa:	f7fe fd4b 	bl	8000d44 <__aeabi_fmul>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461c      	mov	r4, r3
 80022b2:	68f9      	ldr	r1, [r7, #12]
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f7fe fd45 	bl	8000d44 <__aeabi_fmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4619      	mov	r1, r3
 80022be:	4620      	mov	r0, r4
 80022c0:	f7fe fc36 	bl	8000b30 <__aeabi_fsub>
 80022c4:	4603      	mov	r3, r0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe f8ae 	bl	8000428 <__aeabi_f2d>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f005 fee6 	bl	80080a4 <sqrt>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fbd2 	bl	8000a88 <__aeabi_d2f>
 80022e4:	4603      	mov	r3, r0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd90      	pop	{r4, r7, pc}
	...

080022f0 <LL_SYSTICK_IsActiveCounterFlag>:
#include "stm32f1xx_hal.h"

int __io_putchar(int ch);

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	e000e010 	.word	0xe000e010

08002314 <__io_putchar>:
 */
#include "smart_common.h"
#include "usart.h"

int __io_putchar(int ch)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b0a      	cmp	r3, #10
 8002320:	d102      	bne.n	8002328 <__io_putchar+0x14>
    __io_putchar('\r');
 8002322:	200d      	movs	r0, #13
 8002324:	f7ff fff6 	bl	8002314 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8002328:	1d39      	adds	r1, r7, #4
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
 800232e:	2201      	movs	r2, #1
 8002330:	4803      	ldr	r0, [pc, #12]	; (8002340 <__io_putchar+0x2c>)
 8002332:	f002 ff82 	bl	800523a <HAL_UART_Transmit>
  return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	20000be0 	.word	0x20000be0

08002344 <getCurrentMicros>:

uint32_t getCurrentMicros(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 800234a:	f7ff ffd1 	bl	80022f0 <LL_SYSTICK_IsActiveCounterFlag>
  uint32_t m = HAL_GetTick();
 800234e:	f000 fa51 	bl	80027f4 <HAL_GetTick>
 8002352:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <getCurrentMicros+0x60>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	3301      	adds	r3, #1
 800235a:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <getCurrentMicros+0x60>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 8002366:	f7ff ffc3 	bl	80022f0 <LL_SYSTICK_IsActiveCounterFlag>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <getCurrentMicros+0x3c>
    m = HAL_GetTick();
 8002370:	f000 fa40 	bl	80027f4 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <getCurrentMicros+0x60>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002386:	fb03 f202 	mul.w	r2, r3, r2
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002390:	fb03 f101 	mul.w	r1, r3, r1
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	fbb1 f3f3 	udiv	r3, r1, r3
 800239a:	4413      	add	r3, r2
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <HAL_MspInit+0x5c>)
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	4a14      	ldr	r2, [pc, #80]	; (8002404 <HAL_MspInit+0x5c>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6193      	str	r3, [r2, #24]
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_MspInit+0x5c>)
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_MspInit+0x5c>)
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <HAL_MspInit+0x5c>)
 80023cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d0:	61d3      	str	r3, [r2, #28]
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_MspInit+0x5c>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_MspInit+0x60>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_MspInit+0x60>)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	40021000 	.word	0x40021000
 8002408:	40010000 	.word	0x40010000

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr

08002436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002436:	b480      	push	{r7}
 8002438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	46bd      	mov	sp, r7
 800244a:	bc80      	pop	{r7}
 800244c:	4770      	bx	lr

0800244e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002452:	f000 f9bd 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <DMA1_Channel1_IRQHandler+0x10>)
 8002462:	f001 f9d1 	bl	8003808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000264 	.word	0x20000264

08002470 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <ADC1_2_IRQHandler+0x14>)
 8002476:	f000 fb71 	bl	8002b5c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800247a:	4803      	ldr	r0, [pc, #12]	; (8002488 <ADC1_2_IRQHandler+0x18>)
 800247c:	f000 fb6e 	bl	8002b5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20000204 	.word	0x20000204
 8002488:	20000234 	.word	0x20000234

0800248c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002490:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002494:	f001 fc88 	bl	8003da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}

0800249c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
	return 1;
 80024a0:	2301      	movs	r3, #1
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <_kill>:

int _kill(int pid, int sig)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024b4:	f003 f82c 	bl	8005510 <__errno>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2216      	movs	r2, #22
 80024bc:	601a      	str	r2, [r3, #0]
	return -1;
 80024be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <_exit>:

void _exit (int status)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024d2:	f04f 31ff 	mov.w	r1, #4294967295
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ffe7 	bl	80024aa <_kill>
	while (1) {}		/* Make sure we hang here */
 80024dc:	e7fe      	b.n	80024dc <_exit+0x12>

080024de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e00a      	b.n	8002506 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024f0:	f3af 8000 	nop.w
 80024f4:	4601      	mov	r1, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	60ba      	str	r2, [r7, #8]
 80024fc:	b2ca      	uxtb	r2, r1
 80024fe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3301      	adds	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	429a      	cmp	r2, r3
 800250c:	dbf0      	blt.n	80024f0 <_read+0x12>
	}

return len;
 800250e:	687b      	ldr	r3, [r7, #4]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
 8002528:	e009      	b.n	800253e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	60ba      	str	r2, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff feee 	bl	8002314 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3301      	adds	r3, #1
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	dbf1      	blt.n	800252a <_write+0x12>
	}
	return len;
 8002546:	687b      	ldr	r3, [r7, #4]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_close>:

int _close(int file)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	return -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr

08002566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
 800256e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002576:	605a      	str	r2, [r3, #4]
	return 0;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <_isatty>:

int _isatty(int file)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
	return 1;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
	return 0;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <_sbrk+0x5c>)
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <_sbrk+0x60>)
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c4:	4b13      	ldr	r3, [pc, #76]	; (8002614 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <_sbrk+0x64>)
 80025ce:	4a12      	ldr	r2, [pc, #72]	; (8002618 <_sbrk+0x68>)
 80025d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <_sbrk+0x64>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d207      	bcs.n	80025f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025e0:	f002 ff96 	bl	8005510 <__errno>
 80025e4:	4603      	mov	r3, r0
 80025e6:	220c      	movs	r2, #12
 80025e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	e009      	b.n	8002604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025f0:	4b08      	ldr	r3, [pc, #32]	; (8002614 <_sbrk+0x64>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	4a05      	ldr	r2, [pc, #20]	; (8002614 <_sbrk+0x64>)
 8002600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20005000 	.word	0x20005000
 8002610:	00000400 	.word	0x00000400
 8002614:	20000bdc 	.word	0x20000bdc
 8002618:	20000c38 	.word	0x20000c38

0800261c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr

08002628 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <MX_USART2_UART_Init+0x50>)
 8002630:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 8002634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002638:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 800264e:	220c      	movs	r2, #12
 8002650:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_USART2_UART_Init+0x4c>)
 8002660:	f002 fd9e 	bl	80051a0 <HAL_UART_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800266a:	f7ff f93c 	bl	80018e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000be0 	.word	0x20000be0
 8002678:	40004400 	.word	0x40004400

0800267c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0310 	add.w	r3, r7, #16
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a15      	ldr	r2, [pc, #84]	; (80026ec <HAL_UART_MspInit+0x70>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d123      	bne.n	80026e4 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800269c:	4b14      	ldr	r3, [pc, #80]	; (80026f0 <HAL_UART_MspInit+0x74>)
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	4a13      	ldr	r2, [pc, #76]	; (80026f0 <HAL_UART_MspInit+0x74>)
 80026a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a6:	61d3      	str	r3, [r2, #28]
 80026a8:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_UART_MspInit+0x74>)
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b4:	4b0e      	ldr	r3, [pc, #56]	; (80026f0 <HAL_UART_MspInit+0x74>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	4a0d      	ldr	r2, [pc, #52]	; (80026f0 <HAL_UART_MspInit+0x74>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	6193      	str	r3, [r2, #24]
 80026c0:	4b0b      	ldr	r3, [pc, #44]	; (80026f0 <HAL_UART_MspInit+0x74>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	60bb      	str	r3, [r7, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026cc:	230c      	movs	r3, #12
 80026ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2302      	movs	r3, #2
 80026d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	4619      	mov	r1, r3
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <HAL_UART_MspInit+0x78>)
 80026e0:	f001 f9c6 	bl	8003a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026e4:	bf00      	nop
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40004400 	.word	0x40004400
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40010800 	.word	0x40010800

080026f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026fa:	490d      	ldr	r1, [pc, #52]	; (8002730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026fc:	4a0d      	ldr	r2, [pc, #52]	; (8002734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002700:	e002      	b.n	8002708 <LoopCopyDataInit>

08002702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002706:	3304      	adds	r3, #4

08002708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800270c:	d3f9      	bcc.n	8002702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002710:	4c0a      	ldr	r4, [pc, #40]	; (800273c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002714:	e001      	b.n	800271a <LoopFillZerobss>

08002716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002718:	3204      	adds	r2, #4

0800271a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800271c:	d3fb      	bcc.n	8002716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800271e:	f7ff ff7d 	bl	800261c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002722:	f002 fefb 	bl	800551c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002726:	f7fe fffd 	bl	8001724 <main>
  bx lr
 800272a:	4770      	bx	lr
  ldr r0, =_sdata
 800272c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002730:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002734:	080086ec 	.word	0x080086ec
  ldr r2, =_sbss
 8002738:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800273c:	20000c38 	.word	0x20000c38

08002740 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002740:	e7fe      	b.n	8002740 <CAN1_RX1_IRQHandler>
	...

08002744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_Init+0x28>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_Init+0x28>)
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002754:	2003      	movs	r0, #3
 8002756:	f000 ff5b 	bl	8003610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275a:	2000      	movs	r0, #0
 800275c:	f000 f808 	bl	8002770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002760:	f7ff fe22 	bl	80023a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000

08002770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_InitTick+0x54>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x58>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f000 ff73 	bl	800367a <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00e      	b.n	80027bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	d80a      	bhi.n	80027ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a4:	2200      	movs	r2, #0
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ac:	f000 ff3b 	bl	8003626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <HAL_InitTick+0x5c>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000008 	.word	0x20000008
 80027c8:	20000010 	.word	0x20000010
 80027cc:	2000000c 	.word	0x2000000c

080027d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_IncTick+0x1c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_IncTick+0x20>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a03      	ldr	r2, [pc, #12]	; (80027f0 <HAL_IncTick+0x20>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	20000010 	.word	0x20000010
 80027f0:	20000c24 	.word	0x20000c24

080027f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b02      	ldr	r3, [pc, #8]	; (8002804 <HAL_GetTick+0x10>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	bc80      	pop	{r7}
 8002802:	4770      	bx	lr
 8002804:	20000c24 	.word	0x20000c24

08002808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fff0 	bl	80027f4 <HAL_GetTick>
 8002814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002820:	d005      	beq.n	800282e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <HAL_Delay+0x44>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282e:	bf00      	nop
 8002830:	f7ff ffe0 	bl	80027f4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	429a      	cmp	r2, r3
 800283e:	d8f7      	bhi.n	8002830 <HAL_Delay+0x28>
  {
  }
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000010 	.word	0x20000010

08002850 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0be      	b.n	80029f0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	2b00      	cmp	r3, #0
 800287e:	d109      	bne.n	8002894 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f7fe fc96 	bl	80011c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fb89 	bl	8002fac <ADC_ConversionStop_Disable>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 8099 	bne.w	80029de <HAL_ADC_Init+0x18e>
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f040 8095 	bne.w	80029de <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028bc:	f023 0302 	bic.w	r3, r3, #2
 80028c0:	f043 0202 	orr.w	r2, r3, #2
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028d0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7b1b      	ldrb	r3, [r3, #12]
 80028d6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028d8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	4313      	orrs	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028e8:	d003      	beq.n	80028f2 <HAL_ADC_Init+0xa2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d102      	bne.n	80028f8 <HAL_ADC_Init+0xa8>
 80028f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f6:	e000      	b.n	80028fa <HAL_ADC_Init+0xaa>
 80028f8:	2300      	movs	r3, #0
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7d1b      	ldrb	r3, [r3, #20]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d119      	bne.n	800293c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	7b1b      	ldrb	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	3b01      	subs	r3, #1
 8002916:	035a      	lsls	r2, r3, #13
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	e00b      	b.n	800293c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	f043 0220 	orr.w	r2, r3, #32
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	430a      	orrs	r2, r1
 800294e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_ADC_Init+0x1a8>)
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	68b9      	ldr	r1, [r7, #8]
 8002960:	430b      	orrs	r3, r1
 8002962:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296c:	d003      	beq.n	8002976 <HAL_ADC_Init+0x126>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d104      	bne.n	8002980 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	3b01      	subs	r3, #1
 800297c:	051b      	lsls	r3, r3, #20
 800297e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	430a      	orrs	r2, r1
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_ADC_Init+0x1ac>)
 800299c:	4013      	ands	r3, r2
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d10b      	bne.n	80029bc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f023 0303 	bic.w	r3, r3, #3
 80029b2:	f043 0201 	orr.w	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029ba:	e018      	b.n	80029ee <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f023 0312 	bic.w	r3, r3, #18
 80029c4:	f043 0210 	orr.w	r2, r3, #16
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029dc:	e007      	b.n	80029ee <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e2:	f043 0210 	orr.w	r2, r3, #16
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	ffe1f7fd 	.word	0xffe1f7fd
 80029fc:	ff1f0efe 	.word	0xff1f0efe

08002a00 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_ADC_Start+0x1a>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e098      	b.n	8002b4c <HAL_ADC_Start+0x14c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 fa68 	bl	8002ef8 <ADC_Enable>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f040 8087 	bne.w	8002b42 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a41      	ldr	r2, [pc, #260]	; (8002b54 <HAL_ADC_Start+0x154>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d105      	bne.n	8002a5e <HAL_ADC_Start+0x5e>
 8002a52:	4b41      	ldr	r3, [pc, #260]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d026      	beq.n	8002ac6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a88:	e01d      	b.n	8002ac6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a2f      	ldr	r2, [pc, #188]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_ADC_Start+0xaa>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2b      	ldr	r2, [pc, #172]	; (8002b54 <HAL_ADC_Start+0x154>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10d      	bne.n	8002ac6 <HAL_ADC_Start+0xc6>
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002abe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad6:	f023 0206 	bic.w	r2, r3, #6
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ade:	e002      	b.n	8002ae6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0202 	mvn.w	r2, #2
 8002af6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b06:	d113      	bne.n	8002b30 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b0c:	4a11      	ldr	r2, [pc, #68]	; (8002b54 <HAL_ADC_Start+0x154>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_ADC_Start+0x158>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b2c:	609a      	str	r2, [r3, #8]
 8002b2e:	e00c      	b.n	8002b4a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	e003      	b.n	8002b4a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40012800 	.word	0x40012800
 8002b58:	40012400 	.word	0x40012400

08002b5c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d140      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d139      	bne.n	8002bf4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ba2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ba6:	d11d      	bne.n	8002be4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d119      	bne.n	8002be4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0220 	bic.w	r2, r2, #32
 8002bbe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bdc:	f043 0201 	orr.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7fe fc08 	bl	80013fa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0212 	mvn.w	r2, #18
 8002bf2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	d14f      	bne.n	8002ca2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d148      	bne.n	8002ca2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d105      	bne.n	8002c28 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002c32:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002c36:	d012      	beq.n	8002c5e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d125      	bne.n	8002c92 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002c50:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c54:	d11d      	bne.n	8002c92 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d119      	bne.n	8002c92 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c6c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 fb94 	bl	80033c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 020c 	mvn.w	r2, #12
 8002ca0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cac:	2b40      	cmp	r3, #64	; 0x40
 8002cae:	d114      	bne.n	8002cda <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10d      	bne.n	8002cda <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f809 	bl	8002ce2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0201 	mvn.w	r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
	...

08002d08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x20>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e0dc      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x1da>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d81c      	bhi.n	8002d72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	3b05      	subs	r3, #5
 8002d4a:	221f      	movs	r2, #31
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	4019      	ands	r1, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	3b05      	subs	r3, #5
 8002d64:	fa00 f203 	lsl.w	r2, r0, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d70:	e03c      	b.n	8002dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d81c      	bhi.n	8002db4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b23      	subs	r3, #35	; 0x23
 8002d8c:	221f      	movs	r2, #31
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	4019      	ands	r1, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	3b23      	subs	r3, #35	; 0x23
 8002da6:	fa00 f203 	lsl.w	r2, r0, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
 8002db2:	e01b      	b.n	8002dec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b41      	subs	r3, #65	; 0x41
 8002dc6:	221f      	movs	r2, #31
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	4019      	ands	r1, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b41      	subs	r3, #65	; 0x41
 8002de0:	fa00 f203 	lsl.w	r2, r0, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	d91c      	bls.n	8002e2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68d9      	ldr	r1, [r3, #12]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	4413      	add	r3, r2
 8002e04:	3b1e      	subs	r3, #30
 8002e06:	2207      	movs	r2, #7
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	4019      	ands	r1, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	6898      	ldr	r0, [r3, #8]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3b1e      	subs	r3, #30
 8002e20:	fa00 f203 	lsl.w	r2, r0, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	60da      	str	r2, [r3, #12]
 8002e2c:	e019      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6919      	ldr	r1, [r3, #16]
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	4413      	add	r3, r2
 8002e3e:	2207      	movs	r2, #7
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	4019      	ands	r1, r3
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6898      	ldr	r0, [r3, #8]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	fa00 f203 	lsl.w	r2, r0, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d003      	beq.n	8002e72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e6e:	2b11      	cmp	r3, #17
 8002e70:	d132      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_ADC_ConfigChannel+0x1e4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d125      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d126      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002e98:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eac:	0c9a      	lsrs	r2, r3, #18
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eb8:	e002      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f9      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x1b2>
 8002ec6:	e007      	b.n	8002ed8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	f043 0220 	orr.w	r2, r3, #32
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	40012400 	.word	0x40012400
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	431bde83 	.word	0x431bde83

08002ef8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d040      	beq.n	8002f98 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <ADC_Enable+0xac>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1f      	ldr	r2, [pc, #124]	; (8002fa8 <ADC_Enable+0xb0>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	0c9b      	lsrs	r3, r3, #18
 8002f32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f34:	e002      	b.n	8002f3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f9      	bne.n	8002f36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f42:	f7ff fc57 	bl	80027f4 <HAL_GetTick>
 8002f46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f48:	e01f      	b.n	8002f8a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f4a:	f7ff fc53 	bl	80027f4 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d918      	bls.n	8002f8a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d011      	beq.n	8002f8a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e007      	b.n	8002f9a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d1d8      	bne.n	8002f4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d12e      	bne.n	8003024 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0201 	bic.w	r2, r2, #1
 8002fd4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fd6:	f7ff fc0d 	bl	80027f4 <HAL_GetTick>
 8002fda:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002fdc:	e01b      	b.n	8003016 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002fde:	f7ff fc09 	bl	80027f4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d914      	bls.n	8003016 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10d      	bne.n	8003016 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b01      	cmp	r3, #1
 8003022:	d0dc      	beq.n	8002fde <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003044:	2b00      	cmp	r3, #0
 8003046:	d127      	bne.n	8003098 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800305e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003062:	d115      	bne.n	8003090 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d105      	bne.n	8003090 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003090:	68f8      	ldr	r0, [r7, #12]
 8003092:	f7fe f9b2 	bl	80013fa <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003096:	e004      	b.n	80030a2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f7fe f98d 	bl	80013d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030be:	bf00      	nop
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b084      	sub	sp, #16
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7ff fe01 	bl	8002cf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003112:	2b01      	cmp	r3, #1
 8003114:	d101      	bne.n	800311a <HAL_ADCEx_Calibration_Start+0x1e>
 8003116:	2302      	movs	r3, #2
 8003118:	e095      	b.n	8003246 <HAL_ADCEx_Calibration_Start+0x14a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff ff42 	bl	8002fac <ADC_ConversionStop_Disable>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 8084 	bne.w	800323c <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800313c:	f023 0302 	bic.w	r3, r3, #2
 8003140:	f043 0202 	orr.w	r2, r3, #2
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003148:	4b41      	ldr	r3, [pc, #260]	; (8003250 <HAL_ADCEx_Calibration_Start+0x154>)
 800314a:	681c      	ldr	r4, [r3, #0]
 800314c:	2002      	movs	r0, #2
 800314e:	f001 ff67 	bl	8005020 <HAL_RCCEx_GetPeriphCLKFreq>
 8003152:	4603      	mov	r3, r0
 8003154:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8003158:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800315a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800315c:	e002      	b.n	8003164 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3b01      	subs	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f9      	bne.n	800315e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff fec4 	bl	8002ef8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003180:	f7ff fb38 	bl	80027f4 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003186:	e01b      	b.n	80031c0 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003188:	f7ff fb34 	bl	80027f4 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b0a      	cmp	r3, #10
 8003194:	d914      	bls.n	80031c0 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	f023 0312 	bic.w	r3, r3, #18
 80031ac:	f043 0210 	orr.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e042      	b.n	8003246 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1dc      	bne.n	8003188 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 0204 	orr.w	r2, r2, #4
 80031dc:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80031de:	f7ff fb09 	bl	80027f4 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80031e4:	e01b      	b.n	800321e <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80031e6:	f7ff fb05 	bl	80027f4 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b0a      	cmp	r3, #10
 80031f2:	d914      	bls.n	800321e <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0304 	and.w	r3, r3, #4
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003206:	f023 0312 	bic.w	r3, r3, #18
 800320a:	f043 0210 	orr.w	r2, r3, #16
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e013      	b.n	8003246 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1dc      	bne.n	80031e6 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003230:	f023 0303 	bic.w	r3, r3, #3
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003244:	7dfb      	ldrb	r3, [r7, #23]
}
 8003246:	4618      	mov	r0, r3
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	bd90      	pop	{r4, r7, pc}
 800324e:	bf00      	nop
 8003250:	20000008 	.word	0x20000008

08003254 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b092      	sub	sp, #72	; 0x48
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 8003266:	f107 0314 	add.w	r3, r7, #20
 800326a:	2230      	movs	r2, #48	; 0x30
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f002 f978 	bl	8005564 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800327e:	2302      	movs	r3, #2
 8003280:	e08f      	b.n	80033a2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800328a:	4b48      	ldr	r3, [pc, #288]	; (80033ac <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 800328c:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003296:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800329a:	d00b      	beq.n	80032b4 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e076      	b.n	80033a2 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f7ff fe1f 	bl	8002ef8 <ADC_Enable>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 80032c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fe13 	bl	8002ef8 <ADC_Enable>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80032d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d15a      	bne.n	8003396 <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e4:	4b32      	ldr	r3, [pc, #200]	; (80033b0 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003306:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4a23      	ldr	r2, [pc, #140]	; (80033b8 <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4a22      	ldr	r2, [pc, #136]	; (80033bc <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0202 	mvn.w	r2, #2
 800333c:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334c:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a18      	ldr	r0, [r3, #32]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	334c      	adds	r3, #76	; 0x4c
 8003358:	4619      	mov	r1, r3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f000 f9f3 	bl	8003748 <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800336c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003370:	d108      	bne.n	8003384 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003380:	609a      	str	r2, [r3, #8]
 8003382:	e00c      	b.n	800339e <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	e003      	b.n	800339e <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800339e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3748      	adds	r7, #72	; 0x48
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40012800 	.word	0x40012800
 80033b0:	ffeffcfe 	.word	0xffeffcfe
 80033b4:	0800302f 	.word	0x0800302f
 80033b8:	080030ab 	.word	0x080030ab
 80033bc:	080030c7 	.word	0x080030c7

080033c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b090      	sub	sp, #64	; 0x40
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 80033e4:	f107 030c 	add.w	r3, r7, #12
 80033e8:	2230      	movs	r2, #48	; 0x30
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f002 f8b9 	bl	8005564 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e032      	b.n	8003466 <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003408:	4b19      	ldr	r3, [pc, #100]	; (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 800340a:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d016      	beq.n	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8003422:	2b01      	cmp	r3, #1
 8003424:	d010      	beq.n	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 800342a:	4a12      	ldr	r2, [pc, #72]	; (8003474 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d10b      	bne.n	8003448 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	e008      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344c:	f043 0220 	orr.w	r2, r3, #32
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003462:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8003466:	4618      	mov	r0, r3
 8003468:	3740      	adds	r7, #64	; 0x40
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40012800 	.word	0x40012800
 8003474:	40012400 	.word	0x40012400

08003478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003488:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003494:	4013      	ands	r3, r2
 8003496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034aa:	4a04      	ldr	r2, [pc, #16]	; (80034bc <__NVIC_SetPriorityGrouping+0x44>)
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	60d3      	str	r3, [r2, #12]
}
 80034b0:	bf00      	nop
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c4:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <__NVIC_GetPriorityGrouping+0x18>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	0a1b      	lsrs	r3, r3, #8
 80034ca:	f003 0307 	and.w	r3, r3, #7
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	db0b      	blt.n	8003506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ee:	79fb      	ldrb	r3, [r7, #7]
 80034f0:	f003 021f 	and.w	r2, r3, #31
 80034f4:	4906      	ldr	r1, [pc, #24]	; (8003510 <__NVIC_EnableIRQ+0x34>)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	2001      	movs	r0, #1
 80034fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	e000e100 	.word	0xe000e100

08003514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	; (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	; (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr
 800355e:	bf00      	nop
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
         );
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bc80      	pop	{r7}
 80035ca:	4770      	bx	lr

080035cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035dc:	d301      	bcc.n	80035e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035de:	2301      	movs	r3, #1
 80035e0:	e00f      	b.n	8003602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e2:	4a0a      	ldr	r2, [pc, #40]	; (800360c <SysTick_Config+0x40>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ea:	210f      	movs	r1, #15
 80035ec:	f04f 30ff 	mov.w	r0, #4294967295
 80035f0:	f7ff ff90 	bl	8003514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <SysTick_Config+0x40>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fa:	4b04      	ldr	r3, [pc, #16]	; (800360c <SysTick_Config+0x40>)
 80035fc:	2207      	movs	r2, #7
 80035fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	e000e010 	.word	0xe000e010

08003610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff ff2d 	bl	8003478 <__NVIC_SetPriorityGrouping>
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	4603      	mov	r3, r0
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
 8003632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003638:	f7ff ff42 	bl	80034c0 <__NVIC_GetPriorityGrouping>
 800363c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	6978      	ldr	r0, [r7, #20]
 8003644:	f7ff ff90 	bl	8003568 <NVIC_EncodePriority>
 8003648:	4602      	mov	r2, r0
 800364a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff5f 	bl	8003514 <__NVIC_SetPriority>
}
 8003656:	bf00      	nop
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	4603      	mov	r3, r0
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff35 	bl	80034dc <__NVIC_EnableIRQ>
}
 8003672:	bf00      	nop
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff ffa2 	bl	80035cc <SysTick_Config>
 8003688:	4603      	mov	r3, r0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e043      	b.n	8003732 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b22      	ldr	r3, [pc, #136]	; (800373c <HAL_DMA_Init+0xa8>)
 80036b2:	4413      	add	r3, r2
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <HAL_DMA_Init+0xac>)
 80036b6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ba:	091b      	lsrs	r3, r3, #4
 80036bc:	009a      	lsls	r2, r3, #2
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a1f      	ldr	r2, [pc, #124]	; (8003744 <HAL_DMA_Init+0xb0>)
 80036c6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80036de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80036e2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80036ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003704:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	bffdfff8 	.word	0xbffdfff8
 8003740:	cccccccd 	.word	0xcccccccd
 8003744:	40020000 	.word	0x40020000

08003748 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_DMA_Start_IT+0x20>
 8003764:	2302      	movs	r3, #2
 8003766:	e04a      	b.n	80037fe <HAL_DMA_Start_IT+0xb6>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003776:	2b01      	cmp	r3, #1
 8003778:	d13a      	bne.n	80037f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2202      	movs	r2, #2
 800377e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f938 	bl	8003a14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 020e 	orr.w	r2, r2, #14
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e00f      	b.n	80037de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0204 	bic.w	r2, r2, #4
 80037cc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 020a 	orr.w	r2, r2, #10
 80037dc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e005      	b.n	80037fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
 80037fa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2204      	movs	r2, #4
 8003826:	409a      	lsls	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d04f      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xc8>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d04a      	beq.n	80038d0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0204 	bic.w	r2, r2, #4
 8003856:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a66      	ldr	r2, [pc, #408]	; (80039f8 <HAL_DMA_IRQHandler+0x1f0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d029      	beq.n	80038b6 <HAL_DMA_IRQHandler+0xae>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a65      	ldr	r2, [pc, #404]	; (80039fc <HAL_DMA_IRQHandler+0x1f4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xaa>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a63      	ldr	r2, [pc, #396]	; (8003a00 <HAL_DMA_IRQHandler+0x1f8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01a      	beq.n	80038ac <HAL_DMA_IRQHandler+0xa4>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a62      	ldr	r2, [pc, #392]	; (8003a04 <HAL_DMA_IRQHandler+0x1fc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d012      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x9e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a60      	ldr	r2, [pc, #384]	; (8003a08 <HAL_DMA_IRQHandler+0x200>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d00a      	beq.n	80038a0 <HAL_DMA_IRQHandler+0x98>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a5f      	ldr	r2, [pc, #380]	; (8003a0c <HAL_DMA_IRQHandler+0x204>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d102      	bne.n	800389a <HAL_DMA_IRQHandler+0x92>
 8003894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003898:	e00e      	b.n	80038b8 <HAL_DMA_IRQHandler+0xb0>
 800389a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800389e:	e00b      	b.n	80038b8 <HAL_DMA_IRQHandler+0xb0>
 80038a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038a4:	e008      	b.n	80038b8 <HAL_DMA_IRQHandler+0xb0>
 80038a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038aa:	e005      	b.n	80038b8 <HAL_DMA_IRQHandler+0xb0>
 80038ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038b0:	e002      	b.n	80038b8 <HAL_DMA_IRQHandler+0xb0>
 80038b2:	2340      	movs	r3, #64	; 0x40
 80038b4:	e000      	b.n	80038b8 <HAL_DMA_IRQHandler+0xb0>
 80038b6:	2304      	movs	r3, #4
 80038b8:	4a55      	ldr	r2, [pc, #340]	; (8003a10 <HAL_DMA_IRQHandler+0x208>)
 80038ba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 8094 	beq.w	80039ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80038ce:	e08e      	b.n	80039ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2202      	movs	r2, #2
 80038d6:	409a      	lsls	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4013      	ands	r3, r2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d056      	beq.n	800398e <HAL_DMA_IRQHandler+0x186>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d051      	beq.n	800398e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 020a 	bic.w	r2, r2, #10
 8003906:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a38      	ldr	r2, [pc, #224]	; (80039f8 <HAL_DMA_IRQHandler+0x1f0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d029      	beq.n	800396e <HAL_DMA_IRQHandler+0x166>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a37      	ldr	r2, [pc, #220]	; (80039fc <HAL_DMA_IRQHandler+0x1f4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d022      	beq.n	800396a <HAL_DMA_IRQHandler+0x162>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a35      	ldr	r2, [pc, #212]	; (8003a00 <HAL_DMA_IRQHandler+0x1f8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01a      	beq.n	8003964 <HAL_DMA_IRQHandler+0x15c>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a34      	ldr	r2, [pc, #208]	; (8003a04 <HAL_DMA_IRQHandler+0x1fc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d012      	beq.n	800395e <HAL_DMA_IRQHandler+0x156>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a32      	ldr	r2, [pc, #200]	; (8003a08 <HAL_DMA_IRQHandler+0x200>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d00a      	beq.n	8003958 <HAL_DMA_IRQHandler+0x150>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a31      	ldr	r2, [pc, #196]	; (8003a0c <HAL_DMA_IRQHandler+0x204>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d102      	bne.n	8003952 <HAL_DMA_IRQHandler+0x14a>
 800394c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003950:	e00e      	b.n	8003970 <HAL_DMA_IRQHandler+0x168>
 8003952:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003956:	e00b      	b.n	8003970 <HAL_DMA_IRQHandler+0x168>
 8003958:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800395c:	e008      	b.n	8003970 <HAL_DMA_IRQHandler+0x168>
 800395e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003962:	e005      	b.n	8003970 <HAL_DMA_IRQHandler+0x168>
 8003964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003968:	e002      	b.n	8003970 <HAL_DMA_IRQHandler+0x168>
 800396a:	2320      	movs	r3, #32
 800396c:	e000      	b.n	8003970 <HAL_DMA_IRQHandler+0x168>
 800396e:	2302      	movs	r3, #2
 8003970:	4a27      	ldr	r2, [pc, #156]	; (8003a10 <HAL_DMA_IRQHandler+0x208>)
 8003972:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	2b00      	cmp	r3, #0
 8003982:	d034      	beq.n	80039ee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800398c:	e02f      	b.n	80039ee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	2208      	movs	r2, #8
 8003994:	409a      	lsls	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d028      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x1e8>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	f003 0308 	and.w	r3, r3, #8
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d023      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 020e 	bic.w	r2, r2, #14
 80039b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f202 	lsl.w	r2, r1, r2
 80039c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d004      	beq.n	80039f0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
    }
  }
  return;
 80039ee:	bf00      	nop
 80039f0:	bf00      	nop
}
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40020008 	.word	0x40020008
 80039fc:	4002001c 	.word	0x4002001c
 8003a00:	40020030 	.word	0x40020030
 8003a04:	40020044 	.word	0x40020044
 8003a08:	40020058 	.word	0x40020058
 8003a0c:	4002006c 	.word	0x4002006c
 8003a10:	40020000 	.word	0x40020000

08003a14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d108      	bne.n	8003a54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a52:	e007      	b.n	8003a64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	60da      	str	r2, [r3, #12]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bc80      	pop	{r7}
 8003a6c:	4770      	bx	lr
	...

08003a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b08b      	sub	sp, #44	; 0x2c
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a82:	e169      	b.n	8003d58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003a84:	2201      	movs	r2, #1
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	f040 8158 	bne.w	8003d52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4a9a      	ldr	r2, [pc, #616]	; (8003d10 <HAL_GPIO_Init+0x2a0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d05e      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003aac:	4a98      	ldr	r2, [pc, #608]	; (8003d10 <HAL_GPIO_Init+0x2a0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d875      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ab2:	4a98      	ldr	r2, [pc, #608]	; (8003d14 <HAL_GPIO_Init+0x2a4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d058      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ab8:	4a96      	ldr	r2, [pc, #600]	; (8003d14 <HAL_GPIO_Init+0x2a4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d86f      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003abe:	4a96      	ldr	r2, [pc, #600]	; (8003d18 <HAL_GPIO_Init+0x2a8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d052      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ac4:	4a94      	ldr	r2, [pc, #592]	; (8003d18 <HAL_GPIO_Init+0x2a8>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d869      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003aca:	4a94      	ldr	r2, [pc, #592]	; (8003d1c <HAL_GPIO_Init+0x2ac>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04c      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003ad0:	4a92      	ldr	r2, [pc, #584]	; (8003d1c <HAL_GPIO_Init+0x2ac>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d863      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ad6:	4a92      	ldr	r2, [pc, #584]	; (8003d20 <HAL_GPIO_Init+0x2b0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d046      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
 8003adc:	4a90      	ldr	r2, [pc, #576]	; (8003d20 <HAL_GPIO_Init+0x2b0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d85d      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003ae2:	2b12      	cmp	r3, #18
 8003ae4:	d82a      	bhi.n	8003b3c <HAL_GPIO_Init+0xcc>
 8003ae6:	2b12      	cmp	r3, #18
 8003ae8:	d859      	bhi.n	8003b9e <HAL_GPIO_Init+0x12e>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <HAL_GPIO_Init+0x80>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b6b 	.word	0x08003b6b
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b57 	.word	0x08003b57
 8003afc:	08003b99 	.word	0x08003b99
 8003b00:	08003b9f 	.word	0x08003b9f
 8003b04:	08003b9f 	.word	0x08003b9f
 8003b08:	08003b9f 	.word	0x08003b9f
 8003b0c:	08003b9f 	.word	0x08003b9f
 8003b10:	08003b9f 	.word	0x08003b9f
 8003b14:	08003b9f 	.word	0x08003b9f
 8003b18:	08003b9f 	.word	0x08003b9f
 8003b1c:	08003b9f 	.word	0x08003b9f
 8003b20:	08003b9f 	.word	0x08003b9f
 8003b24:	08003b9f 	.word	0x08003b9f
 8003b28:	08003b9f 	.word	0x08003b9f
 8003b2c:	08003b9f 	.word	0x08003b9f
 8003b30:	08003b9f 	.word	0x08003b9f
 8003b34:	08003b4d 	.word	0x08003b4d
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	4a79      	ldr	r2, [pc, #484]	; (8003d24 <HAL_GPIO_Init+0x2b4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d013      	beq.n	8003b6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003b42:	e02c      	b.n	8003b9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	623b      	str	r3, [r7, #32]
          break;
 8003b4a:	e029      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	3304      	adds	r3, #4
 8003b52:	623b      	str	r3, [r7, #32]
          break;
 8003b54:	e024      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	623b      	str	r3, [r7, #32]
          break;
 8003b5e:	e01f      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	330c      	adds	r3, #12
 8003b66:	623b      	str	r3, [r7, #32]
          break;
 8003b68:	e01a      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d102      	bne.n	8003b78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b72:	2304      	movs	r3, #4
 8003b74:	623b      	str	r3, [r7, #32]
          break;
 8003b76:	e013      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b80:	2308      	movs	r3, #8
 8003b82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	69fa      	ldr	r2, [r7, #28]
 8003b88:	611a      	str	r2, [r3, #16]
          break;
 8003b8a:	e009      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	615a      	str	r2, [r3, #20]
          break;
 8003b96:	e003      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
          break;
 8003b9c:	e000      	b.n	8003ba0 <HAL_GPIO_Init+0x130>
          break;
 8003b9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2bff      	cmp	r3, #255	; 0xff
 8003ba4:	d801      	bhi.n	8003baa <HAL_GPIO_Init+0x13a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	e001      	b.n	8003bae <HAL_GPIO_Init+0x13e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	2bff      	cmp	r3, #255	; 0xff
 8003bb4:	d802      	bhi.n	8003bbc <HAL_GPIO_Init+0x14c>
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	e002      	b.n	8003bc2 <HAL_GPIO_Init+0x152>
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	3b08      	subs	r3, #8
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	210f      	movs	r1, #15
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80b1 	beq.w	8003d52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4a4c      	ldr	r2, [pc, #304]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6193      	str	r3, [r2, #24]
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	; (8003d28 <HAL_GPIO_Init+0x2b8>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c08:	4a48      	ldr	r2, [pc, #288]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	220f      	movs	r2, #15
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a40      	ldr	r2, [pc, #256]	; (8003d30 <HAL_GPIO_Init+0x2c0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_GPIO_Init+0x1ec>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a3f      	ldr	r2, [pc, #252]	; (8003d34 <HAL_GPIO_Init+0x2c4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00d      	beq.n	8003c58 <HAL_GPIO_Init+0x1e8>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a3e      	ldr	r2, [pc, #248]	; (8003d38 <HAL_GPIO_Init+0x2c8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d007      	beq.n	8003c54 <HAL_GPIO_Init+0x1e4>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a3d      	ldr	r2, [pc, #244]	; (8003d3c <HAL_GPIO_Init+0x2cc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <HAL_GPIO_Init+0x1e0>
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e006      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c50:	2304      	movs	r3, #4
 8003c52:	e004      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e002      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_GPIO_Init+0x1ee>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c60:	f002 0203 	and.w	r2, r2, #3
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	4093      	lsls	r3, r2
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c6e:	492f      	ldr	r1, [pc, #188]	; (8003d2c <HAL_GPIO_Init+0x2bc>)
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	3302      	adds	r3, #2
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d006      	beq.n	8003c96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c88:	4b2d      	ldr	r3, [pc, #180]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	492c      	ldr	r1, [pc, #176]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c96:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	4928      	ldr	r1, [pc, #160]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d006      	beq.n	8003cbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003cb0:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	4922      	ldr	r1, [pc, #136]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	604b      	str	r3, [r1, #4]
 8003cbc:	e006      	b.n	8003ccc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	491e      	ldr	r1, [pc, #120]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d006      	beq.n	8003ce6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cd8:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	4918      	ldr	r1, [pc, #96]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ce6:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	4914      	ldr	r1, [pc, #80]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d021      	beq.n	8003d44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	490e      	ldr	r1, [pc, #56]	; (8003d40 <HAL_GPIO_Init+0x2d0>)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60cb      	str	r3, [r1, #12]
 8003d0c:	e021      	b.n	8003d52 <HAL_GPIO_Init+0x2e2>
 8003d0e:	bf00      	nop
 8003d10:	10320000 	.word	0x10320000
 8003d14:	10310000 	.word	0x10310000
 8003d18:	10220000 	.word	0x10220000
 8003d1c:	10210000 	.word	0x10210000
 8003d20:	10120000 	.word	0x10120000
 8003d24:	10110000 	.word	0x10110000
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010800 	.word	0x40010800
 8003d34:	40010c00 	.word	0x40010c00
 8003d38:	40011000 	.word	0x40011000
 8003d3c:	40011400 	.word	0x40011400
 8003d40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_GPIO_Init+0x304>)
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	4909      	ldr	r1, [pc, #36]	; (8003d74 <HAL_GPIO_Init+0x304>)
 8003d4e:	4013      	ands	r3, r2
 8003d50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	3301      	adds	r3, #1
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f47f ae8e 	bne.w	8003a84 <HAL_GPIO_Init+0x14>
  }
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	372c      	adds	r7, #44	; 0x2c
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40010400 	.word	0x40010400

08003d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	460b      	mov	r3, r1
 8003d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	e001      	b.n	8003d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bc80      	pop	{r7}
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	4603      	mov	r3, r0
 8003db0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003dc0:	88fb      	ldrh	r3, [r7, #6]
 8003dc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 f806 	bl	8003dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003dcc:	bf00      	nop
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bc80      	pop	{r7}
 8003dea:	4770      	bx	lr

08003dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e12b      	b.n	8004056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fd fbaa 	bl	800156c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	; 0x24
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e50:	f000 ffea 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8003e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4a81      	ldr	r2, [pc, #516]	; (8004060 <HAL_I2C_Init+0x274>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d807      	bhi.n	8003e70 <HAL_I2C_Init+0x84>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a80      	ldr	r2, [pc, #512]	; (8004064 <HAL_I2C_Init+0x278>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bf94      	ite	ls
 8003e68:	2301      	movls	r3, #1
 8003e6a:	2300      	movhi	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e006      	b.n	8003e7e <HAL_I2C_Init+0x92>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a7d      	ldr	r2, [pc, #500]	; (8004068 <HAL_I2C_Init+0x27c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	bf94      	ite	ls
 8003e78:	2301      	movls	r3, #1
 8003e7a:	2300      	movhi	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e0e7      	b.n	8004056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a78      	ldr	r2, [pc, #480]	; (800406c <HAL_I2C_Init+0x280>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	0c9b      	lsrs	r3, r3, #18
 8003e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a6a      	ldr	r2, [pc, #424]	; (8004060 <HAL_I2C_Init+0x274>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d802      	bhi.n	8003ec0 <HAL_I2C_Init+0xd4>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	e009      	b.n	8003ed4 <HAL_I2C_Init+0xe8>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	4a69      	ldr	r2, [pc, #420]	; (8004070 <HAL_I2C_Init+0x284>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ee6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	495c      	ldr	r1, [pc, #368]	; (8004060 <HAL_I2C_Init+0x274>)
 8003ef0:	428b      	cmp	r3, r1
 8003ef2:	d819      	bhi.n	8003f28 <HAL_I2C_Init+0x13c>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1e59      	subs	r1, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f02:	1c59      	adds	r1, r3, #1
 8003f04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f08:	400b      	ands	r3, r1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_I2C_Init+0x138>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1e59      	subs	r1, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f22:	e051      	b.n	8003fc8 <HAL_I2C_Init+0x1dc>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e04f      	b.n	8003fc8 <HAL_I2C_Init+0x1dc>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d111      	bne.n	8003f54 <HAL_I2C_Init+0x168>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1e58      	subs	r0, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	440b      	add	r3, r1
 8003f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f42:	3301      	adds	r3, #1
 8003f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e012      	b.n	8003f7a <HAL_I2C_Init+0x18e>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1e58      	subs	r0, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	0099      	lsls	r1, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Init+0x196>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e022      	b.n	8003fc8 <HAL_I2C_Init+0x1dc>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10e      	bne.n	8003fa8 <HAL_I2C_Init+0x1bc>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1e58      	subs	r0, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	440b      	add	r3, r1
 8003f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa6:	e00f      	b.n	8003fc8 <HAL_I2C_Init+0x1dc>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1e58      	subs	r0, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6859      	ldr	r1, [r3, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	0099      	lsls	r1, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	6809      	ldr	r1, [r1, #0]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ff6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6911      	ldr	r1, [r2, #16]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68d2      	ldr	r2, [r2, #12]
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	430b      	orrs	r3, r1
 800400a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	000186a0 	.word	0x000186a0
 8004064:	001e847f 	.word	0x001e847f
 8004068:	003d08ff 	.word	0x003d08ff
 800406c:	431bde83 	.word	0x431bde83
 8004070:	10624dd3 	.word	0x10624dd3

08004074 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	461a      	mov	r2, r3
 8004080:	460b      	mov	r3, r1
 8004082:	817b      	strh	r3, [r7, #10]
 8004084:	4613      	mov	r3, r2
 8004086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004088:	f7fe fbb4 	bl	80027f4 <HAL_GetTick>
 800408c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	f040 80e0 	bne.w	800425c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2319      	movs	r3, #25
 80040a2:	2201      	movs	r2, #1
 80040a4:	4970      	ldr	r1, [pc, #448]	; (8004268 <HAL_I2C_Master_Transmit+0x1f4>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f964 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0d3      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_I2C_Master_Transmit+0x50>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e0cc      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d007      	beq.n	80040ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2221      	movs	r2, #33	; 0x21
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2210      	movs	r2, #16
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	893a      	ldrh	r2, [r7, #8]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4a50      	ldr	r2, [pc, #320]	; (800426c <HAL_I2C_Master_Transmit+0x1f8>)
 800412a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800412c:	8979      	ldrh	r1, [r7, #10]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f89c 	bl	8004270 <I2C_MasterRequestWrite>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e08d      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004158:	e066      	b.n	8004228 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 f9de 	bl	8004520 <I2C_WaitOnTXEFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06b      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d11b      	bne.n	80041fc <HAL_I2C_Master_Transmit+0x188>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	6a39      	ldr	r1, [r7, #32]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f9ce 	bl	80045a2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00d      	beq.n	8004228 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	2b04      	cmp	r3, #4
 8004212:	d107      	bne.n	8004224 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004222:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e01a      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d194      	bne.n	800415a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00100002 	.word	0x00100002
 800426c:	ffff0000 	.word	0xffff0000

08004270 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	460b      	mov	r3, r1
 800427e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d006      	beq.n	800429a <I2C_MasterRequestWrite+0x2a>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d003      	beq.n	800429a <I2C_MasterRequestWrite+0x2a>
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004298:	d108      	bne.n	80042ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e00b      	b.n	80042c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b0:	2b12      	cmp	r3, #18
 80042b2:	d107      	bne.n	80042c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f84f 	bl	8004374 <I2C_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00d      	beq.n	80042f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ea:	d103      	bne.n	80042f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e035      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004300:	d108      	bne.n	8004314 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004302:	897b      	ldrh	r3, [r7, #10]
 8004304:	b2db      	uxtb	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004310:	611a      	str	r2, [r3, #16]
 8004312:	e01b      	b.n	800434c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004314:	897b      	ldrh	r3, [r7, #10]
 8004316:	11db      	asrs	r3, r3, #7
 8004318:	b2db      	uxtb	r3, r3
 800431a:	f003 0306 	and.w	r3, r3, #6
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f063 030f 	orn	r3, r3, #15
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	490e      	ldr	r1, [pc, #56]	; (800436c <I2C_MasterRequestWrite+0xfc>)
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f875 	bl	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e010      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004342:	897b      	ldrh	r3, [r7, #10]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4907      	ldr	r1, [pc, #28]	; (8004370 <I2C_MasterRequestWrite+0x100>)
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f865 	bl	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	00010008 	.word	0x00010008
 8004370:	00010002 	.word	0x00010002

08004374 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	603b      	str	r3, [r7, #0]
 8004380:	4613      	mov	r3, r2
 8004382:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004384:	e025      	b.n	80043d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d021      	beq.n	80043d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fe fa31 	bl	80027f4 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d116      	bne.n	80043d2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e023      	b.n	800441a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	0c1b      	lsrs	r3, r3, #16
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10d      	bne.n	80043f8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	43da      	mvns	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	e00c      	b.n	8004412 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	43da      	mvns	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	429a      	cmp	r2, r3
 8004416:	d0b6      	beq.n	8004386 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	607a      	str	r2, [r7, #4]
 800442e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004430:	e051      	b.n	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004440:	d123      	bne.n	800448a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004450:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800445a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f043 0204 	orr.w	r2, r3, #4
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e046      	b.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d021      	beq.n	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004492:	f7fe f9af 	bl	80027f4 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d116      	bne.n	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e020      	b.n	8004518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10c      	bne.n	80044fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	43da      	mvns	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bf14      	ite	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	2300      	moveq	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	e00b      	b.n	8004512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	43da      	mvns	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4013      	ands	r3, r2
 8004506:	b29b      	uxth	r3, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf14      	ite	ne
 800450c:	2301      	movne	r3, #1
 800450e:	2300      	moveq	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d18d      	bne.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800452c:	e02d      	b.n	800458a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 f878 	bl	8004624 <I2C_IsAcknowledgeFailed>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e02d      	b.n	800459a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d021      	beq.n	800458a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fe f955 	bl	80027f4 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e007      	b.n	800459a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d1ca      	bne.n	800452e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	60f8      	str	r0, [r7, #12]
 80045aa:	60b9      	str	r1, [r7, #8]
 80045ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ae:	e02d      	b.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f000 f837 	bl	8004624 <I2C_IsAcknowledgeFailed>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e02d      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c6:	d021      	beq.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045c8:	f7fe f914 	bl	80027f4 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d302      	bcc.n	80045de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d116      	bne.n	800460c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f043 0220 	orr.w	r2, r3, #32
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e007      	b.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	f003 0304 	and.w	r3, r3, #4
 8004616:	2b04      	cmp	r3, #4
 8004618:	d1ca      	bne.n	80045b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004636:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800463a:	d11b      	bne.n	8004674 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004644:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004660:	f043 0204 	orr.w	r2, r3, #4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e272      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8087 	beq.w	80047ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046a0:	4b92      	ldr	r3, [pc, #584]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 030c 	and.w	r3, r3, #12
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d00c      	beq.n	80046c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046ac:	4b8f      	ldr	r3, [pc, #572]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 030c 	and.w	r3, r3, #12
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d112      	bne.n	80046de <HAL_RCC_OscConfig+0x5e>
 80046b8:	4b8c      	ldr	r3, [pc, #560]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d10b      	bne.n	80046de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046c6:	4b89      	ldr	r3, [pc, #548]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d06c      	beq.n	80047ac <HAL_RCC_OscConfig+0x12c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d168      	bne.n	80047ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e24c      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e6:	d106      	bne.n	80046f6 <HAL_RCC_OscConfig+0x76>
 80046e8:	4b80      	ldr	r3, [pc, #512]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a7f      	ldr	r2, [pc, #508]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80046ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	e02e      	b.n	8004754 <HAL_RCC_OscConfig+0xd4>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10c      	bne.n	8004718 <HAL_RCC_OscConfig+0x98>
 80046fe:	4b7b      	ldr	r3, [pc, #492]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a7a      	ldr	r2, [pc, #488]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4b78      	ldr	r3, [pc, #480]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a77      	ldr	r2, [pc, #476]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004710:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e01d      	b.n	8004754 <HAL_RCC_OscConfig+0xd4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0xbc>
 8004722:	4b72      	ldr	r3, [pc, #456]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a71      	ldr	r2, [pc, #452]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b6f      	ldr	r3, [pc, #444]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6e      	ldr	r2, [pc, #440]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0xd4>
 800473c:	4b6b      	ldr	r3, [pc, #428]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a6a      	ldr	r2, [pc, #424]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b68      	ldr	r3, [pc, #416]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a67      	ldr	r2, [pc, #412]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004752:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fe f84a 	bl	80027f4 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fe f846 	bl	80027f4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	; 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e200      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b5d      	ldr	r3, [pc, #372]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0xe4>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fe f836 	bl	80027f4 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fe f832 	bl	80027f4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1ec      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	4b53      	ldr	r3, [pc, #332]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0x10c>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d063      	beq.n	8004882 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047ba:	4b4c      	ldr	r3, [pc, #304]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047c6:	4b49      	ldr	r3, [pc, #292]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11c      	bne.n	800480c <HAL_RCC_OscConfig+0x18c>
 80047d2:	4b46      	ldr	r3, [pc, #280]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	4b43      	ldr	r3, [pc, #268]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x176>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1c0      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f6:	4b3d      	ldr	r3, [pc, #244]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4939      	ldr	r1, [pc, #228]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	e03a      	b.n	8004882 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004814:	4b36      	ldr	r3, [pc, #216]	; (80048f0 <HAL_RCC_OscConfig+0x270>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481a:	f7fd ffeb 	bl	80027f4 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004822:	f7fd ffe7 	bl	80027f4 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e1a1      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	4b2a      	ldr	r3, [pc, #168]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4927      	ldr	r1, [pc, #156]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
 8004854:	e015      	b.n	8004882 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <HAL_RCC_OscConfig+0x270>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485c:	f7fd ffca 	bl	80027f4 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004864:	f7fd ffc6 	bl	80027f4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e180      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d03a      	beq.n	8004904 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d019      	beq.n	80048ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004896:	4b17      	ldr	r3, [pc, #92]	; (80048f4 <HAL_RCC_OscConfig+0x274>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800489c:	f7fd ffaa 	bl	80027f4 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fd ffa6 	bl	80027f4 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e160      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <HAL_RCC_OscConfig+0x26c>)
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048c2:	2001      	movs	r0, #1
 80048c4:	f000 fad8 	bl	8004e78 <RCC_Delay>
 80048c8:	e01c      	b.n	8004904 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_RCC_OscConfig+0x274>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d0:	f7fd ff90 	bl	80027f4 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d6:	e00f      	b.n	80048f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d8:	f7fd ff8c 	bl	80027f4 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d908      	bls.n	80048f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e146      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
 80048ea:	bf00      	nop
 80048ec:	40021000 	.word	0x40021000
 80048f0:	42420000 	.word	0x42420000
 80048f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f8:	4b92      	ldr	r3, [pc, #584]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e9      	bne.n	80048d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80a6 	beq.w	8004a5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004912:	2300      	movs	r3, #0
 8004914:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004916:	4b8b      	ldr	r3, [pc, #556]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10d      	bne.n	800493e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004922:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4a87      	ldr	r2, [pc, #540]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492c:	61d3      	str	r3, [r2, #28]
 800492e:	4b85      	ldr	r3, [pc, #532]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004936:	60bb      	str	r3, [r7, #8]
 8004938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493a:	2301      	movs	r3, #1
 800493c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493e:	4b82      	ldr	r3, [pc, #520]	; (8004b48 <HAL_RCC_OscConfig+0x4c8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d118      	bne.n	800497c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800494a:	4b7f      	ldr	r3, [pc, #508]	; (8004b48 <HAL_RCC_OscConfig+0x4c8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a7e      	ldr	r2, [pc, #504]	; (8004b48 <HAL_RCC_OscConfig+0x4c8>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004956:	f7fd ff4d 	bl	80027f4 <HAL_GetTick>
 800495a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495e:	f7fd ff49 	bl	80027f4 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b64      	cmp	r3, #100	; 0x64
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e103      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004970:	4b75      	ldr	r3, [pc, #468]	; (8004b48 <HAL_RCC_OscConfig+0x4c8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d106      	bne.n	8004992 <HAL_RCC_OscConfig+0x312>
 8004984:	4b6f      	ldr	r3, [pc, #444]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	4a6e      	ldr	r2, [pc, #440]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6213      	str	r3, [r2, #32]
 8004990:	e02d      	b.n	80049ee <HAL_RCC_OscConfig+0x36e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x334>
 800499a:	4b6a      	ldr	r3, [pc, #424]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	4a69      	ldr	r2, [pc, #420]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	6213      	str	r3, [r2, #32]
 80049a6:	4b67      	ldr	r3, [pc, #412]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	4a66      	ldr	r2, [pc, #408]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049ac:	f023 0304 	bic.w	r3, r3, #4
 80049b0:	6213      	str	r3, [r2, #32]
 80049b2:	e01c      	b.n	80049ee <HAL_RCC_OscConfig+0x36e>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCC_OscConfig+0x356>
 80049bc:	4b61      	ldr	r3, [pc, #388]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	4a60      	ldr	r2, [pc, #384]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049c2:	f043 0304 	orr.w	r3, r3, #4
 80049c6:	6213      	str	r3, [r2, #32]
 80049c8:	4b5e      	ldr	r3, [pc, #376]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	4a5d      	ldr	r2, [pc, #372]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6213      	str	r3, [r2, #32]
 80049d4:	e00b      	b.n	80049ee <HAL_RCC_OscConfig+0x36e>
 80049d6:	4b5b      	ldr	r3, [pc, #364]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	4a5a      	ldr	r2, [pc, #360]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6213      	str	r3, [r2, #32]
 80049e2:	4b58      	ldr	r3, [pc, #352]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	4a57      	ldr	r2, [pc, #348]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 80049e8:	f023 0304 	bic.w	r3, r3, #4
 80049ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d015      	beq.n	8004a22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f6:	f7fd fefd 	bl	80027f4 <HAL_GetTick>
 80049fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fc:	e00a      	b.n	8004a14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049fe:	f7fd fef9 	bl	80027f4 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d901      	bls.n	8004a14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e0b1      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	4b4b      	ldr	r3, [pc, #300]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d0ee      	beq.n	80049fe <HAL_RCC_OscConfig+0x37e>
 8004a20:	e014      	b.n	8004a4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a22:	f7fd fee7 	bl	80027f4 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a2a:	f7fd fee3 	bl	80027f4 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e09b      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a40:	4b40      	ldr	r3, [pc, #256]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1ee      	bne.n	8004a2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a4c:	7dfb      	ldrb	r3, [r7, #23]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d105      	bne.n	8004a5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a52:	4b3c      	ldr	r3, [pc, #240]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	4a3b      	ldr	r2, [pc, #236]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f000 8087 	beq.w	8004b76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d061      	beq.n	8004b38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d146      	bne.n	8004b0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a7c:	4b33      	ldr	r3, [pc, #204]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a82:	f7fd feb7 	bl	80027f4 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8a:	f7fd feb3 	bl	80027f4 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e06d      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a9c:	4b29      	ldr	r3, [pc, #164]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f0      	bne.n	8004a8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	4921      	ldr	r1, [pc, #132]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ac4:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a19      	ldr	r1, [r3, #32]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	491b      	ldr	r1, [pc, #108]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004adc:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fd fe87 	bl	80027f4 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aea:	f7fd fe83 	bl	80027f4 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e03d      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x46a>
 8004b08:	e035      	b.n	8004b76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_RCC_OscConfig+0x4cc>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b10:	f7fd fe70 	bl	80027f4 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fd fe6c 	bl	80027f4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e026      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_RCC_OscConfig+0x4c4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x498>
 8004b36:	e01e      	b.n	8004b76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	69db      	ldr	r3, [r3, #28]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d107      	bne.n	8004b50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e019      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
 8004b44:	40021000 	.word	0x40021000
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <HAL_RCC_OscConfig+0x500>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d106      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3718      	adds	r7, #24
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40021000 	.word	0x40021000

08004b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0d0      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b98:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d910      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ba6:	4b67      	ldr	r3, [pc, #412]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f023 0207 	bic.w	r2, r3, #7
 8004bae:	4965      	ldr	r1, [pc, #404]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b63      	ldr	r3, [pc, #396]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0b8      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d020      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be0:	4b59      	ldr	r3, [pc, #356]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4a58      	ldr	r2, [pc, #352]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bf8:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	4a52      	ldr	r2, [pc, #328]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c04:	4b50      	ldr	r3, [pc, #320]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	494d      	ldr	r1, [pc, #308]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d040      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d115      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e07f      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d107      	bne.n	8004c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c42:	4b41      	ldr	r3, [pc, #260]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e073      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c52:	4b3d      	ldr	r3, [pc, #244]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06b      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c62:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f023 0203 	bic.w	r2, r3, #3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4936      	ldr	r1, [pc, #216]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c74:	f7fd fdbe 	bl	80027f4 <HAL_GetTick>
 8004c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	e00a      	b.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7c:	f7fd fdba 	bl	80027f4 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e053      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	4b2d      	ldr	r3, [pc, #180]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f003 020c 	and.w	r2, r3, #12
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d1eb      	bne.n	8004c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ca4:	4b27      	ldr	r3, [pc, #156]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	683a      	ldr	r2, [r7, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d210      	bcs.n	8004cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cb2:	4b24      	ldr	r3, [pc, #144]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f023 0207 	bic.w	r2, r3, #7
 8004cba:	4922      	ldr	r1, [pc, #136]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b20      	ldr	r3, [pc, #128]	; (8004d44 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e032      	b.n	8004d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce0:	4b19      	ldr	r3, [pc, #100]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4916      	ldr	r1, [pc, #88]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0308 	and.w	r3, r3, #8
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d009      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	490e      	ldr	r1, [pc, #56]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d12:	f000 f821 	bl	8004d58 <HAL_RCC_GetSysClockFreq>
 8004d16:	4602      	mov	r2, r0
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	091b      	lsrs	r3, r3, #4
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	490a      	ldr	r1, [pc, #40]	; (8004d4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d24:	5ccb      	ldrb	r3, [r1, r3]
 8004d26:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2a:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <HAL_RCC_ClockConfig+0x1cc>)
 8004d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d2e:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_ClockConfig+0x1d0>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7fd fd1c 	bl	8002770 <HAL_InitTick>

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	40022000 	.word	0x40022000
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	080082f4 	.word	0x080082f4
 8004d50:	20000008 	.word	0x20000008
 8004d54:	2000000c 	.word	0x2000000c

08004d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d58:	b490      	push	{r4, r7}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d5e:	4b29      	ldr	r3, [pc, #164]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xac>)
 8004d60:	1d3c      	adds	r4, r7, #4
 8004d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d68:	f240 2301 	movw	r3, #513	; 0x201
 8004d6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	2300      	movs	r3, #0
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d82:	4b21      	ldr	r3, [pc, #132]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d002      	beq.n	8004d98 <HAL_RCC_GetSysClockFreq+0x40>
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d003      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0x46>
 8004d96:	e02b      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d9a:	623b      	str	r3, [r7, #32]
      break;
 8004d9c:	e02b      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	0c9b      	lsrs	r3, r3, #18
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	3328      	adds	r3, #40	; 0x28
 8004da8:	443b      	add	r3, r7
 8004daa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004dae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d012      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dba:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	0c5b      	lsrs	r3, r3, #17
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	3328      	adds	r3, #40	; 0x28
 8004dc6:	443b      	add	r3, r7
 8004dc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004dcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004dd2:	fb03 f202 	mul.w	r2, r3, r2
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dde:	e004      	b.n	8004dea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	4a0b      	ldr	r2, [pc, #44]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	623b      	str	r3, [r7, #32]
      break;
 8004dee:	e002      	b.n	8004df6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004df2:	623b      	str	r3, [r7, #32]
      break;
 8004df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df6:	6a3b      	ldr	r3, [r7, #32]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3728      	adds	r7, #40	; 0x28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc90      	pop	{r4, r7}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	080082d4 	.word	0x080082d4
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	007a1200 	.word	0x007a1200
 8004e10:	003d0900 	.word	0x003d0900

08004e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e18:	4b02      	ldr	r3, [pc, #8]	; (8004e24 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr
 8004e24:	20000008 	.word	0x20000008

08004e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e2c:	f7ff fff2 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	0a1b      	lsrs	r3, r3, #8
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	4903      	ldr	r1, [pc, #12]	; (8004e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	08008304 	.word	0x08008304

08004e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e54:	f7ff ffde 	bl	8004e14 <HAL_RCC_GetHCLKFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	0adb      	lsrs	r3, r3, #11
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	4903      	ldr	r1, [pc, #12]	; (8004e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	08008304 	.word	0x08008304

08004e78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e80:	4b0a      	ldr	r3, [pc, #40]	; (8004eac <RCC_Delay+0x34>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a0a      	ldr	r2, [pc, #40]	; (8004eb0 <RCC_Delay+0x38>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0a5b      	lsrs	r3, r3, #9
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	fb02 f303 	mul.w	r3, r2, r3
 8004e92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e94:	bf00      	nop
  }
  while (Delay --);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	1e5a      	subs	r2, r3, #1
 8004e9a:	60fa      	str	r2, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f9      	bne.n	8004e94 <RCC_Delay+0x1c>
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr
 8004eac:	20000008 	.word	0x20000008
 8004eb0:	10624dd3 	.word	0x10624dd3

08004eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d07d      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ed4:	4b4f      	ldr	r3, [pc, #316]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10d      	bne.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee0:	4b4c      	ldr	r3, [pc, #304]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	4a4b      	ldr	r2, [pc, #300]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eea:	61d3      	str	r3, [r2, #28]
 8004eec:	4b49      	ldr	r3, [pc, #292]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efc:	4b46      	ldr	r3, [pc, #280]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d118      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f08:	4b43      	ldr	r3, [pc, #268]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a42      	ldr	r2, [pc, #264]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f14:	f7fd fc6e 	bl	80027f4 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f1a:	e008      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1c:	f7fd fc6a 	bl	80027f4 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b64      	cmp	r3, #100	; 0x64
 8004f28:	d901      	bls.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e06d      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2e:	4b3a      	ldr	r3, [pc, #232]	; (8005018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f3a:	4b36      	ldr	r3, [pc, #216]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d02e      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d027      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f58:	4b2e      	ldr	r3, [pc, #184]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f62:	4b2e      	ldr	r3, [pc, #184]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f64:	2201      	movs	r2, #1
 8004f66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f68:	4b2c      	ldr	r3, [pc, #176]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f6e:	4a29      	ldr	r2, [pc, #164]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d014      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7e:	f7fd fc39 	bl	80027f4 <HAL_GetTick>
 8004f82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f84:	e00a      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f86:	f7fd fc35 	bl	80027f4 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e036      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0ee      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fa8:	4b1a      	ldr	r3, [pc, #104]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4917      	ldr	r1, [pc, #92]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d105      	bne.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fc0:	4b14      	ldr	r3, [pc, #80]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	4a13      	ldr	r2, [pc, #76]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d008      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fd8:	4b0e      	ldr	r3, [pc, #56]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	490b      	ldr	r1, [pc, #44]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d008      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ff6:	4b07      	ldr	r3, [pc, #28]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	4904      	ldr	r1, [pc, #16]	; (8005014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005004:	4313      	orrs	r3, r2
 8005006:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000
 8005018:	40007000 	.word	0x40007000
 800501c:	42420440 	.word	0x42420440

08005020 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b08d      	sub	sp, #52	; 0x34
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005028:	4b58      	ldr	r3, [pc, #352]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800502a:	f107 040c 	add.w	r4, r7, #12
 800502e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005034:	f240 2301 	movw	r3, #513	; 0x201
 8005038:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	2300      	movs	r3, #0
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005042:	2300      	movs	r3, #0
 8005044:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	2300      	movs	r3, #0
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2b10      	cmp	r3, #16
 8005052:	d00a      	beq.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b10      	cmp	r3, #16
 8005058:	f200 808e 	bhi.w	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d049      	beq.n	80050f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d079      	beq.n	800515c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005068:	e086      	b.n	8005178 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800506a:	4b49      	ldr	r3, [pc, #292]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005070:	4b47      	ldr	r3, [pc, #284]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d07f      	beq.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	0c9b      	lsrs	r3, r3, #18
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	3330      	adds	r3, #48	; 0x30
 8005086:	443b      	add	r3, r7
 8005088:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800508c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d017      	beq.n	80050c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005098:	4b3d      	ldr	r3, [pc, #244]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	0c5b      	lsrs	r3, r3, #17
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	3330      	adds	r3, #48	; 0x30
 80050a4:	443b      	add	r3, r7
 80050a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80050b6:	4a37      	ldr	r2, [pc, #220]	; (8005194 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	fb02 f303 	mul.w	r3, r2, r3
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050c6:	e004      	b.n	80050d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	4a33      	ldr	r2, [pc, #204]	; (8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80050cc:	fb02 f303 	mul.w	r3, r2, r3
 80050d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80050d2:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050de:	d102      	bne.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050e4:	e04a      	b.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	4a2c      	ldr	r2, [pc, #176]	; (800519c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80050ec:	fba2 2303 	umull	r2, r3, r2, r3
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050f4:	e042      	b.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80050f6:	4b26      	ldr	r3, [pc, #152]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005106:	d108      	bne.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8005112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28
 8005118:	e01f      	b.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005124:	d109      	bne.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8005126:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8005132:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
 8005138:	e00f      	b.n	800515a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005144:	d11c      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d016      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8005152:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005158:	e012      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800515a:	e011      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800515c:	f7ff fe78 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8005160:	4602      	mov	r2, r0
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	0b9b      	lsrs	r3, r3, #14
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	3301      	adds	r3, #1
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	fbb2 f3f3 	udiv	r3, r2, r3
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005176:	e004      	b.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005178:	bf00      	nop
 800517a:	e002      	b.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800517c:	bf00      	nop
 800517e:	e000      	b.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8005180:	bf00      	nop
    }
  }
  return (frequency);
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005184:	4618      	mov	r0, r3
 8005186:	3734      	adds	r7, #52	; 0x34
 8005188:	46bd      	mov	sp, r7
 800518a:	bd90      	pop	{r4, r7, pc}
 800518c:	080082e4 	.word	0x080082e4
 8005190:	40021000 	.word	0x40021000
 8005194:	007a1200 	.word	0x007a1200
 8005198:	003d0900 	.word	0x003d0900
 800519c:	aaaaaaab 	.word	0xaaaaaaab

080051a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e03f      	b.n	8005232 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f7fd fa58 	bl	800267c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2224      	movs	r2, #36	; 0x24
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f905 	bl	80053f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2220      	movs	r2, #32
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b08a      	sub	sp, #40	; 0x28
 800523e:	af02      	add	r7, sp, #8
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b20      	cmp	r3, #32
 8005258:	d17c      	bne.n	8005354 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d002      	beq.n	8005266 <HAL_UART_Transmit+0x2c>
 8005260:	88fb      	ldrh	r3, [r7, #6]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e075      	b.n	8005356 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d101      	bne.n	8005278 <HAL_UART_Transmit+0x3e>
 8005274:	2302      	movs	r3, #2
 8005276:	e06e      	b.n	8005356 <HAL_UART_Transmit+0x11c>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2221      	movs	r2, #33	; 0x21
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800528e:	f7fd fab1 	bl	80027f4 <HAL_GetTick>
 8005292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	88fa      	ldrh	r2, [r7, #6]
 8005298:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	88fa      	ldrh	r2, [r7, #6]
 800529e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a8:	d108      	bne.n	80052bc <HAL_UART_Transmit+0x82>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d104      	bne.n	80052bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	e003      	b.n	80052c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052c0:	2300      	movs	r3, #0
 80052c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052cc:	e02a      	b.n	8005324 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	2180      	movs	r1, #128	; 0x80
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f840 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e036      	b.n	8005356 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10b      	bne.n	8005306 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	881b      	ldrh	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	3302      	adds	r3, #2
 8005302:	61bb      	str	r3, [r7, #24]
 8005304:	e007      	b.n	8005316 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	781a      	ldrb	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	3301      	adds	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1cf      	bne.n	80052ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2200      	movs	r2, #0
 8005336:	2140      	movs	r1, #64	; 0x40
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f810 	bl	800535e <UART_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e006      	b.n	8005356 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	e000      	b.n	8005356 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005354:	2302      	movs	r3, #2
  }
}
 8005356:	4618      	mov	r0, r3
 8005358:	3720      	adds	r7, #32
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b084      	sub	sp, #16
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	603b      	str	r3, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536e:	e02c      	b.n	80053ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d028      	beq.n	80053ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <UART_WaitOnFlagUntilTimeout+0x30>
 800537e:	f7fd fa39 	bl	80027f4 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	429a      	cmp	r2, r3
 800538c:	d21d      	bcs.n	80053ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800539c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80053c6:	2303      	movs	r3, #3
 80053c8:	e00f      	b.n	80053ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4013      	ands	r3, r2
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	bf0c      	ite	eq
 80053da:	2301      	moveq	r3, #1
 80053dc:	2300      	movne	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d0c3      	beq.n	8005370 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	431a      	orrs	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800542e:	f023 030c 	bic.w	r3, r3, #12
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	430b      	orrs	r3, r1
 800543a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2c      	ldr	r2, [pc, #176]	; (8005508 <UART_SetConfig+0x114>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d103      	bne.n	8005464 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800545c:	f7ff fcf8 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	e002      	b.n	800546a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005464:	f7ff fce0 	bl	8004e28 <HAL_RCC_GetPCLK1Freq>
 8005468:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009a      	lsls	r2, r3, #2
 8005474:	441a      	add	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005480:	4a22      	ldr	r2, [pc, #136]	; (800550c <UART_SetConfig+0x118>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	0119      	lsls	r1, r3, #4
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009a      	lsls	r2, r3, #2
 8005494:	441a      	add	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	fbb2 f2f3 	udiv	r2, r2, r3
 80054a0:	4b1a      	ldr	r3, [pc, #104]	; (800550c <UART_SetConfig+0x118>)
 80054a2:	fba3 0302 	umull	r0, r3, r3, r2
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	2064      	movs	r0, #100	; 0x64
 80054aa:	fb00 f303 	mul.w	r3, r0, r3
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	3332      	adds	r3, #50	; 0x32
 80054b4:	4a15      	ldr	r2, [pc, #84]	; (800550c <UART_SetConfig+0x118>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	095b      	lsrs	r3, r3, #5
 80054bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054c0:	4419      	add	r1, r3
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009a      	lsls	r2, r3, #2
 80054cc:	441a      	add	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054d8:	4b0c      	ldr	r3, [pc, #48]	; (800550c <UART_SetConfig+0x118>)
 80054da:	fba3 0302 	umull	r0, r3, r3, r2
 80054de:	095b      	lsrs	r3, r3, #5
 80054e0:	2064      	movs	r0, #100	; 0x64
 80054e2:	fb00 f303 	mul.w	r3, r0, r3
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	3332      	adds	r3, #50	; 0x32
 80054ec:	4a07      	ldr	r2, [pc, #28]	; (800550c <UART_SetConfig+0x118>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	f003 020f 	and.w	r2, r3, #15
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	440a      	add	r2, r1
 80054fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40013800 	.word	0x40013800
 800550c:	51eb851f 	.word	0x51eb851f

08005510 <__errno>:
 8005510:	4b01      	ldr	r3, [pc, #4]	; (8005518 <__errno+0x8>)
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	20000014 	.word	0x20000014

0800551c <__libc_init_array>:
 800551c:	b570      	push	{r4, r5, r6, lr}
 800551e:	2600      	movs	r6, #0
 8005520:	4d0c      	ldr	r5, [pc, #48]	; (8005554 <__libc_init_array+0x38>)
 8005522:	4c0d      	ldr	r4, [pc, #52]	; (8005558 <__libc_init_array+0x3c>)
 8005524:	1b64      	subs	r4, r4, r5
 8005526:	10a4      	asrs	r4, r4, #2
 8005528:	42a6      	cmp	r6, r4
 800552a:	d109      	bne.n	8005540 <__libc_init_array+0x24>
 800552c:	f002 fe8e 	bl	800824c <_init>
 8005530:	2600      	movs	r6, #0
 8005532:	4d0a      	ldr	r5, [pc, #40]	; (800555c <__libc_init_array+0x40>)
 8005534:	4c0a      	ldr	r4, [pc, #40]	; (8005560 <__libc_init_array+0x44>)
 8005536:	1b64      	subs	r4, r4, r5
 8005538:	10a4      	asrs	r4, r4, #2
 800553a:	42a6      	cmp	r6, r4
 800553c:	d105      	bne.n	800554a <__libc_init_array+0x2e>
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	f855 3b04 	ldr.w	r3, [r5], #4
 8005544:	4798      	blx	r3
 8005546:	3601      	adds	r6, #1
 8005548:	e7ee      	b.n	8005528 <__libc_init_array+0xc>
 800554a:	f855 3b04 	ldr.w	r3, [r5], #4
 800554e:	4798      	blx	r3
 8005550:	3601      	adds	r6, #1
 8005552:	e7f2      	b.n	800553a <__libc_init_array+0x1e>
 8005554:	080086e4 	.word	0x080086e4
 8005558:	080086e4 	.word	0x080086e4
 800555c:	080086e4 	.word	0x080086e4
 8005560:	080086e8 	.word	0x080086e8

08005564 <memset>:
 8005564:	4603      	mov	r3, r0
 8005566:	4402      	add	r2, r0
 8005568:	4293      	cmp	r3, r2
 800556a:	d100      	bne.n	800556e <memset+0xa>
 800556c:	4770      	bx	lr
 800556e:	f803 1b01 	strb.w	r1, [r3], #1
 8005572:	e7f9      	b.n	8005568 <memset+0x4>

08005574 <__cvt>:
 8005574:	2b00      	cmp	r3, #0
 8005576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800557a:	461f      	mov	r7, r3
 800557c:	bfbb      	ittet	lt
 800557e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005582:	461f      	movlt	r7, r3
 8005584:	2300      	movge	r3, #0
 8005586:	232d      	movlt	r3, #45	; 0x2d
 8005588:	b088      	sub	sp, #32
 800558a:	4614      	mov	r4, r2
 800558c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800558e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005590:	7013      	strb	r3, [r2, #0]
 8005592:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005594:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005598:	f023 0820 	bic.w	r8, r3, #32
 800559c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055a0:	d005      	beq.n	80055ae <__cvt+0x3a>
 80055a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80055a6:	d100      	bne.n	80055aa <__cvt+0x36>
 80055a8:	3501      	adds	r5, #1
 80055aa:	2302      	movs	r3, #2
 80055ac:	e000      	b.n	80055b0 <__cvt+0x3c>
 80055ae:	2303      	movs	r3, #3
 80055b0:	aa07      	add	r2, sp, #28
 80055b2:	9204      	str	r2, [sp, #16]
 80055b4:	aa06      	add	r2, sp, #24
 80055b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80055ba:	e9cd 3500 	strd	r3, r5, [sp]
 80055be:	4622      	mov	r2, r4
 80055c0:	463b      	mov	r3, r7
 80055c2:	f000 fe11 	bl	80061e8 <_dtoa_r>
 80055c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80055ca:	4606      	mov	r6, r0
 80055cc:	d102      	bne.n	80055d4 <__cvt+0x60>
 80055ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055d0:	07db      	lsls	r3, r3, #31
 80055d2:	d522      	bpl.n	800561a <__cvt+0xa6>
 80055d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80055d8:	eb06 0905 	add.w	r9, r6, r5
 80055dc:	d110      	bne.n	8005600 <__cvt+0x8c>
 80055de:	7833      	ldrb	r3, [r6, #0]
 80055e0:	2b30      	cmp	r3, #48	; 0x30
 80055e2:	d10a      	bne.n	80055fa <__cvt+0x86>
 80055e4:	2200      	movs	r2, #0
 80055e6:	2300      	movs	r3, #0
 80055e8:	4620      	mov	r0, r4
 80055ea:	4639      	mov	r1, r7
 80055ec:	f7fb f9dc 	bl	80009a8 <__aeabi_dcmpeq>
 80055f0:	b918      	cbnz	r0, 80055fa <__cvt+0x86>
 80055f2:	f1c5 0501 	rsb	r5, r5, #1
 80055f6:	f8ca 5000 	str.w	r5, [sl]
 80055fa:	f8da 3000 	ldr.w	r3, [sl]
 80055fe:	4499      	add	r9, r3
 8005600:	2200      	movs	r2, #0
 8005602:	2300      	movs	r3, #0
 8005604:	4620      	mov	r0, r4
 8005606:	4639      	mov	r1, r7
 8005608:	f7fb f9ce 	bl	80009a8 <__aeabi_dcmpeq>
 800560c:	b108      	cbz	r0, 8005612 <__cvt+0x9e>
 800560e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005612:	2230      	movs	r2, #48	; 0x30
 8005614:	9b07      	ldr	r3, [sp, #28]
 8005616:	454b      	cmp	r3, r9
 8005618:	d307      	bcc.n	800562a <__cvt+0xb6>
 800561a:	4630      	mov	r0, r6
 800561c:	9b07      	ldr	r3, [sp, #28]
 800561e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005620:	1b9b      	subs	r3, r3, r6
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	b008      	add	sp, #32
 8005626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562a:	1c59      	adds	r1, r3, #1
 800562c:	9107      	str	r1, [sp, #28]
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	e7f0      	b.n	8005614 <__cvt+0xa0>

08005632 <__exponent>:
 8005632:	4603      	mov	r3, r0
 8005634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005636:	2900      	cmp	r1, #0
 8005638:	f803 2b02 	strb.w	r2, [r3], #2
 800563c:	bfb6      	itet	lt
 800563e:	222d      	movlt	r2, #45	; 0x2d
 8005640:	222b      	movge	r2, #43	; 0x2b
 8005642:	4249      	neglt	r1, r1
 8005644:	2909      	cmp	r1, #9
 8005646:	7042      	strb	r2, [r0, #1]
 8005648:	dd2b      	ble.n	80056a2 <__exponent+0x70>
 800564a:	f10d 0407 	add.w	r4, sp, #7
 800564e:	46a4      	mov	ip, r4
 8005650:	270a      	movs	r7, #10
 8005652:	fb91 f6f7 	sdiv	r6, r1, r7
 8005656:	460a      	mov	r2, r1
 8005658:	46a6      	mov	lr, r4
 800565a:	fb07 1516 	mls	r5, r7, r6, r1
 800565e:	2a63      	cmp	r2, #99	; 0x63
 8005660:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005664:	4631      	mov	r1, r6
 8005666:	f104 34ff 	add.w	r4, r4, #4294967295
 800566a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800566e:	dcf0      	bgt.n	8005652 <__exponent+0x20>
 8005670:	3130      	adds	r1, #48	; 0x30
 8005672:	f1ae 0502 	sub.w	r5, lr, #2
 8005676:	f804 1c01 	strb.w	r1, [r4, #-1]
 800567a:	4629      	mov	r1, r5
 800567c:	1c44      	adds	r4, r0, #1
 800567e:	4561      	cmp	r1, ip
 8005680:	d30a      	bcc.n	8005698 <__exponent+0x66>
 8005682:	f10d 0209 	add.w	r2, sp, #9
 8005686:	eba2 020e 	sub.w	r2, r2, lr
 800568a:	4565      	cmp	r5, ip
 800568c:	bf88      	it	hi
 800568e:	2200      	movhi	r2, #0
 8005690:	4413      	add	r3, r2
 8005692:	1a18      	subs	r0, r3, r0
 8005694:	b003      	add	sp, #12
 8005696:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005698:	f811 2b01 	ldrb.w	r2, [r1], #1
 800569c:	f804 2f01 	strb.w	r2, [r4, #1]!
 80056a0:	e7ed      	b.n	800567e <__exponent+0x4c>
 80056a2:	2330      	movs	r3, #48	; 0x30
 80056a4:	3130      	adds	r1, #48	; 0x30
 80056a6:	7083      	strb	r3, [r0, #2]
 80056a8:	70c1      	strb	r1, [r0, #3]
 80056aa:	1d03      	adds	r3, r0, #4
 80056ac:	e7f1      	b.n	8005692 <__exponent+0x60>
	...

080056b0 <_printf_float>:
 80056b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b4:	b091      	sub	sp, #68	; 0x44
 80056b6:	460c      	mov	r4, r1
 80056b8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80056bc:	4616      	mov	r6, r2
 80056be:	461f      	mov	r7, r3
 80056c0:	4605      	mov	r5, r0
 80056c2:	f001 fd33 	bl	800712c <_localeconv_r>
 80056c6:	6803      	ldr	r3, [r0, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	9309      	str	r3, [sp, #36]	; 0x24
 80056cc:	f7fa fd40 	bl	8000150 <strlen>
 80056d0:	2300      	movs	r3, #0
 80056d2:	930e      	str	r3, [sp, #56]	; 0x38
 80056d4:	f8d8 3000 	ldr.w	r3, [r8]
 80056d8:	900a      	str	r0, [sp, #40]	; 0x28
 80056da:	3307      	adds	r3, #7
 80056dc:	f023 0307 	bic.w	r3, r3, #7
 80056e0:	f103 0208 	add.w	r2, r3, #8
 80056e4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80056e8:	f8d4 b000 	ldr.w	fp, [r4]
 80056ec:	f8c8 2000 	str.w	r2, [r8]
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80056f8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80056fc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005700:	930b      	str	r3, [sp, #44]	; 0x2c
 8005702:	f04f 32ff 	mov.w	r2, #4294967295
 8005706:	4640      	mov	r0, r8
 8005708:	4b9c      	ldr	r3, [pc, #624]	; (800597c <_printf_float+0x2cc>)
 800570a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800570c:	f7fb f97e 	bl	8000a0c <__aeabi_dcmpun>
 8005710:	bb70      	cbnz	r0, 8005770 <_printf_float+0xc0>
 8005712:	f04f 32ff 	mov.w	r2, #4294967295
 8005716:	4640      	mov	r0, r8
 8005718:	4b98      	ldr	r3, [pc, #608]	; (800597c <_printf_float+0x2cc>)
 800571a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800571c:	f7fb f958 	bl	80009d0 <__aeabi_dcmple>
 8005720:	bb30      	cbnz	r0, 8005770 <_printf_float+0xc0>
 8005722:	2200      	movs	r2, #0
 8005724:	2300      	movs	r3, #0
 8005726:	4640      	mov	r0, r8
 8005728:	4651      	mov	r1, sl
 800572a:	f7fb f947 	bl	80009bc <__aeabi_dcmplt>
 800572e:	b110      	cbz	r0, 8005736 <_printf_float+0x86>
 8005730:	232d      	movs	r3, #45	; 0x2d
 8005732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005736:	4b92      	ldr	r3, [pc, #584]	; (8005980 <_printf_float+0x2d0>)
 8005738:	4892      	ldr	r0, [pc, #584]	; (8005984 <_printf_float+0x2d4>)
 800573a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800573e:	bf94      	ite	ls
 8005740:	4698      	movls	r8, r3
 8005742:	4680      	movhi	r8, r0
 8005744:	2303      	movs	r3, #3
 8005746:	f04f 0a00 	mov.w	sl, #0
 800574a:	6123      	str	r3, [r4, #16]
 800574c:	f02b 0304 	bic.w	r3, fp, #4
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	4633      	mov	r3, r6
 8005754:	4621      	mov	r1, r4
 8005756:	4628      	mov	r0, r5
 8005758:	9700      	str	r7, [sp, #0]
 800575a:	aa0f      	add	r2, sp, #60	; 0x3c
 800575c:	f000 f9d4 	bl	8005b08 <_printf_common>
 8005760:	3001      	adds	r0, #1
 8005762:	f040 8090 	bne.w	8005886 <_printf_float+0x1d6>
 8005766:	f04f 30ff 	mov.w	r0, #4294967295
 800576a:	b011      	add	sp, #68	; 0x44
 800576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005770:	4642      	mov	r2, r8
 8005772:	4653      	mov	r3, sl
 8005774:	4640      	mov	r0, r8
 8005776:	4651      	mov	r1, sl
 8005778:	f7fb f948 	bl	8000a0c <__aeabi_dcmpun>
 800577c:	b148      	cbz	r0, 8005792 <_printf_float+0xe2>
 800577e:	f1ba 0f00 	cmp.w	sl, #0
 8005782:	bfb8      	it	lt
 8005784:	232d      	movlt	r3, #45	; 0x2d
 8005786:	4880      	ldr	r0, [pc, #512]	; (8005988 <_printf_float+0x2d8>)
 8005788:	bfb8      	it	lt
 800578a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800578e:	4b7f      	ldr	r3, [pc, #508]	; (800598c <_printf_float+0x2dc>)
 8005790:	e7d3      	b.n	800573a <_printf_float+0x8a>
 8005792:	6863      	ldr	r3, [r4, #4]
 8005794:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	d142      	bne.n	8005822 <_printf_float+0x172>
 800579c:	2306      	movs	r3, #6
 800579e:	6063      	str	r3, [r4, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	9206      	str	r2, [sp, #24]
 80057a4:	aa0e      	add	r2, sp, #56	; 0x38
 80057a6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80057aa:	aa0d      	add	r2, sp, #52	; 0x34
 80057ac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80057b0:	9203      	str	r2, [sp, #12]
 80057b2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80057b6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80057ba:	6023      	str	r3, [r4, #0]
 80057bc:	6863      	ldr	r3, [r4, #4]
 80057be:	4642      	mov	r2, r8
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	4628      	mov	r0, r5
 80057c4:	4653      	mov	r3, sl
 80057c6:	910b      	str	r1, [sp, #44]	; 0x2c
 80057c8:	f7ff fed4 	bl	8005574 <__cvt>
 80057cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057ce:	4680      	mov	r8, r0
 80057d0:	2947      	cmp	r1, #71	; 0x47
 80057d2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80057d4:	d108      	bne.n	80057e8 <_printf_float+0x138>
 80057d6:	1cc8      	adds	r0, r1, #3
 80057d8:	db02      	blt.n	80057e0 <_printf_float+0x130>
 80057da:	6863      	ldr	r3, [r4, #4]
 80057dc:	4299      	cmp	r1, r3
 80057de:	dd40      	ble.n	8005862 <_printf_float+0x1b2>
 80057e0:	f1a9 0902 	sub.w	r9, r9, #2
 80057e4:	fa5f f989 	uxtb.w	r9, r9
 80057e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80057ec:	d81f      	bhi.n	800582e <_printf_float+0x17e>
 80057ee:	464a      	mov	r2, r9
 80057f0:	3901      	subs	r1, #1
 80057f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80057f6:	910d      	str	r1, [sp, #52]	; 0x34
 80057f8:	f7ff ff1b 	bl	8005632 <__exponent>
 80057fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80057fe:	4682      	mov	sl, r0
 8005800:	1813      	adds	r3, r2, r0
 8005802:	2a01      	cmp	r2, #1
 8005804:	6123      	str	r3, [r4, #16]
 8005806:	dc02      	bgt.n	800580e <_printf_float+0x15e>
 8005808:	6822      	ldr	r2, [r4, #0]
 800580a:	07d2      	lsls	r2, r2, #31
 800580c:	d501      	bpl.n	8005812 <_printf_float+0x162>
 800580e:	3301      	adds	r3, #1
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005816:	2b00      	cmp	r3, #0
 8005818:	d09b      	beq.n	8005752 <_printf_float+0xa2>
 800581a:	232d      	movs	r3, #45	; 0x2d
 800581c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005820:	e797      	b.n	8005752 <_printf_float+0xa2>
 8005822:	2947      	cmp	r1, #71	; 0x47
 8005824:	d1bc      	bne.n	80057a0 <_printf_float+0xf0>
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1ba      	bne.n	80057a0 <_printf_float+0xf0>
 800582a:	2301      	movs	r3, #1
 800582c:	e7b7      	b.n	800579e <_printf_float+0xee>
 800582e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005832:	d118      	bne.n	8005866 <_printf_float+0x1b6>
 8005834:	2900      	cmp	r1, #0
 8005836:	6863      	ldr	r3, [r4, #4]
 8005838:	dd0b      	ble.n	8005852 <_printf_float+0x1a2>
 800583a:	6121      	str	r1, [r4, #16]
 800583c:	b913      	cbnz	r3, 8005844 <_printf_float+0x194>
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	07d0      	lsls	r0, r2, #31
 8005842:	d502      	bpl.n	800584a <_printf_float+0x19a>
 8005844:	3301      	adds	r3, #1
 8005846:	440b      	add	r3, r1
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	f04f 0a00 	mov.w	sl, #0
 800584e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005850:	e7df      	b.n	8005812 <_printf_float+0x162>
 8005852:	b913      	cbnz	r3, 800585a <_printf_float+0x1aa>
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	07d2      	lsls	r2, r2, #31
 8005858:	d501      	bpl.n	800585e <_printf_float+0x1ae>
 800585a:	3302      	adds	r3, #2
 800585c:	e7f4      	b.n	8005848 <_printf_float+0x198>
 800585e:	2301      	movs	r3, #1
 8005860:	e7f2      	b.n	8005848 <_printf_float+0x198>
 8005862:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005868:	4299      	cmp	r1, r3
 800586a:	db05      	blt.n	8005878 <_printf_float+0x1c8>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	6121      	str	r1, [r4, #16]
 8005870:	07d8      	lsls	r0, r3, #31
 8005872:	d5ea      	bpl.n	800584a <_printf_float+0x19a>
 8005874:	1c4b      	adds	r3, r1, #1
 8005876:	e7e7      	b.n	8005848 <_printf_float+0x198>
 8005878:	2900      	cmp	r1, #0
 800587a:	bfcc      	ite	gt
 800587c:	2201      	movgt	r2, #1
 800587e:	f1c1 0202 	rsble	r2, r1, #2
 8005882:	4413      	add	r3, r2
 8005884:	e7e0      	b.n	8005848 <_printf_float+0x198>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	055a      	lsls	r2, r3, #21
 800588a:	d407      	bmi.n	800589c <_printf_float+0x1ec>
 800588c:	6923      	ldr	r3, [r4, #16]
 800588e:	4642      	mov	r2, r8
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	d12b      	bne.n	80058f2 <_printf_float+0x242>
 800589a:	e764      	b.n	8005766 <_printf_float+0xb6>
 800589c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80058a0:	f240 80dd 	bls.w	8005a5e <_printf_float+0x3ae>
 80058a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058a8:	2200      	movs	r2, #0
 80058aa:	2300      	movs	r3, #0
 80058ac:	f7fb f87c 	bl	80009a8 <__aeabi_dcmpeq>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d033      	beq.n	800591c <_printf_float+0x26c>
 80058b4:	2301      	movs	r3, #1
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	4a35      	ldr	r2, [pc, #212]	; (8005990 <_printf_float+0x2e0>)
 80058bc:	47b8      	blx	r7
 80058be:	3001      	adds	r0, #1
 80058c0:	f43f af51 	beq.w	8005766 <_printf_float+0xb6>
 80058c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80058c8:	429a      	cmp	r2, r3
 80058ca:	db02      	blt.n	80058d2 <_printf_float+0x222>
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	07d8      	lsls	r0, r3, #31
 80058d0:	d50f      	bpl.n	80058f2 <_printf_float+0x242>
 80058d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	47b8      	blx	r7
 80058dc:	3001      	adds	r0, #1
 80058de:	f43f af42 	beq.w	8005766 <_printf_float+0xb6>
 80058e2:	f04f 0800 	mov.w	r8, #0
 80058e6:	f104 091a 	add.w	r9, r4, #26
 80058ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4543      	cmp	r3, r8
 80058f0:	dc09      	bgt.n	8005906 <_printf_float+0x256>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	079b      	lsls	r3, r3, #30
 80058f6:	f100 8102 	bmi.w	8005afe <_printf_float+0x44e>
 80058fa:	68e0      	ldr	r0, [r4, #12]
 80058fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058fe:	4298      	cmp	r0, r3
 8005900:	bfb8      	it	lt
 8005902:	4618      	movlt	r0, r3
 8005904:	e731      	b.n	800576a <_printf_float+0xba>
 8005906:	2301      	movs	r3, #1
 8005908:	464a      	mov	r2, r9
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f af28 	beq.w	8005766 <_printf_float+0xb6>
 8005916:	f108 0801 	add.w	r8, r8, #1
 800591a:	e7e6      	b.n	80058ea <_printf_float+0x23a>
 800591c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800591e:	2b00      	cmp	r3, #0
 8005920:	dc38      	bgt.n	8005994 <_printf_float+0x2e4>
 8005922:	2301      	movs	r3, #1
 8005924:	4631      	mov	r1, r6
 8005926:	4628      	mov	r0, r5
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <_printf_float+0x2e0>)
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f af1a 	beq.w	8005766 <_printf_float+0xb6>
 8005932:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005936:	4313      	orrs	r3, r2
 8005938:	d102      	bne.n	8005940 <_printf_float+0x290>
 800593a:	6823      	ldr	r3, [r4, #0]
 800593c:	07d9      	lsls	r1, r3, #31
 800593e:	d5d8      	bpl.n	80058f2 <_printf_float+0x242>
 8005940:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005944:	4631      	mov	r1, r6
 8005946:	4628      	mov	r0, r5
 8005948:	47b8      	blx	r7
 800594a:	3001      	adds	r0, #1
 800594c:	f43f af0b 	beq.w	8005766 <_printf_float+0xb6>
 8005950:	f04f 0900 	mov.w	r9, #0
 8005954:	f104 0a1a 	add.w	sl, r4, #26
 8005958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800595a:	425b      	negs	r3, r3
 800595c:	454b      	cmp	r3, r9
 800595e:	dc01      	bgt.n	8005964 <_printf_float+0x2b4>
 8005960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005962:	e794      	b.n	800588e <_printf_float+0x1de>
 8005964:	2301      	movs	r3, #1
 8005966:	4652      	mov	r2, sl
 8005968:	4631      	mov	r1, r6
 800596a:	4628      	mov	r0, r5
 800596c:	47b8      	blx	r7
 800596e:	3001      	adds	r0, #1
 8005970:	f43f aef9 	beq.w	8005766 <_printf_float+0xb6>
 8005974:	f109 0901 	add.w	r9, r9, #1
 8005978:	e7ee      	b.n	8005958 <_printf_float+0x2a8>
 800597a:	bf00      	nop
 800597c:	7fefffff 	.word	0x7fefffff
 8005980:	08008310 	.word	0x08008310
 8005984:	08008314 	.word	0x08008314
 8005988:	0800831c 	.word	0x0800831c
 800598c:	08008318 	.word	0x08008318
 8005990:	08008320 	.word	0x08008320
 8005994:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005998:	429a      	cmp	r2, r3
 800599a:	bfa8      	it	ge
 800599c:	461a      	movge	r2, r3
 800599e:	2a00      	cmp	r2, #0
 80059a0:	4691      	mov	r9, r2
 80059a2:	dc37      	bgt.n	8005a14 <_printf_float+0x364>
 80059a4:	f04f 0b00 	mov.w	fp, #0
 80059a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059ac:	f104 021a 	add.w	r2, r4, #26
 80059b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80059b4:	ebaa 0309 	sub.w	r3, sl, r9
 80059b8:	455b      	cmp	r3, fp
 80059ba:	dc33      	bgt.n	8005a24 <_printf_float+0x374>
 80059bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059c0:	429a      	cmp	r2, r3
 80059c2:	db3b      	blt.n	8005a3c <_printf_float+0x38c>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	07da      	lsls	r2, r3, #31
 80059c8:	d438      	bmi.n	8005a3c <_printf_float+0x38c>
 80059ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059cc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80059ce:	eba3 020a 	sub.w	r2, r3, sl
 80059d2:	eba3 0901 	sub.w	r9, r3, r1
 80059d6:	4591      	cmp	r9, r2
 80059d8:	bfa8      	it	ge
 80059da:	4691      	movge	r9, r2
 80059dc:	f1b9 0f00 	cmp.w	r9, #0
 80059e0:	dc34      	bgt.n	8005a4c <_printf_float+0x39c>
 80059e2:	f04f 0800 	mov.w	r8, #0
 80059e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059ea:	f104 0a1a 	add.w	sl, r4, #26
 80059ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	eba3 0309 	sub.w	r3, r3, r9
 80059f8:	4543      	cmp	r3, r8
 80059fa:	f77f af7a 	ble.w	80058f2 <_printf_float+0x242>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4652      	mov	r2, sl
 8005a02:	4631      	mov	r1, r6
 8005a04:	4628      	mov	r0, r5
 8005a06:	47b8      	blx	r7
 8005a08:	3001      	adds	r0, #1
 8005a0a:	f43f aeac 	beq.w	8005766 <_printf_float+0xb6>
 8005a0e:	f108 0801 	add.w	r8, r8, #1
 8005a12:	e7ec      	b.n	80059ee <_printf_float+0x33e>
 8005a14:	4613      	mov	r3, r2
 8005a16:	4631      	mov	r1, r6
 8005a18:	4642      	mov	r2, r8
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	47b8      	blx	r7
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d1c0      	bne.n	80059a4 <_printf_float+0x2f4>
 8005a22:	e6a0      	b.n	8005766 <_printf_float+0xb6>
 8005a24:	2301      	movs	r3, #1
 8005a26:	4631      	mov	r1, r6
 8005a28:	4628      	mov	r0, r5
 8005a2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a2c:	47b8      	blx	r7
 8005a2e:	3001      	adds	r0, #1
 8005a30:	f43f ae99 	beq.w	8005766 <_printf_float+0xb6>
 8005a34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005a36:	f10b 0b01 	add.w	fp, fp, #1
 8005a3a:	e7b9      	b.n	80059b0 <_printf_float+0x300>
 8005a3c:	4631      	mov	r1, r6
 8005a3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a42:	4628      	mov	r0, r5
 8005a44:	47b8      	blx	r7
 8005a46:	3001      	adds	r0, #1
 8005a48:	d1bf      	bne.n	80059ca <_printf_float+0x31a>
 8005a4a:	e68c      	b.n	8005766 <_printf_float+0xb6>
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	4631      	mov	r1, r6
 8005a50:	4628      	mov	r0, r5
 8005a52:	eb08 020a 	add.w	r2, r8, sl
 8005a56:	47b8      	blx	r7
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d1c2      	bne.n	80059e2 <_printf_float+0x332>
 8005a5c:	e683      	b.n	8005766 <_printf_float+0xb6>
 8005a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a60:	2a01      	cmp	r2, #1
 8005a62:	dc01      	bgt.n	8005a68 <_printf_float+0x3b8>
 8005a64:	07db      	lsls	r3, r3, #31
 8005a66:	d537      	bpl.n	8005ad8 <_printf_float+0x428>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4642      	mov	r2, r8
 8005a6c:	4631      	mov	r1, r6
 8005a6e:	4628      	mov	r0, r5
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f ae77 	beq.w	8005766 <_printf_float+0xb6>
 8005a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	f43f ae6f 	beq.w	8005766 <_printf_float+0xb6>
 8005a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f7fa ff8a 	bl	80009a8 <__aeabi_dcmpeq>
 8005a94:	b9d8      	cbnz	r0, 8005ace <_printf_float+0x41e>
 8005a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a98:	f108 0201 	add.w	r2, r8, #1
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b8      	blx	r7
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d10e      	bne.n	8005ac6 <_printf_float+0x416>
 8005aa8:	e65d      	b.n	8005766 <_printf_float+0xb6>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	464a      	mov	r2, r9
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4628      	mov	r0, r5
 8005ab2:	47b8      	blx	r7
 8005ab4:	3001      	adds	r0, #1
 8005ab6:	f43f ae56 	beq.w	8005766 <_printf_float+0xb6>
 8005aba:	f108 0801 	add.w	r8, r8, #1
 8005abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	4543      	cmp	r3, r8
 8005ac4:	dcf1      	bgt.n	8005aaa <_printf_float+0x3fa>
 8005ac6:	4653      	mov	r3, sl
 8005ac8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005acc:	e6e0      	b.n	8005890 <_printf_float+0x1e0>
 8005ace:	f04f 0800 	mov.w	r8, #0
 8005ad2:	f104 091a 	add.w	r9, r4, #26
 8005ad6:	e7f2      	b.n	8005abe <_printf_float+0x40e>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	4642      	mov	r2, r8
 8005adc:	e7df      	b.n	8005a9e <_printf_float+0x3ee>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	464a      	mov	r2, r9
 8005ae2:	4631      	mov	r1, r6
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	47b8      	blx	r7
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f43f ae3c 	beq.w	8005766 <_printf_float+0xb6>
 8005aee:	f108 0801 	add.w	r8, r8, #1
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005af6:	1a5b      	subs	r3, r3, r1
 8005af8:	4543      	cmp	r3, r8
 8005afa:	dcf0      	bgt.n	8005ade <_printf_float+0x42e>
 8005afc:	e6fd      	b.n	80058fa <_printf_float+0x24a>
 8005afe:	f04f 0800 	mov.w	r8, #0
 8005b02:	f104 0919 	add.w	r9, r4, #25
 8005b06:	e7f4      	b.n	8005af2 <_printf_float+0x442>

08005b08 <_printf_common>:
 8005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	4616      	mov	r6, r2
 8005b0e:	4699      	mov	r9, r3
 8005b10:	688a      	ldr	r2, [r1, #8]
 8005b12:	690b      	ldr	r3, [r1, #16]
 8005b14:	4607      	mov	r7, r0
 8005b16:	4293      	cmp	r3, r2
 8005b18:	bfb8      	it	lt
 8005b1a:	4613      	movlt	r3, r2
 8005b1c:	6033      	str	r3, [r6, #0]
 8005b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b22:	460c      	mov	r4, r1
 8005b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b28:	b10a      	cbz	r2, 8005b2e <_printf_common+0x26>
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	0699      	lsls	r1, r3, #26
 8005b32:	bf42      	ittt	mi
 8005b34:	6833      	ldrmi	r3, [r6, #0]
 8005b36:	3302      	addmi	r3, #2
 8005b38:	6033      	strmi	r3, [r6, #0]
 8005b3a:	6825      	ldr	r5, [r4, #0]
 8005b3c:	f015 0506 	ands.w	r5, r5, #6
 8005b40:	d106      	bne.n	8005b50 <_printf_common+0x48>
 8005b42:	f104 0a19 	add.w	sl, r4, #25
 8005b46:	68e3      	ldr	r3, [r4, #12]
 8005b48:	6832      	ldr	r2, [r6, #0]
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	42ab      	cmp	r3, r5
 8005b4e:	dc28      	bgt.n	8005ba2 <_printf_common+0x9a>
 8005b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b54:	1e13      	subs	r3, r2, #0
 8005b56:	6822      	ldr	r2, [r4, #0]
 8005b58:	bf18      	it	ne
 8005b5a:	2301      	movne	r3, #1
 8005b5c:	0692      	lsls	r2, r2, #26
 8005b5e:	d42d      	bmi.n	8005bbc <_printf_common+0xb4>
 8005b60:	4649      	mov	r1, r9
 8005b62:	4638      	mov	r0, r7
 8005b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b68:	47c0      	blx	r8
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d020      	beq.n	8005bb0 <_printf_common+0xa8>
 8005b6e:	6823      	ldr	r3, [r4, #0]
 8005b70:	68e5      	ldr	r5, [r4, #12]
 8005b72:	f003 0306 	and.w	r3, r3, #6
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	bf18      	it	ne
 8005b7a:	2500      	movne	r5, #0
 8005b7c:	6832      	ldr	r2, [r6, #0]
 8005b7e:	f04f 0600 	mov.w	r6, #0
 8005b82:	68a3      	ldr	r3, [r4, #8]
 8005b84:	bf08      	it	eq
 8005b86:	1aad      	subeq	r5, r5, r2
 8005b88:	6922      	ldr	r2, [r4, #16]
 8005b8a:	bf08      	it	eq
 8005b8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b90:	4293      	cmp	r3, r2
 8005b92:	bfc4      	itt	gt
 8005b94:	1a9b      	subgt	r3, r3, r2
 8005b96:	18ed      	addgt	r5, r5, r3
 8005b98:	341a      	adds	r4, #26
 8005b9a:	42b5      	cmp	r5, r6
 8005b9c:	d11a      	bne.n	8005bd4 <_printf_common+0xcc>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e008      	b.n	8005bb4 <_printf_common+0xac>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4638      	mov	r0, r7
 8005baa:	47c0      	blx	r8
 8005bac:	3001      	adds	r0, #1
 8005bae:	d103      	bne.n	8005bb8 <_printf_common+0xb0>
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb8:	3501      	adds	r5, #1
 8005bba:	e7c4      	b.n	8005b46 <_printf_common+0x3e>
 8005bbc:	2030      	movs	r0, #48	; 0x30
 8005bbe:	18e1      	adds	r1, r4, r3
 8005bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bca:	4422      	add	r2, r4
 8005bcc:	3302      	adds	r3, #2
 8005bce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bd2:	e7c5      	b.n	8005b60 <_printf_common+0x58>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4649      	mov	r1, r9
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c0      	blx	r8
 8005bde:	3001      	adds	r0, #1
 8005be0:	d0e6      	beq.n	8005bb0 <_printf_common+0xa8>
 8005be2:	3601      	adds	r6, #1
 8005be4:	e7d9      	b.n	8005b9a <_printf_common+0x92>
	...

08005be8 <_printf_i>:
 8005be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	7e0f      	ldrb	r7, [r1, #24]
 8005bee:	4691      	mov	r9, r2
 8005bf0:	2f78      	cmp	r7, #120	; 0x78
 8005bf2:	4680      	mov	r8, r0
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	469a      	mov	sl, r3
 8005bf8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bfe:	d807      	bhi.n	8005c10 <_printf_i+0x28>
 8005c00:	2f62      	cmp	r7, #98	; 0x62
 8005c02:	d80a      	bhi.n	8005c1a <_printf_i+0x32>
 8005c04:	2f00      	cmp	r7, #0
 8005c06:	f000 80d9 	beq.w	8005dbc <_printf_i+0x1d4>
 8005c0a:	2f58      	cmp	r7, #88	; 0x58
 8005c0c:	f000 80a4 	beq.w	8005d58 <_printf_i+0x170>
 8005c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c18:	e03a      	b.n	8005c90 <_printf_i+0xa8>
 8005c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c1e:	2b15      	cmp	r3, #21
 8005c20:	d8f6      	bhi.n	8005c10 <_printf_i+0x28>
 8005c22:	a101      	add	r1, pc, #4	; (adr r1, 8005c28 <_printf_i+0x40>)
 8005c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c28:	08005c81 	.word	0x08005c81
 8005c2c:	08005c95 	.word	0x08005c95
 8005c30:	08005c11 	.word	0x08005c11
 8005c34:	08005c11 	.word	0x08005c11
 8005c38:	08005c11 	.word	0x08005c11
 8005c3c:	08005c11 	.word	0x08005c11
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005c11 	.word	0x08005c11
 8005c48:	08005c11 	.word	0x08005c11
 8005c4c:	08005c11 	.word	0x08005c11
 8005c50:	08005c11 	.word	0x08005c11
 8005c54:	08005da3 	.word	0x08005da3
 8005c58:	08005cc5 	.word	0x08005cc5
 8005c5c:	08005d85 	.word	0x08005d85
 8005c60:	08005c11 	.word	0x08005c11
 8005c64:	08005c11 	.word	0x08005c11
 8005c68:	08005dc5 	.word	0x08005dc5
 8005c6c:	08005c11 	.word	0x08005c11
 8005c70:	08005cc5 	.word	0x08005cc5
 8005c74:	08005c11 	.word	0x08005c11
 8005c78:	08005c11 	.word	0x08005c11
 8005c7c:	08005d8d 	.word	0x08005d8d
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	1d1a      	adds	r2, r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	602a      	str	r2, [r5, #0]
 8005c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0a4      	b.n	8005dde <_printf_i+0x1f6>
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	6829      	ldr	r1, [r5, #0]
 8005c98:	0606      	lsls	r6, r0, #24
 8005c9a:	f101 0304 	add.w	r3, r1, #4
 8005c9e:	d50a      	bpl.n	8005cb6 <_printf_i+0xce>
 8005ca0:	680e      	ldr	r6, [r1, #0]
 8005ca2:	602b      	str	r3, [r5, #0]
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	da03      	bge.n	8005cb0 <_printf_i+0xc8>
 8005ca8:	232d      	movs	r3, #45	; 0x2d
 8005caa:	4276      	negs	r6, r6
 8005cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb0:	230a      	movs	r3, #10
 8005cb2:	485e      	ldr	r0, [pc, #376]	; (8005e2c <_printf_i+0x244>)
 8005cb4:	e019      	b.n	8005cea <_printf_i+0x102>
 8005cb6:	680e      	ldr	r6, [r1, #0]
 8005cb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	bf18      	it	ne
 8005cc0:	b236      	sxthne	r6, r6
 8005cc2:	e7ef      	b.n	8005ca4 <_printf_i+0xbc>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	1d19      	adds	r1, r3, #4
 8005cca:	6029      	str	r1, [r5, #0]
 8005ccc:	0601      	lsls	r1, r0, #24
 8005cce:	d501      	bpl.n	8005cd4 <_printf_i+0xec>
 8005cd0:	681e      	ldr	r6, [r3, #0]
 8005cd2:	e002      	b.n	8005cda <_printf_i+0xf2>
 8005cd4:	0646      	lsls	r6, r0, #25
 8005cd6:	d5fb      	bpl.n	8005cd0 <_printf_i+0xe8>
 8005cd8:	881e      	ldrh	r6, [r3, #0]
 8005cda:	2f6f      	cmp	r7, #111	; 0x6f
 8005cdc:	bf0c      	ite	eq
 8005cde:	2308      	moveq	r3, #8
 8005ce0:	230a      	movne	r3, #10
 8005ce2:	4852      	ldr	r0, [pc, #328]	; (8005e2c <_printf_i+0x244>)
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cea:	6865      	ldr	r5, [r4, #4]
 8005cec:	2d00      	cmp	r5, #0
 8005cee:	bfa8      	it	ge
 8005cf0:	6821      	ldrge	r1, [r4, #0]
 8005cf2:	60a5      	str	r5, [r4, #8]
 8005cf4:	bfa4      	itt	ge
 8005cf6:	f021 0104 	bicge.w	r1, r1, #4
 8005cfa:	6021      	strge	r1, [r4, #0]
 8005cfc:	b90e      	cbnz	r6, 8005d02 <_printf_i+0x11a>
 8005cfe:	2d00      	cmp	r5, #0
 8005d00:	d04d      	beq.n	8005d9e <_printf_i+0x1b6>
 8005d02:	4615      	mov	r5, r2
 8005d04:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d08:	fb03 6711 	mls	r7, r3, r1, r6
 8005d0c:	5dc7      	ldrb	r7, [r0, r7]
 8005d0e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d12:	4637      	mov	r7, r6
 8005d14:	42bb      	cmp	r3, r7
 8005d16:	460e      	mov	r6, r1
 8005d18:	d9f4      	bls.n	8005d04 <_printf_i+0x11c>
 8005d1a:	2b08      	cmp	r3, #8
 8005d1c:	d10b      	bne.n	8005d36 <_printf_i+0x14e>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	07de      	lsls	r6, r3, #31
 8005d22:	d508      	bpl.n	8005d36 <_printf_i+0x14e>
 8005d24:	6923      	ldr	r3, [r4, #16]
 8005d26:	6861      	ldr	r1, [r4, #4]
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	bfde      	ittt	le
 8005d2c:	2330      	movle	r3, #48	; 0x30
 8005d2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d36:	1b52      	subs	r2, r2, r5
 8005d38:	6122      	str	r2, [r4, #16]
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4640      	mov	r0, r8
 8005d40:	f8cd a000 	str.w	sl, [sp]
 8005d44:	aa03      	add	r2, sp, #12
 8005d46:	f7ff fedf 	bl	8005b08 <_printf_common>
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	d14c      	bne.n	8005de8 <_printf_i+0x200>
 8005d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d52:	b004      	add	sp, #16
 8005d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d58:	4834      	ldr	r0, [pc, #208]	; (8005e2c <_printf_i+0x244>)
 8005d5a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d5e:	6829      	ldr	r1, [r5, #0]
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d66:	6029      	str	r1, [r5, #0]
 8005d68:	061d      	lsls	r5, r3, #24
 8005d6a:	d514      	bpl.n	8005d96 <_printf_i+0x1ae>
 8005d6c:	07df      	lsls	r7, r3, #31
 8005d6e:	bf44      	itt	mi
 8005d70:	f043 0320 	orrmi.w	r3, r3, #32
 8005d74:	6023      	strmi	r3, [r4, #0]
 8005d76:	b91e      	cbnz	r6, 8005d80 <_printf_i+0x198>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	f023 0320 	bic.w	r3, r3, #32
 8005d7e:	6023      	str	r3, [r4, #0]
 8005d80:	2310      	movs	r3, #16
 8005d82:	e7af      	b.n	8005ce4 <_printf_i+0xfc>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	f043 0320 	orr.w	r3, r3, #32
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	2378      	movs	r3, #120	; 0x78
 8005d8e:	4828      	ldr	r0, [pc, #160]	; (8005e30 <_printf_i+0x248>)
 8005d90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d94:	e7e3      	b.n	8005d5e <_printf_i+0x176>
 8005d96:	0659      	lsls	r1, r3, #25
 8005d98:	bf48      	it	mi
 8005d9a:	b2b6      	uxthmi	r6, r6
 8005d9c:	e7e6      	b.n	8005d6c <_printf_i+0x184>
 8005d9e:	4615      	mov	r5, r2
 8005da0:	e7bb      	b.n	8005d1a <_printf_i+0x132>
 8005da2:	682b      	ldr	r3, [r5, #0]
 8005da4:	6826      	ldr	r6, [r4, #0]
 8005da6:	1d18      	adds	r0, r3, #4
 8005da8:	6961      	ldr	r1, [r4, #20]
 8005daa:	6028      	str	r0, [r5, #0]
 8005dac:	0635      	lsls	r5, r6, #24
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	d501      	bpl.n	8005db6 <_printf_i+0x1ce>
 8005db2:	6019      	str	r1, [r3, #0]
 8005db4:	e002      	b.n	8005dbc <_printf_i+0x1d4>
 8005db6:	0670      	lsls	r0, r6, #25
 8005db8:	d5fb      	bpl.n	8005db2 <_printf_i+0x1ca>
 8005dba:	8019      	strh	r1, [r3, #0]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	4615      	mov	r5, r2
 8005dc0:	6123      	str	r3, [r4, #16]
 8005dc2:	e7ba      	b.n	8005d3a <_printf_i+0x152>
 8005dc4:	682b      	ldr	r3, [r5, #0]
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	1d1a      	adds	r2, r3, #4
 8005dca:	602a      	str	r2, [r5, #0]
 8005dcc:	681d      	ldr	r5, [r3, #0]
 8005dce:	6862      	ldr	r2, [r4, #4]
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f001 fa1f 	bl	8007214 <memchr>
 8005dd6:	b108      	cbz	r0, 8005ddc <_printf_i+0x1f4>
 8005dd8:	1b40      	subs	r0, r0, r5
 8005dda:	6060      	str	r0, [r4, #4]
 8005ddc:	6863      	ldr	r3, [r4, #4]
 8005dde:	6123      	str	r3, [r4, #16]
 8005de0:	2300      	movs	r3, #0
 8005de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005de6:	e7a8      	b.n	8005d3a <_printf_i+0x152>
 8005de8:	462a      	mov	r2, r5
 8005dea:	4649      	mov	r1, r9
 8005dec:	4640      	mov	r0, r8
 8005dee:	6923      	ldr	r3, [r4, #16]
 8005df0:	47d0      	blx	sl
 8005df2:	3001      	adds	r0, #1
 8005df4:	d0ab      	beq.n	8005d4e <_printf_i+0x166>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	079b      	lsls	r3, r3, #30
 8005dfa:	d413      	bmi.n	8005e24 <_printf_i+0x23c>
 8005dfc:	68e0      	ldr	r0, [r4, #12]
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	4298      	cmp	r0, r3
 8005e02:	bfb8      	it	lt
 8005e04:	4618      	movlt	r0, r3
 8005e06:	e7a4      	b.n	8005d52 <_printf_i+0x16a>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	4632      	mov	r2, r6
 8005e0c:	4649      	mov	r1, r9
 8005e0e:	4640      	mov	r0, r8
 8005e10:	47d0      	blx	sl
 8005e12:	3001      	adds	r0, #1
 8005e14:	d09b      	beq.n	8005d4e <_printf_i+0x166>
 8005e16:	3501      	adds	r5, #1
 8005e18:	68e3      	ldr	r3, [r4, #12]
 8005e1a:	9903      	ldr	r1, [sp, #12]
 8005e1c:	1a5b      	subs	r3, r3, r1
 8005e1e:	42ab      	cmp	r3, r5
 8005e20:	dcf2      	bgt.n	8005e08 <_printf_i+0x220>
 8005e22:	e7eb      	b.n	8005dfc <_printf_i+0x214>
 8005e24:	2500      	movs	r5, #0
 8005e26:	f104 0619 	add.w	r6, r4, #25
 8005e2a:	e7f5      	b.n	8005e18 <_printf_i+0x230>
 8005e2c:	08008322 	.word	0x08008322
 8005e30:	08008333 	.word	0x08008333

08005e34 <iprintf>:
 8005e34:	b40f      	push	{r0, r1, r2, r3}
 8005e36:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <iprintf+0x2c>)
 8005e38:	b513      	push	{r0, r1, r4, lr}
 8005e3a:	681c      	ldr	r4, [r3, #0]
 8005e3c:	b124      	cbz	r4, 8005e48 <iprintf+0x14>
 8005e3e:	69a3      	ldr	r3, [r4, #24]
 8005e40:	b913      	cbnz	r3, 8005e48 <iprintf+0x14>
 8005e42:	4620      	mov	r0, r4
 8005e44:	f001 f8d4 	bl	8006ff0 <__sinit>
 8005e48:	ab05      	add	r3, sp, #20
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	9a04      	ldr	r2, [sp, #16]
 8005e4e:	68a1      	ldr	r1, [r4, #8]
 8005e50:	9301      	str	r3, [sp, #4]
 8005e52:	f001 fe95 	bl	8007b80 <_vfiprintf_r>
 8005e56:	b002      	add	sp, #8
 8005e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e5c:	b004      	add	sp, #16
 8005e5e:	4770      	bx	lr
 8005e60:	20000014 	.word	0x20000014

08005e64 <_puts_r>:
 8005e64:	b570      	push	{r4, r5, r6, lr}
 8005e66:	460e      	mov	r6, r1
 8005e68:	4605      	mov	r5, r0
 8005e6a:	b118      	cbz	r0, 8005e74 <_puts_r+0x10>
 8005e6c:	6983      	ldr	r3, [r0, #24]
 8005e6e:	b90b      	cbnz	r3, 8005e74 <_puts_r+0x10>
 8005e70:	f001 f8be 	bl	8006ff0 <__sinit>
 8005e74:	69ab      	ldr	r3, [r5, #24]
 8005e76:	68ac      	ldr	r4, [r5, #8]
 8005e78:	b913      	cbnz	r3, 8005e80 <_puts_r+0x1c>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f001 f8b8 	bl	8006ff0 <__sinit>
 8005e80:	4b2c      	ldr	r3, [pc, #176]	; (8005f34 <_puts_r+0xd0>)
 8005e82:	429c      	cmp	r4, r3
 8005e84:	d120      	bne.n	8005ec8 <_puts_r+0x64>
 8005e86:	686c      	ldr	r4, [r5, #4]
 8005e88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e8a:	07db      	lsls	r3, r3, #31
 8005e8c:	d405      	bmi.n	8005e9a <_puts_r+0x36>
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	0598      	lsls	r0, r3, #22
 8005e92:	d402      	bmi.n	8005e9a <_puts_r+0x36>
 8005e94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e96:	f001 f94e 	bl	8007136 <__retarget_lock_acquire_recursive>
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	0719      	lsls	r1, r3, #28
 8005e9e:	d51d      	bpl.n	8005edc <_puts_r+0x78>
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	b1db      	cbz	r3, 8005edc <_puts_r+0x78>
 8005ea4:	3e01      	subs	r6, #1
 8005ea6:	68a3      	ldr	r3, [r4, #8]
 8005ea8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005eac:	3b01      	subs	r3, #1
 8005eae:	60a3      	str	r3, [r4, #8]
 8005eb0:	bb39      	cbnz	r1, 8005f02 <_puts_r+0x9e>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da38      	bge.n	8005f28 <_puts_r+0xc4>
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	210a      	movs	r1, #10
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f000 f848 	bl	8005f50 <__swbuf_r>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d011      	beq.n	8005ee8 <_puts_r+0x84>
 8005ec4:	250a      	movs	r5, #10
 8005ec6:	e011      	b.n	8005eec <_puts_r+0x88>
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <_puts_r+0xd4>)
 8005eca:	429c      	cmp	r4, r3
 8005ecc:	d101      	bne.n	8005ed2 <_puts_r+0x6e>
 8005ece:	68ac      	ldr	r4, [r5, #8]
 8005ed0:	e7da      	b.n	8005e88 <_puts_r+0x24>
 8005ed2:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <_puts_r+0xd8>)
 8005ed4:	429c      	cmp	r4, r3
 8005ed6:	bf08      	it	eq
 8005ed8:	68ec      	ldreq	r4, [r5, #12]
 8005eda:	e7d5      	b.n	8005e88 <_puts_r+0x24>
 8005edc:	4621      	mov	r1, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 f888 	bl	8005ff4 <__swsetup_r>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d0dd      	beq.n	8005ea4 <_puts_r+0x40>
 8005ee8:	f04f 35ff 	mov.w	r5, #4294967295
 8005eec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eee:	07da      	lsls	r2, r3, #31
 8005ef0:	d405      	bmi.n	8005efe <_puts_r+0x9a>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	059b      	lsls	r3, r3, #22
 8005ef6:	d402      	bmi.n	8005efe <_puts_r+0x9a>
 8005ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005efa:	f001 f91d 	bl	8007138 <__retarget_lock_release_recursive>
 8005efe:	4628      	mov	r0, r5
 8005f00:	bd70      	pop	{r4, r5, r6, pc}
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	da04      	bge.n	8005f10 <_puts_r+0xac>
 8005f06:	69a2      	ldr	r2, [r4, #24]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	dc06      	bgt.n	8005f1a <_puts_r+0xb6>
 8005f0c:	290a      	cmp	r1, #10
 8005f0e:	d004      	beq.n	8005f1a <_puts_r+0xb6>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	6022      	str	r2, [r4, #0]
 8005f16:	7019      	strb	r1, [r3, #0]
 8005f18:	e7c5      	b.n	8005ea6 <_puts_r+0x42>
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	f000 f817 	bl	8005f50 <__swbuf_r>
 8005f22:	3001      	adds	r0, #1
 8005f24:	d1bf      	bne.n	8005ea6 <_puts_r+0x42>
 8005f26:	e7df      	b.n	8005ee8 <_puts_r+0x84>
 8005f28:	250a      	movs	r5, #10
 8005f2a:	6823      	ldr	r3, [r4, #0]
 8005f2c:	1c5a      	adds	r2, r3, #1
 8005f2e:	6022      	str	r2, [r4, #0]
 8005f30:	701d      	strb	r5, [r3, #0]
 8005f32:	e7db      	b.n	8005eec <_puts_r+0x88>
 8005f34:	080083f4 	.word	0x080083f4
 8005f38:	08008414 	.word	0x08008414
 8005f3c:	080083d4 	.word	0x080083d4

08005f40 <puts>:
 8005f40:	4b02      	ldr	r3, [pc, #8]	; (8005f4c <puts+0xc>)
 8005f42:	4601      	mov	r1, r0
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f7ff bf8d 	b.w	8005e64 <_puts_r>
 8005f4a:	bf00      	nop
 8005f4c:	20000014 	.word	0x20000014

08005f50 <__swbuf_r>:
 8005f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f52:	460e      	mov	r6, r1
 8005f54:	4614      	mov	r4, r2
 8005f56:	4605      	mov	r5, r0
 8005f58:	b118      	cbz	r0, 8005f62 <__swbuf_r+0x12>
 8005f5a:	6983      	ldr	r3, [r0, #24]
 8005f5c:	b90b      	cbnz	r3, 8005f62 <__swbuf_r+0x12>
 8005f5e:	f001 f847 	bl	8006ff0 <__sinit>
 8005f62:	4b21      	ldr	r3, [pc, #132]	; (8005fe8 <__swbuf_r+0x98>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	d12b      	bne.n	8005fc0 <__swbuf_r+0x70>
 8005f68:	686c      	ldr	r4, [r5, #4]
 8005f6a:	69a3      	ldr	r3, [r4, #24]
 8005f6c:	60a3      	str	r3, [r4, #8]
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	071a      	lsls	r2, r3, #28
 8005f72:	d52f      	bpl.n	8005fd4 <__swbuf_r+0x84>
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	b36b      	cbz	r3, 8005fd4 <__swbuf_r+0x84>
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	6820      	ldr	r0, [r4, #0]
 8005f7c:	b2f6      	uxtb	r6, r6
 8005f7e:	1ac0      	subs	r0, r0, r3
 8005f80:	6963      	ldr	r3, [r4, #20]
 8005f82:	4637      	mov	r7, r6
 8005f84:	4283      	cmp	r3, r0
 8005f86:	dc04      	bgt.n	8005f92 <__swbuf_r+0x42>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 ff9c 	bl	8006ec8 <_fflush_r>
 8005f90:	bb30      	cbnz	r0, 8005fe0 <__swbuf_r+0x90>
 8005f92:	68a3      	ldr	r3, [r4, #8]
 8005f94:	3001      	adds	r0, #1
 8005f96:	3b01      	subs	r3, #1
 8005f98:	60a3      	str	r3, [r4, #8]
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	6022      	str	r2, [r4, #0]
 8005fa0:	701e      	strb	r6, [r3, #0]
 8005fa2:	6963      	ldr	r3, [r4, #20]
 8005fa4:	4283      	cmp	r3, r0
 8005fa6:	d004      	beq.n	8005fb2 <__swbuf_r+0x62>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	07db      	lsls	r3, r3, #31
 8005fac:	d506      	bpl.n	8005fbc <__swbuf_r+0x6c>
 8005fae:	2e0a      	cmp	r6, #10
 8005fb0:	d104      	bne.n	8005fbc <__swbuf_r+0x6c>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	f000 ff87 	bl	8006ec8 <_fflush_r>
 8005fba:	b988      	cbnz	r0, 8005fe0 <__swbuf_r+0x90>
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <__swbuf_r+0x9c>)
 8005fc2:	429c      	cmp	r4, r3
 8005fc4:	d101      	bne.n	8005fca <__swbuf_r+0x7a>
 8005fc6:	68ac      	ldr	r4, [r5, #8]
 8005fc8:	e7cf      	b.n	8005f6a <__swbuf_r+0x1a>
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <__swbuf_r+0xa0>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	bf08      	it	eq
 8005fd0:	68ec      	ldreq	r4, [r5, #12]
 8005fd2:	e7ca      	b.n	8005f6a <__swbuf_r+0x1a>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 f80c 	bl	8005ff4 <__swsetup_r>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d0cb      	beq.n	8005f78 <__swbuf_r+0x28>
 8005fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8005fe4:	e7ea      	b.n	8005fbc <__swbuf_r+0x6c>
 8005fe6:	bf00      	nop
 8005fe8:	080083f4 	.word	0x080083f4
 8005fec:	08008414 	.word	0x08008414
 8005ff0:	080083d4 	.word	0x080083d4

08005ff4 <__swsetup_r>:
 8005ff4:	4b32      	ldr	r3, [pc, #200]	; (80060c0 <__swsetup_r+0xcc>)
 8005ff6:	b570      	push	{r4, r5, r6, lr}
 8005ff8:	681d      	ldr	r5, [r3, #0]
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	b125      	cbz	r5, 800600a <__swsetup_r+0x16>
 8006000:	69ab      	ldr	r3, [r5, #24]
 8006002:	b913      	cbnz	r3, 800600a <__swsetup_r+0x16>
 8006004:	4628      	mov	r0, r5
 8006006:	f000 fff3 	bl	8006ff0 <__sinit>
 800600a:	4b2e      	ldr	r3, [pc, #184]	; (80060c4 <__swsetup_r+0xd0>)
 800600c:	429c      	cmp	r4, r3
 800600e:	d10f      	bne.n	8006030 <__swsetup_r+0x3c>
 8006010:	686c      	ldr	r4, [r5, #4]
 8006012:	89a3      	ldrh	r3, [r4, #12]
 8006014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006018:	0719      	lsls	r1, r3, #28
 800601a:	d42c      	bmi.n	8006076 <__swsetup_r+0x82>
 800601c:	06dd      	lsls	r5, r3, #27
 800601e:	d411      	bmi.n	8006044 <__swsetup_r+0x50>
 8006020:	2309      	movs	r3, #9
 8006022:	6033      	str	r3, [r6, #0]
 8006024:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006028:	f04f 30ff 	mov.w	r0, #4294967295
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	e03e      	b.n	80060ae <__swsetup_r+0xba>
 8006030:	4b25      	ldr	r3, [pc, #148]	; (80060c8 <__swsetup_r+0xd4>)
 8006032:	429c      	cmp	r4, r3
 8006034:	d101      	bne.n	800603a <__swsetup_r+0x46>
 8006036:	68ac      	ldr	r4, [r5, #8]
 8006038:	e7eb      	b.n	8006012 <__swsetup_r+0x1e>
 800603a:	4b24      	ldr	r3, [pc, #144]	; (80060cc <__swsetup_r+0xd8>)
 800603c:	429c      	cmp	r4, r3
 800603e:	bf08      	it	eq
 8006040:	68ec      	ldreq	r4, [r5, #12]
 8006042:	e7e6      	b.n	8006012 <__swsetup_r+0x1e>
 8006044:	0758      	lsls	r0, r3, #29
 8006046:	d512      	bpl.n	800606e <__swsetup_r+0x7a>
 8006048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800604a:	b141      	cbz	r1, 800605e <__swsetup_r+0x6a>
 800604c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006050:	4299      	cmp	r1, r3
 8006052:	d002      	beq.n	800605a <__swsetup_r+0x66>
 8006054:	4630      	mov	r0, r6
 8006056:	f001 fc8f 	bl	8007978 <_free_r>
 800605a:	2300      	movs	r3, #0
 800605c:	6363      	str	r3, [r4, #52]	; 0x34
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006064:	81a3      	strh	r3, [r4, #12]
 8006066:	2300      	movs	r3, #0
 8006068:	6063      	str	r3, [r4, #4]
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	6023      	str	r3, [r4, #0]
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f043 0308 	orr.w	r3, r3, #8
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	6923      	ldr	r3, [r4, #16]
 8006078:	b94b      	cbnz	r3, 800608e <__swsetup_r+0x9a>
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006084:	d003      	beq.n	800608e <__swsetup_r+0x9a>
 8006086:	4621      	mov	r1, r4
 8006088:	4630      	mov	r0, r6
 800608a:	f001 f87b 	bl	8007184 <__smakebuf_r>
 800608e:	89a0      	ldrh	r0, [r4, #12]
 8006090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006094:	f010 0301 	ands.w	r3, r0, #1
 8006098:	d00a      	beq.n	80060b0 <__swsetup_r+0xbc>
 800609a:	2300      	movs	r3, #0
 800609c:	60a3      	str	r3, [r4, #8]
 800609e:	6963      	ldr	r3, [r4, #20]
 80060a0:	425b      	negs	r3, r3
 80060a2:	61a3      	str	r3, [r4, #24]
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	b943      	cbnz	r3, 80060ba <__swsetup_r+0xc6>
 80060a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80060ac:	d1ba      	bne.n	8006024 <__swsetup_r+0x30>
 80060ae:	bd70      	pop	{r4, r5, r6, pc}
 80060b0:	0781      	lsls	r1, r0, #30
 80060b2:	bf58      	it	pl
 80060b4:	6963      	ldrpl	r3, [r4, #20]
 80060b6:	60a3      	str	r3, [r4, #8]
 80060b8:	e7f4      	b.n	80060a4 <__swsetup_r+0xb0>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e7f7      	b.n	80060ae <__swsetup_r+0xba>
 80060be:	bf00      	nop
 80060c0:	20000014 	.word	0x20000014
 80060c4:	080083f4 	.word	0x080083f4
 80060c8:	08008414 	.word	0x08008414
 80060cc:	080083d4 	.word	0x080083d4

080060d0 <quorem>:
 80060d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	6903      	ldr	r3, [r0, #16]
 80060d6:	690c      	ldr	r4, [r1, #16]
 80060d8:	4607      	mov	r7, r0
 80060da:	42a3      	cmp	r3, r4
 80060dc:	f2c0 8082 	blt.w	80061e4 <quorem+0x114>
 80060e0:	3c01      	subs	r4, #1
 80060e2:	f100 0514 	add.w	r5, r0, #20
 80060e6:	f101 0814 	add.w	r8, r1, #20
 80060ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060ee:	9301      	str	r3, [sp, #4]
 80060f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060f8:	3301      	adds	r3, #1
 80060fa:	429a      	cmp	r2, r3
 80060fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006100:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006104:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006108:	d331      	bcc.n	800616e <quorem+0x9e>
 800610a:	f04f 0e00 	mov.w	lr, #0
 800610e:	4640      	mov	r0, r8
 8006110:	46ac      	mov	ip, r5
 8006112:	46f2      	mov	sl, lr
 8006114:	f850 2b04 	ldr.w	r2, [r0], #4
 8006118:	b293      	uxth	r3, r2
 800611a:	fb06 e303 	mla	r3, r6, r3, lr
 800611e:	0c12      	lsrs	r2, r2, #16
 8006120:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006124:	b29b      	uxth	r3, r3
 8006126:	fb06 e202 	mla	r2, r6, r2, lr
 800612a:	ebaa 0303 	sub.w	r3, sl, r3
 800612e:	f8dc a000 	ldr.w	sl, [ip]
 8006132:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006136:	fa1f fa8a 	uxth.w	sl, sl
 800613a:	4453      	add	r3, sl
 800613c:	f8dc a000 	ldr.w	sl, [ip]
 8006140:	b292      	uxth	r2, r2
 8006142:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006146:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800614a:	b29b      	uxth	r3, r3
 800614c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006150:	4581      	cmp	r9, r0
 8006152:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006156:	f84c 3b04 	str.w	r3, [ip], #4
 800615a:	d2db      	bcs.n	8006114 <quorem+0x44>
 800615c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006160:	b92b      	cbnz	r3, 800616e <quorem+0x9e>
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	3b04      	subs	r3, #4
 8006166:	429d      	cmp	r5, r3
 8006168:	461a      	mov	r2, r3
 800616a:	d32f      	bcc.n	80061cc <quorem+0xfc>
 800616c:	613c      	str	r4, [r7, #16]
 800616e:	4638      	mov	r0, r7
 8006170:	f001 faea 	bl	8007748 <__mcmp>
 8006174:	2800      	cmp	r0, #0
 8006176:	db25      	blt.n	80061c4 <quorem+0xf4>
 8006178:	4628      	mov	r0, r5
 800617a:	f04f 0c00 	mov.w	ip, #0
 800617e:	3601      	adds	r6, #1
 8006180:	f858 1b04 	ldr.w	r1, [r8], #4
 8006184:	f8d0 e000 	ldr.w	lr, [r0]
 8006188:	b28b      	uxth	r3, r1
 800618a:	ebac 0303 	sub.w	r3, ip, r3
 800618e:	fa1f f28e 	uxth.w	r2, lr
 8006192:	4413      	add	r3, r2
 8006194:	0c0a      	lsrs	r2, r1, #16
 8006196:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800619a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800619e:	b29b      	uxth	r3, r3
 80061a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80061a4:	45c1      	cmp	r9, r8
 80061a6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80061aa:	f840 3b04 	str.w	r3, [r0], #4
 80061ae:	d2e7      	bcs.n	8006180 <quorem+0xb0>
 80061b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061b8:	b922      	cbnz	r2, 80061c4 <quorem+0xf4>
 80061ba:	3b04      	subs	r3, #4
 80061bc:	429d      	cmp	r5, r3
 80061be:	461a      	mov	r2, r3
 80061c0:	d30a      	bcc.n	80061d8 <quorem+0x108>
 80061c2:	613c      	str	r4, [r7, #16]
 80061c4:	4630      	mov	r0, r6
 80061c6:	b003      	add	sp, #12
 80061c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	3b04      	subs	r3, #4
 80061d0:	2a00      	cmp	r2, #0
 80061d2:	d1cb      	bne.n	800616c <quorem+0x9c>
 80061d4:	3c01      	subs	r4, #1
 80061d6:	e7c6      	b.n	8006166 <quorem+0x96>
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	3b04      	subs	r3, #4
 80061dc:	2a00      	cmp	r2, #0
 80061de:	d1f0      	bne.n	80061c2 <quorem+0xf2>
 80061e0:	3c01      	subs	r4, #1
 80061e2:	e7eb      	b.n	80061bc <quorem+0xec>
 80061e4:	2000      	movs	r0, #0
 80061e6:	e7ee      	b.n	80061c6 <quorem+0xf6>

080061e8 <_dtoa_r>:
 80061e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ec:	4616      	mov	r6, r2
 80061ee:	461f      	mov	r7, r3
 80061f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80061f2:	b099      	sub	sp, #100	; 0x64
 80061f4:	4605      	mov	r5, r0
 80061f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80061fa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80061fe:	b974      	cbnz	r4, 800621e <_dtoa_r+0x36>
 8006200:	2010      	movs	r0, #16
 8006202:	f000 ffff 	bl	8007204 <malloc>
 8006206:	4602      	mov	r2, r0
 8006208:	6268      	str	r0, [r5, #36]	; 0x24
 800620a:	b920      	cbnz	r0, 8006216 <_dtoa_r+0x2e>
 800620c:	21ea      	movs	r1, #234	; 0xea
 800620e:	4ba8      	ldr	r3, [pc, #672]	; (80064b0 <_dtoa_r+0x2c8>)
 8006210:	48a8      	ldr	r0, [pc, #672]	; (80064b4 <_dtoa_r+0x2cc>)
 8006212:	f001 fe4b 	bl	8007eac <__assert_func>
 8006216:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800621a:	6004      	str	r4, [r0, #0]
 800621c:	60c4      	str	r4, [r0, #12]
 800621e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006220:	6819      	ldr	r1, [r3, #0]
 8006222:	b151      	cbz	r1, 800623a <_dtoa_r+0x52>
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	2301      	movs	r3, #1
 8006228:	4093      	lsls	r3, r2
 800622a:	604a      	str	r2, [r1, #4]
 800622c:	608b      	str	r3, [r1, #8]
 800622e:	4628      	mov	r0, r5
 8006230:	f001 f84c 	bl	80072cc <_Bfree>
 8006234:	2200      	movs	r2, #0
 8006236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	1e3b      	subs	r3, r7, #0
 800623c:	bfaf      	iteee	ge
 800623e:	2300      	movge	r3, #0
 8006240:	2201      	movlt	r2, #1
 8006242:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006246:	9305      	strlt	r3, [sp, #20]
 8006248:	bfa8      	it	ge
 800624a:	f8c8 3000 	strge.w	r3, [r8]
 800624e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006252:	4b99      	ldr	r3, [pc, #612]	; (80064b8 <_dtoa_r+0x2d0>)
 8006254:	bfb8      	it	lt
 8006256:	f8c8 2000 	strlt.w	r2, [r8]
 800625a:	ea33 0309 	bics.w	r3, r3, r9
 800625e:	d119      	bne.n	8006294 <_dtoa_r+0xac>
 8006260:	f242 730f 	movw	r3, #9999	; 0x270f
 8006264:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800626c:	4333      	orrs	r3, r6
 800626e:	f000 857f 	beq.w	8006d70 <_dtoa_r+0xb88>
 8006272:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006274:	b953      	cbnz	r3, 800628c <_dtoa_r+0xa4>
 8006276:	4b91      	ldr	r3, [pc, #580]	; (80064bc <_dtoa_r+0x2d4>)
 8006278:	e022      	b.n	80062c0 <_dtoa_r+0xd8>
 800627a:	4b91      	ldr	r3, [pc, #580]	; (80064c0 <_dtoa_r+0x2d8>)
 800627c:	9303      	str	r3, [sp, #12]
 800627e:	3308      	adds	r3, #8
 8006280:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	9803      	ldr	r0, [sp, #12]
 8006286:	b019      	add	sp, #100	; 0x64
 8006288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800628c:	4b8b      	ldr	r3, [pc, #556]	; (80064bc <_dtoa_r+0x2d4>)
 800628e:	9303      	str	r3, [sp, #12]
 8006290:	3303      	adds	r3, #3
 8006292:	e7f5      	b.n	8006280 <_dtoa_r+0x98>
 8006294:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006298:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800629c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062a0:	2200      	movs	r2, #0
 80062a2:	2300      	movs	r3, #0
 80062a4:	f7fa fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80062a8:	4680      	mov	r8, r0
 80062aa:	b158      	cbz	r0, 80062c4 <_dtoa_r+0xdc>
 80062ac:	2301      	movs	r3, #1
 80062ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8558 	beq.w	8006d6a <_dtoa_r+0xb82>
 80062ba:	4882      	ldr	r0, [pc, #520]	; (80064c4 <_dtoa_r+0x2dc>)
 80062bc:	6018      	str	r0, [r3, #0]
 80062be:	1e43      	subs	r3, r0, #1
 80062c0:	9303      	str	r3, [sp, #12]
 80062c2:	e7df      	b.n	8006284 <_dtoa_r+0x9c>
 80062c4:	ab16      	add	r3, sp, #88	; 0x58
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	ab17      	add	r3, sp, #92	; 0x5c
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4628      	mov	r0, r5
 80062ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062d2:	f001 fae1 	bl	8007898 <__d2b>
 80062d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80062da:	4683      	mov	fp, r0
 80062dc:	2c00      	cmp	r4, #0
 80062de:	d07f      	beq.n	80063e0 <_dtoa_r+0x1f8>
 80062e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80062ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062ee:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80062f2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80062f6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80062fa:	2200      	movs	r2, #0
 80062fc:	4b72      	ldr	r3, [pc, #456]	; (80064c8 <_dtoa_r+0x2e0>)
 80062fe:	f7f9 ff33 	bl	8000168 <__aeabi_dsub>
 8006302:	a365      	add	r3, pc, #404	; (adr r3, 8006498 <_dtoa_r+0x2b0>)
 8006304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006308:	f7fa f8e6 	bl	80004d8 <__aeabi_dmul>
 800630c:	a364      	add	r3, pc, #400	; (adr r3, 80064a0 <_dtoa_r+0x2b8>)
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f7f9 ff2b 	bl	800016c <__adddf3>
 8006316:	4606      	mov	r6, r0
 8006318:	4620      	mov	r0, r4
 800631a:	460f      	mov	r7, r1
 800631c:	f7fa f872 	bl	8000404 <__aeabi_i2d>
 8006320:	a361      	add	r3, pc, #388	; (adr r3, 80064a8 <_dtoa_r+0x2c0>)
 8006322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006326:	f7fa f8d7 	bl	80004d8 <__aeabi_dmul>
 800632a:	4602      	mov	r2, r0
 800632c:	460b      	mov	r3, r1
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7f9 ff1b 	bl	800016c <__adddf3>
 8006336:	4606      	mov	r6, r0
 8006338:	460f      	mov	r7, r1
 800633a:	f7fa fb7d 	bl	8000a38 <__aeabi_d2iz>
 800633e:	2200      	movs	r2, #0
 8006340:	4682      	mov	sl, r0
 8006342:	2300      	movs	r3, #0
 8006344:	4630      	mov	r0, r6
 8006346:	4639      	mov	r1, r7
 8006348:	f7fa fb38 	bl	80009bc <__aeabi_dcmplt>
 800634c:	b148      	cbz	r0, 8006362 <_dtoa_r+0x17a>
 800634e:	4650      	mov	r0, sl
 8006350:	f7fa f858 	bl	8000404 <__aeabi_i2d>
 8006354:	4632      	mov	r2, r6
 8006356:	463b      	mov	r3, r7
 8006358:	f7fa fb26 	bl	80009a8 <__aeabi_dcmpeq>
 800635c:	b908      	cbnz	r0, 8006362 <_dtoa_r+0x17a>
 800635e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006362:	f1ba 0f16 	cmp.w	sl, #22
 8006366:	d858      	bhi.n	800641a <_dtoa_r+0x232>
 8006368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800636c:	4b57      	ldr	r3, [pc, #348]	; (80064cc <_dtoa_r+0x2e4>)
 800636e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006376:	f7fa fb21 	bl	80009bc <__aeabi_dcmplt>
 800637a:	2800      	cmp	r0, #0
 800637c:	d04f      	beq.n	800641e <_dtoa_r+0x236>
 800637e:	2300      	movs	r3, #0
 8006380:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006384:	930f      	str	r3, [sp, #60]	; 0x3c
 8006386:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006388:	1b1c      	subs	r4, r3, r4
 800638a:	1e63      	subs	r3, r4, #1
 800638c:	9309      	str	r3, [sp, #36]	; 0x24
 800638e:	bf49      	itett	mi
 8006390:	f1c4 0301 	rsbmi	r3, r4, #1
 8006394:	2300      	movpl	r3, #0
 8006396:	9306      	strmi	r3, [sp, #24]
 8006398:	2300      	movmi	r3, #0
 800639a:	bf54      	ite	pl
 800639c:	9306      	strpl	r3, [sp, #24]
 800639e:	9309      	strmi	r3, [sp, #36]	; 0x24
 80063a0:	f1ba 0f00 	cmp.w	sl, #0
 80063a4:	db3d      	blt.n	8006422 <_dtoa_r+0x23a>
 80063a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80063ac:	4453      	add	r3, sl
 80063ae:	9309      	str	r3, [sp, #36]	; 0x24
 80063b0:	2300      	movs	r3, #0
 80063b2:	930a      	str	r3, [sp, #40]	; 0x28
 80063b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063b6:	2b09      	cmp	r3, #9
 80063b8:	f200 808c 	bhi.w	80064d4 <_dtoa_r+0x2ec>
 80063bc:	2b05      	cmp	r3, #5
 80063be:	bfc4      	itt	gt
 80063c0:	3b04      	subgt	r3, #4
 80063c2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80063c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063c6:	bfc8      	it	gt
 80063c8:	2400      	movgt	r4, #0
 80063ca:	f1a3 0302 	sub.w	r3, r3, #2
 80063ce:	bfd8      	it	le
 80063d0:	2401      	movle	r4, #1
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	f200 808a 	bhi.w	80064ec <_dtoa_r+0x304>
 80063d8:	e8df f003 	tbb	[pc, r3]
 80063dc:	5b4d4f2d 	.word	0x5b4d4f2d
 80063e0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80063e4:	441c      	add	r4, r3
 80063e6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	bfc3      	ittte	gt
 80063ee:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80063f2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80063f6:	fa09 f303 	lslgt.w	r3, r9, r3
 80063fa:	f1c3 0320 	rsble	r3, r3, #32
 80063fe:	bfc6      	itte	gt
 8006400:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006404:	4318      	orrgt	r0, r3
 8006406:	fa06 f003 	lslle.w	r0, r6, r3
 800640a:	f7f9 ffeb 	bl	80003e4 <__aeabi_ui2d>
 800640e:	2301      	movs	r3, #1
 8006410:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006414:	3c01      	subs	r4, #1
 8006416:	9313      	str	r3, [sp, #76]	; 0x4c
 8006418:	e76f      	b.n	80062fa <_dtoa_r+0x112>
 800641a:	2301      	movs	r3, #1
 800641c:	e7b2      	b.n	8006384 <_dtoa_r+0x19c>
 800641e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006420:	e7b1      	b.n	8006386 <_dtoa_r+0x19e>
 8006422:	9b06      	ldr	r3, [sp, #24]
 8006424:	eba3 030a 	sub.w	r3, r3, sl
 8006428:	9306      	str	r3, [sp, #24]
 800642a:	f1ca 0300 	rsb	r3, sl, #0
 800642e:	930a      	str	r3, [sp, #40]	; 0x28
 8006430:	2300      	movs	r3, #0
 8006432:	930e      	str	r3, [sp, #56]	; 0x38
 8006434:	e7be      	b.n	80063b4 <_dtoa_r+0x1cc>
 8006436:	2300      	movs	r3, #0
 8006438:	930b      	str	r3, [sp, #44]	; 0x2c
 800643a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800643c:	2b00      	cmp	r3, #0
 800643e:	dc58      	bgt.n	80064f2 <_dtoa_r+0x30a>
 8006440:	f04f 0901 	mov.w	r9, #1
 8006444:	464b      	mov	r3, r9
 8006446:	f8cd 9020 	str.w	r9, [sp, #32]
 800644a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800644e:	2200      	movs	r2, #0
 8006450:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006452:	6042      	str	r2, [r0, #4]
 8006454:	2204      	movs	r2, #4
 8006456:	f102 0614 	add.w	r6, r2, #20
 800645a:	429e      	cmp	r6, r3
 800645c:	6841      	ldr	r1, [r0, #4]
 800645e:	d94e      	bls.n	80064fe <_dtoa_r+0x316>
 8006460:	4628      	mov	r0, r5
 8006462:	f000 fef3 	bl	800724c <_Balloc>
 8006466:	9003      	str	r0, [sp, #12]
 8006468:	2800      	cmp	r0, #0
 800646a:	d14c      	bne.n	8006506 <_dtoa_r+0x31e>
 800646c:	4602      	mov	r2, r0
 800646e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006472:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <_dtoa_r+0x2e8>)
 8006474:	e6cc      	b.n	8006210 <_dtoa_r+0x28>
 8006476:	2301      	movs	r3, #1
 8006478:	e7de      	b.n	8006438 <_dtoa_r+0x250>
 800647a:	2300      	movs	r3, #0
 800647c:	930b      	str	r3, [sp, #44]	; 0x2c
 800647e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006480:	eb0a 0903 	add.w	r9, sl, r3
 8006484:	f109 0301 	add.w	r3, r9, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	9308      	str	r3, [sp, #32]
 800648c:	bfb8      	it	lt
 800648e:	2301      	movlt	r3, #1
 8006490:	e7dd      	b.n	800644e <_dtoa_r+0x266>
 8006492:	2301      	movs	r3, #1
 8006494:	e7f2      	b.n	800647c <_dtoa_r+0x294>
 8006496:	bf00      	nop
 8006498:	636f4361 	.word	0x636f4361
 800649c:	3fd287a7 	.word	0x3fd287a7
 80064a0:	8b60c8b3 	.word	0x8b60c8b3
 80064a4:	3fc68a28 	.word	0x3fc68a28
 80064a8:	509f79fb 	.word	0x509f79fb
 80064ac:	3fd34413 	.word	0x3fd34413
 80064b0:	08008351 	.word	0x08008351
 80064b4:	08008368 	.word	0x08008368
 80064b8:	7ff00000 	.word	0x7ff00000
 80064bc:	0800834d 	.word	0x0800834d
 80064c0:	08008344 	.word	0x08008344
 80064c4:	08008321 	.word	0x08008321
 80064c8:	3ff80000 	.word	0x3ff80000
 80064cc:	080084b8 	.word	0x080084b8
 80064d0:	080083c3 	.word	0x080083c3
 80064d4:	2401      	movs	r4, #1
 80064d6:	2300      	movs	r3, #0
 80064d8:	940b      	str	r4, [sp, #44]	; 0x2c
 80064da:	9322      	str	r3, [sp, #136]	; 0x88
 80064dc:	f04f 39ff 	mov.w	r9, #4294967295
 80064e0:	2200      	movs	r2, #0
 80064e2:	2312      	movs	r3, #18
 80064e4:	f8cd 9020 	str.w	r9, [sp, #32]
 80064e8:	9223      	str	r2, [sp, #140]	; 0x8c
 80064ea:	e7b0      	b.n	800644e <_dtoa_r+0x266>
 80064ec:	2301      	movs	r3, #1
 80064ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80064f0:	e7f4      	b.n	80064dc <_dtoa_r+0x2f4>
 80064f2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80064f6:	464b      	mov	r3, r9
 80064f8:	f8cd 9020 	str.w	r9, [sp, #32]
 80064fc:	e7a7      	b.n	800644e <_dtoa_r+0x266>
 80064fe:	3101      	adds	r1, #1
 8006500:	6041      	str	r1, [r0, #4]
 8006502:	0052      	lsls	r2, r2, #1
 8006504:	e7a7      	b.n	8006456 <_dtoa_r+0x26e>
 8006506:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006508:	9a03      	ldr	r2, [sp, #12]
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	9b08      	ldr	r3, [sp, #32]
 800650e:	2b0e      	cmp	r3, #14
 8006510:	f200 80a8 	bhi.w	8006664 <_dtoa_r+0x47c>
 8006514:	2c00      	cmp	r4, #0
 8006516:	f000 80a5 	beq.w	8006664 <_dtoa_r+0x47c>
 800651a:	f1ba 0f00 	cmp.w	sl, #0
 800651e:	dd34      	ble.n	800658a <_dtoa_r+0x3a2>
 8006520:	4a9a      	ldr	r2, [pc, #616]	; (800678c <_dtoa_r+0x5a4>)
 8006522:	f00a 030f 	and.w	r3, sl, #15
 8006526:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800652a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800652e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006532:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006536:	ea4f 142a 	mov.w	r4, sl, asr #4
 800653a:	d016      	beq.n	800656a <_dtoa_r+0x382>
 800653c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006540:	4b93      	ldr	r3, [pc, #588]	; (8006790 <_dtoa_r+0x5a8>)
 8006542:	2703      	movs	r7, #3
 8006544:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006548:	f7fa f8f0 	bl	800072c <__aeabi_ddiv>
 800654c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006550:	f004 040f 	and.w	r4, r4, #15
 8006554:	4e8e      	ldr	r6, [pc, #568]	; (8006790 <_dtoa_r+0x5a8>)
 8006556:	b954      	cbnz	r4, 800656e <_dtoa_r+0x386>
 8006558:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800655c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006560:	f7fa f8e4 	bl	800072c <__aeabi_ddiv>
 8006564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006568:	e029      	b.n	80065be <_dtoa_r+0x3d6>
 800656a:	2702      	movs	r7, #2
 800656c:	e7f2      	b.n	8006554 <_dtoa_r+0x36c>
 800656e:	07e1      	lsls	r1, r4, #31
 8006570:	d508      	bpl.n	8006584 <_dtoa_r+0x39c>
 8006572:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006576:	e9d6 2300 	ldrd	r2, r3, [r6]
 800657a:	f7f9 ffad 	bl	80004d8 <__aeabi_dmul>
 800657e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006582:	3701      	adds	r7, #1
 8006584:	1064      	asrs	r4, r4, #1
 8006586:	3608      	adds	r6, #8
 8006588:	e7e5      	b.n	8006556 <_dtoa_r+0x36e>
 800658a:	f000 80a5 	beq.w	80066d8 <_dtoa_r+0x4f0>
 800658e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006592:	f1ca 0400 	rsb	r4, sl, #0
 8006596:	4b7d      	ldr	r3, [pc, #500]	; (800678c <_dtoa_r+0x5a4>)
 8006598:	f004 020f 	and.w	r2, r4, #15
 800659c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 ff98 	bl	80004d8 <__aeabi_dmul>
 80065a8:	2702      	movs	r7, #2
 80065aa:	2300      	movs	r3, #0
 80065ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065b0:	4e77      	ldr	r6, [pc, #476]	; (8006790 <_dtoa_r+0x5a8>)
 80065b2:	1124      	asrs	r4, r4, #4
 80065b4:	2c00      	cmp	r4, #0
 80065b6:	f040 8084 	bne.w	80066c2 <_dtoa_r+0x4da>
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1d2      	bne.n	8006564 <_dtoa_r+0x37c>
 80065be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 808b 	beq.w	80066dc <_dtoa_r+0x4f4>
 80065c6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80065ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80065ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065d2:	2200      	movs	r2, #0
 80065d4:	4b6f      	ldr	r3, [pc, #444]	; (8006794 <_dtoa_r+0x5ac>)
 80065d6:	f7fa f9f1 	bl	80009bc <__aeabi_dcmplt>
 80065da:	2800      	cmp	r0, #0
 80065dc:	d07e      	beq.n	80066dc <_dtoa_r+0x4f4>
 80065de:	9b08      	ldr	r3, [sp, #32]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d07b      	beq.n	80066dc <_dtoa_r+0x4f4>
 80065e4:	f1b9 0f00 	cmp.w	r9, #0
 80065e8:	dd38      	ble.n	800665c <_dtoa_r+0x474>
 80065ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065ee:	2200      	movs	r2, #0
 80065f0:	4b69      	ldr	r3, [pc, #420]	; (8006798 <_dtoa_r+0x5b0>)
 80065f2:	f7f9 ff71 	bl	80004d8 <__aeabi_dmul>
 80065f6:	464c      	mov	r4, r9
 80065f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065fc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006600:	3701      	adds	r7, #1
 8006602:	4638      	mov	r0, r7
 8006604:	f7f9 fefe 	bl	8000404 <__aeabi_i2d>
 8006608:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800660c:	f7f9 ff64 	bl	80004d8 <__aeabi_dmul>
 8006610:	2200      	movs	r2, #0
 8006612:	4b62      	ldr	r3, [pc, #392]	; (800679c <_dtoa_r+0x5b4>)
 8006614:	f7f9 fdaa 	bl	800016c <__adddf3>
 8006618:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800661c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006620:	9611      	str	r6, [sp, #68]	; 0x44
 8006622:	2c00      	cmp	r4, #0
 8006624:	d15d      	bne.n	80066e2 <_dtoa_r+0x4fa>
 8006626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800662a:	2200      	movs	r2, #0
 800662c:	4b5c      	ldr	r3, [pc, #368]	; (80067a0 <_dtoa_r+0x5b8>)
 800662e:	f7f9 fd9b 	bl	8000168 <__aeabi_dsub>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800663a:	4633      	mov	r3, r6
 800663c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800663e:	f7fa f9db 	bl	80009f8 <__aeabi_dcmpgt>
 8006642:	2800      	cmp	r0, #0
 8006644:	f040 829c 	bne.w	8006b80 <_dtoa_r+0x998>
 8006648:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800664c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800664e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006652:	f7fa f9b3 	bl	80009bc <__aeabi_dcmplt>
 8006656:	2800      	cmp	r0, #0
 8006658:	f040 8290 	bne.w	8006b7c <_dtoa_r+0x994>
 800665c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006660:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006664:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006666:	2b00      	cmp	r3, #0
 8006668:	f2c0 8152 	blt.w	8006910 <_dtoa_r+0x728>
 800666c:	f1ba 0f0e 	cmp.w	sl, #14
 8006670:	f300 814e 	bgt.w	8006910 <_dtoa_r+0x728>
 8006674:	4b45      	ldr	r3, [pc, #276]	; (800678c <_dtoa_r+0x5a4>)
 8006676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800667a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800667e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006682:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006684:	2b00      	cmp	r3, #0
 8006686:	f280 80db 	bge.w	8006840 <_dtoa_r+0x658>
 800668a:	9b08      	ldr	r3, [sp, #32]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f300 80d7 	bgt.w	8006840 <_dtoa_r+0x658>
 8006692:	f040 8272 	bne.w	8006b7a <_dtoa_r+0x992>
 8006696:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800669a:	2200      	movs	r2, #0
 800669c:	4b40      	ldr	r3, [pc, #256]	; (80067a0 <_dtoa_r+0x5b8>)
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066a6:	f7fa f99d 	bl	80009e4 <__aeabi_dcmpge>
 80066aa:	9c08      	ldr	r4, [sp, #32]
 80066ac:	4626      	mov	r6, r4
 80066ae:	2800      	cmp	r0, #0
 80066b0:	f040 8248 	bne.w	8006b44 <_dtoa_r+0x95c>
 80066b4:	2331      	movs	r3, #49	; 0x31
 80066b6:	9f03      	ldr	r7, [sp, #12]
 80066b8:	f10a 0a01 	add.w	sl, sl, #1
 80066bc:	f807 3b01 	strb.w	r3, [r7], #1
 80066c0:	e244      	b.n	8006b4c <_dtoa_r+0x964>
 80066c2:	07e2      	lsls	r2, r4, #31
 80066c4:	d505      	bpl.n	80066d2 <_dtoa_r+0x4ea>
 80066c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066ca:	f7f9 ff05 	bl	80004d8 <__aeabi_dmul>
 80066ce:	2301      	movs	r3, #1
 80066d0:	3701      	adds	r7, #1
 80066d2:	1064      	asrs	r4, r4, #1
 80066d4:	3608      	adds	r6, #8
 80066d6:	e76d      	b.n	80065b4 <_dtoa_r+0x3cc>
 80066d8:	2702      	movs	r7, #2
 80066da:	e770      	b.n	80065be <_dtoa_r+0x3d6>
 80066dc:	46d0      	mov	r8, sl
 80066de:	9c08      	ldr	r4, [sp, #32]
 80066e0:	e78f      	b.n	8006602 <_dtoa_r+0x41a>
 80066e2:	9903      	ldr	r1, [sp, #12]
 80066e4:	4b29      	ldr	r3, [pc, #164]	; (800678c <_dtoa_r+0x5a4>)
 80066e6:	4421      	add	r1, r4
 80066e8:	9112      	str	r1, [sp, #72]	; 0x48
 80066ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066f0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80066f4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066f8:	2900      	cmp	r1, #0
 80066fa:	d055      	beq.n	80067a8 <_dtoa_r+0x5c0>
 80066fc:	2000      	movs	r0, #0
 80066fe:	4929      	ldr	r1, [pc, #164]	; (80067a4 <_dtoa_r+0x5bc>)
 8006700:	f7fa f814 	bl	800072c <__aeabi_ddiv>
 8006704:	463b      	mov	r3, r7
 8006706:	4632      	mov	r2, r6
 8006708:	f7f9 fd2e 	bl	8000168 <__aeabi_dsub>
 800670c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006710:	9f03      	ldr	r7, [sp, #12]
 8006712:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006716:	f7fa f98f 	bl	8000a38 <__aeabi_d2iz>
 800671a:	4604      	mov	r4, r0
 800671c:	f7f9 fe72 	bl	8000404 <__aeabi_i2d>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006728:	f7f9 fd1e 	bl	8000168 <__aeabi_dsub>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	3430      	adds	r4, #48	; 0x30
 8006732:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800673a:	f807 4b01 	strb.w	r4, [r7], #1
 800673e:	f7fa f93d 	bl	80009bc <__aeabi_dcmplt>
 8006742:	2800      	cmp	r0, #0
 8006744:	d174      	bne.n	8006830 <_dtoa_r+0x648>
 8006746:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800674a:	2000      	movs	r0, #0
 800674c:	4911      	ldr	r1, [pc, #68]	; (8006794 <_dtoa_r+0x5ac>)
 800674e:	f7f9 fd0b 	bl	8000168 <__aeabi_dsub>
 8006752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006756:	f7fa f931 	bl	80009bc <__aeabi_dcmplt>
 800675a:	2800      	cmp	r0, #0
 800675c:	f040 80b7 	bne.w	80068ce <_dtoa_r+0x6e6>
 8006760:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006762:	429f      	cmp	r7, r3
 8006764:	f43f af7a 	beq.w	800665c <_dtoa_r+0x474>
 8006768:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800676c:	2200      	movs	r2, #0
 800676e:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <_dtoa_r+0x5b0>)
 8006770:	f7f9 feb2 	bl	80004d8 <__aeabi_dmul>
 8006774:	2200      	movs	r2, #0
 8006776:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800677a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800677e:	4b06      	ldr	r3, [pc, #24]	; (8006798 <_dtoa_r+0x5b0>)
 8006780:	f7f9 feaa 	bl	80004d8 <__aeabi_dmul>
 8006784:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006788:	e7c3      	b.n	8006712 <_dtoa_r+0x52a>
 800678a:	bf00      	nop
 800678c:	080084b8 	.word	0x080084b8
 8006790:	08008490 	.word	0x08008490
 8006794:	3ff00000 	.word	0x3ff00000
 8006798:	40240000 	.word	0x40240000
 800679c:	401c0000 	.word	0x401c0000
 80067a0:	40140000 	.word	0x40140000
 80067a4:	3fe00000 	.word	0x3fe00000
 80067a8:	4630      	mov	r0, r6
 80067aa:	4639      	mov	r1, r7
 80067ac:	f7f9 fe94 	bl	80004d8 <__aeabi_dmul>
 80067b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067b6:	9c03      	ldr	r4, [sp, #12]
 80067b8:	9314      	str	r3, [sp, #80]	; 0x50
 80067ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067be:	f7fa f93b 	bl	8000a38 <__aeabi_d2iz>
 80067c2:	9015      	str	r0, [sp, #84]	; 0x54
 80067c4:	f7f9 fe1e 	bl	8000404 <__aeabi_i2d>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067d0:	f7f9 fcca 	bl	8000168 <__aeabi_dsub>
 80067d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067d6:	4606      	mov	r6, r0
 80067d8:	3330      	adds	r3, #48	; 0x30
 80067da:	f804 3b01 	strb.w	r3, [r4], #1
 80067de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067e0:	460f      	mov	r7, r1
 80067e2:	429c      	cmp	r4, r3
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	d124      	bne.n	8006834 <_dtoa_r+0x64c>
 80067ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80067ee:	4bb0      	ldr	r3, [pc, #704]	; (8006ab0 <_dtoa_r+0x8c8>)
 80067f0:	f7f9 fcbc 	bl	800016c <__adddf3>
 80067f4:	4602      	mov	r2, r0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4630      	mov	r0, r6
 80067fa:	4639      	mov	r1, r7
 80067fc:	f7fa f8fc 	bl	80009f8 <__aeabi_dcmpgt>
 8006800:	2800      	cmp	r0, #0
 8006802:	d163      	bne.n	80068cc <_dtoa_r+0x6e4>
 8006804:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006808:	2000      	movs	r0, #0
 800680a:	49a9      	ldr	r1, [pc, #676]	; (8006ab0 <_dtoa_r+0x8c8>)
 800680c:	f7f9 fcac 	bl	8000168 <__aeabi_dsub>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4630      	mov	r0, r6
 8006816:	4639      	mov	r1, r7
 8006818:	f7fa f8d0 	bl	80009bc <__aeabi_dcmplt>
 800681c:	2800      	cmp	r0, #0
 800681e:	f43f af1d 	beq.w	800665c <_dtoa_r+0x474>
 8006822:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006824:	1e7b      	subs	r3, r7, #1
 8006826:	9314      	str	r3, [sp, #80]	; 0x50
 8006828:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800682c:	2b30      	cmp	r3, #48	; 0x30
 800682e:	d0f8      	beq.n	8006822 <_dtoa_r+0x63a>
 8006830:	46c2      	mov	sl, r8
 8006832:	e03b      	b.n	80068ac <_dtoa_r+0x6c4>
 8006834:	4b9f      	ldr	r3, [pc, #636]	; (8006ab4 <_dtoa_r+0x8cc>)
 8006836:	f7f9 fe4f 	bl	80004d8 <__aeabi_dmul>
 800683a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800683e:	e7bc      	b.n	80067ba <_dtoa_r+0x5d2>
 8006840:	9f03      	ldr	r7, [sp, #12]
 8006842:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006846:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	f7f9 ff6d 	bl	800072c <__aeabi_ddiv>
 8006852:	f7fa f8f1 	bl	8000a38 <__aeabi_d2iz>
 8006856:	4604      	mov	r4, r0
 8006858:	f7f9 fdd4 	bl	8000404 <__aeabi_i2d>
 800685c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006860:	f7f9 fe3a 	bl	80004d8 <__aeabi_dmul>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4640      	mov	r0, r8
 800686a:	4649      	mov	r1, r9
 800686c:	f7f9 fc7c 	bl	8000168 <__aeabi_dsub>
 8006870:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006874:	f807 6b01 	strb.w	r6, [r7], #1
 8006878:	9e03      	ldr	r6, [sp, #12]
 800687a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800687e:	1bbe      	subs	r6, r7, r6
 8006880:	45b4      	cmp	ip, r6
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	d136      	bne.n	80068f6 <_dtoa_r+0x70e>
 8006888:	f7f9 fc70 	bl	800016c <__adddf3>
 800688c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006890:	4680      	mov	r8, r0
 8006892:	4689      	mov	r9, r1
 8006894:	f7fa f8b0 	bl	80009f8 <__aeabi_dcmpgt>
 8006898:	bb58      	cbnz	r0, 80068f2 <_dtoa_r+0x70a>
 800689a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7fa f881 	bl	80009a8 <__aeabi_dcmpeq>
 80068a6:	b108      	cbz	r0, 80068ac <_dtoa_r+0x6c4>
 80068a8:	07e1      	lsls	r1, r4, #31
 80068aa:	d422      	bmi.n	80068f2 <_dtoa_r+0x70a>
 80068ac:	4628      	mov	r0, r5
 80068ae:	4659      	mov	r1, fp
 80068b0:	f000 fd0c 	bl	80072cc <_Bfree>
 80068b4:	2300      	movs	r3, #0
 80068b6:	703b      	strb	r3, [r7, #0]
 80068b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068ba:	f10a 0001 	add.w	r0, sl, #1
 80068be:	6018      	str	r0, [r3, #0]
 80068c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	f43f acde 	beq.w	8006284 <_dtoa_r+0x9c>
 80068c8:	601f      	str	r7, [r3, #0]
 80068ca:	e4db      	b.n	8006284 <_dtoa_r+0x9c>
 80068cc:	4627      	mov	r7, r4
 80068ce:	463b      	mov	r3, r7
 80068d0:	461f      	mov	r7, r3
 80068d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068d6:	2a39      	cmp	r2, #57	; 0x39
 80068d8:	d107      	bne.n	80068ea <_dtoa_r+0x702>
 80068da:	9a03      	ldr	r2, [sp, #12]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d1f7      	bne.n	80068d0 <_dtoa_r+0x6e8>
 80068e0:	2230      	movs	r2, #48	; 0x30
 80068e2:	9903      	ldr	r1, [sp, #12]
 80068e4:	f108 0801 	add.w	r8, r8, #1
 80068e8:	700a      	strb	r2, [r1, #0]
 80068ea:	781a      	ldrb	r2, [r3, #0]
 80068ec:	3201      	adds	r2, #1
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	e79e      	b.n	8006830 <_dtoa_r+0x648>
 80068f2:	46d0      	mov	r8, sl
 80068f4:	e7eb      	b.n	80068ce <_dtoa_r+0x6e6>
 80068f6:	2200      	movs	r2, #0
 80068f8:	4b6e      	ldr	r3, [pc, #440]	; (8006ab4 <_dtoa_r+0x8cc>)
 80068fa:	f7f9 fded 	bl	80004d8 <__aeabi_dmul>
 80068fe:	2200      	movs	r2, #0
 8006900:	2300      	movs	r3, #0
 8006902:	4680      	mov	r8, r0
 8006904:	4689      	mov	r9, r1
 8006906:	f7fa f84f 	bl	80009a8 <__aeabi_dcmpeq>
 800690a:	2800      	cmp	r0, #0
 800690c:	d09b      	beq.n	8006846 <_dtoa_r+0x65e>
 800690e:	e7cd      	b.n	80068ac <_dtoa_r+0x6c4>
 8006910:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006912:	2a00      	cmp	r2, #0
 8006914:	f000 80d0 	beq.w	8006ab8 <_dtoa_r+0x8d0>
 8006918:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800691a:	2a01      	cmp	r2, #1
 800691c:	f300 80ae 	bgt.w	8006a7c <_dtoa_r+0x894>
 8006920:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006922:	2a00      	cmp	r2, #0
 8006924:	f000 80a6 	beq.w	8006a74 <_dtoa_r+0x88c>
 8006928:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800692c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800692e:	9f06      	ldr	r7, [sp, #24]
 8006930:	9a06      	ldr	r2, [sp, #24]
 8006932:	2101      	movs	r1, #1
 8006934:	441a      	add	r2, r3
 8006936:	9206      	str	r2, [sp, #24]
 8006938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800693a:	4628      	mov	r0, r5
 800693c:	441a      	add	r2, r3
 800693e:	9209      	str	r2, [sp, #36]	; 0x24
 8006940:	f000 fd7a 	bl	8007438 <__i2b>
 8006944:	4606      	mov	r6, r0
 8006946:	2f00      	cmp	r7, #0
 8006948:	dd0c      	ble.n	8006964 <_dtoa_r+0x77c>
 800694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	dd09      	ble.n	8006964 <_dtoa_r+0x77c>
 8006950:	42bb      	cmp	r3, r7
 8006952:	bfa8      	it	ge
 8006954:	463b      	movge	r3, r7
 8006956:	9a06      	ldr	r2, [sp, #24]
 8006958:	1aff      	subs	r7, r7, r3
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	9206      	str	r2, [sp, #24]
 800695e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	9309      	str	r3, [sp, #36]	; 0x24
 8006964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006966:	b1f3      	cbz	r3, 80069a6 <_dtoa_r+0x7be>
 8006968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800696a:	2b00      	cmp	r3, #0
 800696c:	f000 80a8 	beq.w	8006ac0 <_dtoa_r+0x8d8>
 8006970:	2c00      	cmp	r4, #0
 8006972:	dd10      	ble.n	8006996 <_dtoa_r+0x7ae>
 8006974:	4631      	mov	r1, r6
 8006976:	4622      	mov	r2, r4
 8006978:	4628      	mov	r0, r5
 800697a:	f000 fe1b 	bl	80075b4 <__pow5mult>
 800697e:	465a      	mov	r2, fp
 8006980:	4601      	mov	r1, r0
 8006982:	4606      	mov	r6, r0
 8006984:	4628      	mov	r0, r5
 8006986:	f000 fd6d 	bl	8007464 <__multiply>
 800698a:	4680      	mov	r8, r0
 800698c:	4659      	mov	r1, fp
 800698e:	4628      	mov	r0, r5
 8006990:	f000 fc9c 	bl	80072cc <_Bfree>
 8006994:	46c3      	mov	fp, r8
 8006996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006998:	1b1a      	subs	r2, r3, r4
 800699a:	d004      	beq.n	80069a6 <_dtoa_r+0x7be>
 800699c:	4659      	mov	r1, fp
 800699e:	4628      	mov	r0, r5
 80069a0:	f000 fe08 	bl	80075b4 <__pow5mult>
 80069a4:	4683      	mov	fp, r0
 80069a6:	2101      	movs	r1, #1
 80069a8:	4628      	mov	r0, r5
 80069aa:	f000 fd45 	bl	8007438 <__i2b>
 80069ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069b0:	4604      	mov	r4, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f340 8086 	ble.w	8006ac4 <_dtoa_r+0x8dc>
 80069b8:	461a      	mov	r2, r3
 80069ba:	4601      	mov	r1, r0
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 fdf9 	bl	80075b4 <__pow5mult>
 80069c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069c4:	4604      	mov	r4, r0
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	dd7f      	ble.n	8006aca <_dtoa_r+0x8e2>
 80069ca:	f04f 0800 	mov.w	r8, #0
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069d4:	6918      	ldr	r0, [r3, #16]
 80069d6:	f000 fce1 	bl	800739c <__hi0bits>
 80069da:	f1c0 0020 	rsb	r0, r0, #32
 80069de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e0:	4418      	add	r0, r3
 80069e2:	f010 001f 	ands.w	r0, r0, #31
 80069e6:	f000 8092 	beq.w	8006b0e <_dtoa_r+0x926>
 80069ea:	f1c0 0320 	rsb	r3, r0, #32
 80069ee:	2b04      	cmp	r3, #4
 80069f0:	f340 808a 	ble.w	8006b08 <_dtoa_r+0x920>
 80069f4:	f1c0 001c 	rsb	r0, r0, #28
 80069f8:	9b06      	ldr	r3, [sp, #24]
 80069fa:	4407      	add	r7, r0
 80069fc:	4403      	add	r3, r0
 80069fe:	9306      	str	r3, [sp, #24]
 8006a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a02:	4403      	add	r3, r0
 8006a04:	9309      	str	r3, [sp, #36]	; 0x24
 8006a06:	9b06      	ldr	r3, [sp, #24]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dd05      	ble.n	8006a18 <_dtoa_r+0x830>
 8006a0c:	4659      	mov	r1, fp
 8006a0e:	461a      	mov	r2, r3
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 fe29 	bl	8007668 <__lshift>
 8006a16:	4683      	mov	fp, r0
 8006a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	dd05      	ble.n	8006a2a <_dtoa_r+0x842>
 8006a1e:	4621      	mov	r1, r4
 8006a20:	461a      	mov	r2, r3
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 fe20 	bl	8007668 <__lshift>
 8006a28:	4604      	mov	r4, r0
 8006a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d070      	beq.n	8006b12 <_dtoa_r+0x92a>
 8006a30:	4621      	mov	r1, r4
 8006a32:	4658      	mov	r0, fp
 8006a34:	f000 fe88 	bl	8007748 <__mcmp>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	da6a      	bge.n	8006b12 <_dtoa_r+0x92a>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4659      	mov	r1, fp
 8006a40:	220a      	movs	r2, #10
 8006a42:	4628      	mov	r0, r5
 8006a44:	f000 fc64 	bl	8007310 <__multadd>
 8006a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4a:	4683      	mov	fp, r0
 8006a4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8194 	beq.w	8006d7e <_dtoa_r+0xb96>
 8006a56:	4631      	mov	r1, r6
 8006a58:	2300      	movs	r3, #0
 8006a5a:	220a      	movs	r2, #10
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 fc57 	bl	8007310 <__multadd>
 8006a62:	f1b9 0f00 	cmp.w	r9, #0
 8006a66:	4606      	mov	r6, r0
 8006a68:	f300 8093 	bgt.w	8006b92 <_dtoa_r+0x9aa>
 8006a6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	dc57      	bgt.n	8006b22 <_dtoa_r+0x93a>
 8006a72:	e08e      	b.n	8006b92 <_dtoa_r+0x9aa>
 8006a74:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006a76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006a7a:	e757      	b.n	800692c <_dtoa_r+0x744>
 8006a7c:	9b08      	ldr	r3, [sp, #32]
 8006a7e:	1e5c      	subs	r4, r3, #1
 8006a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a82:	42a3      	cmp	r3, r4
 8006a84:	bfb7      	itett	lt
 8006a86:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006a88:	1b1c      	subge	r4, r3, r4
 8006a8a:	1ae2      	sublt	r2, r4, r3
 8006a8c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006a8e:	bfbe      	ittt	lt
 8006a90:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006a92:	189b      	addlt	r3, r3, r2
 8006a94:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006a96:	9b08      	ldr	r3, [sp, #32]
 8006a98:	bfb8      	it	lt
 8006a9a:	2400      	movlt	r4, #0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bfbb      	ittet	lt
 8006aa0:	9b06      	ldrlt	r3, [sp, #24]
 8006aa2:	9a08      	ldrlt	r2, [sp, #32]
 8006aa4:	9f06      	ldrge	r7, [sp, #24]
 8006aa6:	1a9f      	sublt	r7, r3, r2
 8006aa8:	bfac      	ite	ge
 8006aaa:	9b08      	ldrge	r3, [sp, #32]
 8006aac:	2300      	movlt	r3, #0
 8006aae:	e73f      	b.n	8006930 <_dtoa_r+0x748>
 8006ab0:	3fe00000 	.word	0x3fe00000
 8006ab4:	40240000 	.word	0x40240000
 8006ab8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006aba:	9f06      	ldr	r7, [sp, #24]
 8006abc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006abe:	e742      	b.n	8006946 <_dtoa_r+0x75e>
 8006ac0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ac2:	e76b      	b.n	800699c <_dtoa_r+0x7b4>
 8006ac4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	dc19      	bgt.n	8006afe <_dtoa_r+0x916>
 8006aca:	9b04      	ldr	r3, [sp, #16]
 8006acc:	b9bb      	cbnz	r3, 8006afe <_dtoa_r+0x916>
 8006ace:	9b05      	ldr	r3, [sp, #20]
 8006ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad4:	b99b      	cbnz	r3, 8006afe <_dtoa_r+0x916>
 8006ad6:	9b05      	ldr	r3, [sp, #20]
 8006ad8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006adc:	0d1b      	lsrs	r3, r3, #20
 8006ade:	051b      	lsls	r3, r3, #20
 8006ae0:	b183      	cbz	r3, 8006b04 <_dtoa_r+0x91c>
 8006ae2:	f04f 0801 	mov.w	r8, #1
 8006ae6:	9b06      	ldr	r3, [sp, #24]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	9306      	str	r3, [sp, #24]
 8006aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aee:	3301      	adds	r3, #1
 8006af0:	9309      	str	r3, [sp, #36]	; 0x24
 8006af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f47f af6a 	bne.w	80069ce <_dtoa_r+0x7e6>
 8006afa:	2001      	movs	r0, #1
 8006afc:	e76f      	b.n	80069de <_dtoa_r+0x7f6>
 8006afe:	f04f 0800 	mov.w	r8, #0
 8006b02:	e7f6      	b.n	8006af2 <_dtoa_r+0x90a>
 8006b04:	4698      	mov	r8, r3
 8006b06:	e7f4      	b.n	8006af2 <_dtoa_r+0x90a>
 8006b08:	f43f af7d 	beq.w	8006a06 <_dtoa_r+0x81e>
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	301c      	adds	r0, #28
 8006b10:	e772      	b.n	80069f8 <_dtoa_r+0x810>
 8006b12:	9b08      	ldr	r3, [sp, #32]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	dc36      	bgt.n	8006b86 <_dtoa_r+0x99e>
 8006b18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	dd33      	ble.n	8006b86 <_dtoa_r+0x99e>
 8006b1e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b22:	f1b9 0f00 	cmp.w	r9, #0
 8006b26:	d10d      	bne.n	8006b44 <_dtoa_r+0x95c>
 8006b28:	4621      	mov	r1, r4
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fbee 	bl	8007310 <__multadd>
 8006b34:	4601      	mov	r1, r0
 8006b36:	4604      	mov	r4, r0
 8006b38:	4658      	mov	r0, fp
 8006b3a:	f000 fe05 	bl	8007748 <__mcmp>
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	f73f adb8 	bgt.w	80066b4 <_dtoa_r+0x4cc>
 8006b44:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b46:	9f03      	ldr	r7, [sp, #12]
 8006b48:	ea6f 0a03 	mvn.w	sl, r3
 8006b4c:	f04f 0800 	mov.w	r8, #0
 8006b50:	4621      	mov	r1, r4
 8006b52:	4628      	mov	r0, r5
 8006b54:	f000 fbba 	bl	80072cc <_Bfree>
 8006b58:	2e00      	cmp	r6, #0
 8006b5a:	f43f aea7 	beq.w	80068ac <_dtoa_r+0x6c4>
 8006b5e:	f1b8 0f00 	cmp.w	r8, #0
 8006b62:	d005      	beq.n	8006b70 <_dtoa_r+0x988>
 8006b64:	45b0      	cmp	r8, r6
 8006b66:	d003      	beq.n	8006b70 <_dtoa_r+0x988>
 8006b68:	4641      	mov	r1, r8
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 fbae 	bl	80072cc <_Bfree>
 8006b70:	4631      	mov	r1, r6
 8006b72:	4628      	mov	r0, r5
 8006b74:	f000 fbaa 	bl	80072cc <_Bfree>
 8006b78:	e698      	b.n	80068ac <_dtoa_r+0x6c4>
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	4626      	mov	r6, r4
 8006b7e:	e7e1      	b.n	8006b44 <_dtoa_r+0x95c>
 8006b80:	46c2      	mov	sl, r8
 8006b82:	4626      	mov	r6, r4
 8006b84:	e596      	b.n	80066b4 <_dtoa_r+0x4cc>
 8006b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f000 80fd 	beq.w	8006d8c <_dtoa_r+0xba4>
 8006b92:	2f00      	cmp	r7, #0
 8006b94:	dd05      	ble.n	8006ba2 <_dtoa_r+0x9ba>
 8006b96:	4631      	mov	r1, r6
 8006b98:	463a      	mov	r2, r7
 8006b9a:	4628      	mov	r0, r5
 8006b9c:	f000 fd64 	bl	8007668 <__lshift>
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	d05c      	beq.n	8006c62 <_dtoa_r+0xa7a>
 8006ba8:	4628      	mov	r0, r5
 8006baa:	6871      	ldr	r1, [r6, #4]
 8006bac:	f000 fb4e 	bl	800724c <_Balloc>
 8006bb0:	4607      	mov	r7, r0
 8006bb2:	b928      	cbnz	r0, 8006bc0 <_dtoa_r+0x9d8>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006bba:	4b7f      	ldr	r3, [pc, #508]	; (8006db8 <_dtoa_r+0xbd0>)
 8006bbc:	f7ff bb28 	b.w	8006210 <_dtoa_r+0x28>
 8006bc0:	6932      	ldr	r2, [r6, #16]
 8006bc2:	f106 010c 	add.w	r1, r6, #12
 8006bc6:	3202      	adds	r2, #2
 8006bc8:	0092      	lsls	r2, r2, #2
 8006bca:	300c      	adds	r0, #12
 8006bcc:	f000 fb30 	bl	8007230 <memcpy>
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	4628      	mov	r0, r5
 8006bd6:	f000 fd47 	bl	8007668 <__lshift>
 8006bda:	46b0      	mov	r8, r6
 8006bdc:	4606      	mov	r6, r0
 8006bde:	9b03      	ldr	r3, [sp, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	9308      	str	r3, [sp, #32]
 8006be4:	9b03      	ldr	r3, [sp, #12]
 8006be6:	444b      	add	r3, r9
 8006be8:	930a      	str	r3, [sp, #40]	; 0x28
 8006bea:	9b04      	ldr	r3, [sp, #16]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	4658      	mov	r0, fp
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	f7ff fa68 	bl	80060d0 <quorem>
 8006c00:	4603      	mov	r3, r0
 8006c02:	4641      	mov	r1, r8
 8006c04:	3330      	adds	r3, #48	; 0x30
 8006c06:	9006      	str	r0, [sp, #24]
 8006c08:	4658      	mov	r0, fp
 8006c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c0c:	f000 fd9c 	bl	8007748 <__mcmp>
 8006c10:	4632      	mov	r2, r6
 8006c12:	4681      	mov	r9, r0
 8006c14:	4621      	mov	r1, r4
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 fdb2 	bl	8007780 <__mdiff>
 8006c1c:	68c2      	ldr	r2, [r0, #12]
 8006c1e:	4607      	mov	r7, r0
 8006c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c22:	bb02      	cbnz	r2, 8006c66 <_dtoa_r+0xa7e>
 8006c24:	4601      	mov	r1, r0
 8006c26:	4658      	mov	r0, fp
 8006c28:	f000 fd8e 	bl	8007748 <__mcmp>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c30:	4639      	mov	r1, r7
 8006c32:	4628      	mov	r0, r5
 8006c34:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006c38:	f000 fb48 	bl	80072cc <_Bfree>
 8006c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c40:	9f08      	ldr	r7, [sp, #32]
 8006c42:	ea43 0102 	orr.w	r1, r3, r2
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	430b      	orrs	r3, r1
 8006c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c4c:	d10d      	bne.n	8006c6a <_dtoa_r+0xa82>
 8006c4e:	2b39      	cmp	r3, #57	; 0x39
 8006c50:	d029      	beq.n	8006ca6 <_dtoa_r+0xabe>
 8006c52:	f1b9 0f00 	cmp.w	r9, #0
 8006c56:	dd01      	ble.n	8006c5c <_dtoa_r+0xa74>
 8006c58:	9b06      	ldr	r3, [sp, #24]
 8006c5a:	3331      	adds	r3, #49	; 0x31
 8006c5c:	9a04      	ldr	r2, [sp, #16]
 8006c5e:	7013      	strb	r3, [r2, #0]
 8006c60:	e776      	b.n	8006b50 <_dtoa_r+0x968>
 8006c62:	4630      	mov	r0, r6
 8006c64:	e7b9      	b.n	8006bda <_dtoa_r+0x9f2>
 8006c66:	2201      	movs	r2, #1
 8006c68:	e7e2      	b.n	8006c30 <_dtoa_r+0xa48>
 8006c6a:	f1b9 0f00 	cmp.w	r9, #0
 8006c6e:	db06      	blt.n	8006c7e <_dtoa_r+0xa96>
 8006c70:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006c72:	ea41 0909 	orr.w	r9, r1, r9
 8006c76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c78:	ea59 0101 	orrs.w	r1, r9, r1
 8006c7c:	d120      	bne.n	8006cc0 <_dtoa_r+0xad8>
 8006c7e:	2a00      	cmp	r2, #0
 8006c80:	ddec      	ble.n	8006c5c <_dtoa_r+0xa74>
 8006c82:	4659      	mov	r1, fp
 8006c84:	2201      	movs	r2, #1
 8006c86:	4628      	mov	r0, r5
 8006c88:	9308      	str	r3, [sp, #32]
 8006c8a:	f000 fced 	bl	8007668 <__lshift>
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4683      	mov	fp, r0
 8006c92:	f000 fd59 	bl	8007748 <__mcmp>
 8006c96:	2800      	cmp	r0, #0
 8006c98:	9b08      	ldr	r3, [sp, #32]
 8006c9a:	dc02      	bgt.n	8006ca2 <_dtoa_r+0xaba>
 8006c9c:	d1de      	bne.n	8006c5c <_dtoa_r+0xa74>
 8006c9e:	07da      	lsls	r2, r3, #31
 8006ca0:	d5dc      	bpl.n	8006c5c <_dtoa_r+0xa74>
 8006ca2:	2b39      	cmp	r3, #57	; 0x39
 8006ca4:	d1d8      	bne.n	8006c58 <_dtoa_r+0xa70>
 8006ca6:	2339      	movs	r3, #57	; 0x39
 8006ca8:	9a04      	ldr	r2, [sp, #16]
 8006caa:	7013      	strb	r3, [r2, #0]
 8006cac:	463b      	mov	r3, r7
 8006cae:	461f      	mov	r7, r3
 8006cb0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	2a39      	cmp	r2, #57	; 0x39
 8006cb8:	d050      	beq.n	8006d5c <_dtoa_r+0xb74>
 8006cba:	3201      	adds	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]
 8006cbe:	e747      	b.n	8006b50 <_dtoa_r+0x968>
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	dd03      	ble.n	8006ccc <_dtoa_r+0xae4>
 8006cc4:	2b39      	cmp	r3, #57	; 0x39
 8006cc6:	d0ee      	beq.n	8006ca6 <_dtoa_r+0xabe>
 8006cc8:	3301      	adds	r3, #1
 8006cca:	e7c7      	b.n	8006c5c <_dtoa_r+0xa74>
 8006ccc:	9a08      	ldr	r2, [sp, #32]
 8006cce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cd0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006cd4:	428a      	cmp	r2, r1
 8006cd6:	d02a      	beq.n	8006d2e <_dtoa_r+0xb46>
 8006cd8:	4659      	mov	r1, fp
 8006cda:	2300      	movs	r3, #0
 8006cdc:	220a      	movs	r2, #10
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f000 fb16 	bl	8007310 <__multadd>
 8006ce4:	45b0      	cmp	r8, r6
 8006ce6:	4683      	mov	fp, r0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	f04f 020a 	mov.w	r2, #10
 8006cf0:	4641      	mov	r1, r8
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	d107      	bne.n	8006d06 <_dtoa_r+0xb1e>
 8006cf6:	f000 fb0b 	bl	8007310 <__multadd>
 8006cfa:	4680      	mov	r8, r0
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	9b08      	ldr	r3, [sp, #32]
 8006d00:	3301      	adds	r3, #1
 8006d02:	9308      	str	r3, [sp, #32]
 8006d04:	e775      	b.n	8006bf2 <_dtoa_r+0xa0a>
 8006d06:	f000 fb03 	bl	8007310 <__multadd>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	2300      	movs	r3, #0
 8006d10:	220a      	movs	r2, #10
 8006d12:	4628      	mov	r0, r5
 8006d14:	f000 fafc 	bl	8007310 <__multadd>
 8006d18:	4606      	mov	r6, r0
 8006d1a:	e7f0      	b.n	8006cfe <_dtoa_r+0xb16>
 8006d1c:	f1b9 0f00 	cmp.w	r9, #0
 8006d20:	bfcc      	ite	gt
 8006d22:	464f      	movgt	r7, r9
 8006d24:	2701      	movle	r7, #1
 8006d26:	f04f 0800 	mov.w	r8, #0
 8006d2a:	9a03      	ldr	r2, [sp, #12]
 8006d2c:	4417      	add	r7, r2
 8006d2e:	4659      	mov	r1, fp
 8006d30:	2201      	movs	r2, #1
 8006d32:	4628      	mov	r0, r5
 8006d34:	9308      	str	r3, [sp, #32]
 8006d36:	f000 fc97 	bl	8007668 <__lshift>
 8006d3a:	4621      	mov	r1, r4
 8006d3c:	4683      	mov	fp, r0
 8006d3e:	f000 fd03 	bl	8007748 <__mcmp>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	dcb2      	bgt.n	8006cac <_dtoa_r+0xac4>
 8006d46:	d102      	bne.n	8006d4e <_dtoa_r+0xb66>
 8006d48:	9b08      	ldr	r3, [sp, #32]
 8006d4a:	07db      	lsls	r3, r3, #31
 8006d4c:	d4ae      	bmi.n	8006cac <_dtoa_r+0xac4>
 8006d4e:	463b      	mov	r3, r7
 8006d50:	461f      	mov	r7, r3
 8006d52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d56:	2a30      	cmp	r2, #48	; 0x30
 8006d58:	d0fa      	beq.n	8006d50 <_dtoa_r+0xb68>
 8006d5a:	e6f9      	b.n	8006b50 <_dtoa_r+0x968>
 8006d5c:	9a03      	ldr	r2, [sp, #12]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d1a5      	bne.n	8006cae <_dtoa_r+0xac6>
 8006d62:	2331      	movs	r3, #49	; 0x31
 8006d64:	f10a 0a01 	add.w	sl, sl, #1
 8006d68:	e779      	b.n	8006c5e <_dtoa_r+0xa76>
 8006d6a:	4b14      	ldr	r3, [pc, #80]	; (8006dbc <_dtoa_r+0xbd4>)
 8006d6c:	f7ff baa8 	b.w	80062c0 <_dtoa_r+0xd8>
 8006d70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f47f aa81 	bne.w	800627a <_dtoa_r+0x92>
 8006d78:	4b11      	ldr	r3, [pc, #68]	; (8006dc0 <_dtoa_r+0xbd8>)
 8006d7a:	f7ff baa1 	b.w	80062c0 <_dtoa_r+0xd8>
 8006d7e:	f1b9 0f00 	cmp.w	r9, #0
 8006d82:	dc03      	bgt.n	8006d8c <_dtoa_r+0xba4>
 8006d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	f73f aecb 	bgt.w	8006b22 <_dtoa_r+0x93a>
 8006d8c:	9f03      	ldr	r7, [sp, #12]
 8006d8e:	4621      	mov	r1, r4
 8006d90:	4658      	mov	r0, fp
 8006d92:	f7ff f99d 	bl	80060d0 <quorem>
 8006d96:	9a03      	ldr	r2, [sp, #12]
 8006d98:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006d9c:	f807 3b01 	strb.w	r3, [r7], #1
 8006da0:	1aba      	subs	r2, r7, r2
 8006da2:	4591      	cmp	r9, r2
 8006da4:	ddba      	ble.n	8006d1c <_dtoa_r+0xb34>
 8006da6:	4659      	mov	r1, fp
 8006da8:	2300      	movs	r3, #0
 8006daa:	220a      	movs	r2, #10
 8006dac:	4628      	mov	r0, r5
 8006dae:	f000 faaf 	bl	8007310 <__multadd>
 8006db2:	4683      	mov	fp, r0
 8006db4:	e7eb      	b.n	8006d8e <_dtoa_r+0xba6>
 8006db6:	bf00      	nop
 8006db8:	080083c3 	.word	0x080083c3
 8006dbc:	08008320 	.word	0x08008320
 8006dc0:	08008344 	.word	0x08008344

08006dc4 <__sflush_r>:
 8006dc4:	898a      	ldrh	r2, [r1, #12]
 8006dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc8:	4605      	mov	r5, r0
 8006dca:	0710      	lsls	r0, r2, #28
 8006dcc:	460c      	mov	r4, r1
 8006dce:	d457      	bmi.n	8006e80 <__sflush_r+0xbc>
 8006dd0:	684b      	ldr	r3, [r1, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	dc04      	bgt.n	8006de0 <__sflush_r+0x1c>
 8006dd6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	dc01      	bgt.n	8006de0 <__sflush_r+0x1c>
 8006ddc:	2000      	movs	r0, #0
 8006dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006de2:	2e00      	cmp	r6, #0
 8006de4:	d0fa      	beq.n	8006ddc <__sflush_r+0x18>
 8006de6:	2300      	movs	r3, #0
 8006de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dec:	682f      	ldr	r7, [r5, #0]
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	d032      	beq.n	8006e58 <__sflush_r+0x94>
 8006df2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	075a      	lsls	r2, r3, #29
 8006df8:	d505      	bpl.n	8006e06 <__sflush_r+0x42>
 8006dfa:	6863      	ldr	r3, [r4, #4]
 8006dfc:	1ac0      	subs	r0, r0, r3
 8006dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e00:	b10b      	cbz	r3, 8006e06 <__sflush_r+0x42>
 8006e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e04:	1ac0      	subs	r0, r0, r3
 8006e06:	2300      	movs	r3, #0
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	6a21      	ldr	r1, [r4, #32]
 8006e10:	47b0      	blx	r6
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	d106      	bne.n	8006e26 <__sflush_r+0x62>
 8006e18:	6829      	ldr	r1, [r5, #0]
 8006e1a:	291d      	cmp	r1, #29
 8006e1c:	d82c      	bhi.n	8006e78 <__sflush_r+0xb4>
 8006e1e:	4a29      	ldr	r2, [pc, #164]	; (8006ec4 <__sflush_r+0x100>)
 8006e20:	40ca      	lsrs	r2, r1
 8006e22:	07d6      	lsls	r6, r2, #31
 8006e24:	d528      	bpl.n	8006e78 <__sflush_r+0xb4>
 8006e26:	2200      	movs	r2, #0
 8006e28:	6062      	str	r2, [r4, #4]
 8006e2a:	6922      	ldr	r2, [r4, #16]
 8006e2c:	04d9      	lsls	r1, r3, #19
 8006e2e:	6022      	str	r2, [r4, #0]
 8006e30:	d504      	bpl.n	8006e3c <__sflush_r+0x78>
 8006e32:	1c42      	adds	r2, r0, #1
 8006e34:	d101      	bne.n	8006e3a <__sflush_r+0x76>
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	b903      	cbnz	r3, 8006e3c <__sflush_r+0x78>
 8006e3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3e:	602f      	str	r7, [r5, #0]
 8006e40:	2900      	cmp	r1, #0
 8006e42:	d0cb      	beq.n	8006ddc <__sflush_r+0x18>
 8006e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e48:	4299      	cmp	r1, r3
 8006e4a:	d002      	beq.n	8006e52 <__sflush_r+0x8e>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f000 fd93 	bl	8007978 <_free_r>
 8006e52:	2000      	movs	r0, #0
 8006e54:	6360      	str	r0, [r4, #52]	; 0x34
 8006e56:	e7c2      	b.n	8006dde <__sflush_r+0x1a>
 8006e58:	6a21      	ldr	r1, [r4, #32]
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b0      	blx	r6
 8006e60:	1c41      	adds	r1, r0, #1
 8006e62:	d1c7      	bne.n	8006df4 <__sflush_r+0x30>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0c4      	beq.n	8006df4 <__sflush_r+0x30>
 8006e6a:	2b1d      	cmp	r3, #29
 8006e6c:	d001      	beq.n	8006e72 <__sflush_r+0xae>
 8006e6e:	2b16      	cmp	r3, #22
 8006e70:	d101      	bne.n	8006e76 <__sflush_r+0xb2>
 8006e72:	602f      	str	r7, [r5, #0]
 8006e74:	e7b2      	b.n	8006ddc <__sflush_r+0x18>
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	e7ae      	b.n	8006dde <__sflush_r+0x1a>
 8006e80:	690f      	ldr	r7, [r1, #16]
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	d0aa      	beq.n	8006ddc <__sflush_r+0x18>
 8006e86:	0793      	lsls	r3, r2, #30
 8006e88:	bf18      	it	ne
 8006e8a:	2300      	movne	r3, #0
 8006e8c:	680e      	ldr	r6, [r1, #0]
 8006e8e:	bf08      	it	eq
 8006e90:	694b      	ldreq	r3, [r1, #20]
 8006e92:	1bf6      	subs	r6, r6, r7
 8006e94:	600f      	str	r7, [r1, #0]
 8006e96:	608b      	str	r3, [r1, #8]
 8006e98:	2e00      	cmp	r6, #0
 8006e9a:	dd9f      	ble.n	8006ddc <__sflush_r+0x18>
 8006e9c:	4633      	mov	r3, r6
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	6a21      	ldr	r1, [r4, #32]
 8006ea4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006ea8:	47e0      	blx	ip
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	dc06      	bgt.n	8006ebc <__sflush_r+0xf8>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	e790      	b.n	8006dde <__sflush_r+0x1a>
 8006ebc:	4407      	add	r7, r0
 8006ebe:	1a36      	subs	r6, r6, r0
 8006ec0:	e7ea      	b.n	8006e98 <__sflush_r+0xd4>
 8006ec2:	bf00      	nop
 8006ec4:	20400001 	.word	0x20400001

08006ec8 <_fflush_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	690b      	ldr	r3, [r1, #16]
 8006ecc:	4605      	mov	r5, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	b913      	cbnz	r3, 8006ed8 <_fflush_r+0x10>
 8006ed2:	2500      	movs	r5, #0
 8006ed4:	4628      	mov	r0, r5
 8006ed6:	bd38      	pop	{r3, r4, r5, pc}
 8006ed8:	b118      	cbz	r0, 8006ee2 <_fflush_r+0x1a>
 8006eda:	6983      	ldr	r3, [r0, #24]
 8006edc:	b90b      	cbnz	r3, 8006ee2 <_fflush_r+0x1a>
 8006ede:	f000 f887 	bl	8006ff0 <__sinit>
 8006ee2:	4b14      	ldr	r3, [pc, #80]	; (8006f34 <_fflush_r+0x6c>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	d11b      	bne.n	8006f20 <_fflush_r+0x58>
 8006ee8:	686c      	ldr	r4, [r5, #4]
 8006eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d0ef      	beq.n	8006ed2 <_fflush_r+0xa>
 8006ef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ef4:	07d0      	lsls	r0, r2, #31
 8006ef6:	d404      	bmi.n	8006f02 <_fflush_r+0x3a>
 8006ef8:	0599      	lsls	r1, r3, #22
 8006efa:	d402      	bmi.n	8006f02 <_fflush_r+0x3a>
 8006efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006efe:	f000 f91a 	bl	8007136 <__retarget_lock_acquire_recursive>
 8006f02:	4628      	mov	r0, r5
 8006f04:	4621      	mov	r1, r4
 8006f06:	f7ff ff5d 	bl	8006dc4 <__sflush_r>
 8006f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	07da      	lsls	r2, r3, #31
 8006f10:	d4e0      	bmi.n	8006ed4 <_fflush_r+0xc>
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	059b      	lsls	r3, r3, #22
 8006f16:	d4dd      	bmi.n	8006ed4 <_fflush_r+0xc>
 8006f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1a:	f000 f90d 	bl	8007138 <__retarget_lock_release_recursive>
 8006f1e:	e7d9      	b.n	8006ed4 <_fflush_r+0xc>
 8006f20:	4b05      	ldr	r3, [pc, #20]	; (8006f38 <_fflush_r+0x70>)
 8006f22:	429c      	cmp	r4, r3
 8006f24:	d101      	bne.n	8006f2a <_fflush_r+0x62>
 8006f26:	68ac      	ldr	r4, [r5, #8]
 8006f28:	e7df      	b.n	8006eea <_fflush_r+0x22>
 8006f2a:	4b04      	ldr	r3, [pc, #16]	; (8006f3c <_fflush_r+0x74>)
 8006f2c:	429c      	cmp	r4, r3
 8006f2e:	bf08      	it	eq
 8006f30:	68ec      	ldreq	r4, [r5, #12]
 8006f32:	e7da      	b.n	8006eea <_fflush_r+0x22>
 8006f34:	080083f4 	.word	0x080083f4
 8006f38:	08008414 	.word	0x08008414
 8006f3c:	080083d4 	.word	0x080083d4

08006f40 <std>:
 8006f40:	2300      	movs	r3, #0
 8006f42:	b510      	push	{r4, lr}
 8006f44:	4604      	mov	r4, r0
 8006f46:	e9c0 3300 	strd	r3, r3, [r0]
 8006f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f4e:	6083      	str	r3, [r0, #8]
 8006f50:	8181      	strh	r1, [r0, #12]
 8006f52:	6643      	str	r3, [r0, #100]	; 0x64
 8006f54:	81c2      	strh	r2, [r0, #14]
 8006f56:	6183      	str	r3, [r0, #24]
 8006f58:	4619      	mov	r1, r3
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	305c      	adds	r0, #92	; 0x5c
 8006f5e:	f7fe fb01 	bl	8005564 <memset>
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <std+0x38>)
 8006f64:	6224      	str	r4, [r4, #32]
 8006f66:	6263      	str	r3, [r4, #36]	; 0x24
 8006f68:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <std+0x3c>)
 8006f6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f6c:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <std+0x40>)
 8006f6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f70:	4b04      	ldr	r3, [pc, #16]	; (8006f84 <std+0x44>)
 8006f72:	6323      	str	r3, [r4, #48]	; 0x30
 8006f74:	bd10      	pop	{r4, pc}
 8006f76:	bf00      	nop
 8006f78:	08007e01 	.word	0x08007e01
 8006f7c:	08007e23 	.word	0x08007e23
 8006f80:	08007e5b 	.word	0x08007e5b
 8006f84:	08007e7f 	.word	0x08007e7f

08006f88 <_cleanup_r>:
 8006f88:	4901      	ldr	r1, [pc, #4]	; (8006f90 <_cleanup_r+0x8>)
 8006f8a:	f000 b8af 	b.w	80070ec <_fwalk_reent>
 8006f8e:	bf00      	nop
 8006f90:	08006ec9 	.word	0x08006ec9

08006f94 <__sfmoreglue>:
 8006f94:	2268      	movs	r2, #104	; 0x68
 8006f96:	b570      	push	{r4, r5, r6, lr}
 8006f98:	1e4d      	subs	r5, r1, #1
 8006f9a:	4355      	muls	r5, r2
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fa2:	f000 fd51 	bl	8007a48 <_malloc_r>
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	b140      	cbz	r0, 8006fbc <__sfmoreglue+0x28>
 8006faa:	2100      	movs	r1, #0
 8006fac:	e9c0 1600 	strd	r1, r6, [r0]
 8006fb0:	300c      	adds	r0, #12
 8006fb2:	60a0      	str	r0, [r4, #8]
 8006fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fb8:	f7fe fad4 	bl	8005564 <memset>
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}

08006fc0 <__sfp_lock_acquire>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	; (8006fc8 <__sfp_lock_acquire+0x8>)
 8006fc2:	f000 b8b8 	b.w	8007136 <__retarget_lock_acquire_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	20000c29 	.word	0x20000c29

08006fcc <__sfp_lock_release>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	; (8006fd4 <__sfp_lock_release+0x8>)
 8006fce:	f000 b8b3 	b.w	8007138 <__retarget_lock_release_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	20000c29 	.word	0x20000c29

08006fd8 <__sinit_lock_acquire>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__sinit_lock_acquire+0x8>)
 8006fda:	f000 b8ac 	b.w	8007136 <__retarget_lock_acquire_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20000c2a 	.word	0x20000c2a

08006fe4 <__sinit_lock_release>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__sinit_lock_release+0x8>)
 8006fe6:	f000 b8a7 	b.w	8007138 <__retarget_lock_release_recursive>
 8006fea:	bf00      	nop
 8006fec:	20000c2a 	.word	0x20000c2a

08006ff0 <__sinit>:
 8006ff0:	b510      	push	{r4, lr}
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	f7ff fff0 	bl	8006fd8 <__sinit_lock_acquire>
 8006ff8:	69a3      	ldr	r3, [r4, #24]
 8006ffa:	b11b      	cbz	r3, 8007004 <__sinit+0x14>
 8006ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007000:	f7ff bff0 	b.w	8006fe4 <__sinit_lock_release>
 8007004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007008:	6523      	str	r3, [r4, #80]	; 0x50
 800700a:	4b13      	ldr	r3, [pc, #76]	; (8007058 <__sinit+0x68>)
 800700c:	4a13      	ldr	r2, [pc, #76]	; (800705c <__sinit+0x6c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	62a2      	str	r2, [r4, #40]	; 0x28
 8007012:	42a3      	cmp	r3, r4
 8007014:	bf08      	it	eq
 8007016:	2301      	moveq	r3, #1
 8007018:	4620      	mov	r0, r4
 800701a:	bf08      	it	eq
 800701c:	61a3      	streq	r3, [r4, #24]
 800701e:	f000 f81f 	bl	8007060 <__sfp>
 8007022:	6060      	str	r0, [r4, #4]
 8007024:	4620      	mov	r0, r4
 8007026:	f000 f81b 	bl	8007060 <__sfp>
 800702a:	60a0      	str	r0, [r4, #8]
 800702c:	4620      	mov	r0, r4
 800702e:	f000 f817 	bl	8007060 <__sfp>
 8007032:	2200      	movs	r2, #0
 8007034:	2104      	movs	r1, #4
 8007036:	60e0      	str	r0, [r4, #12]
 8007038:	6860      	ldr	r0, [r4, #4]
 800703a:	f7ff ff81 	bl	8006f40 <std>
 800703e:	2201      	movs	r2, #1
 8007040:	2109      	movs	r1, #9
 8007042:	68a0      	ldr	r0, [r4, #8]
 8007044:	f7ff ff7c 	bl	8006f40 <std>
 8007048:	2202      	movs	r2, #2
 800704a:	2112      	movs	r1, #18
 800704c:	68e0      	ldr	r0, [r4, #12]
 800704e:	f7ff ff77 	bl	8006f40 <std>
 8007052:	2301      	movs	r3, #1
 8007054:	61a3      	str	r3, [r4, #24]
 8007056:	e7d1      	b.n	8006ffc <__sinit+0xc>
 8007058:	0800830c 	.word	0x0800830c
 800705c:	08006f89 	.word	0x08006f89

08007060 <__sfp>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	4607      	mov	r7, r0
 8007064:	f7ff ffac 	bl	8006fc0 <__sfp_lock_acquire>
 8007068:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <__sfp+0x84>)
 800706a:	681e      	ldr	r6, [r3, #0]
 800706c:	69b3      	ldr	r3, [r6, #24]
 800706e:	b913      	cbnz	r3, 8007076 <__sfp+0x16>
 8007070:	4630      	mov	r0, r6
 8007072:	f7ff ffbd 	bl	8006ff0 <__sinit>
 8007076:	3648      	adds	r6, #72	; 0x48
 8007078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800707c:	3b01      	subs	r3, #1
 800707e:	d503      	bpl.n	8007088 <__sfp+0x28>
 8007080:	6833      	ldr	r3, [r6, #0]
 8007082:	b30b      	cbz	r3, 80070c8 <__sfp+0x68>
 8007084:	6836      	ldr	r6, [r6, #0]
 8007086:	e7f7      	b.n	8007078 <__sfp+0x18>
 8007088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800708c:	b9d5      	cbnz	r5, 80070c4 <__sfp+0x64>
 800708e:	4b16      	ldr	r3, [pc, #88]	; (80070e8 <__sfp+0x88>)
 8007090:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007094:	60e3      	str	r3, [r4, #12]
 8007096:	6665      	str	r5, [r4, #100]	; 0x64
 8007098:	f000 f84c 	bl	8007134 <__retarget_lock_init_recursive>
 800709c:	f7ff ff96 	bl	8006fcc <__sfp_lock_release>
 80070a0:	2208      	movs	r2, #8
 80070a2:	4629      	mov	r1, r5
 80070a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070ac:	6025      	str	r5, [r4, #0]
 80070ae:	61a5      	str	r5, [r4, #24]
 80070b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070b4:	f7fe fa56 	bl	8005564 <memset>
 80070b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070c0:	4620      	mov	r0, r4
 80070c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c4:	3468      	adds	r4, #104	; 0x68
 80070c6:	e7d9      	b.n	800707c <__sfp+0x1c>
 80070c8:	2104      	movs	r1, #4
 80070ca:	4638      	mov	r0, r7
 80070cc:	f7ff ff62 	bl	8006f94 <__sfmoreglue>
 80070d0:	4604      	mov	r4, r0
 80070d2:	6030      	str	r0, [r6, #0]
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d1d5      	bne.n	8007084 <__sfp+0x24>
 80070d8:	f7ff ff78 	bl	8006fcc <__sfp_lock_release>
 80070dc:	230c      	movs	r3, #12
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	e7ee      	b.n	80070c0 <__sfp+0x60>
 80070e2:	bf00      	nop
 80070e4:	0800830c 	.word	0x0800830c
 80070e8:	ffff0001 	.word	0xffff0001

080070ec <_fwalk_reent>:
 80070ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f0:	4606      	mov	r6, r0
 80070f2:	4688      	mov	r8, r1
 80070f4:	2700      	movs	r7, #0
 80070f6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007102:	d505      	bpl.n	8007110 <_fwalk_reent+0x24>
 8007104:	6824      	ldr	r4, [r4, #0]
 8007106:	2c00      	cmp	r4, #0
 8007108:	d1f7      	bne.n	80070fa <_fwalk_reent+0xe>
 800710a:	4638      	mov	r0, r7
 800710c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007110:	89ab      	ldrh	r3, [r5, #12]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d907      	bls.n	8007126 <_fwalk_reent+0x3a>
 8007116:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800711a:	3301      	adds	r3, #1
 800711c:	d003      	beq.n	8007126 <_fwalk_reent+0x3a>
 800711e:	4629      	mov	r1, r5
 8007120:	4630      	mov	r0, r6
 8007122:	47c0      	blx	r8
 8007124:	4307      	orrs	r7, r0
 8007126:	3568      	adds	r5, #104	; 0x68
 8007128:	e7e9      	b.n	80070fe <_fwalk_reent+0x12>
	...

0800712c <_localeconv_r>:
 800712c:	4800      	ldr	r0, [pc, #0]	; (8007130 <_localeconv_r+0x4>)
 800712e:	4770      	bx	lr
 8007130:	20000168 	.word	0x20000168

08007134 <__retarget_lock_init_recursive>:
 8007134:	4770      	bx	lr

08007136 <__retarget_lock_acquire_recursive>:
 8007136:	4770      	bx	lr

08007138 <__retarget_lock_release_recursive>:
 8007138:	4770      	bx	lr

0800713a <__swhatbuf_r>:
 800713a:	b570      	push	{r4, r5, r6, lr}
 800713c:	460e      	mov	r6, r1
 800713e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007142:	4614      	mov	r4, r2
 8007144:	2900      	cmp	r1, #0
 8007146:	461d      	mov	r5, r3
 8007148:	b096      	sub	sp, #88	; 0x58
 800714a:	da08      	bge.n	800715e <__swhatbuf_r+0x24>
 800714c:	2200      	movs	r2, #0
 800714e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007152:	602a      	str	r2, [r5, #0]
 8007154:	061a      	lsls	r2, r3, #24
 8007156:	d410      	bmi.n	800717a <__swhatbuf_r+0x40>
 8007158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800715c:	e00e      	b.n	800717c <__swhatbuf_r+0x42>
 800715e:	466a      	mov	r2, sp
 8007160:	f000 fee4 	bl	8007f2c <_fstat_r>
 8007164:	2800      	cmp	r0, #0
 8007166:	dbf1      	blt.n	800714c <__swhatbuf_r+0x12>
 8007168:	9a01      	ldr	r2, [sp, #4]
 800716a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800716e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007172:	425a      	negs	r2, r3
 8007174:	415a      	adcs	r2, r3
 8007176:	602a      	str	r2, [r5, #0]
 8007178:	e7ee      	b.n	8007158 <__swhatbuf_r+0x1e>
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	2000      	movs	r0, #0
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	b016      	add	sp, #88	; 0x58
 8007182:	bd70      	pop	{r4, r5, r6, pc}

08007184 <__smakebuf_r>:
 8007184:	898b      	ldrh	r3, [r1, #12]
 8007186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007188:	079d      	lsls	r5, r3, #30
 800718a:	4606      	mov	r6, r0
 800718c:	460c      	mov	r4, r1
 800718e:	d507      	bpl.n	80071a0 <__smakebuf_r+0x1c>
 8007190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	6123      	str	r3, [r4, #16]
 8007198:	2301      	movs	r3, #1
 800719a:	6163      	str	r3, [r4, #20]
 800719c:	b002      	add	sp, #8
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	466a      	mov	r2, sp
 80071a2:	ab01      	add	r3, sp, #4
 80071a4:	f7ff ffc9 	bl	800713a <__swhatbuf_r>
 80071a8:	9900      	ldr	r1, [sp, #0]
 80071aa:	4605      	mov	r5, r0
 80071ac:	4630      	mov	r0, r6
 80071ae:	f000 fc4b 	bl	8007a48 <_malloc_r>
 80071b2:	b948      	cbnz	r0, 80071c8 <__smakebuf_r+0x44>
 80071b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b8:	059a      	lsls	r2, r3, #22
 80071ba:	d4ef      	bmi.n	800719c <__smakebuf_r+0x18>
 80071bc:	f023 0303 	bic.w	r3, r3, #3
 80071c0:	f043 0302 	orr.w	r3, r3, #2
 80071c4:	81a3      	strh	r3, [r4, #12]
 80071c6:	e7e3      	b.n	8007190 <__smakebuf_r+0xc>
 80071c8:	4b0d      	ldr	r3, [pc, #52]	; (8007200 <__smakebuf_r+0x7c>)
 80071ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80071cc:	89a3      	ldrh	r3, [r4, #12]
 80071ce:	6020      	str	r0, [r4, #0]
 80071d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d4:	81a3      	strh	r3, [r4, #12]
 80071d6:	9b00      	ldr	r3, [sp, #0]
 80071d8:	6120      	str	r0, [r4, #16]
 80071da:	6163      	str	r3, [r4, #20]
 80071dc:	9b01      	ldr	r3, [sp, #4]
 80071de:	b15b      	cbz	r3, 80071f8 <__smakebuf_r+0x74>
 80071e0:	4630      	mov	r0, r6
 80071e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e6:	f000 feb3 	bl	8007f50 <_isatty_r>
 80071ea:	b128      	cbz	r0, 80071f8 <__smakebuf_r+0x74>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	f023 0303 	bic.w	r3, r3, #3
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	81a3      	strh	r3, [r4, #12]
 80071f8:	89a0      	ldrh	r0, [r4, #12]
 80071fa:	4305      	orrs	r5, r0
 80071fc:	81a5      	strh	r5, [r4, #12]
 80071fe:	e7cd      	b.n	800719c <__smakebuf_r+0x18>
 8007200:	08006f89 	.word	0x08006f89

08007204 <malloc>:
 8007204:	4b02      	ldr	r3, [pc, #8]	; (8007210 <malloc+0xc>)
 8007206:	4601      	mov	r1, r0
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	f000 bc1d 	b.w	8007a48 <_malloc_r>
 800720e:	bf00      	nop
 8007210:	20000014 	.word	0x20000014

08007214 <memchr>:
 8007214:	4603      	mov	r3, r0
 8007216:	b510      	push	{r4, lr}
 8007218:	b2c9      	uxtb	r1, r1
 800721a:	4402      	add	r2, r0
 800721c:	4293      	cmp	r3, r2
 800721e:	4618      	mov	r0, r3
 8007220:	d101      	bne.n	8007226 <memchr+0x12>
 8007222:	2000      	movs	r0, #0
 8007224:	e003      	b.n	800722e <memchr+0x1a>
 8007226:	7804      	ldrb	r4, [r0, #0]
 8007228:	3301      	adds	r3, #1
 800722a:	428c      	cmp	r4, r1
 800722c:	d1f6      	bne.n	800721c <memchr+0x8>
 800722e:	bd10      	pop	{r4, pc}

08007230 <memcpy>:
 8007230:	440a      	add	r2, r1
 8007232:	4291      	cmp	r1, r2
 8007234:	f100 33ff 	add.w	r3, r0, #4294967295
 8007238:	d100      	bne.n	800723c <memcpy+0xc>
 800723a:	4770      	bx	lr
 800723c:	b510      	push	{r4, lr}
 800723e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007242:	4291      	cmp	r1, r2
 8007244:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007248:	d1f9      	bne.n	800723e <memcpy+0xe>
 800724a:	bd10      	pop	{r4, pc}

0800724c <_Balloc>:
 800724c:	b570      	push	{r4, r5, r6, lr}
 800724e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007250:	4604      	mov	r4, r0
 8007252:	460d      	mov	r5, r1
 8007254:	b976      	cbnz	r6, 8007274 <_Balloc+0x28>
 8007256:	2010      	movs	r0, #16
 8007258:	f7ff ffd4 	bl	8007204 <malloc>
 800725c:	4602      	mov	r2, r0
 800725e:	6260      	str	r0, [r4, #36]	; 0x24
 8007260:	b920      	cbnz	r0, 800726c <_Balloc+0x20>
 8007262:	2166      	movs	r1, #102	; 0x66
 8007264:	4b17      	ldr	r3, [pc, #92]	; (80072c4 <_Balloc+0x78>)
 8007266:	4818      	ldr	r0, [pc, #96]	; (80072c8 <_Balloc+0x7c>)
 8007268:	f000 fe20 	bl	8007eac <__assert_func>
 800726c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007270:	6006      	str	r6, [r0, #0]
 8007272:	60c6      	str	r6, [r0, #12]
 8007274:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007276:	68f3      	ldr	r3, [r6, #12]
 8007278:	b183      	cbz	r3, 800729c <_Balloc+0x50>
 800727a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007282:	b9b8      	cbnz	r0, 80072b4 <_Balloc+0x68>
 8007284:	2101      	movs	r1, #1
 8007286:	fa01 f605 	lsl.w	r6, r1, r5
 800728a:	1d72      	adds	r2, r6, #5
 800728c:	4620      	mov	r0, r4
 800728e:	0092      	lsls	r2, r2, #2
 8007290:	f000 fb5e 	bl	8007950 <_calloc_r>
 8007294:	b160      	cbz	r0, 80072b0 <_Balloc+0x64>
 8007296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800729a:	e00e      	b.n	80072ba <_Balloc+0x6e>
 800729c:	2221      	movs	r2, #33	; 0x21
 800729e:	2104      	movs	r1, #4
 80072a0:	4620      	mov	r0, r4
 80072a2:	f000 fb55 	bl	8007950 <_calloc_r>
 80072a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072a8:	60f0      	str	r0, [r6, #12]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e4      	bne.n	800727a <_Balloc+0x2e>
 80072b0:	2000      	movs	r0, #0
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	6802      	ldr	r2, [r0, #0]
 80072b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ba:	2300      	movs	r3, #0
 80072bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072c0:	e7f7      	b.n	80072b2 <_Balloc+0x66>
 80072c2:	bf00      	nop
 80072c4:	08008351 	.word	0x08008351
 80072c8:	08008434 	.word	0x08008434

080072cc <_Bfree>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072d0:	4605      	mov	r5, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	b976      	cbnz	r6, 80072f4 <_Bfree+0x28>
 80072d6:	2010      	movs	r0, #16
 80072d8:	f7ff ff94 	bl	8007204 <malloc>
 80072dc:	4602      	mov	r2, r0
 80072de:	6268      	str	r0, [r5, #36]	; 0x24
 80072e0:	b920      	cbnz	r0, 80072ec <_Bfree+0x20>
 80072e2:	218a      	movs	r1, #138	; 0x8a
 80072e4:	4b08      	ldr	r3, [pc, #32]	; (8007308 <_Bfree+0x3c>)
 80072e6:	4809      	ldr	r0, [pc, #36]	; (800730c <_Bfree+0x40>)
 80072e8:	f000 fde0 	bl	8007eac <__assert_func>
 80072ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072f0:	6006      	str	r6, [r0, #0]
 80072f2:	60c6      	str	r6, [r0, #12]
 80072f4:	b13c      	cbz	r4, 8007306 <_Bfree+0x3a>
 80072f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072f8:	6862      	ldr	r2, [r4, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007300:	6021      	str	r1, [r4, #0]
 8007302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	08008351 	.word	0x08008351
 800730c:	08008434 	.word	0x08008434

08007310 <__multadd>:
 8007310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007314:	4607      	mov	r7, r0
 8007316:	460c      	mov	r4, r1
 8007318:	461e      	mov	r6, r3
 800731a:	2000      	movs	r0, #0
 800731c:	690d      	ldr	r5, [r1, #16]
 800731e:	f101 0c14 	add.w	ip, r1, #20
 8007322:	f8dc 3000 	ldr.w	r3, [ip]
 8007326:	3001      	adds	r0, #1
 8007328:	b299      	uxth	r1, r3
 800732a:	fb02 6101 	mla	r1, r2, r1, r6
 800732e:	0c1e      	lsrs	r6, r3, #16
 8007330:	0c0b      	lsrs	r3, r1, #16
 8007332:	fb02 3306 	mla	r3, r2, r6, r3
 8007336:	b289      	uxth	r1, r1
 8007338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800733c:	4285      	cmp	r5, r0
 800733e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007342:	f84c 1b04 	str.w	r1, [ip], #4
 8007346:	dcec      	bgt.n	8007322 <__multadd+0x12>
 8007348:	b30e      	cbz	r6, 800738e <__multadd+0x7e>
 800734a:	68a3      	ldr	r3, [r4, #8]
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc19      	bgt.n	8007384 <__multadd+0x74>
 8007350:	6861      	ldr	r1, [r4, #4]
 8007352:	4638      	mov	r0, r7
 8007354:	3101      	adds	r1, #1
 8007356:	f7ff ff79 	bl	800724c <_Balloc>
 800735a:	4680      	mov	r8, r0
 800735c:	b928      	cbnz	r0, 800736a <__multadd+0x5a>
 800735e:	4602      	mov	r2, r0
 8007360:	21b5      	movs	r1, #181	; 0xb5
 8007362:	4b0c      	ldr	r3, [pc, #48]	; (8007394 <__multadd+0x84>)
 8007364:	480c      	ldr	r0, [pc, #48]	; (8007398 <__multadd+0x88>)
 8007366:	f000 fda1 	bl	8007eac <__assert_func>
 800736a:	6922      	ldr	r2, [r4, #16]
 800736c:	f104 010c 	add.w	r1, r4, #12
 8007370:	3202      	adds	r2, #2
 8007372:	0092      	lsls	r2, r2, #2
 8007374:	300c      	adds	r0, #12
 8007376:	f7ff ff5b 	bl	8007230 <memcpy>
 800737a:	4621      	mov	r1, r4
 800737c:	4638      	mov	r0, r7
 800737e:	f7ff ffa5 	bl	80072cc <_Bfree>
 8007382:	4644      	mov	r4, r8
 8007384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007388:	3501      	adds	r5, #1
 800738a:	615e      	str	r6, [r3, #20]
 800738c:	6125      	str	r5, [r4, #16]
 800738e:	4620      	mov	r0, r4
 8007390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007394:	080083c3 	.word	0x080083c3
 8007398:	08008434 	.word	0x08008434

0800739c <__hi0bits>:
 800739c:	0c02      	lsrs	r2, r0, #16
 800739e:	0412      	lsls	r2, r2, #16
 80073a0:	4603      	mov	r3, r0
 80073a2:	b9ca      	cbnz	r2, 80073d8 <__hi0bits+0x3c>
 80073a4:	0403      	lsls	r3, r0, #16
 80073a6:	2010      	movs	r0, #16
 80073a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073ac:	bf04      	itt	eq
 80073ae:	021b      	lsleq	r3, r3, #8
 80073b0:	3008      	addeq	r0, #8
 80073b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073b6:	bf04      	itt	eq
 80073b8:	011b      	lsleq	r3, r3, #4
 80073ba:	3004      	addeq	r0, #4
 80073bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80073c0:	bf04      	itt	eq
 80073c2:	009b      	lsleq	r3, r3, #2
 80073c4:	3002      	addeq	r0, #2
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	db05      	blt.n	80073d6 <__hi0bits+0x3a>
 80073ca:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80073ce:	f100 0001 	add.w	r0, r0, #1
 80073d2:	bf08      	it	eq
 80073d4:	2020      	moveq	r0, #32
 80073d6:	4770      	bx	lr
 80073d8:	2000      	movs	r0, #0
 80073da:	e7e5      	b.n	80073a8 <__hi0bits+0xc>

080073dc <__lo0bits>:
 80073dc:	6803      	ldr	r3, [r0, #0]
 80073de:	4602      	mov	r2, r0
 80073e0:	f013 0007 	ands.w	r0, r3, #7
 80073e4:	d00b      	beq.n	80073fe <__lo0bits+0x22>
 80073e6:	07d9      	lsls	r1, r3, #31
 80073e8:	d421      	bmi.n	800742e <__lo0bits+0x52>
 80073ea:	0798      	lsls	r0, r3, #30
 80073ec:	bf49      	itett	mi
 80073ee:	085b      	lsrmi	r3, r3, #1
 80073f0:	089b      	lsrpl	r3, r3, #2
 80073f2:	2001      	movmi	r0, #1
 80073f4:	6013      	strmi	r3, [r2, #0]
 80073f6:	bf5c      	itt	pl
 80073f8:	2002      	movpl	r0, #2
 80073fa:	6013      	strpl	r3, [r2, #0]
 80073fc:	4770      	bx	lr
 80073fe:	b299      	uxth	r1, r3
 8007400:	b909      	cbnz	r1, 8007406 <__lo0bits+0x2a>
 8007402:	2010      	movs	r0, #16
 8007404:	0c1b      	lsrs	r3, r3, #16
 8007406:	b2d9      	uxtb	r1, r3
 8007408:	b909      	cbnz	r1, 800740e <__lo0bits+0x32>
 800740a:	3008      	adds	r0, #8
 800740c:	0a1b      	lsrs	r3, r3, #8
 800740e:	0719      	lsls	r1, r3, #28
 8007410:	bf04      	itt	eq
 8007412:	091b      	lsreq	r3, r3, #4
 8007414:	3004      	addeq	r0, #4
 8007416:	0799      	lsls	r1, r3, #30
 8007418:	bf04      	itt	eq
 800741a:	089b      	lsreq	r3, r3, #2
 800741c:	3002      	addeq	r0, #2
 800741e:	07d9      	lsls	r1, r3, #31
 8007420:	d403      	bmi.n	800742a <__lo0bits+0x4e>
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	f100 0001 	add.w	r0, r0, #1
 8007428:	d003      	beq.n	8007432 <__lo0bits+0x56>
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	4770      	bx	lr
 800742e:	2000      	movs	r0, #0
 8007430:	4770      	bx	lr
 8007432:	2020      	movs	r0, #32
 8007434:	4770      	bx	lr
	...

08007438 <__i2b>:
 8007438:	b510      	push	{r4, lr}
 800743a:	460c      	mov	r4, r1
 800743c:	2101      	movs	r1, #1
 800743e:	f7ff ff05 	bl	800724c <_Balloc>
 8007442:	4602      	mov	r2, r0
 8007444:	b928      	cbnz	r0, 8007452 <__i2b+0x1a>
 8007446:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800744a:	4b04      	ldr	r3, [pc, #16]	; (800745c <__i2b+0x24>)
 800744c:	4804      	ldr	r0, [pc, #16]	; (8007460 <__i2b+0x28>)
 800744e:	f000 fd2d 	bl	8007eac <__assert_func>
 8007452:	2301      	movs	r3, #1
 8007454:	6144      	str	r4, [r0, #20]
 8007456:	6103      	str	r3, [r0, #16]
 8007458:	bd10      	pop	{r4, pc}
 800745a:	bf00      	nop
 800745c:	080083c3 	.word	0x080083c3
 8007460:	08008434 	.word	0x08008434

08007464 <__multiply>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	4691      	mov	r9, r2
 800746a:	690a      	ldr	r2, [r1, #16]
 800746c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007470:	460c      	mov	r4, r1
 8007472:	429a      	cmp	r2, r3
 8007474:	bfbe      	ittt	lt
 8007476:	460b      	movlt	r3, r1
 8007478:	464c      	movlt	r4, r9
 800747a:	4699      	movlt	r9, r3
 800747c:	6927      	ldr	r7, [r4, #16]
 800747e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007482:	68a3      	ldr	r3, [r4, #8]
 8007484:	6861      	ldr	r1, [r4, #4]
 8007486:	eb07 060a 	add.w	r6, r7, sl
 800748a:	42b3      	cmp	r3, r6
 800748c:	b085      	sub	sp, #20
 800748e:	bfb8      	it	lt
 8007490:	3101      	addlt	r1, #1
 8007492:	f7ff fedb 	bl	800724c <_Balloc>
 8007496:	b930      	cbnz	r0, 80074a6 <__multiply+0x42>
 8007498:	4602      	mov	r2, r0
 800749a:	f240 115d 	movw	r1, #349	; 0x15d
 800749e:	4b43      	ldr	r3, [pc, #268]	; (80075ac <__multiply+0x148>)
 80074a0:	4843      	ldr	r0, [pc, #268]	; (80075b0 <__multiply+0x14c>)
 80074a2:	f000 fd03 	bl	8007eac <__assert_func>
 80074a6:	f100 0514 	add.w	r5, r0, #20
 80074aa:	462b      	mov	r3, r5
 80074ac:	2200      	movs	r2, #0
 80074ae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074b2:	4543      	cmp	r3, r8
 80074b4:	d321      	bcc.n	80074fa <__multiply+0x96>
 80074b6:	f104 0314 	add.w	r3, r4, #20
 80074ba:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074be:	f109 0314 	add.w	r3, r9, #20
 80074c2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074c6:	9202      	str	r2, [sp, #8]
 80074c8:	1b3a      	subs	r2, r7, r4
 80074ca:	3a15      	subs	r2, #21
 80074cc:	f022 0203 	bic.w	r2, r2, #3
 80074d0:	3204      	adds	r2, #4
 80074d2:	f104 0115 	add.w	r1, r4, #21
 80074d6:	428f      	cmp	r7, r1
 80074d8:	bf38      	it	cc
 80074da:	2204      	movcc	r2, #4
 80074dc:	9201      	str	r2, [sp, #4]
 80074de:	9a02      	ldr	r2, [sp, #8]
 80074e0:	9303      	str	r3, [sp, #12]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d80c      	bhi.n	8007500 <__multiply+0x9c>
 80074e6:	2e00      	cmp	r6, #0
 80074e8:	dd03      	ble.n	80074f2 <__multiply+0x8e>
 80074ea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d059      	beq.n	80075a6 <__multiply+0x142>
 80074f2:	6106      	str	r6, [r0, #16]
 80074f4:	b005      	add	sp, #20
 80074f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fa:	f843 2b04 	str.w	r2, [r3], #4
 80074fe:	e7d8      	b.n	80074b2 <__multiply+0x4e>
 8007500:	f8b3 a000 	ldrh.w	sl, [r3]
 8007504:	f1ba 0f00 	cmp.w	sl, #0
 8007508:	d023      	beq.n	8007552 <__multiply+0xee>
 800750a:	46a9      	mov	r9, r5
 800750c:	f04f 0c00 	mov.w	ip, #0
 8007510:	f104 0e14 	add.w	lr, r4, #20
 8007514:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007518:	f8d9 1000 	ldr.w	r1, [r9]
 800751c:	fa1f fb82 	uxth.w	fp, r2
 8007520:	b289      	uxth	r1, r1
 8007522:	fb0a 110b 	mla	r1, sl, fp, r1
 8007526:	4461      	add	r1, ip
 8007528:	f8d9 c000 	ldr.w	ip, [r9]
 800752c:	0c12      	lsrs	r2, r2, #16
 800752e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007532:	fb0a c202 	mla	r2, sl, r2, ip
 8007536:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800753a:	b289      	uxth	r1, r1
 800753c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007540:	4577      	cmp	r7, lr
 8007542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007546:	f849 1b04 	str.w	r1, [r9], #4
 800754a:	d8e3      	bhi.n	8007514 <__multiply+0xb0>
 800754c:	9a01      	ldr	r2, [sp, #4]
 800754e:	f845 c002 	str.w	ip, [r5, r2]
 8007552:	9a03      	ldr	r2, [sp, #12]
 8007554:	3304      	adds	r3, #4
 8007556:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800755a:	f1b9 0f00 	cmp.w	r9, #0
 800755e:	d020      	beq.n	80075a2 <__multiply+0x13e>
 8007560:	46ae      	mov	lr, r5
 8007562:	f04f 0a00 	mov.w	sl, #0
 8007566:	6829      	ldr	r1, [r5, #0]
 8007568:	f104 0c14 	add.w	ip, r4, #20
 800756c:	f8bc b000 	ldrh.w	fp, [ip]
 8007570:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007574:	b289      	uxth	r1, r1
 8007576:	fb09 220b 	mla	r2, r9, fp, r2
 800757a:	4492      	add	sl, r2
 800757c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007580:	f84e 1b04 	str.w	r1, [lr], #4
 8007584:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007588:	f8be 1000 	ldrh.w	r1, [lr]
 800758c:	0c12      	lsrs	r2, r2, #16
 800758e:	fb09 1102 	mla	r1, r9, r2, r1
 8007592:	4567      	cmp	r7, ip
 8007594:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007598:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800759c:	d8e6      	bhi.n	800756c <__multiply+0x108>
 800759e:	9a01      	ldr	r2, [sp, #4]
 80075a0:	50a9      	str	r1, [r5, r2]
 80075a2:	3504      	adds	r5, #4
 80075a4:	e79b      	b.n	80074de <__multiply+0x7a>
 80075a6:	3e01      	subs	r6, #1
 80075a8:	e79d      	b.n	80074e6 <__multiply+0x82>
 80075aa:	bf00      	nop
 80075ac:	080083c3 	.word	0x080083c3
 80075b0:	08008434 	.word	0x08008434

080075b4 <__pow5mult>:
 80075b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075b8:	4615      	mov	r5, r2
 80075ba:	f012 0203 	ands.w	r2, r2, #3
 80075be:	4606      	mov	r6, r0
 80075c0:	460f      	mov	r7, r1
 80075c2:	d007      	beq.n	80075d4 <__pow5mult+0x20>
 80075c4:	4c25      	ldr	r4, [pc, #148]	; (800765c <__pow5mult+0xa8>)
 80075c6:	3a01      	subs	r2, #1
 80075c8:	2300      	movs	r3, #0
 80075ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075ce:	f7ff fe9f 	bl	8007310 <__multadd>
 80075d2:	4607      	mov	r7, r0
 80075d4:	10ad      	asrs	r5, r5, #2
 80075d6:	d03d      	beq.n	8007654 <__pow5mult+0xa0>
 80075d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075da:	b97c      	cbnz	r4, 80075fc <__pow5mult+0x48>
 80075dc:	2010      	movs	r0, #16
 80075de:	f7ff fe11 	bl	8007204 <malloc>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6270      	str	r0, [r6, #36]	; 0x24
 80075e6:	b928      	cbnz	r0, 80075f4 <__pow5mult+0x40>
 80075e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075ec:	4b1c      	ldr	r3, [pc, #112]	; (8007660 <__pow5mult+0xac>)
 80075ee:	481d      	ldr	r0, [pc, #116]	; (8007664 <__pow5mult+0xb0>)
 80075f0:	f000 fc5c 	bl	8007eac <__assert_func>
 80075f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075f8:	6004      	str	r4, [r0, #0]
 80075fa:	60c4      	str	r4, [r0, #12]
 80075fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007604:	b94c      	cbnz	r4, 800761a <__pow5mult+0x66>
 8007606:	f240 2171 	movw	r1, #625	; 0x271
 800760a:	4630      	mov	r0, r6
 800760c:	f7ff ff14 	bl	8007438 <__i2b>
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	f8c8 0008 	str.w	r0, [r8, #8]
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	f04f 0900 	mov.w	r9, #0
 800761e:	07eb      	lsls	r3, r5, #31
 8007620:	d50a      	bpl.n	8007638 <__pow5mult+0x84>
 8007622:	4639      	mov	r1, r7
 8007624:	4622      	mov	r2, r4
 8007626:	4630      	mov	r0, r6
 8007628:	f7ff ff1c 	bl	8007464 <__multiply>
 800762c:	4680      	mov	r8, r0
 800762e:	4639      	mov	r1, r7
 8007630:	4630      	mov	r0, r6
 8007632:	f7ff fe4b 	bl	80072cc <_Bfree>
 8007636:	4647      	mov	r7, r8
 8007638:	106d      	asrs	r5, r5, #1
 800763a:	d00b      	beq.n	8007654 <__pow5mult+0xa0>
 800763c:	6820      	ldr	r0, [r4, #0]
 800763e:	b938      	cbnz	r0, 8007650 <__pow5mult+0x9c>
 8007640:	4622      	mov	r2, r4
 8007642:	4621      	mov	r1, r4
 8007644:	4630      	mov	r0, r6
 8007646:	f7ff ff0d 	bl	8007464 <__multiply>
 800764a:	6020      	str	r0, [r4, #0]
 800764c:	f8c0 9000 	str.w	r9, [r0]
 8007650:	4604      	mov	r4, r0
 8007652:	e7e4      	b.n	800761e <__pow5mult+0x6a>
 8007654:	4638      	mov	r0, r7
 8007656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800765a:	bf00      	nop
 800765c:	08008580 	.word	0x08008580
 8007660:	08008351 	.word	0x08008351
 8007664:	08008434 	.word	0x08008434

08007668 <__lshift>:
 8007668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800766c:	460c      	mov	r4, r1
 800766e:	4607      	mov	r7, r0
 8007670:	4691      	mov	r9, r2
 8007672:	6923      	ldr	r3, [r4, #16]
 8007674:	6849      	ldr	r1, [r1, #4]
 8007676:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800767a:	68a3      	ldr	r3, [r4, #8]
 800767c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007680:	f108 0601 	add.w	r6, r8, #1
 8007684:	42b3      	cmp	r3, r6
 8007686:	db0b      	blt.n	80076a0 <__lshift+0x38>
 8007688:	4638      	mov	r0, r7
 800768a:	f7ff fddf 	bl	800724c <_Balloc>
 800768e:	4605      	mov	r5, r0
 8007690:	b948      	cbnz	r0, 80076a6 <__lshift+0x3e>
 8007692:	4602      	mov	r2, r0
 8007694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007698:	4b29      	ldr	r3, [pc, #164]	; (8007740 <__lshift+0xd8>)
 800769a:	482a      	ldr	r0, [pc, #168]	; (8007744 <__lshift+0xdc>)
 800769c:	f000 fc06 	bl	8007eac <__assert_func>
 80076a0:	3101      	adds	r1, #1
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	e7ee      	b.n	8007684 <__lshift+0x1c>
 80076a6:	2300      	movs	r3, #0
 80076a8:	f100 0114 	add.w	r1, r0, #20
 80076ac:	f100 0210 	add.w	r2, r0, #16
 80076b0:	4618      	mov	r0, r3
 80076b2:	4553      	cmp	r3, sl
 80076b4:	db37      	blt.n	8007726 <__lshift+0xbe>
 80076b6:	6920      	ldr	r0, [r4, #16]
 80076b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076bc:	f104 0314 	add.w	r3, r4, #20
 80076c0:	f019 091f 	ands.w	r9, r9, #31
 80076c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80076cc:	d02f      	beq.n	800772e <__lshift+0xc6>
 80076ce:	468a      	mov	sl, r1
 80076d0:	f04f 0c00 	mov.w	ip, #0
 80076d4:	f1c9 0e20 	rsb	lr, r9, #32
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	fa02 f209 	lsl.w	r2, r2, r9
 80076de:	ea42 020c 	orr.w	r2, r2, ip
 80076e2:	f84a 2b04 	str.w	r2, [sl], #4
 80076e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076ea:	4298      	cmp	r0, r3
 80076ec:	fa22 fc0e 	lsr.w	ip, r2, lr
 80076f0:	d8f2      	bhi.n	80076d8 <__lshift+0x70>
 80076f2:	1b03      	subs	r3, r0, r4
 80076f4:	3b15      	subs	r3, #21
 80076f6:	f023 0303 	bic.w	r3, r3, #3
 80076fa:	3304      	adds	r3, #4
 80076fc:	f104 0215 	add.w	r2, r4, #21
 8007700:	4290      	cmp	r0, r2
 8007702:	bf38      	it	cc
 8007704:	2304      	movcc	r3, #4
 8007706:	f841 c003 	str.w	ip, [r1, r3]
 800770a:	f1bc 0f00 	cmp.w	ip, #0
 800770e:	d001      	beq.n	8007714 <__lshift+0xac>
 8007710:	f108 0602 	add.w	r6, r8, #2
 8007714:	3e01      	subs	r6, #1
 8007716:	4638      	mov	r0, r7
 8007718:	4621      	mov	r1, r4
 800771a:	612e      	str	r6, [r5, #16]
 800771c:	f7ff fdd6 	bl	80072cc <_Bfree>
 8007720:	4628      	mov	r0, r5
 8007722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007726:	f842 0f04 	str.w	r0, [r2, #4]!
 800772a:	3301      	adds	r3, #1
 800772c:	e7c1      	b.n	80076b2 <__lshift+0x4a>
 800772e:	3904      	subs	r1, #4
 8007730:	f853 2b04 	ldr.w	r2, [r3], #4
 8007734:	4298      	cmp	r0, r3
 8007736:	f841 2f04 	str.w	r2, [r1, #4]!
 800773a:	d8f9      	bhi.n	8007730 <__lshift+0xc8>
 800773c:	e7ea      	b.n	8007714 <__lshift+0xac>
 800773e:	bf00      	nop
 8007740:	080083c3 	.word	0x080083c3
 8007744:	08008434 	.word	0x08008434

08007748 <__mcmp>:
 8007748:	4603      	mov	r3, r0
 800774a:	690a      	ldr	r2, [r1, #16]
 800774c:	6900      	ldr	r0, [r0, #16]
 800774e:	b530      	push	{r4, r5, lr}
 8007750:	1a80      	subs	r0, r0, r2
 8007752:	d10d      	bne.n	8007770 <__mcmp+0x28>
 8007754:	3314      	adds	r3, #20
 8007756:	3114      	adds	r1, #20
 8007758:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800775c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007760:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007764:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007768:	4295      	cmp	r5, r2
 800776a:	d002      	beq.n	8007772 <__mcmp+0x2a>
 800776c:	d304      	bcc.n	8007778 <__mcmp+0x30>
 800776e:	2001      	movs	r0, #1
 8007770:	bd30      	pop	{r4, r5, pc}
 8007772:	42a3      	cmp	r3, r4
 8007774:	d3f4      	bcc.n	8007760 <__mcmp+0x18>
 8007776:	e7fb      	b.n	8007770 <__mcmp+0x28>
 8007778:	f04f 30ff 	mov.w	r0, #4294967295
 800777c:	e7f8      	b.n	8007770 <__mcmp+0x28>
	...

08007780 <__mdiff>:
 8007780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007784:	460d      	mov	r5, r1
 8007786:	4607      	mov	r7, r0
 8007788:	4611      	mov	r1, r2
 800778a:	4628      	mov	r0, r5
 800778c:	4614      	mov	r4, r2
 800778e:	f7ff ffdb 	bl	8007748 <__mcmp>
 8007792:	1e06      	subs	r6, r0, #0
 8007794:	d111      	bne.n	80077ba <__mdiff+0x3a>
 8007796:	4631      	mov	r1, r6
 8007798:	4638      	mov	r0, r7
 800779a:	f7ff fd57 	bl	800724c <_Balloc>
 800779e:	4602      	mov	r2, r0
 80077a0:	b928      	cbnz	r0, 80077ae <__mdiff+0x2e>
 80077a2:	f240 2132 	movw	r1, #562	; 0x232
 80077a6:	4b3a      	ldr	r3, [pc, #232]	; (8007890 <__mdiff+0x110>)
 80077a8:	483a      	ldr	r0, [pc, #232]	; (8007894 <__mdiff+0x114>)
 80077aa:	f000 fb7f 	bl	8007eac <__assert_func>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077b4:	4610      	mov	r0, r2
 80077b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	bfa4      	itt	ge
 80077bc:	4623      	movge	r3, r4
 80077be:	462c      	movge	r4, r5
 80077c0:	4638      	mov	r0, r7
 80077c2:	6861      	ldr	r1, [r4, #4]
 80077c4:	bfa6      	itte	ge
 80077c6:	461d      	movge	r5, r3
 80077c8:	2600      	movge	r6, #0
 80077ca:	2601      	movlt	r6, #1
 80077cc:	f7ff fd3e 	bl	800724c <_Balloc>
 80077d0:	4602      	mov	r2, r0
 80077d2:	b918      	cbnz	r0, 80077dc <__mdiff+0x5c>
 80077d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077d8:	4b2d      	ldr	r3, [pc, #180]	; (8007890 <__mdiff+0x110>)
 80077da:	e7e5      	b.n	80077a8 <__mdiff+0x28>
 80077dc:	f102 0814 	add.w	r8, r2, #20
 80077e0:	46c2      	mov	sl, r8
 80077e2:	f04f 0c00 	mov.w	ip, #0
 80077e6:	6927      	ldr	r7, [r4, #16]
 80077e8:	60c6      	str	r6, [r0, #12]
 80077ea:	692e      	ldr	r6, [r5, #16]
 80077ec:	f104 0014 	add.w	r0, r4, #20
 80077f0:	f105 0914 	add.w	r9, r5, #20
 80077f4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80077f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077fc:	3410      	adds	r4, #16
 80077fe:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007802:	f859 3b04 	ldr.w	r3, [r9], #4
 8007806:	fa1f f18b 	uxth.w	r1, fp
 800780a:	448c      	add	ip, r1
 800780c:	b299      	uxth	r1, r3
 800780e:	0c1b      	lsrs	r3, r3, #16
 8007810:	ebac 0101 	sub.w	r1, ip, r1
 8007814:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007818:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800781c:	b289      	uxth	r1, r1
 800781e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007822:	454e      	cmp	r6, r9
 8007824:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007828:	f84a 3b04 	str.w	r3, [sl], #4
 800782c:	d8e7      	bhi.n	80077fe <__mdiff+0x7e>
 800782e:	1b73      	subs	r3, r6, r5
 8007830:	3b15      	subs	r3, #21
 8007832:	f023 0303 	bic.w	r3, r3, #3
 8007836:	3515      	adds	r5, #21
 8007838:	3304      	adds	r3, #4
 800783a:	42ae      	cmp	r6, r5
 800783c:	bf38      	it	cc
 800783e:	2304      	movcc	r3, #4
 8007840:	4418      	add	r0, r3
 8007842:	4443      	add	r3, r8
 8007844:	461e      	mov	r6, r3
 8007846:	4605      	mov	r5, r0
 8007848:	4575      	cmp	r5, lr
 800784a:	d30e      	bcc.n	800786a <__mdiff+0xea>
 800784c:	f10e 0103 	add.w	r1, lr, #3
 8007850:	1a09      	subs	r1, r1, r0
 8007852:	f021 0103 	bic.w	r1, r1, #3
 8007856:	3803      	subs	r0, #3
 8007858:	4586      	cmp	lr, r0
 800785a:	bf38      	it	cc
 800785c:	2100      	movcc	r1, #0
 800785e:	4419      	add	r1, r3
 8007860:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007864:	b18b      	cbz	r3, 800788a <__mdiff+0x10a>
 8007866:	6117      	str	r7, [r2, #16]
 8007868:	e7a4      	b.n	80077b4 <__mdiff+0x34>
 800786a:	f855 8b04 	ldr.w	r8, [r5], #4
 800786e:	fa1f f188 	uxth.w	r1, r8
 8007872:	4461      	add	r1, ip
 8007874:	140c      	asrs	r4, r1, #16
 8007876:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800787a:	b289      	uxth	r1, r1
 800787c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007880:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007884:	f846 1b04 	str.w	r1, [r6], #4
 8007888:	e7de      	b.n	8007848 <__mdiff+0xc8>
 800788a:	3f01      	subs	r7, #1
 800788c:	e7e8      	b.n	8007860 <__mdiff+0xe0>
 800788e:	bf00      	nop
 8007890:	080083c3 	.word	0x080083c3
 8007894:	08008434 	.word	0x08008434

08007898 <__d2b>:
 8007898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800789c:	2101      	movs	r1, #1
 800789e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80078a2:	4690      	mov	r8, r2
 80078a4:	461d      	mov	r5, r3
 80078a6:	f7ff fcd1 	bl	800724c <_Balloc>
 80078aa:	4604      	mov	r4, r0
 80078ac:	b930      	cbnz	r0, 80078bc <__d2b+0x24>
 80078ae:	4602      	mov	r2, r0
 80078b0:	f240 310a 	movw	r1, #778	; 0x30a
 80078b4:	4b24      	ldr	r3, [pc, #144]	; (8007948 <__d2b+0xb0>)
 80078b6:	4825      	ldr	r0, [pc, #148]	; (800794c <__d2b+0xb4>)
 80078b8:	f000 faf8 	bl	8007eac <__assert_func>
 80078bc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80078c0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80078c4:	bb2d      	cbnz	r5, 8007912 <__d2b+0x7a>
 80078c6:	9301      	str	r3, [sp, #4]
 80078c8:	f1b8 0300 	subs.w	r3, r8, #0
 80078cc:	d026      	beq.n	800791c <__d2b+0x84>
 80078ce:	4668      	mov	r0, sp
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	f7ff fd83 	bl	80073dc <__lo0bits>
 80078d6:	9900      	ldr	r1, [sp, #0]
 80078d8:	b1f0      	cbz	r0, 8007918 <__d2b+0x80>
 80078da:	9a01      	ldr	r2, [sp, #4]
 80078dc:	f1c0 0320 	rsb	r3, r0, #32
 80078e0:	fa02 f303 	lsl.w	r3, r2, r3
 80078e4:	430b      	orrs	r3, r1
 80078e6:	40c2      	lsrs	r2, r0
 80078e8:	6163      	str	r3, [r4, #20]
 80078ea:	9201      	str	r2, [sp, #4]
 80078ec:	9b01      	ldr	r3, [sp, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2102      	movne	r1, #2
 80078f4:	2101      	moveq	r1, #1
 80078f6:	61a3      	str	r3, [r4, #24]
 80078f8:	6121      	str	r1, [r4, #16]
 80078fa:	b1c5      	cbz	r5, 800792e <__d2b+0x96>
 80078fc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007900:	4405      	add	r5, r0
 8007902:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007906:	603d      	str	r5, [r7, #0]
 8007908:	6030      	str	r0, [r6, #0]
 800790a:	4620      	mov	r0, r4
 800790c:	b002      	add	sp, #8
 800790e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007916:	e7d6      	b.n	80078c6 <__d2b+0x2e>
 8007918:	6161      	str	r1, [r4, #20]
 800791a:	e7e7      	b.n	80078ec <__d2b+0x54>
 800791c:	a801      	add	r0, sp, #4
 800791e:	f7ff fd5d 	bl	80073dc <__lo0bits>
 8007922:	2101      	movs	r1, #1
 8007924:	9b01      	ldr	r3, [sp, #4]
 8007926:	6121      	str	r1, [r4, #16]
 8007928:	6163      	str	r3, [r4, #20]
 800792a:	3020      	adds	r0, #32
 800792c:	e7e5      	b.n	80078fa <__d2b+0x62>
 800792e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8007932:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007936:	6038      	str	r0, [r7, #0]
 8007938:	6918      	ldr	r0, [r3, #16]
 800793a:	f7ff fd2f 	bl	800739c <__hi0bits>
 800793e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8007942:	6031      	str	r1, [r6, #0]
 8007944:	e7e1      	b.n	800790a <__d2b+0x72>
 8007946:	bf00      	nop
 8007948:	080083c3 	.word	0x080083c3
 800794c:	08008434 	.word	0x08008434

08007950 <_calloc_r>:
 8007950:	b570      	push	{r4, r5, r6, lr}
 8007952:	fba1 5402 	umull	r5, r4, r1, r2
 8007956:	b934      	cbnz	r4, 8007966 <_calloc_r+0x16>
 8007958:	4629      	mov	r1, r5
 800795a:	f000 f875 	bl	8007a48 <_malloc_r>
 800795e:	4606      	mov	r6, r0
 8007960:	b928      	cbnz	r0, 800796e <_calloc_r+0x1e>
 8007962:	4630      	mov	r0, r6
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	220c      	movs	r2, #12
 8007968:	2600      	movs	r6, #0
 800796a:	6002      	str	r2, [r0, #0]
 800796c:	e7f9      	b.n	8007962 <_calloc_r+0x12>
 800796e:	462a      	mov	r2, r5
 8007970:	4621      	mov	r1, r4
 8007972:	f7fd fdf7 	bl	8005564 <memset>
 8007976:	e7f4      	b.n	8007962 <_calloc_r+0x12>

08007978 <_free_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	2900      	cmp	r1, #0
 800797e:	d040      	beq.n	8007a02 <_free_r+0x8a>
 8007980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007984:	1f0c      	subs	r4, r1, #4
 8007986:	2b00      	cmp	r3, #0
 8007988:	bfb8      	it	lt
 800798a:	18e4      	addlt	r4, r4, r3
 800798c:	f000 fb14 	bl	8007fb8 <__malloc_lock>
 8007990:	4a1c      	ldr	r2, [pc, #112]	; (8007a04 <_free_r+0x8c>)
 8007992:	6813      	ldr	r3, [r2, #0]
 8007994:	b933      	cbnz	r3, 80079a4 <_free_r+0x2c>
 8007996:	6063      	str	r3, [r4, #4]
 8007998:	6014      	str	r4, [r2, #0]
 800799a:	4628      	mov	r0, r5
 800799c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079a0:	f000 bb10 	b.w	8007fc4 <__malloc_unlock>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d908      	bls.n	80079ba <_free_r+0x42>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	1821      	adds	r1, r4, r0
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf01      	itttt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	1809      	addeq	r1, r1, r0
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	e7ed      	b.n	8007996 <_free_r+0x1e>
 80079ba:	461a      	mov	r2, r3
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	b10b      	cbz	r3, 80079c4 <_free_r+0x4c>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d9fa      	bls.n	80079ba <_free_r+0x42>
 80079c4:	6811      	ldr	r1, [r2, #0]
 80079c6:	1850      	adds	r0, r2, r1
 80079c8:	42a0      	cmp	r0, r4
 80079ca:	d10b      	bne.n	80079e4 <_free_r+0x6c>
 80079cc:	6820      	ldr	r0, [r4, #0]
 80079ce:	4401      	add	r1, r0
 80079d0:	1850      	adds	r0, r2, r1
 80079d2:	4283      	cmp	r3, r0
 80079d4:	6011      	str	r1, [r2, #0]
 80079d6:	d1e0      	bne.n	800799a <_free_r+0x22>
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	4401      	add	r1, r0
 80079de:	6011      	str	r1, [r2, #0]
 80079e0:	6053      	str	r3, [r2, #4]
 80079e2:	e7da      	b.n	800799a <_free_r+0x22>
 80079e4:	d902      	bls.n	80079ec <_free_r+0x74>
 80079e6:	230c      	movs	r3, #12
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	e7d6      	b.n	800799a <_free_r+0x22>
 80079ec:	6820      	ldr	r0, [r4, #0]
 80079ee:	1821      	adds	r1, r4, r0
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf01      	itttt	eq
 80079f4:	6819      	ldreq	r1, [r3, #0]
 80079f6:	685b      	ldreq	r3, [r3, #4]
 80079f8:	1809      	addeq	r1, r1, r0
 80079fa:	6021      	streq	r1, [r4, #0]
 80079fc:	6063      	str	r3, [r4, #4]
 80079fe:	6054      	str	r4, [r2, #4]
 8007a00:	e7cb      	b.n	800799a <_free_r+0x22>
 8007a02:	bd38      	pop	{r3, r4, r5, pc}
 8007a04:	20000c2c 	.word	0x20000c2c

08007a08 <sbrk_aligned>:
 8007a08:	b570      	push	{r4, r5, r6, lr}
 8007a0a:	4e0e      	ldr	r6, [pc, #56]	; (8007a44 <sbrk_aligned+0x3c>)
 8007a0c:	460c      	mov	r4, r1
 8007a0e:	6831      	ldr	r1, [r6, #0]
 8007a10:	4605      	mov	r5, r0
 8007a12:	b911      	cbnz	r1, 8007a1a <sbrk_aligned+0x12>
 8007a14:	f000 f9e4 	bl	8007de0 <_sbrk_r>
 8007a18:	6030      	str	r0, [r6, #0]
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	4628      	mov	r0, r5
 8007a1e:	f000 f9df 	bl	8007de0 <_sbrk_r>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	d00a      	beq.n	8007a3c <sbrk_aligned+0x34>
 8007a26:	1cc4      	adds	r4, r0, #3
 8007a28:	f024 0403 	bic.w	r4, r4, #3
 8007a2c:	42a0      	cmp	r0, r4
 8007a2e:	d007      	beq.n	8007a40 <sbrk_aligned+0x38>
 8007a30:	1a21      	subs	r1, r4, r0
 8007a32:	4628      	mov	r0, r5
 8007a34:	f000 f9d4 	bl	8007de0 <_sbrk_r>
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d101      	bne.n	8007a40 <sbrk_aligned+0x38>
 8007a3c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a40:	4620      	mov	r0, r4
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
 8007a44:	20000c30 	.word	0x20000c30

08007a48 <_malloc_r>:
 8007a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4c:	1ccd      	adds	r5, r1, #3
 8007a4e:	f025 0503 	bic.w	r5, r5, #3
 8007a52:	3508      	adds	r5, #8
 8007a54:	2d0c      	cmp	r5, #12
 8007a56:	bf38      	it	cc
 8007a58:	250c      	movcc	r5, #12
 8007a5a:	2d00      	cmp	r5, #0
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	db01      	blt.n	8007a64 <_malloc_r+0x1c>
 8007a60:	42a9      	cmp	r1, r5
 8007a62:	d905      	bls.n	8007a70 <_malloc_r+0x28>
 8007a64:	230c      	movs	r3, #12
 8007a66:	2600      	movs	r6, #0
 8007a68:	603b      	str	r3, [r7, #0]
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a70:	4e2e      	ldr	r6, [pc, #184]	; (8007b2c <_malloc_r+0xe4>)
 8007a72:	f000 faa1 	bl	8007fb8 <__malloc_lock>
 8007a76:	6833      	ldr	r3, [r6, #0]
 8007a78:	461c      	mov	r4, r3
 8007a7a:	bb34      	cbnz	r4, 8007aca <_malloc_r+0x82>
 8007a7c:	4629      	mov	r1, r5
 8007a7e:	4638      	mov	r0, r7
 8007a80:	f7ff ffc2 	bl	8007a08 <sbrk_aligned>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	4604      	mov	r4, r0
 8007a88:	d14d      	bne.n	8007b26 <_malloc_r+0xde>
 8007a8a:	6834      	ldr	r4, [r6, #0]
 8007a8c:	4626      	mov	r6, r4
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	d140      	bne.n	8007b14 <_malloc_r+0xcc>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	4631      	mov	r1, r6
 8007a96:	4638      	mov	r0, r7
 8007a98:	eb04 0803 	add.w	r8, r4, r3
 8007a9c:	f000 f9a0 	bl	8007de0 <_sbrk_r>
 8007aa0:	4580      	cmp	r8, r0
 8007aa2:	d13a      	bne.n	8007b1a <_malloc_r+0xd2>
 8007aa4:	6821      	ldr	r1, [r4, #0]
 8007aa6:	3503      	adds	r5, #3
 8007aa8:	1a6d      	subs	r5, r5, r1
 8007aaa:	f025 0503 	bic.w	r5, r5, #3
 8007aae:	3508      	adds	r5, #8
 8007ab0:	2d0c      	cmp	r5, #12
 8007ab2:	bf38      	it	cc
 8007ab4:	250c      	movcc	r5, #12
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	4629      	mov	r1, r5
 8007aba:	f7ff ffa5 	bl	8007a08 <sbrk_aligned>
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d02b      	beq.n	8007b1a <_malloc_r+0xd2>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	442b      	add	r3, r5
 8007ac6:	6023      	str	r3, [r4, #0]
 8007ac8:	e00e      	b.n	8007ae8 <_malloc_r+0xa0>
 8007aca:	6822      	ldr	r2, [r4, #0]
 8007acc:	1b52      	subs	r2, r2, r5
 8007ace:	d41e      	bmi.n	8007b0e <_malloc_r+0xc6>
 8007ad0:	2a0b      	cmp	r2, #11
 8007ad2:	d916      	bls.n	8007b02 <_malloc_r+0xba>
 8007ad4:	1961      	adds	r1, r4, r5
 8007ad6:	42a3      	cmp	r3, r4
 8007ad8:	6025      	str	r5, [r4, #0]
 8007ada:	bf18      	it	ne
 8007adc:	6059      	strne	r1, [r3, #4]
 8007ade:	6863      	ldr	r3, [r4, #4]
 8007ae0:	bf08      	it	eq
 8007ae2:	6031      	streq	r1, [r6, #0]
 8007ae4:	5162      	str	r2, [r4, r5]
 8007ae6:	604b      	str	r3, [r1, #4]
 8007ae8:	4638      	mov	r0, r7
 8007aea:	f104 060b 	add.w	r6, r4, #11
 8007aee:	f000 fa69 	bl	8007fc4 <__malloc_unlock>
 8007af2:	f026 0607 	bic.w	r6, r6, #7
 8007af6:	1d23      	adds	r3, r4, #4
 8007af8:	1af2      	subs	r2, r6, r3
 8007afa:	d0b6      	beq.n	8007a6a <_malloc_r+0x22>
 8007afc:	1b9b      	subs	r3, r3, r6
 8007afe:	50a3      	str	r3, [r4, r2]
 8007b00:	e7b3      	b.n	8007a6a <_malloc_r+0x22>
 8007b02:	6862      	ldr	r2, [r4, #4]
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	bf0c      	ite	eq
 8007b08:	6032      	streq	r2, [r6, #0]
 8007b0a:	605a      	strne	r2, [r3, #4]
 8007b0c:	e7ec      	b.n	8007ae8 <_malloc_r+0xa0>
 8007b0e:	4623      	mov	r3, r4
 8007b10:	6864      	ldr	r4, [r4, #4]
 8007b12:	e7b2      	b.n	8007a7a <_malloc_r+0x32>
 8007b14:	4634      	mov	r4, r6
 8007b16:	6876      	ldr	r6, [r6, #4]
 8007b18:	e7b9      	b.n	8007a8e <_malloc_r+0x46>
 8007b1a:	230c      	movs	r3, #12
 8007b1c:	4638      	mov	r0, r7
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	f000 fa50 	bl	8007fc4 <__malloc_unlock>
 8007b24:	e7a1      	b.n	8007a6a <_malloc_r+0x22>
 8007b26:	6025      	str	r5, [r4, #0]
 8007b28:	e7de      	b.n	8007ae8 <_malloc_r+0xa0>
 8007b2a:	bf00      	nop
 8007b2c:	20000c2c 	.word	0x20000c2c

08007b30 <__sfputc_r>:
 8007b30:	6893      	ldr	r3, [r2, #8]
 8007b32:	b410      	push	{r4}
 8007b34:	3b01      	subs	r3, #1
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	6093      	str	r3, [r2, #8]
 8007b3a:	da07      	bge.n	8007b4c <__sfputc_r+0x1c>
 8007b3c:	6994      	ldr	r4, [r2, #24]
 8007b3e:	42a3      	cmp	r3, r4
 8007b40:	db01      	blt.n	8007b46 <__sfputc_r+0x16>
 8007b42:	290a      	cmp	r1, #10
 8007b44:	d102      	bne.n	8007b4c <__sfputc_r+0x1c>
 8007b46:	bc10      	pop	{r4}
 8007b48:	f7fe ba02 	b.w	8005f50 <__swbuf_r>
 8007b4c:	6813      	ldr	r3, [r2, #0]
 8007b4e:	1c58      	adds	r0, r3, #1
 8007b50:	6010      	str	r0, [r2, #0]
 8007b52:	7019      	strb	r1, [r3, #0]
 8007b54:	4608      	mov	r0, r1
 8007b56:	bc10      	pop	{r4}
 8007b58:	4770      	bx	lr

08007b5a <__sfputs_r>:
 8007b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b5c:	4606      	mov	r6, r0
 8007b5e:	460f      	mov	r7, r1
 8007b60:	4614      	mov	r4, r2
 8007b62:	18d5      	adds	r5, r2, r3
 8007b64:	42ac      	cmp	r4, r5
 8007b66:	d101      	bne.n	8007b6c <__sfputs_r+0x12>
 8007b68:	2000      	movs	r0, #0
 8007b6a:	e007      	b.n	8007b7c <__sfputs_r+0x22>
 8007b6c:	463a      	mov	r2, r7
 8007b6e:	4630      	mov	r0, r6
 8007b70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b74:	f7ff ffdc 	bl	8007b30 <__sfputc_r>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d1f3      	bne.n	8007b64 <__sfputs_r+0xa>
 8007b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b80 <_vfiprintf_r>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	460d      	mov	r5, r1
 8007b86:	4614      	mov	r4, r2
 8007b88:	4698      	mov	r8, r3
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	b09d      	sub	sp, #116	; 0x74
 8007b8e:	b118      	cbz	r0, 8007b98 <_vfiprintf_r+0x18>
 8007b90:	6983      	ldr	r3, [r0, #24]
 8007b92:	b90b      	cbnz	r3, 8007b98 <_vfiprintf_r+0x18>
 8007b94:	f7ff fa2c 	bl	8006ff0 <__sinit>
 8007b98:	4b89      	ldr	r3, [pc, #548]	; (8007dc0 <_vfiprintf_r+0x240>)
 8007b9a:	429d      	cmp	r5, r3
 8007b9c:	d11b      	bne.n	8007bd6 <_vfiprintf_r+0x56>
 8007b9e:	6875      	ldr	r5, [r6, #4]
 8007ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ba2:	07d9      	lsls	r1, r3, #31
 8007ba4:	d405      	bmi.n	8007bb2 <_vfiprintf_r+0x32>
 8007ba6:	89ab      	ldrh	r3, [r5, #12]
 8007ba8:	059a      	lsls	r2, r3, #22
 8007baa:	d402      	bmi.n	8007bb2 <_vfiprintf_r+0x32>
 8007bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bae:	f7ff fac2 	bl	8007136 <__retarget_lock_acquire_recursive>
 8007bb2:	89ab      	ldrh	r3, [r5, #12]
 8007bb4:	071b      	lsls	r3, r3, #28
 8007bb6:	d501      	bpl.n	8007bbc <_vfiprintf_r+0x3c>
 8007bb8:	692b      	ldr	r3, [r5, #16]
 8007bba:	b9eb      	cbnz	r3, 8007bf8 <_vfiprintf_r+0x78>
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7fe fa18 	bl	8005ff4 <__swsetup_r>
 8007bc4:	b1c0      	cbz	r0, 8007bf8 <_vfiprintf_r+0x78>
 8007bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bc8:	07dc      	lsls	r4, r3, #31
 8007bca:	d50e      	bpl.n	8007bea <_vfiprintf_r+0x6a>
 8007bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd0:	b01d      	add	sp, #116	; 0x74
 8007bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd6:	4b7b      	ldr	r3, [pc, #492]	; (8007dc4 <_vfiprintf_r+0x244>)
 8007bd8:	429d      	cmp	r5, r3
 8007bda:	d101      	bne.n	8007be0 <_vfiprintf_r+0x60>
 8007bdc:	68b5      	ldr	r5, [r6, #8]
 8007bde:	e7df      	b.n	8007ba0 <_vfiprintf_r+0x20>
 8007be0:	4b79      	ldr	r3, [pc, #484]	; (8007dc8 <_vfiprintf_r+0x248>)
 8007be2:	429d      	cmp	r5, r3
 8007be4:	bf08      	it	eq
 8007be6:	68f5      	ldreq	r5, [r6, #12]
 8007be8:	e7da      	b.n	8007ba0 <_vfiprintf_r+0x20>
 8007bea:	89ab      	ldrh	r3, [r5, #12]
 8007bec:	0598      	lsls	r0, r3, #22
 8007bee:	d4ed      	bmi.n	8007bcc <_vfiprintf_r+0x4c>
 8007bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bf2:	f7ff faa1 	bl	8007138 <__retarget_lock_release_recursive>
 8007bf6:	e7e9      	b.n	8007bcc <_vfiprintf_r+0x4c>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfc:	2320      	movs	r3, #32
 8007bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c02:	2330      	movs	r3, #48	; 0x30
 8007c04:	f04f 0901 	mov.w	r9, #1
 8007c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007dcc <_vfiprintf_r+0x24c>
 8007c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c14:	4623      	mov	r3, r4
 8007c16:	469a      	mov	sl, r3
 8007c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c1c:	b10a      	cbz	r2, 8007c22 <_vfiprintf_r+0xa2>
 8007c1e:	2a25      	cmp	r2, #37	; 0x25
 8007c20:	d1f9      	bne.n	8007c16 <_vfiprintf_r+0x96>
 8007c22:	ebba 0b04 	subs.w	fp, sl, r4
 8007c26:	d00b      	beq.n	8007c40 <_vfiprintf_r+0xc0>
 8007c28:	465b      	mov	r3, fp
 8007c2a:	4622      	mov	r2, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f7ff ff93 	bl	8007b5a <__sfputs_r>
 8007c34:	3001      	adds	r0, #1
 8007c36:	f000 80aa 	beq.w	8007d8e <_vfiprintf_r+0x20e>
 8007c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c3c:	445a      	add	r2, fp
 8007c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c40:	f89a 3000 	ldrb.w	r3, [sl]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 80a2 	beq.w	8007d8e <_vfiprintf_r+0x20e>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c54:	f10a 0a01 	add.w	sl, sl, #1
 8007c58:	9304      	str	r3, [sp, #16]
 8007c5a:	9307      	str	r3, [sp, #28]
 8007c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c60:	931a      	str	r3, [sp, #104]	; 0x68
 8007c62:	4654      	mov	r4, sl
 8007c64:	2205      	movs	r2, #5
 8007c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c6a:	4858      	ldr	r0, [pc, #352]	; (8007dcc <_vfiprintf_r+0x24c>)
 8007c6c:	f7ff fad2 	bl	8007214 <memchr>
 8007c70:	9a04      	ldr	r2, [sp, #16]
 8007c72:	b9d8      	cbnz	r0, 8007cac <_vfiprintf_r+0x12c>
 8007c74:	06d1      	lsls	r1, r2, #27
 8007c76:	bf44      	itt	mi
 8007c78:	2320      	movmi	r3, #32
 8007c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c7e:	0713      	lsls	r3, r2, #28
 8007c80:	bf44      	itt	mi
 8007c82:	232b      	movmi	r3, #43	; 0x2b
 8007c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c88:	f89a 3000 	ldrb.w	r3, [sl]
 8007c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c8e:	d015      	beq.n	8007cbc <_vfiprintf_r+0x13c>
 8007c90:	4654      	mov	r4, sl
 8007c92:	2000      	movs	r0, #0
 8007c94:	f04f 0c0a 	mov.w	ip, #10
 8007c98:	9a07      	ldr	r2, [sp, #28]
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ca0:	3b30      	subs	r3, #48	; 0x30
 8007ca2:	2b09      	cmp	r3, #9
 8007ca4:	d94e      	bls.n	8007d44 <_vfiprintf_r+0x1c4>
 8007ca6:	b1b0      	cbz	r0, 8007cd6 <_vfiprintf_r+0x156>
 8007ca8:	9207      	str	r2, [sp, #28]
 8007caa:	e014      	b.n	8007cd6 <_vfiprintf_r+0x156>
 8007cac:	eba0 0308 	sub.w	r3, r0, r8
 8007cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	46a2      	mov	sl, r4
 8007cb8:	9304      	str	r3, [sp, #16]
 8007cba:	e7d2      	b.n	8007c62 <_vfiprintf_r+0xe2>
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	1d19      	adds	r1, r3, #4
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	9103      	str	r1, [sp, #12]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bfbb      	ittet	lt
 8007cc8:	425b      	neglt	r3, r3
 8007cca:	f042 0202 	orrlt.w	r2, r2, #2
 8007cce:	9307      	strge	r3, [sp, #28]
 8007cd0:	9307      	strlt	r3, [sp, #28]
 8007cd2:	bfb8      	it	lt
 8007cd4:	9204      	strlt	r2, [sp, #16]
 8007cd6:	7823      	ldrb	r3, [r4, #0]
 8007cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cda:	d10c      	bne.n	8007cf6 <_vfiprintf_r+0x176>
 8007cdc:	7863      	ldrb	r3, [r4, #1]
 8007cde:	2b2a      	cmp	r3, #42	; 0x2a
 8007ce0:	d135      	bne.n	8007d4e <_vfiprintf_r+0x1ce>
 8007ce2:	9b03      	ldr	r3, [sp, #12]
 8007ce4:	3402      	adds	r4, #2
 8007ce6:	1d1a      	adds	r2, r3, #4
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	9203      	str	r2, [sp, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	bfb8      	it	lt
 8007cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cf4:	9305      	str	r3, [sp, #20]
 8007cf6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007dd0 <_vfiprintf_r+0x250>
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	4650      	mov	r0, sl
 8007cfe:	7821      	ldrb	r1, [r4, #0]
 8007d00:	f7ff fa88 	bl	8007214 <memchr>
 8007d04:	b140      	cbz	r0, 8007d18 <_vfiprintf_r+0x198>
 8007d06:	2340      	movs	r3, #64	; 0x40
 8007d08:	eba0 000a 	sub.w	r0, r0, sl
 8007d0c:	fa03 f000 	lsl.w	r0, r3, r0
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	3401      	adds	r4, #1
 8007d14:	4303      	orrs	r3, r0
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d1c:	2206      	movs	r2, #6
 8007d1e:	482d      	ldr	r0, [pc, #180]	; (8007dd4 <_vfiprintf_r+0x254>)
 8007d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d24:	f7ff fa76 	bl	8007214 <memchr>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	d03f      	beq.n	8007dac <_vfiprintf_r+0x22c>
 8007d2c:	4b2a      	ldr	r3, [pc, #168]	; (8007dd8 <_vfiprintf_r+0x258>)
 8007d2e:	bb1b      	cbnz	r3, 8007d78 <_vfiprintf_r+0x1f8>
 8007d30:	9b03      	ldr	r3, [sp, #12]
 8007d32:	3307      	adds	r3, #7
 8007d34:	f023 0307 	bic.w	r3, r3, #7
 8007d38:	3308      	adds	r3, #8
 8007d3a:	9303      	str	r3, [sp, #12]
 8007d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d3e:	443b      	add	r3, r7
 8007d40:	9309      	str	r3, [sp, #36]	; 0x24
 8007d42:	e767      	b.n	8007c14 <_vfiprintf_r+0x94>
 8007d44:	460c      	mov	r4, r1
 8007d46:	2001      	movs	r0, #1
 8007d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d4c:	e7a5      	b.n	8007c9a <_vfiprintf_r+0x11a>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f04f 0c0a 	mov.w	ip, #10
 8007d54:	4619      	mov	r1, r3
 8007d56:	3401      	adds	r4, #1
 8007d58:	9305      	str	r3, [sp, #20]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d60:	3a30      	subs	r2, #48	; 0x30
 8007d62:	2a09      	cmp	r2, #9
 8007d64:	d903      	bls.n	8007d6e <_vfiprintf_r+0x1ee>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0c5      	beq.n	8007cf6 <_vfiprintf_r+0x176>
 8007d6a:	9105      	str	r1, [sp, #20]
 8007d6c:	e7c3      	b.n	8007cf6 <_vfiprintf_r+0x176>
 8007d6e:	4604      	mov	r4, r0
 8007d70:	2301      	movs	r3, #1
 8007d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d76:	e7f0      	b.n	8007d5a <_vfiprintf_r+0x1da>
 8007d78:	ab03      	add	r3, sp, #12
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	462a      	mov	r2, r5
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <_vfiprintf_r+0x25c>)
 8007d82:	a904      	add	r1, sp, #16
 8007d84:	f7fd fc94 	bl	80056b0 <_printf_float>
 8007d88:	4607      	mov	r7, r0
 8007d8a:	1c78      	adds	r0, r7, #1
 8007d8c:	d1d6      	bne.n	8007d3c <_vfiprintf_r+0x1bc>
 8007d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d90:	07d9      	lsls	r1, r3, #31
 8007d92:	d405      	bmi.n	8007da0 <_vfiprintf_r+0x220>
 8007d94:	89ab      	ldrh	r3, [r5, #12]
 8007d96:	059a      	lsls	r2, r3, #22
 8007d98:	d402      	bmi.n	8007da0 <_vfiprintf_r+0x220>
 8007d9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d9c:	f7ff f9cc 	bl	8007138 <__retarget_lock_release_recursive>
 8007da0:	89ab      	ldrh	r3, [r5, #12]
 8007da2:	065b      	lsls	r3, r3, #25
 8007da4:	f53f af12 	bmi.w	8007bcc <_vfiprintf_r+0x4c>
 8007da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007daa:	e711      	b.n	8007bd0 <_vfiprintf_r+0x50>
 8007dac:	ab03      	add	r3, sp, #12
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	462a      	mov	r2, r5
 8007db2:	4630      	mov	r0, r6
 8007db4:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <_vfiprintf_r+0x25c>)
 8007db6:	a904      	add	r1, sp, #16
 8007db8:	f7fd ff16 	bl	8005be8 <_printf_i>
 8007dbc:	e7e4      	b.n	8007d88 <_vfiprintf_r+0x208>
 8007dbe:	bf00      	nop
 8007dc0:	080083f4 	.word	0x080083f4
 8007dc4:	08008414 	.word	0x08008414
 8007dc8:	080083d4 	.word	0x080083d4
 8007dcc:	0800858c 	.word	0x0800858c
 8007dd0:	08008592 	.word	0x08008592
 8007dd4:	08008596 	.word	0x08008596
 8007dd8:	080056b1 	.word	0x080056b1
 8007ddc:	08007b5b 	.word	0x08007b5b

08007de0 <_sbrk_r>:
 8007de0:	b538      	push	{r3, r4, r5, lr}
 8007de2:	2300      	movs	r3, #0
 8007de4:	4d05      	ldr	r5, [pc, #20]	; (8007dfc <_sbrk_r+0x1c>)
 8007de6:	4604      	mov	r4, r0
 8007de8:	4608      	mov	r0, r1
 8007dea:	602b      	str	r3, [r5, #0]
 8007dec:	f7fa fbe0 	bl	80025b0 <_sbrk>
 8007df0:	1c43      	adds	r3, r0, #1
 8007df2:	d102      	bne.n	8007dfa <_sbrk_r+0x1a>
 8007df4:	682b      	ldr	r3, [r5, #0]
 8007df6:	b103      	cbz	r3, 8007dfa <_sbrk_r+0x1a>
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	bd38      	pop	{r3, r4, r5, pc}
 8007dfc:	20000c34 	.word	0x20000c34

08007e00 <__sread>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	460c      	mov	r4, r1
 8007e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e08:	f000 f8e2 	bl	8007fd0 <_read_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	bfab      	itete	ge
 8007e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007e12:	89a3      	ldrhlt	r3, [r4, #12]
 8007e14:	181b      	addge	r3, r3, r0
 8007e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007e1a:	bfac      	ite	ge
 8007e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007e1e:	81a3      	strhlt	r3, [r4, #12]
 8007e20:	bd10      	pop	{r4, pc}

08007e22 <__swrite>:
 8007e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e26:	461f      	mov	r7, r3
 8007e28:	898b      	ldrh	r3, [r1, #12]
 8007e2a:	4605      	mov	r5, r0
 8007e2c:	05db      	lsls	r3, r3, #23
 8007e2e:	460c      	mov	r4, r1
 8007e30:	4616      	mov	r6, r2
 8007e32:	d505      	bpl.n	8007e40 <__swrite+0x1e>
 8007e34:	2302      	movs	r3, #2
 8007e36:	2200      	movs	r2, #0
 8007e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e3c:	f000 f898 	bl	8007f70 <_lseek_r>
 8007e40:	89a3      	ldrh	r3, [r4, #12]
 8007e42:	4632      	mov	r2, r6
 8007e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e48:	81a3      	strh	r3, [r4, #12]
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	463b      	mov	r3, r7
 8007e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e56:	f000 b817 	b.w	8007e88 <_write_r>

08007e5a <__sseek>:
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	460c      	mov	r4, r1
 8007e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e62:	f000 f885 	bl	8007f70 <_lseek_r>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	bf15      	itete	ne
 8007e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e76:	81a3      	strheq	r3, [r4, #12]
 8007e78:	bf18      	it	ne
 8007e7a:	81a3      	strhne	r3, [r4, #12]
 8007e7c:	bd10      	pop	{r4, pc}

08007e7e <__sclose>:
 8007e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e82:	f000 b831 	b.w	8007ee8 <_close_r>
	...

08007e88 <_write_r>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	4608      	mov	r0, r1
 8007e8e:	4611      	mov	r1, r2
 8007e90:	2200      	movs	r2, #0
 8007e92:	4d05      	ldr	r5, [pc, #20]	; (8007ea8 <_write_r+0x20>)
 8007e94:	602a      	str	r2, [r5, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f7fa fb3e 	bl	8002518 <_write>
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	d102      	bne.n	8007ea6 <_write_r+0x1e>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b103      	cbz	r3, 8007ea6 <_write_r+0x1e>
 8007ea4:	6023      	str	r3, [r4, #0]
 8007ea6:	bd38      	pop	{r3, r4, r5, pc}
 8007ea8:	20000c34 	.word	0x20000c34

08007eac <__assert_func>:
 8007eac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007eae:	4614      	mov	r4, r2
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4b09      	ldr	r3, [pc, #36]	; (8007ed8 <__assert_func+0x2c>)
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68d8      	ldr	r0, [r3, #12]
 8007eba:	b14c      	cbz	r4, 8007ed0 <__assert_func+0x24>
 8007ebc:	4b07      	ldr	r3, [pc, #28]	; (8007edc <__assert_func+0x30>)
 8007ebe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ec2:	9100      	str	r1, [sp, #0]
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	4906      	ldr	r1, [pc, #24]	; (8007ee0 <__assert_func+0x34>)
 8007ec8:	f000 f81e 	bl	8007f08 <fiprintf>
 8007ecc:	f000 f89f 	bl	800800e <abort>
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <__assert_func+0x38>)
 8007ed2:	461c      	mov	r4, r3
 8007ed4:	e7f3      	b.n	8007ebe <__assert_func+0x12>
 8007ed6:	bf00      	nop
 8007ed8:	20000014 	.word	0x20000014
 8007edc:	0800859d 	.word	0x0800859d
 8007ee0:	080085aa 	.word	0x080085aa
 8007ee4:	080085d8 	.word	0x080085d8

08007ee8 <_close_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	2300      	movs	r3, #0
 8007eec:	4d05      	ldr	r5, [pc, #20]	; (8007f04 <_close_r+0x1c>)
 8007eee:	4604      	mov	r4, r0
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	602b      	str	r3, [r5, #0]
 8007ef4:	f7fa fb2c 	bl	8002550 <_close>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_close_r+0x1a>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_close_r+0x1a>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	20000c34 	.word	0x20000c34

08007f08 <fiprintf>:
 8007f08:	b40e      	push	{r1, r2, r3}
 8007f0a:	b503      	push	{r0, r1, lr}
 8007f0c:	4601      	mov	r1, r0
 8007f0e:	ab03      	add	r3, sp, #12
 8007f10:	4805      	ldr	r0, [pc, #20]	; (8007f28 <fiprintf+0x20>)
 8007f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f16:	6800      	ldr	r0, [r0, #0]
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	f7ff fe31 	bl	8007b80 <_vfiprintf_r>
 8007f1e:	b002      	add	sp, #8
 8007f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f24:	b003      	add	sp, #12
 8007f26:	4770      	bx	lr
 8007f28:	20000014 	.word	0x20000014

08007f2c <_fstat_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	2300      	movs	r3, #0
 8007f30:	4d06      	ldr	r5, [pc, #24]	; (8007f4c <_fstat_r+0x20>)
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	f7fa fb14 	bl	8002566 <_fstat>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	d102      	bne.n	8007f48 <_fstat_r+0x1c>
 8007f42:	682b      	ldr	r3, [r5, #0]
 8007f44:	b103      	cbz	r3, 8007f48 <_fstat_r+0x1c>
 8007f46:	6023      	str	r3, [r4, #0]
 8007f48:	bd38      	pop	{r3, r4, r5, pc}
 8007f4a:	bf00      	nop
 8007f4c:	20000c34 	.word	0x20000c34

08007f50 <_isatty_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	2300      	movs	r3, #0
 8007f54:	4d05      	ldr	r5, [pc, #20]	; (8007f6c <_isatty_r+0x1c>)
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	f7fa fb12 	bl	8002584 <_isatty>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d102      	bne.n	8007f6a <_isatty_r+0x1a>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	b103      	cbz	r3, 8007f6a <_isatty_r+0x1a>
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	20000c34 	.word	0x20000c34

08007f70 <_lseek_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	4604      	mov	r4, r0
 8007f74:	4608      	mov	r0, r1
 8007f76:	4611      	mov	r1, r2
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4d05      	ldr	r5, [pc, #20]	; (8007f90 <_lseek_r+0x20>)
 8007f7c:	602a      	str	r2, [r5, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f7fa fb0a 	bl	8002598 <_lseek>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_lseek_r+0x1e>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_lseek_r+0x1e>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	20000c34 	.word	0x20000c34

08007f94 <__ascii_mbtowc>:
 8007f94:	b082      	sub	sp, #8
 8007f96:	b901      	cbnz	r1, 8007f9a <__ascii_mbtowc+0x6>
 8007f98:	a901      	add	r1, sp, #4
 8007f9a:	b142      	cbz	r2, 8007fae <__ascii_mbtowc+0x1a>
 8007f9c:	b14b      	cbz	r3, 8007fb2 <__ascii_mbtowc+0x1e>
 8007f9e:	7813      	ldrb	r3, [r2, #0]
 8007fa0:	600b      	str	r3, [r1, #0]
 8007fa2:	7812      	ldrb	r2, [r2, #0]
 8007fa4:	1e10      	subs	r0, r2, #0
 8007fa6:	bf18      	it	ne
 8007fa8:	2001      	movne	r0, #1
 8007faa:	b002      	add	sp, #8
 8007fac:	4770      	bx	lr
 8007fae:	4610      	mov	r0, r2
 8007fb0:	e7fb      	b.n	8007faa <__ascii_mbtowc+0x16>
 8007fb2:	f06f 0001 	mvn.w	r0, #1
 8007fb6:	e7f8      	b.n	8007faa <__ascii_mbtowc+0x16>

08007fb8 <__malloc_lock>:
 8007fb8:	4801      	ldr	r0, [pc, #4]	; (8007fc0 <__malloc_lock+0x8>)
 8007fba:	f7ff b8bc 	b.w	8007136 <__retarget_lock_acquire_recursive>
 8007fbe:	bf00      	nop
 8007fc0:	20000c28 	.word	0x20000c28

08007fc4 <__malloc_unlock>:
 8007fc4:	4801      	ldr	r0, [pc, #4]	; (8007fcc <__malloc_unlock+0x8>)
 8007fc6:	f7ff b8b7 	b.w	8007138 <__retarget_lock_release_recursive>
 8007fca:	bf00      	nop
 8007fcc:	20000c28 	.word	0x20000c28

08007fd0 <_read_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	4608      	mov	r0, r1
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4d05      	ldr	r5, [pc, #20]	; (8007ff0 <_read_r+0x20>)
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f7fa fa7d 	bl	80024de <_read>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_read_r+0x1e>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_read_r+0x1e>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	20000c34 	.word	0x20000c34

08007ff4 <__ascii_wctomb>:
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	4608      	mov	r0, r1
 8007ff8:	b141      	cbz	r1, 800800c <__ascii_wctomb+0x18>
 8007ffa:	2aff      	cmp	r2, #255	; 0xff
 8007ffc:	d904      	bls.n	8008008 <__ascii_wctomb+0x14>
 8007ffe:	228a      	movs	r2, #138	; 0x8a
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	4770      	bx	lr
 8008008:	2001      	movs	r0, #1
 800800a:	700a      	strb	r2, [r1, #0]
 800800c:	4770      	bx	lr

0800800e <abort>:
 800800e:	2006      	movs	r0, #6
 8008010:	b508      	push	{r3, lr}
 8008012:	f000 f82b 	bl	800806c <raise>
 8008016:	2001      	movs	r0, #1
 8008018:	f7fa fa57 	bl	80024ca <_exit>

0800801c <_raise_r>:
 800801c:	291f      	cmp	r1, #31
 800801e:	b538      	push	{r3, r4, r5, lr}
 8008020:	4604      	mov	r4, r0
 8008022:	460d      	mov	r5, r1
 8008024:	d904      	bls.n	8008030 <_raise_r+0x14>
 8008026:	2316      	movs	r3, #22
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	f04f 30ff 	mov.w	r0, #4294967295
 800802e:	bd38      	pop	{r3, r4, r5, pc}
 8008030:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008032:	b112      	cbz	r2, 800803a <_raise_r+0x1e>
 8008034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008038:	b94b      	cbnz	r3, 800804e <_raise_r+0x32>
 800803a:	4620      	mov	r0, r4
 800803c:	f000 f830 	bl	80080a0 <_getpid_r>
 8008040:	462a      	mov	r2, r5
 8008042:	4601      	mov	r1, r0
 8008044:	4620      	mov	r0, r4
 8008046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800804a:	f000 b817 	b.w	800807c <_kill_r>
 800804e:	2b01      	cmp	r3, #1
 8008050:	d00a      	beq.n	8008068 <_raise_r+0x4c>
 8008052:	1c59      	adds	r1, r3, #1
 8008054:	d103      	bne.n	800805e <_raise_r+0x42>
 8008056:	2316      	movs	r3, #22
 8008058:	6003      	str	r3, [r0, #0]
 800805a:	2001      	movs	r0, #1
 800805c:	e7e7      	b.n	800802e <_raise_r+0x12>
 800805e:	2400      	movs	r4, #0
 8008060:	4628      	mov	r0, r5
 8008062:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008066:	4798      	blx	r3
 8008068:	2000      	movs	r0, #0
 800806a:	e7e0      	b.n	800802e <_raise_r+0x12>

0800806c <raise>:
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <raise+0xc>)
 800806e:	4601      	mov	r1, r0
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f7ff bfd3 	b.w	800801c <_raise_r>
 8008076:	bf00      	nop
 8008078:	20000014 	.word	0x20000014

0800807c <_kill_r>:
 800807c:	b538      	push	{r3, r4, r5, lr}
 800807e:	2300      	movs	r3, #0
 8008080:	4d06      	ldr	r5, [pc, #24]	; (800809c <_kill_r+0x20>)
 8008082:	4604      	mov	r4, r0
 8008084:	4608      	mov	r0, r1
 8008086:	4611      	mov	r1, r2
 8008088:	602b      	str	r3, [r5, #0]
 800808a:	f7fa fa0e 	bl	80024aa <_kill>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	d102      	bne.n	8008098 <_kill_r+0x1c>
 8008092:	682b      	ldr	r3, [r5, #0]
 8008094:	b103      	cbz	r3, 8008098 <_kill_r+0x1c>
 8008096:	6023      	str	r3, [r4, #0]
 8008098:	bd38      	pop	{r3, r4, r5, pc}
 800809a:	bf00      	nop
 800809c:	20000c34 	.word	0x20000c34

080080a0 <_getpid_r>:
 80080a0:	f7fa b9fc 	b.w	800249c <_getpid>

080080a4 <sqrt>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	4606      	mov	r6, r0
 80080a8:	460f      	mov	r7, r1
 80080aa:	f000 f81f 	bl	80080ec <__ieee754_sqrt>
 80080ae:	4632      	mov	r2, r6
 80080b0:	4604      	mov	r4, r0
 80080b2:	460d      	mov	r5, r1
 80080b4:	463b      	mov	r3, r7
 80080b6:	4630      	mov	r0, r6
 80080b8:	4639      	mov	r1, r7
 80080ba:	f7f8 fca7 	bl	8000a0c <__aeabi_dcmpun>
 80080be:	b990      	cbnz	r0, 80080e6 <sqrt+0x42>
 80080c0:	2200      	movs	r2, #0
 80080c2:	2300      	movs	r3, #0
 80080c4:	4630      	mov	r0, r6
 80080c6:	4639      	mov	r1, r7
 80080c8:	f7f8 fc78 	bl	80009bc <__aeabi_dcmplt>
 80080cc:	b158      	cbz	r0, 80080e6 <sqrt+0x42>
 80080ce:	f7fd fa1f 	bl	8005510 <__errno>
 80080d2:	2321      	movs	r3, #33	; 0x21
 80080d4:	2200      	movs	r2, #0
 80080d6:	6003      	str	r3, [r0, #0]
 80080d8:	2300      	movs	r3, #0
 80080da:	4610      	mov	r0, r2
 80080dc:	4619      	mov	r1, r3
 80080de:	f7f8 fb25 	bl	800072c <__aeabi_ddiv>
 80080e2:	4604      	mov	r4, r0
 80080e4:	460d      	mov	r5, r1
 80080e6:	4620      	mov	r0, r4
 80080e8:	4629      	mov	r1, r5
 80080ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080ec <__ieee754_sqrt>:
 80080ec:	f8df c158 	ldr.w	ip, [pc, #344]	; 8008248 <__ieee754_sqrt+0x15c>
 80080f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f4:	ea3c 0c01 	bics.w	ip, ip, r1
 80080f8:	4606      	mov	r6, r0
 80080fa:	460d      	mov	r5, r1
 80080fc:	460c      	mov	r4, r1
 80080fe:	460a      	mov	r2, r1
 8008100:	4607      	mov	r7, r0
 8008102:	4603      	mov	r3, r0
 8008104:	d10f      	bne.n	8008126 <__ieee754_sqrt+0x3a>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	f7f8 f9e5 	bl	80004d8 <__aeabi_dmul>
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4630      	mov	r0, r6
 8008114:	4629      	mov	r1, r5
 8008116:	f7f8 f829 	bl	800016c <__adddf3>
 800811a:	4606      	mov	r6, r0
 800811c:	460d      	mov	r5, r1
 800811e:	4630      	mov	r0, r6
 8008120:	4629      	mov	r1, r5
 8008122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008126:	2900      	cmp	r1, #0
 8008128:	dc0e      	bgt.n	8008148 <__ieee754_sqrt+0x5c>
 800812a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800812e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008132:	d0f4      	beq.n	800811e <__ieee754_sqrt+0x32>
 8008134:	b141      	cbz	r1, 8008148 <__ieee754_sqrt+0x5c>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	f7f8 f815 	bl	8000168 <__aeabi_dsub>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	f7f8 faf3 	bl	800072c <__aeabi_ddiv>
 8008146:	e7e8      	b.n	800811a <__ieee754_sqrt+0x2e>
 8008148:	1521      	asrs	r1, r4, #20
 800814a:	d075      	beq.n	8008238 <__ieee754_sqrt+0x14c>
 800814c:	07cc      	lsls	r4, r1, #31
 800814e:	f04f 0400 	mov.w	r4, #0
 8008152:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008156:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800815a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800815e:	bf5e      	ittt	pl
 8008160:	0fd9      	lsrpl	r1, r3, #31
 8008162:	005b      	lslpl	r3, r3, #1
 8008164:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8008168:	0fd9      	lsrs	r1, r3, #31
 800816a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800816e:	2516      	movs	r5, #22
 8008170:	4620      	mov	r0, r4
 8008172:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008176:	107f      	asrs	r7, r7, #1
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	1846      	adds	r6, r0, r1
 800817c:	4296      	cmp	r6, r2
 800817e:	bfde      	ittt	le
 8008180:	1b92      	suble	r2, r2, r6
 8008182:	1870      	addle	r0, r6, r1
 8008184:	1864      	addle	r4, r4, r1
 8008186:	0052      	lsls	r2, r2, #1
 8008188:	3d01      	subs	r5, #1
 800818a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800818e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008192:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008196:	d1f0      	bne.n	800817a <__ieee754_sqrt+0x8e>
 8008198:	4629      	mov	r1, r5
 800819a:	f04f 0e20 	mov.w	lr, #32
 800819e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80081a2:	4282      	cmp	r2, r0
 80081a4:	eb06 0c05 	add.w	ip, r6, r5
 80081a8:	dc02      	bgt.n	80081b0 <__ieee754_sqrt+0xc4>
 80081aa:	d113      	bne.n	80081d4 <__ieee754_sqrt+0xe8>
 80081ac:	459c      	cmp	ip, r3
 80081ae:	d811      	bhi.n	80081d4 <__ieee754_sqrt+0xe8>
 80081b0:	f1bc 0f00 	cmp.w	ip, #0
 80081b4:	eb0c 0506 	add.w	r5, ip, r6
 80081b8:	da43      	bge.n	8008242 <__ieee754_sqrt+0x156>
 80081ba:	2d00      	cmp	r5, #0
 80081bc:	db41      	blt.n	8008242 <__ieee754_sqrt+0x156>
 80081be:	f100 0801 	add.w	r8, r0, #1
 80081c2:	1a12      	subs	r2, r2, r0
 80081c4:	4640      	mov	r0, r8
 80081c6:	459c      	cmp	ip, r3
 80081c8:	bf88      	it	hi
 80081ca:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80081ce:	eba3 030c 	sub.w	r3, r3, ip
 80081d2:	4431      	add	r1, r6
 80081d4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80081d8:	f1be 0e01 	subs.w	lr, lr, #1
 80081dc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80081e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80081e4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80081e8:	d1db      	bne.n	80081a2 <__ieee754_sqrt+0xb6>
 80081ea:	4313      	orrs	r3, r2
 80081ec:	d006      	beq.n	80081fc <__ieee754_sqrt+0x110>
 80081ee:	1c48      	adds	r0, r1, #1
 80081f0:	bf0b      	itete	eq
 80081f2:	4671      	moveq	r1, lr
 80081f4:	3101      	addne	r1, #1
 80081f6:	3401      	addeq	r4, #1
 80081f8:	f021 0101 	bicne.w	r1, r1, #1
 80081fc:	1063      	asrs	r3, r4, #1
 80081fe:	0849      	lsrs	r1, r1, #1
 8008200:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008204:	07e2      	lsls	r2, r4, #31
 8008206:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800820a:	bf48      	it	mi
 800820c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008210:	460e      	mov	r6, r1
 8008212:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008216:	e782      	b.n	800811e <__ieee754_sqrt+0x32>
 8008218:	0ada      	lsrs	r2, r3, #11
 800821a:	3815      	subs	r0, #21
 800821c:	055b      	lsls	r3, r3, #21
 800821e:	2a00      	cmp	r2, #0
 8008220:	d0fa      	beq.n	8008218 <__ieee754_sqrt+0x12c>
 8008222:	02d5      	lsls	r5, r2, #11
 8008224:	d50a      	bpl.n	800823c <__ieee754_sqrt+0x150>
 8008226:	f1c1 0420 	rsb	r4, r1, #32
 800822a:	fa23 f404 	lsr.w	r4, r3, r4
 800822e:	1e4d      	subs	r5, r1, #1
 8008230:	408b      	lsls	r3, r1
 8008232:	4322      	orrs	r2, r4
 8008234:	1b41      	subs	r1, r0, r5
 8008236:	e789      	b.n	800814c <__ieee754_sqrt+0x60>
 8008238:	4608      	mov	r0, r1
 800823a:	e7f0      	b.n	800821e <__ieee754_sqrt+0x132>
 800823c:	0052      	lsls	r2, r2, #1
 800823e:	3101      	adds	r1, #1
 8008240:	e7ef      	b.n	8008222 <__ieee754_sqrt+0x136>
 8008242:	4680      	mov	r8, r0
 8008244:	e7bd      	b.n	80081c2 <__ieee754_sqrt+0xd6>
 8008246:	bf00      	nop
 8008248:	7ff00000 	.word	0x7ff00000

0800824c <_init>:
 800824c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800824e:	bf00      	nop
 8008250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008252:	bc08      	pop	{r3}
 8008254:	469e      	mov	lr, r3
 8008256:	4770      	bx	lr

08008258 <_fini>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr

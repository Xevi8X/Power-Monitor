
MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ea0  08002ea0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ea0  08002ea0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ea0  08002ea0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ea0  08002ea0  00012ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ea4  08002ea4  00012ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003524  20000010  08002eb8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003534  08002eb8  00023534  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008af5  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff6  00000000  00000000  00028b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0002ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017226  00000000  00000000  0002bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b12b  00000000  00000000  00042e16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083606  00000000  00000000  0004df41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d1547  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002164  00000000  00000000  000d1598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e50 	.word	0x08002e50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002e50 	.word	0x08002e50

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000152:	2300      	movs	r3, #0
 8000154:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000156:	463b      	mov	r3, r7
 8000158:	2200      	movs	r2, #0
 800015a:	601a      	str	r2, [r3, #0]
 800015c:	605a      	str	r2, [r3, #4]
 800015e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000160:	4b2e      	ldr	r3, [pc, #184]	; (800021c <MX_ADC1_Init+0xd0>)
 8000162:	4a2f      	ldr	r2, [pc, #188]	; (8000220 <MX_ADC1_Init+0xd4>)
 8000164:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000166:	4b2d      	ldr	r3, [pc, #180]	; (800021c <MX_ADC1_Init+0xd0>)
 8000168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800016c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800016e:	4b2b      	ldr	r3, [pc, #172]	; (800021c <MX_ADC1_Init+0xd0>)
 8000170:	2201      	movs	r2, #1
 8000172:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000174:	4b29      	ldr	r3, [pc, #164]	; (800021c <MX_ADC1_Init+0xd0>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800017a:	4b28      	ldr	r3, [pc, #160]	; (800021c <MX_ADC1_Init+0xd0>)
 800017c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000180:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000182:	4b26      	ldr	r3, [pc, #152]	; (800021c <MX_ADC1_Init+0xd0>)
 8000184:	2200      	movs	r2, #0
 8000186:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000188:	4b24      	ldr	r3, [pc, #144]	; (800021c <MX_ADC1_Init+0xd0>)
 800018a:	2203      	movs	r2, #3
 800018c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800018e:	4823      	ldr	r0, [pc, #140]	; (800021c <MX_ADC1_Init+0xd0>)
 8000190:	f000 fcf8 	bl	8000b84 <HAL_ADC_Init>
 8000194:	4603      	mov	r3, r0
 8000196:	2b00      	cmp	r3, #0
 8000198:	d001      	beq.n	800019e <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 800019a:	f000 fb5a 	bl	8000852 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800019e:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80001a4:	f107 030c 	add.w	r3, r7, #12
 80001a8:	4619      	mov	r1, r3
 80001aa:	481c      	ldr	r0, [pc, #112]	; (800021c <MX_ADC1_Init+0xd0>)
 80001ac:	f001 faac 	bl	8001708 <HAL_ADCEx_MultiModeConfigChannel>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80001b6:	f000 fb4c 	bl	8000852 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001be:	2301      	movs	r3, #1
 80001c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001c2:	2307      	movs	r3, #7
 80001c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001c6:	463b      	mov	r3, r7
 80001c8:	4619      	mov	r1, r3
 80001ca:	4814      	ldr	r0, [pc, #80]	; (800021c <MX_ADC1_Init+0xd0>)
 80001cc:	f000 ff36 	bl	800103c <HAL_ADC_ConfigChannel>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80001d6:	f000 fb3c 	bl	8000852 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80001da:	2304      	movs	r3, #4
 80001dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80001de:	2302      	movs	r3, #2
 80001e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e2:	463b      	mov	r3, r7
 80001e4:	4619      	mov	r1, r3
 80001e6:	480d      	ldr	r0, [pc, #52]	; (800021c <MX_ADC1_Init+0xd0>)
 80001e8:	f000 ff28 	bl	800103c <HAL_ADC_ConfigChannel>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80001f2:	f000 fb2e 	bl	8000852 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80001f6:	230b      	movs	r3, #11
 80001f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80001fa:	2303      	movs	r3, #3
 80001fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001fe:	463b      	mov	r3, r7
 8000200:	4619      	mov	r1, r3
 8000202:	4806      	ldr	r0, [pc, #24]	; (800021c <MX_ADC1_Init+0xd0>)
 8000204:	f000 ff1a 	bl	800103c <HAL_ADC_ConfigChannel>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800020e:	f000 fb20 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	2000002c 	.word	0x2000002c
 8000220:	40012400 	.word	0x40012400

08000224 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000234:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000236:	4a28      	ldr	r2, [pc, #160]	; (80002d8 <MX_ADC2_Init+0xb4>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800023a:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800023c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000240:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000242:	4b24      	ldr	r3, [pc, #144]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000244:	2201      	movs	r2, #1
 8000246:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800024a:	2200      	movs	r2, #0
 800024c:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024e:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000250:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000254:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000258:	2200      	movs	r2, #0
 800025a:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_ADC2_Init+0xb0>)
 800025e:	2203      	movs	r2, #3
 8000260:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000262:	481c      	ldr	r0, [pc, #112]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000264:	f000 fc8e 	bl	8000b84 <HAL_ADC_Init>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 800026e:	f000 faf0 	bl	8000852 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000272:	2301      	movs	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000276:	2301      	movs	r3, #1
 8000278:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800027a:	2307      	movs	r3, #7
 800027c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4619      	mov	r1, r3
 8000282:	4814      	ldr	r0, [pc, #80]	; (80002d4 <MX_ADC2_Init+0xb0>)
 8000284:	f000 feda 	bl	800103c <HAL_ADC_ConfigChannel>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800028e:	f000 fae0 	bl	8000852 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000292:	2308      	movs	r3, #8
 8000294:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000296:	2302      	movs	r3, #2
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	480d      	ldr	r0, [pc, #52]	; (80002d4 <MX_ADC2_Init+0xb0>)
 80002a0:	f000 fecc 	bl	800103c <HAL_ADC_ConfigChannel>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80002aa:	f000 fad2 	bl	8000852 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002ae:	230a      	movs	r3, #10
 80002b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002b2:	2303      	movs	r3, #3
 80002b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4619      	mov	r1, r3
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <MX_ADC2_Init+0xb0>)
 80002bc:	f000 febe 	bl	800103c <HAL_ADC_ConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 80002c6:	f000 fac4 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	2000005c 	.word	0x2000005c
 80002d8:	40012800 	.word	0x40012800

080002dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a65      	ldr	r2, [pc, #404]	; (800048c <HAL_ADC_MspInit+0x1b0>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d168      	bne.n	80003ce <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002fc:	4b64      	ldr	r3, [pc, #400]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a63      	ldr	r2, [pc, #396]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b61      	ldr	r3, [pc, #388]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000310:	627b      	str	r3, [r7, #36]	; 0x24
 8000312:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b5e      	ldr	r3, [pc, #376]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a5d      	ldr	r2, [pc, #372]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b5b      	ldr	r3, [pc, #364]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	623b      	str	r3, [r7, #32]
 800032a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b58      	ldr	r3, [pc, #352]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a57      	ldr	r2, [pc, #348]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b55      	ldr	r3, [pc, #340]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	61fb      	str	r3, [r7, #28]
 8000342:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000344:	2303      	movs	r3, #3
 8000346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000348:	2303      	movs	r3, #3
 800034a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800034c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000350:	4619      	mov	r1, r3
 8000352:	4850      	ldr	r0, [pc, #320]	; (8000494 <HAL_ADC_MspInit+0x1b8>)
 8000354:	f001 fd26 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000358:	2311      	movs	r3, #17
 800035a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800035c:	2303      	movs	r3, #3
 800035e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000360:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000364:	4619      	mov	r1, r3
 8000366:	484c      	ldr	r0, [pc, #304]	; (8000498 <HAL_ADC_MspInit+0x1bc>)
 8000368:	f001 fd1c 	bl	8001da4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800036c:	4b4b      	ldr	r3, [pc, #300]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800036e:	4a4c      	ldr	r2, [pc, #304]	; (80004a0 <HAL_ADC_MspInit+0x1c4>)
 8000370:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000372:	4b4a      	ldr	r3, [pc, #296]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000378:	4b48      	ldr	r3, [pc, #288]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800037e:	4b47      	ldr	r3, [pc, #284]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000380:	2280      	movs	r2, #128	; 0x80
 8000382:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000384:	4b45      	ldr	r3, [pc, #276]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800038a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800038c:	4b43      	ldr	r3, [pc, #268]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800038e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000392:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000394:	4b41      	ldr	r3, [pc, #260]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 8000396:	2220      	movs	r2, #32
 8000398:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800039a:	4b40      	ldr	r3, [pc, #256]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 800039c:	2200      	movs	r2, #0
 800039e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003a0:	483e      	ldr	r0, [pc, #248]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003a2:	f001 fb11 	bl	80019c8 <HAL_DMA_Init>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 80003ac:	f000 fa51 	bl	8000852 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a3a      	ldr	r2, [pc, #232]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003b4:	621a      	str	r2, [r3, #32]
 80003b6:	4a39      	ldr	r2, [pc, #228]	; (800049c <HAL_ADC_MspInit+0x1c0>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80003bc:	2200      	movs	r2, #0
 80003be:	2100      	movs	r1, #0
 80003c0:	2012      	movs	r0, #18
 80003c2:	f001 faca 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80003c6:	2012      	movs	r0, #18
 80003c8:	f001 fae3 	bl	8001992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80003cc:	e05a      	b.n	8000484 <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a34      	ldr	r2, [pc, #208]	; (80004a4 <HAL_ADC_MspInit+0x1c8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d155      	bne.n	8000484 <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80003d8:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b2a      	ldr	r3, [pc, #168]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003ec:	61bb      	str	r3, [r7, #24]
 80003ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	4a26      	ldr	r2, [pc, #152]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003f6:	f043 0310 	orr.w	r3, r3, #16
 80003fa:	6193      	str	r3, [r2, #24]
 80003fc:	4b24      	ldr	r3, [pc, #144]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	f003 0310 	and.w	r3, r3, #16
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000408:	4b21      	ldr	r3, [pc, #132]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	4a20      	ldr	r2, [pc, #128]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800040e:	f043 0304 	orr.w	r3, r3, #4
 8000412:	6193      	str	r3, [r2, #24]
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	f003 0304 	and.w	r3, r3, #4
 800041c:	613b      	str	r3, [r7, #16]
 800041e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000420:	4b1b      	ldr	r3, [pc, #108]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a1a      	ldr	r2, [pc, #104]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 8000426:	f043 0308 	orr.w	r3, r3, #8
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <HAL_ADC_MspInit+0x1b4>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0308 	and.w	r3, r3, #8
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000438:	2303      	movs	r3, #3
 800043a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800043c:	2303      	movs	r3, #3
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000444:	4619      	mov	r1, r3
 8000446:	4813      	ldr	r0, [pc, #76]	; (8000494 <HAL_ADC_MspInit+0x1b8>)
 8000448:	f001 fcac 	bl	8001da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800044c:	2302      	movs	r3, #2
 800044e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000450:	2303      	movs	r3, #3
 8000452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000458:	4619      	mov	r1, r3
 800045a:	480f      	ldr	r0, [pc, #60]	; (8000498 <HAL_ADC_MspInit+0x1bc>)
 800045c:	f001 fca2 	bl	8001da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000460:	2301      	movs	r3, #1
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000464:	2303      	movs	r3, #3
 8000466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000468:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800046c:	4619      	mov	r1, r3
 800046e:	480e      	ldr	r0, [pc, #56]	; (80004a8 <HAL_ADC_MspInit+0x1cc>)
 8000470:	f001 fc98 	bl	8001da4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2012      	movs	r0, #18
 800047a:	f001 fa6e 	bl	800195a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800047e:	2012      	movs	r0, #18
 8000480:	f001 fa87 	bl	8001992 <HAL_NVIC_EnableIRQ>
}
 8000484:	bf00      	nop
 8000486:	3738      	adds	r7, #56	; 0x38
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40012400 	.word	0x40012400
 8000490:	40021000 	.word	0x40021000
 8000494:	40011000 	.word	0x40011000
 8000498:	40010800 	.word	0x40010800
 800049c:	2000008c 	.word	0x2000008c
 80004a0:	40020008 	.word	0x40020008
 80004a4:	40012800 	.word	0x40012800
 80004a8:	40010c00 	.word	0x40010c00

080004ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_DMA_Init+0x38>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a0b      	ldr	r2, [pc, #44]	; (80004e4 <MX_DMA_Init+0x38>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6153      	str	r3, [r2, #20]
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_DMA_Init+0x38>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2100      	movs	r1, #0
 80004ce:	200b      	movs	r0, #11
 80004d0:	f001 fa43 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d4:	200b      	movs	r0, #11
 80004d6:	f001 fa5c 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fc:	4b2d      	ldr	r3, [pc, #180]	; (80005b4 <MX_GPIO_Init+0xcc>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a2c      	ldr	r2, [pc, #176]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000502:	f043 0310 	orr.w	r3, r3, #16
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0310 	and.w	r3, r3, #16
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b27      	ldr	r3, [pc, #156]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a26      	ldr	r2, [pc, #152]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800051a:	f043 0320 	orr.w	r3, r3, #32
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b24      	ldr	r3, [pc, #144]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0320 	and.w	r3, r3, #32
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052c:	4b21      	ldr	r3, [pc, #132]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a20      	ldr	r2, [pc, #128]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000532:	f043 0304 	orr.w	r3, r3, #4
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0304 	and.w	r3, r3, #4
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a1a      	ldr	r2, [pc, #104]	; (80005b4 <MX_GPIO_Init+0xcc>)
 800054a:	f043 0308 	orr.w	r3, r3, #8
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <MX_GPIO_Init+0xcc>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f003 0308 	and.w	r3, r3, #8
 8000558:	603b      	str	r3, [r7, #0]
 800055a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2120      	movs	r1, #32
 8000560:	4815      	ldr	r0, [pc, #84]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000562:	f001 fda3 	bl	80020ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800056a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056c:	4b13      	ldr	r3, [pc, #76]	; (80005bc <MX_GPIO_Init+0xd4>)
 800056e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	4619      	mov	r1, r3
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <MX_GPIO_Init+0xd8>)
 800057c:	f001 fc12 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000580:	2320      	movs	r3, #32
 8000582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	2301      	movs	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2302      	movs	r3, #2
 800058e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000590:	f107 0310 	add.w	r3, r7, #16
 8000594:	4619      	mov	r1, r3
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <MX_GPIO_Init+0xd0>)
 8000598:	f001 fc04 	bl	8001da4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	2028      	movs	r0, #40	; 0x28
 80005a2:	f001 f9da 	bl	800195a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005a6:	2028      	movs	r0, #40	; 0x28
 80005a8:	f001 f9f3 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 80005ac:	bf00      	nop
 80005ae:	3720      	adds	r7, #32
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010800 	.word	0x40010800
 80005bc:	10110000 	.word	0x10110000
 80005c0:	40011000 	.word	0x40011000

080005c4 <ADC_Start>:
/* USER CODE BEGIN 0 */



void ADC_Start(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 80005c8:	bf00      	nop
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <ADC_Start+0x3c>)
 80005cc:	f000 ff30 	bl	8001430 <HAL_ADCEx_Calibration_Start>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d1f9      	bne.n	80005ca <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 80005d6:	bf00      	nop
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <ADC_Start+0x40>)
 80005da:	f000 ff29 	bl	8001430 <HAL_ADCEx_Calibration_Start>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d1f9      	bne.n	80005d8 <ADC_Start+0x14>
	HAL_Delay(10);
 80005e4:	200a      	movs	r0, #10
 80005e6:	f000 faa9 	bl	8000b3c <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <ADC_Start+0x40>)
 80005ec:	f000 fba2 	bl	8000d34 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADC_Buffer, (uint32_t)2 * CHANNELS);
 80005f0:	2206      	movs	r2, #6
 80005f2:	4905      	ldr	r1, [pc, #20]	; (8000608 <ADC_Start+0x44>)
 80005f4:	4802      	ldr	r0, [pc, #8]	; (8000600 <ADC_Start+0x3c>)
 80005f6:	f000 ffc7 	bl	8001588 <HAL_ADCEx_MultiModeStart_DMA>
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000002c 	.word	0x2000002c
 8000604:	2000005c 	.word	0x2000005c
 8000608:	200000d0 	.word	0x200000d0

0800060c <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800060c:	b490      	push	{r4, r7}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(hadc)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d043      	beq.n	80006a2 <HAL_ADC_ConvHalfCpltCallback+0x96>
	{
		for(uint8_t i = 0; i < 3;i++)
 800061a:	2300      	movs	r3, #0
 800061c:	73fb      	strb	r3, [r7, #15]
 800061e:	e02a      	b.n	8000676 <HAL_ADC_ConvHalfCpltCallback+0x6a>
		{
			data[index][2*i] = (uint16_t) ADC_Buffer[i];
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	4a22      	ldr	r2, [pc, #136]	; (80006ac <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8000624:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000628:	4b21      	ldr	r3, [pc, #132]	; (80006b0 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	005a      	lsls	r2, r3, #1
 8000632:	b28c      	uxth	r4, r1
 8000634:	491f      	ldr	r1, [pc, #124]	; (80006b4 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8000636:	4603      	mov	r3, r0
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4403      	add	r3, r0
 800063c:	005b      	lsls	r3, r3, #1
 800063e:	4413      	add	r3, r2
 8000640:	4622      	mov	r2, r4
 8000642:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			data[index][2*i+1] = (uint16_t) (ADC_Buffer[i] >> 16);
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	4a18      	ldr	r2, [pc, #96]	; (80006ac <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 800064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064e:	0c19      	lsrs	r1, r3, #16
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	005b      	lsls	r3, r3, #1
 800065a:	1c5a      	adds	r2, r3, #1
 800065c:	b28c      	uxth	r4, r1
 800065e:	4915      	ldr	r1, [pc, #84]	; (80006b4 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8000660:	4603      	mov	r3, r0
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4403      	add	r3, r0
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	4413      	add	r3, r2
 800066a:	4622      	mov	r2, r4
 800066c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < 3;i++)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3301      	adds	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b02      	cmp	r3, #2
 800067a:	d9d1      	bls.n	8000620 <HAL_ADC_ConvHalfCpltCallback+0x14>
		}
		whos[index] = 0;
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8000684:	2100      	movs	r1, #0
 8000686:	5499      	strb	r1, [r3, r2]
		index = (index + 1) % 1024;
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	425a      	negs	r2, r3
 8000690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000694:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000698:	bf58      	it	pl
 800069a:	4253      	negpl	r3, r2
 800069c:	b29a      	uxth	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 80006a0:	801a      	strh	r2, [r3, #0]
	}
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc90      	pop	{r4, r7}
 80006aa:	4770      	bx	lr
 80006ac:	200000d0 	.word	0x200000d0
 80006b0:	200034e8 	.word	0x200034e8
 80006b4:	200000e8 	.word	0x200000e8
 80006b8:	200030e8 	.word	0x200030e8

080006bc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80006bc:	b490      	push	{r4, r7}
 80006be:	b084      	sub	sp, #16
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	if(hadc)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d047      	beq.n	800075a <HAL_ADC_ConvCpltCallback+0x9e>
	{
		for(uint8_t i = 0; i < 3;i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e02e      	b.n	800072e <HAL_ADC_ConvCpltCallback+0x72>
		{
			data[index][2*i] = (uint16_t) halfOfADC_Buffer[i];
 80006d0:	4b24      	ldr	r3, [pc, #144]	; (8000764 <HAL_ADC_ConvCpltCallback+0xa8>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	6819      	ldr	r1, [r3, #0]
 80006dc:	4b22      	ldr	r3, [pc, #136]	; (8000768 <HAL_ADC_ConvCpltCallback+0xac>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
 80006e4:	005a      	lsls	r2, r3, #1
 80006e6:	b28c      	uxth	r4, r1
 80006e8:	4920      	ldr	r1, [pc, #128]	; (800076c <HAL_ADC_ConvCpltCallback+0xb0>)
 80006ea:	4603      	mov	r3, r0
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	4403      	add	r3, r0
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	4622      	mov	r2, r4
 80006f6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			data[index][2*i+1] = (uint16_t) (halfOfADC_Buffer[i] >> 16);
 80006fa:	4b1a      	ldr	r3, [pc, #104]	; (8000764 <HAL_ADC_ConvCpltCallback+0xa8>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	4413      	add	r3, r2
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	0c19      	lsrs	r1, r3, #16
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <HAL_ADC_ConvCpltCallback+0xac>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	4618      	mov	r0, r3
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	b28c      	uxth	r4, r1
 8000716:	4915      	ldr	r1, [pc, #84]	; (800076c <HAL_ADC_ConvCpltCallback+0xb0>)
 8000718:	4603      	mov	r3, r0
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	4403      	add	r3, r0
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	4622      	mov	r2, r4
 8000724:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < 3;i++)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	3301      	adds	r3, #1
 800072c:	73fb      	strb	r3, [r7, #15]
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b02      	cmp	r3, #2
 8000732:	d9cd      	bls.n	80006d0 <HAL_ADC_ConvCpltCallback+0x14>
		}
		whos[index] = 1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_ADC_ConvCpltCallback+0xac>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <HAL_ADC_ConvCpltCallback+0xb4>)
 800073c:	2101      	movs	r1, #1
 800073e:	5499      	strb	r1, [r3, r2]
		index = (index + 1) % 1024;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_ADC_ConvCpltCallback+0xac>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	3301      	adds	r3, #1
 8000746:	425a      	negs	r2, r3
 8000748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800074c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000750:	bf58      	it	pl
 8000752:	4253      	negpl	r3, r2
 8000754:	b29a      	uxth	r2, r3
 8000756:	4b04      	ldr	r3, [pc, #16]	; (8000768 <HAL_ADC_ConvCpltCallback+0xac>)
 8000758:	801a      	strh	r2, [r3, #0]
	}
}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bc90      	pop	{r4, r7}
 8000762:	4770      	bx	lr
 8000764:	20000000 	.word	0x20000000
 8000768:	200034e8 	.word	0x200034e8
 800076c:	200000e8 	.word	0x200000e8
 8000770:	200030e8 	.word	0x200030e8

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000778:	f000 f97e 	bl	8000a78 <HAL_Init>

  /* USER CODE BEGIN Init */
  index = 0;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <main+0x2c>)
 800077e:	2200      	movs	r2, #0
 8000780:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000782:	f000 f80f 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f7ff feaf 	bl	80004e8 <MX_GPIO_Init>
  MX_DMA_Init();
 800078a:	f7ff fe8f 	bl	80004ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 800078e:	f000 f8e5 	bl	800095c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000792:	f7ff fcdb 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000796:	f7ff fd45 	bl	8000224 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 800079a:	f7ff ff13 	bl	80005c4 <ADC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079e:	e7fe      	b.n	800079e <main+0x2a>
 80007a0:	200034e8 	.word	0x200034e8

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b094      	sub	sp, #80	; 0x50
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ae:	2228      	movs	r2, #40	; 0x28
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f002 fb44 	bl	8002e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e0:	2302      	movs	r3, #2
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007e4:	2300      	movs	r3, #0
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007e8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80007ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fc94 	bl	8002120 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007fe:	f000 f828 	bl	8000852 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000802:	230f      	movs	r3, #15
 8000804:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000806:	2302      	movs	r3, #2
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000812:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2102      	movs	r1, #2
 800081e:	4618      	mov	r0, r3
 8000820:	f001 ff00 	bl	8002624 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800082a:	f000 f812 	bl	8000852 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800082e:	2302      	movs	r3, #2
 8000830:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000832:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000836:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4618      	mov	r0, r3
 800083c:	f002 f88a 	bl	8002954 <HAL_RCCEx_PeriphCLKConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000846:	f000 f804 	bl	8000852 <Error_Handler>
  }
}
 800084a:	bf00      	nop
 800084c:	3750      	adds	r7, #80	; 0x50
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000856:	b672      	cpsid	i
}
 8000858:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085a:	e7fe      	b.n	800085a <Error_Handler+0x8>

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_MspInit+0x5c>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <HAL_MspInit+0x5c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_MspInit+0x5c>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_MspInit+0x5c>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_MspInit+0x5c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_MspInit+0x5c>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <HAL_MspInit+0x60>)
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_MspInit+0x60>)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40010000 	.word	0x40010000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr

08000902 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000906:	f000 f8fd 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <DMA1_Channel1_IRQHandler+0x10>)
 8000916:	f001 f911 	bl	8001b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000008c 	.word	0x2000008c

08000924 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <ADC1_2_IRQHandler+0x14>)
 800092a:	f000 fab1 	bl	8000e90 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <ADC1_2_IRQHandler+0x18>)
 8000930:	f000 faae 	bl	8000e90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000002c 	.word	0x2000002c
 800093c:	2000005c 	.word	0x2000005c

08000940 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000944:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000948:	f001 fbc8 	bl	80020dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART2_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART2_UART_Init+0x4c>)
 8000994:	f002 f954 	bl	8002c40 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f7ff ff58 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200034ec 	.word	0x200034ec
 80009ac:	40004400 	.word	0x40004400

080009b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a15      	ldr	r2, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0x70>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d123      	bne.n	8000a18 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_UART_MspInit+0x74>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a13      	ldr	r2, [pc, #76]	; (8000a24 <HAL_UART_MspInit+0x74>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009da:	61d3      	str	r3, [r2, #28]
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0x74>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0x74>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <HAL_UART_MspInit+0x74>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_UART_MspInit+0x74>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a00:	230c      	movs	r3, #12
 8000a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_UART_MspInit+0x78>)
 8000a14:	f001 f9c6 	bl	8001da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010800 	.word	0x40010800

08000a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a52:	f7ff ff7d 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f002 f9cf 	bl	8002df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5a:	f7ff fe8b 	bl	8000774 <main>
  bx lr
 8000a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a68:	08002ea8 	.word	0x08002ea8
  ldr r2, =_sbss
 8000a6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a70:	20003534 	.word	0x20003534

08000a74 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <CAN1_RX1_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x28>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 ff5b 	bl	8001944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fee2 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 ff73 	bl	80019ae <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 ff3b 	bl	800195a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000004 	.word	0x20000004
 8000afc:	2000000c 	.word	0x2000000c
 8000b00:	20000008 	.word	0x20000008

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_IncTick+0x20>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	2000000c 	.word	0x2000000c
 8000b24:	20003530 	.word	0x20003530

08000b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20003530 	.word	0x20003530

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff fff0 	bl	8000b28 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffe0 	bl	8000b28 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000000c 	.word	0x2000000c

08000b84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e0be      	b.n	8000d24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d109      	bne.n	8000bc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff fb8a 	bl	80002dc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f000 fb89 	bl	80012e0 <ADC_ConversionStop_Disable>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f003 0310 	and.w	r3, r3, #16
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 8099 	bne.w	8000d12 <HAL_ADC_Init+0x18e>
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8095 	bne.w	8000d12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bf0:	f023 0302 	bic.w	r3, r3, #2
 8000bf4:	f043 0202 	orr.w	r2, r3, #2
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	7b1b      	ldrb	r3, [r3, #12]
 8000c0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c1c:	d003      	beq.n	8000c26 <HAL_ADC_Init+0xa2>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d102      	bne.n	8000c2c <HAL_ADC_Init+0xa8>
 8000c26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2a:	e000      	b.n	8000c2e <HAL_ADC_Init+0xaa>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7d1b      	ldrb	r3, [r3, #20]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d119      	bne.n	8000c70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	7b1b      	ldrb	r3, [r3, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d109      	bne.n	8000c58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	035a      	lsls	r2, r3, #13
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	e00b      	b.n	8000c70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f043 0220 	orr.w	r2, r3, #32
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	f043 0201 	orr.w	r2, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	689a      	ldr	r2, [r3, #8]
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <HAL_ADC_Init+0x1a8>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6812      	ldr	r2, [r2, #0]
 8000c92:	68b9      	ldr	r1, [r7, #8]
 8000c94:	430b      	orrs	r3, r1
 8000c96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ca0:	d003      	beq.n	8000caa <HAL_ADC_Init+0x126>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d104      	bne.n	8000cb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	051b      	lsls	r3, r3, #20
 8000cb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_ADC_Init+0x1ac>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d10b      	bne.n	8000cf0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce2:	f023 0303 	bic.w	r3, r3, #3
 8000ce6:	f043 0201 	orr.w	r2, r3, #1
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cee:	e018      	b.n	8000d22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf4:	f023 0312 	bic.w	r3, r3, #18
 8000cf8:	f043 0210 	orr.w	r2, r3, #16
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d04:	f043 0201 	orr.w	r2, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d10:	e007      	b.n	8000d22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f043 0210 	orr.w	r2, r3, #16
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3718      	adds	r7, #24
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	ffe1f7fd 	.word	0xffe1f7fd
 8000d30:	ff1f0efe 	.word	0xff1f0efe

08000d34 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d101      	bne.n	8000d4e <HAL_ADC_Start+0x1a>
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	e098      	b.n	8000e80 <HAL_ADC_Start+0x14c>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2201      	movs	r2, #1
 8000d52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fa68 	bl	800122c <ADC_Enable>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8087 	bne.w	8000e76 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d70:	f023 0301 	bic.w	r3, r3, #1
 8000d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <HAL_ADC_Start+0x154>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d105      	bne.n	8000d92 <HAL_ADC_Start+0x5e>
 8000d86:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <HAL_ADC_Start+0x158>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d115      	bne.n	8000dbe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d026      	beq.n	8000dfa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000db4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dbc:	e01d      	b.n	8000dfa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a2f      	ldr	r2, [pc, #188]	; (8000e8c <HAL_ADC_Start+0x158>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d004      	beq.n	8000dde <HAL_ADC_Start+0xaa>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a2b      	ldr	r2, [pc, #172]	; (8000e88 <HAL_ADC_Start+0x154>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10d      	bne.n	8000dfa <HAL_ADC_Start+0xc6>
 8000dde:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <HAL_ADC_Start+0x158>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000df2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e0a:	f023 0206 	bic.w	r2, r3, #6
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e12:	e002      	b.n	8000e1a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f06f 0202 	mvn.w	r2, #2
 8000e2a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e3a:	d113      	bne.n	8000e64 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e40:	4a11      	ldr	r2, [pc, #68]	; (8000e88 <HAL_ADC_Start+0x154>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d105      	bne.n	8000e52 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <HAL_ADC_Start+0x158>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d108      	bne.n	8000e64 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	e00c      	b.n	8000e7e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	e003      	b.n	8000e7e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3710      	adds	r7, #16
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012800 	.word	0x40012800
 8000e8c:	40012400 	.word	0x40012400

08000e90 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0320 	and.w	r3, r3, #32
 8000ea2:	2b20      	cmp	r3, #32
 8000ea4:	d140      	bne.n	8000f28 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f003 0302 	and.w	r3, r3, #2
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d139      	bne.n	8000f28 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d105      	bne.n	8000ecc <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ed6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eda:	d11d      	bne.n	8000f18 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d119      	bne.n	8000f18 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0220 	bic.w	r2, r2, #32
 8000ef2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ef8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f10:	f043 0201 	orr.w	r2, r3, #1
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fbcf 	bl	80006bc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f06f 0212 	mvn.w	r2, #18
 8000f26:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	2b80      	cmp	r3, #128	; 0x80
 8000f34:	d14f      	bne.n	8000fd6 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b04      	cmp	r3, #4
 8000f42:	d148      	bne.n	8000fd6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	f003 0310 	and.w	r3, r3, #16
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d105      	bne.n	8000f5c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000f66:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000f6a:	d012      	beq.n	8000f92 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d125      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f88:	d11d      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d119      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fa6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d105      	bne.n	8000fc6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 fb94 	bl	80016f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f06f 020c 	mvn.w	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fe0:	2b40      	cmp	r3, #64	; 0x40
 8000fe2:	d114      	bne.n	800100e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d10d      	bne.n	800100e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f000 f809 	bl	8001016 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f06f 0201 	mvn.w	r2, #1
 800100c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
	...

0800103c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <HAL_ADC_ConfigChannel+0x20>
 8001058:	2302      	movs	r3, #2
 800105a:	e0dc      	b.n	8001216 <HAL_ADC_ConfigChannel+0x1da>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b06      	cmp	r3, #6
 800106a:	d81c      	bhi.n	80010a6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	3b05      	subs	r3, #5
 800107e:	221f      	movs	r2, #31
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	4019      	ands	r1, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685a      	ldr	r2, [r3, #4]
 8001090:	4613      	mov	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	4413      	add	r3, r2
 8001096:	3b05      	subs	r3, #5
 8001098:	fa00 f203 	lsl.w	r2, r0, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34
 80010a4:	e03c      	b.n	8001120 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b0c      	cmp	r3, #12
 80010ac:	d81c      	bhi.n	80010e8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b23      	subs	r3, #35	; 0x23
 80010c0:	221f      	movs	r2, #31
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43db      	mvns	r3, r3
 80010c8:	4019      	ands	r1, r3
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	6818      	ldr	r0, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	4413      	add	r3, r2
 80010d8:	3b23      	subs	r3, #35	; 0x23
 80010da:	fa00 f203 	lsl.w	r2, r0, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	430a      	orrs	r2, r1
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
 80010e6:	e01b      	b.n	8001120 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	3b41      	subs	r3, #65	; 0x41
 80010fa:	221f      	movs	r2, #31
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	4019      	ands	r1, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	3b41      	subs	r3, #65	; 0x41
 8001114:	fa00 f203 	lsl.w	r2, r0, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	430a      	orrs	r2, r1
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b09      	cmp	r3, #9
 8001126:	d91c      	bls.n	8001162 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68d9      	ldr	r1, [r3, #12]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	3b1e      	subs	r3, #30
 800113a:	2207      	movs	r2, #7
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	4019      	ands	r1, r3
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	6898      	ldr	r0, [r3, #8]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	3b1e      	subs	r3, #30
 8001154:	fa00 f203 	lsl.w	r2, r0, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	430a      	orrs	r2, r1
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	e019      	b.n	8001196 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6919      	ldr	r1, [r3, #16]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6898      	ldr	r0, [r3, #8]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	fa00 f203 	lsl.w	r2, r0, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b10      	cmp	r3, #16
 800119c:	d003      	beq.n	80011a6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011a2:	2b11      	cmp	r3, #17
 80011a4:	d132      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a1d      	ldr	r2, [pc, #116]	; (8001220 <HAL_ADC_ConfigChannel+0x1e4>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d125      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d126      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80011cc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d11a      	bne.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <HAL_ADC_ConfigChannel+0x1e8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a13      	ldr	r2, [pc, #76]	; (8001228 <HAL_ADC_ConfigChannel+0x1ec>)
 80011dc:	fba2 2303 	umull	r2, r3, r2, r3
 80011e0:	0c9a      	lsrs	r2, r3, #18
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ec:	e002      	b.n	80011f4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f9      	bne.n	80011ee <HAL_ADC_ConfigChannel+0x1b2>
 80011fa:	e007      	b.n	800120c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f043 0220 	orr.w	r2, r3, #32
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40012400 	.word	0x40012400
 8001224:	20000004 	.word	0x20000004
 8001228:	431bde83 	.word	0x431bde83

0800122c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d040      	beq.n	80012cc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f042 0201 	orr.w	r2, r2, #1
 8001258:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800125a:	4b1f      	ldr	r3, [pc, #124]	; (80012d8 <ADC_Enable+0xac>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <ADC_Enable+0xb0>)
 8001260:	fba2 2303 	umull	r2, r3, r2, r3
 8001264:	0c9b      	lsrs	r3, r3, #18
 8001266:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001268:	e002      	b.n	8001270 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	3b01      	subs	r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1f9      	bne.n	800126a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001276:	f7ff fc57 	bl	8000b28 <HAL_GetTick>
 800127a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800127c:	e01f      	b.n	80012be <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800127e:	f7ff fc53 	bl	8000b28 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d918      	bls.n	80012be <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d011      	beq.n	80012be <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f043 0210 	orr.w	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e007      	b.n	80012ce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 0301 	and.w	r3, r3, #1
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d1d8      	bne.n	800127e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000004 	.word	0x20000004
 80012dc:	431bde83 	.word	0x431bde83

080012e0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d12e      	bne.n	8001358 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0201 	bic.w	r2, r2, #1
 8001308:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800130a:	f7ff fc0d 	bl	8000b28 <HAL_GetTick>
 800130e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001310:	e01b      	b.n	800134a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001312:	f7ff fc09 	bl	8000b28 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d914      	bls.n	800134a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d10d      	bne.n	800134a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	f043 0210 	orr.w	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	f043 0201 	orr.w	r2, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e007      	b.n	800135a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b01      	cmp	r3, #1
 8001356:	d0dc      	beq.n	8001312 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b084      	sub	sp, #16
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001378:	2b00      	cmp	r3, #0
 800137a:	d127      	bne.n	80013cc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001392:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001396:	d115      	bne.n	80013c4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800139c:	2b00      	cmp	r3, #0
 800139e:	d111      	bne.n	80013c4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d105      	bne.n	80013c4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013bc:	f043 0201 	orr.w	r2, r3, #1
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff f979 	bl	80006bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013ca:	e004      	b.n	80013d6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b084      	sub	sp, #16
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f7ff f90d 	bl	800060c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001418:	f043 0204 	orr.w	r2, r3, #4
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff fe01 	bl	8001028 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ADCEx_Calibration_Start+0x1e>
 800144a:	2302      	movs	r3, #2
 800144c:	e095      	b.n	800157a <HAL_ADCEx_Calibration_Start+0x14a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ff42 	bl	80012e0 <ADC_ConversionStop_Disable>
 800145c:	4603      	mov	r3, r0
 800145e:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f040 8084 	bne.w	8001570 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001470:	f023 0302 	bic.w	r3, r3, #2
 8001474:	f043 0202 	orr.w	r2, r3, #2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800147c:	4b41      	ldr	r3, [pc, #260]	; (8001584 <HAL_ADCEx_Calibration_Start+0x154>)
 800147e:	681c      	ldr	r4, [r3, #0]
 8001480:	2002      	movs	r0, #2
 8001482:	f001 fb1d 	bl	8002ac0 <HAL_RCCEx_GetPeriphCLKFreq>
 8001486:	4603      	mov	r3, r0
 8001488:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800148c:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 800148e:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001490:	e002      	b.n	8001498 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	3b01      	subs	r3, #1
 8001496:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f9      	bne.n	8001492 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fec4 	bl	800122c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0208 	orr.w	r2, r2, #8
 80014b2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014b4:	f7ff fb38 	bl	8000b28 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014ba:	e01b      	b.n	80014f4 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014bc:	f7ff fb34 	bl	8000b28 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d914      	bls.n	80014f4 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00d      	beq.n	80014f4 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f023 0312 	bic.w	r3, r3, #18
 80014e0:	f043 0210 	orr.w	r2, r3, #16
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e042      	b.n	800157a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1dc      	bne.n	80014bc <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f042 0204 	orr.w	r2, r2, #4
 8001510:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001512:	f7ff fb09 	bl	8000b28 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001518:	e01b      	b.n	8001552 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800151a:	f7ff fb05 	bl	8000b28 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b0a      	cmp	r3, #10
 8001526:	d914      	bls.n	8001552 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153a:	f023 0312 	bic.w	r3, r3, #18
 800153e:	f043 0210 	orr.w	r2, r3, #16
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e013      	b.n	800157a <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1dc      	bne.n	800151a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	f023 0303 	bic.w	r3, r3, #3
 8001568:	f043 0201 	orr.w	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001578:	7dfb      	ldrb	r3, [r7, #23]
}
 800157a:	4618      	mov	r0, r3
 800157c:	371c      	adds	r7, #28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd90      	pop	{r4, r7, pc}
 8001582:	bf00      	nop
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b092      	sub	sp, #72	; 0x48
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	2230      	movs	r2, #48	; 0x30
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 fc4c 	bl	8002e40 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e08f      	b.n	80016d6 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80015be:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 80015c0:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015ce:	d00b      	beq.n	80015e8 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	f043 0220 	orr.w	r2, r3, #32
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e076      	b.n	80016d6 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 80015e8:	68f8      	ldr	r0, [r7, #12]
 80015ea:	f7ff fe1f 	bl	800122c <ADC_Enable>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 80015f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d107      	bne.n	800160c <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fe13 	bl	800122c <ADC_Enable>
 8001606:	4603      	mov	r3, r0
 8001608:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800160c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001610:	2b00      	cmp	r3, #0
 8001612:	d15a      	bne.n	80016ca <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001618:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 800161a:	4013      	ands	r3, r2
 800161c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001636:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800163a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a23      	ldr	r2, [pc, #140]	; (80016ec <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 800165e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a22      	ldr	r2, [pc, #136]	; (80016f0 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f06f 0202 	mvn.w	r2, #2
 8001670:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689a      	ldr	r2, [r3, #8]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001680:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a18      	ldr	r0, [r3, #32]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	334c      	adds	r3, #76	; 0x4c
 800168c:	4619      	mov	r1, r3
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f000 f9f3 	bl	8001a7c <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016a4:	d108      	bne.n	80016b8 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689a      	ldr	r2, [r3, #8]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	e00c      	b.n	80016d2 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	e003      	b.n	80016d2 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3748      	adds	r7, #72	; 0x48
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40012800 	.word	0x40012800
 80016e4:	ffeffcfe 	.word	0xffeffcfe
 80016e8:	08001363 	.word	0x08001363
 80016ec:	080013df 	.word	0x080013df
 80016f0:	080013fb 	.word	0x080013fb

080016f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
	...

08001708 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b090      	sub	sp, #64	; 0x40
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2230      	movs	r2, #48	; 0x30
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fb8d 	bl	8002e40 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8001730:	2302      	movs	r3, #2
 8001732:	e032      	b.n	800179a <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 800173e:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b01      	cmp	r3, #1
 800174c:	d016      	beq.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8001756:	2b01      	cmp	r3, #1
 8001758:	d010      	beq.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d10b      	bne.n	800177c <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	e008      	b.n	800178e <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	f043 0220 	orr.w	r2, r3, #32
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001796:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 800179a:	4618      	mov	r0, r3
 800179c:	3740      	adds	r7, #64	; 0x40
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40012800 	.word	0x40012800
 80017a8:	40012400 	.word	0x40012400

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4906      	ldr	r1, [pc, #24]	; (8001844 <__NVIC_EnableIRQ+0x34>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001910:	d301      	bcc.n	8001916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001912:	2301      	movs	r3, #1
 8001914:	e00f      	b.n	8001936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <SysTick_Config+0x40>)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3b01      	subs	r3, #1
 800191c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191e:	210f      	movs	r1, #15
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f7ff ff90 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <SysTick_Config+0x40>)
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192e:	4b04      	ldr	r3, [pc, #16]	; (8001940 <SysTick_Config+0x40>)
 8001930:	2207      	movs	r2, #7
 8001932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	e000e010 	.word	0xe000e010

08001944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff ff2d 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800195a:	b580      	push	{r7, lr}
 800195c:	b086      	sub	sp, #24
 800195e:	af00      	add	r7, sp, #0
 8001960:	4603      	mov	r3, r0
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff42 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff90 	bl	800189c <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5f 	bl	8001848 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff35 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa2 	bl	8001900 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e043      	b.n	8001a66 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b22      	ldr	r3, [pc, #136]	; (8001a70 <HAL_DMA_Init+0xa8>)
 80019e6:	4413      	add	r3, r2
 80019e8:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <HAL_DMA_Init+0xac>)
 80019ea:	fba2 2303 	umull	r2, r3, r2, r3
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	009a      	lsls	r2, r3, #2
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a1f      	ldr	r2, [pc, #124]	; (8001a78 <HAL_DMA_Init+0xb0>)
 80019fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2202      	movs	r2, #2
 8001a00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a12:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	bffdfff8 	.word	0xbffdfff8
 8001a74:	cccccccd 	.word	0xcccccccd
 8001a78:	40020000 	.word	0x40020000

08001a7c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_DMA_Start_IT+0x20>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e04a      	b.n	8001b32 <HAL_DMA_Start_IT+0xb6>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d13a      	bne.n	8001b24 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f000 f938 	bl	8001d48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d008      	beq.n	8001af2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 020e 	orr.w	r2, r2, #14
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e00f      	b.n	8001b12 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0204 	bic.w	r2, r2, #4
 8001b00:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f042 020a 	orr.w	r2, r2, #10
 8001b10:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e005      	b.n	8001b30 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2204      	movs	r2, #4
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d04f      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xc8>
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d04a      	beq.n	8001c04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0204 	bic.w	r2, r2, #4
 8001b8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a66      	ldr	r2, [pc, #408]	; (8001d2c <HAL_DMA_IRQHandler+0x1f0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d029      	beq.n	8001bea <HAL_DMA_IRQHandler+0xae>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a65      	ldr	r2, [pc, #404]	; (8001d30 <HAL_DMA_IRQHandler+0x1f4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d022      	beq.n	8001be6 <HAL_DMA_IRQHandler+0xaa>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <HAL_DMA_IRQHandler+0x1f8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d01a      	beq.n	8001be0 <HAL_DMA_IRQHandler+0xa4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a62      	ldr	r2, [pc, #392]	; (8001d38 <HAL_DMA_IRQHandler+0x1fc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d012      	beq.n	8001bda <HAL_DMA_IRQHandler+0x9e>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_DMA_IRQHandler+0x200>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00a      	beq.n	8001bd4 <HAL_DMA_IRQHandler+0x98>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a5f      	ldr	r2, [pc, #380]	; (8001d40 <HAL_DMA_IRQHandler+0x204>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d102      	bne.n	8001bce <HAL_DMA_IRQHandler+0x92>
 8001bc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bcc:	e00e      	b.n	8001bec <HAL_DMA_IRQHandler+0xb0>
 8001bce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bd2:	e00b      	b.n	8001bec <HAL_DMA_IRQHandler+0xb0>
 8001bd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001bd8:	e008      	b.n	8001bec <HAL_DMA_IRQHandler+0xb0>
 8001bda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bde:	e005      	b.n	8001bec <HAL_DMA_IRQHandler+0xb0>
 8001be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be4:	e002      	b.n	8001bec <HAL_DMA_IRQHandler+0xb0>
 8001be6:	2340      	movs	r3, #64	; 0x40
 8001be8:	e000      	b.n	8001bec <HAL_DMA_IRQHandler+0xb0>
 8001bea:	2304      	movs	r3, #4
 8001bec:	4a55      	ldr	r2, [pc, #340]	; (8001d44 <HAL_DMA_IRQHandler+0x208>)
 8001bee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 8094 	beq.w	8001d22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c02:	e08e      	b.n	8001d22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2202      	movs	r2, #2
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d056      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x186>
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d051      	beq.n	8001cc2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0320 	and.w	r3, r3, #32
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10b      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 020a 	bic.w	r2, r2, #10
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a38      	ldr	r2, [pc, #224]	; (8001d2c <HAL_DMA_IRQHandler+0x1f0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d029      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x166>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a37      	ldr	r2, [pc, #220]	; (8001d30 <HAL_DMA_IRQHandler+0x1f4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d022      	beq.n	8001c9e <HAL_DMA_IRQHandler+0x162>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a35      	ldr	r2, [pc, #212]	; (8001d34 <HAL_DMA_IRQHandler+0x1f8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d01a      	beq.n	8001c98 <HAL_DMA_IRQHandler+0x15c>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a34      	ldr	r2, [pc, #208]	; (8001d38 <HAL_DMA_IRQHandler+0x1fc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d012      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x156>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a32      	ldr	r2, [pc, #200]	; (8001d3c <HAL_DMA_IRQHandler+0x200>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00a      	beq.n	8001c8c <HAL_DMA_IRQHandler+0x150>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a31      	ldr	r2, [pc, #196]	; (8001d40 <HAL_DMA_IRQHandler+0x204>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d102      	bne.n	8001c86 <HAL_DMA_IRQHandler+0x14a>
 8001c80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c84:	e00e      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x168>
 8001c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8a:	e00b      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x168>
 8001c8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c90:	e008      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x168>
 8001c92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c96:	e005      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x168>
 8001c98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9c:	e002      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x168>
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e000      	b.n	8001ca4 <HAL_DMA_IRQHandler+0x168>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	4a27      	ldr	r2, [pc, #156]	; (8001d44 <HAL_DMA_IRQHandler+0x208>)
 8001ca6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d034      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001cc0:	e02f      	b.n	8001d22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	409a      	lsls	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d028      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x1e8>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	f003 0308 	and.w	r3, r3, #8
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d023      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 020e 	bic.w	r2, r2, #14
 8001cea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d004      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
    }
  }
  return;
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
}
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40020008 	.word	0x40020008
 8001d30:	4002001c 	.word	0x4002001c
 8001d34:	40020030 	.word	0x40020030
 8001d38:	40020044 	.word	0x40020044
 8001d3c:	40020058 	.word	0x40020058
 8001d40:	4002006c 	.word	0x4002006c
 8001d44:	40020000 	.word	0x40020000

08001d48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5e:	2101      	movs	r1, #1
 8001d60:	fa01 f202 	lsl.w	r2, r1, r2
 8001d64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d108      	bne.n	8001d88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d86:	e007      	b.n	8001d98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	60da      	str	r2, [r3, #12]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b08b      	sub	sp, #44	; 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001db2:	2300      	movs	r3, #0
 8001db4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db6:	e169      	b.n	800208c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001db8:	2201      	movs	r2, #1
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8158 	bne.w	8002086 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	4a9a      	ldr	r2, [pc, #616]	; (8002044 <HAL_GPIO_Init+0x2a0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d05e      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001de0:	4a98      	ldr	r2, [pc, #608]	; (8002044 <HAL_GPIO_Init+0x2a0>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d875      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001de6:	4a98      	ldr	r2, [pc, #608]	; (8002048 <HAL_GPIO_Init+0x2a4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d058      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001dec:	4a96      	ldr	r2, [pc, #600]	; (8002048 <HAL_GPIO_Init+0x2a4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d86f      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001df2:	4a96      	ldr	r2, [pc, #600]	; (800204c <HAL_GPIO_Init+0x2a8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d052      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001df8:	4a94      	ldr	r2, [pc, #592]	; (800204c <HAL_GPIO_Init+0x2a8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d869      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001dfe:	4a94      	ldr	r2, [pc, #592]	; (8002050 <HAL_GPIO_Init+0x2ac>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d04c      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001e04:	4a92      	ldr	r2, [pc, #584]	; (8002050 <HAL_GPIO_Init+0x2ac>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d863      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e0a:	4a92      	ldr	r2, [pc, #584]	; (8002054 <HAL_GPIO_Init+0x2b0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d046      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
 8001e10:	4a90      	ldr	r2, [pc, #576]	; (8002054 <HAL_GPIO_Init+0x2b0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d85d      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e16:	2b12      	cmp	r3, #18
 8001e18:	d82a      	bhi.n	8001e70 <HAL_GPIO_Init+0xcc>
 8001e1a:	2b12      	cmp	r3, #18
 8001e1c:	d859      	bhi.n	8001ed2 <HAL_GPIO_Init+0x12e>
 8001e1e:	a201      	add	r2, pc, #4	; (adr r2, 8001e24 <HAL_GPIO_Init+0x80>)
 8001e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e24:	08001e9f 	.word	0x08001e9f
 8001e28:	08001e79 	.word	0x08001e79
 8001e2c:	08001e8b 	.word	0x08001e8b
 8001e30:	08001ecd 	.word	0x08001ecd
 8001e34:	08001ed3 	.word	0x08001ed3
 8001e38:	08001ed3 	.word	0x08001ed3
 8001e3c:	08001ed3 	.word	0x08001ed3
 8001e40:	08001ed3 	.word	0x08001ed3
 8001e44:	08001ed3 	.word	0x08001ed3
 8001e48:	08001ed3 	.word	0x08001ed3
 8001e4c:	08001ed3 	.word	0x08001ed3
 8001e50:	08001ed3 	.word	0x08001ed3
 8001e54:	08001ed3 	.word	0x08001ed3
 8001e58:	08001ed3 	.word	0x08001ed3
 8001e5c:	08001ed3 	.word	0x08001ed3
 8001e60:	08001ed3 	.word	0x08001ed3
 8001e64:	08001ed3 	.word	0x08001ed3
 8001e68:	08001e81 	.word	0x08001e81
 8001e6c:	08001e95 	.word	0x08001e95
 8001e70:	4a79      	ldr	r2, [pc, #484]	; (8002058 <HAL_GPIO_Init+0x2b4>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e76:	e02c      	b.n	8001ed2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	623b      	str	r3, [r7, #32]
          break;
 8001e7e:	e029      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	3304      	adds	r3, #4
 8001e86:	623b      	str	r3, [r7, #32]
          break;
 8001e88:	e024      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	3308      	adds	r3, #8
 8001e90:	623b      	str	r3, [r7, #32]
          break;
 8001e92:	e01f      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	330c      	adds	r3, #12
 8001e9a:	623b      	str	r3, [r7, #32]
          break;
 8001e9c:	e01a      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e013      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69fa      	ldr	r2, [r7, #28]
 8001ebc:	611a      	str	r2, [r3, #16]
          break;
 8001ebe:	e009      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	615a      	str	r2, [r3, #20]
          break;
 8001eca:	e003      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
          break;
 8001ed0:	e000      	b.n	8001ed4 <HAL_GPIO_Init+0x130>
          break;
 8001ed2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d801      	bhi.n	8001ede <HAL_GPIO_Init+0x13a>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_Init+0x13e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d802      	bhi.n	8001ef0 <HAL_GPIO_Init+0x14c>
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x152>
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	3b08      	subs	r3, #8
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	210f      	movs	r1, #15
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	6a39      	ldr	r1, [r7, #32]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80b1 	beq.w	8002086 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f24:	4b4d      	ldr	r3, [pc, #308]	; (800205c <HAL_GPIO_Init+0x2b8>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	4a4c      	ldr	r2, [pc, #304]	; (800205c <HAL_GPIO_Init+0x2b8>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6193      	str	r3, [r2, #24]
 8001f30:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_GPIO_Init+0x2b8>)
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f3c:	4a48      	ldr	r2, [pc, #288]	; (8002060 <HAL_GPIO_Init+0x2bc>)
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a40      	ldr	r2, [pc, #256]	; (8002064 <HAL_GPIO_Init+0x2c0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d013      	beq.n	8001f90 <HAL_GPIO_Init+0x1ec>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3f      	ldr	r2, [pc, #252]	; (8002068 <HAL_GPIO_Init+0x2c4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00d      	beq.n	8001f8c <HAL_GPIO_Init+0x1e8>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3e      	ldr	r2, [pc, #248]	; (800206c <HAL_GPIO_Init+0x2c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d007      	beq.n	8001f88 <HAL_GPIO_Init+0x1e4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3d      	ldr	r2, [pc, #244]	; (8002070 <HAL_GPIO_Init+0x2cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d101      	bne.n	8001f84 <HAL_GPIO_Init+0x1e0>
 8001f80:	2303      	movs	r3, #3
 8001f82:	e006      	b.n	8001f92 <HAL_GPIO_Init+0x1ee>
 8001f84:	2304      	movs	r3, #4
 8001f86:	e004      	b.n	8001f92 <HAL_GPIO_Init+0x1ee>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0x1ee>
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <HAL_GPIO_Init+0x1ee>
 8001f90:	2300      	movs	r3, #0
 8001f92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f94:	f002 0203 	and.w	r2, r2, #3
 8001f98:	0092      	lsls	r2, r2, #2
 8001f9a:	4093      	lsls	r3, r2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fa2:	492f      	ldr	r1, [pc, #188]	; (8002060 <HAL_GPIO_Init+0x2bc>)
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3302      	adds	r3, #2
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d006      	beq.n	8001fca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	492c      	ldr	r1, [pc, #176]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
 8001fc8:	e006      	b.n	8001fd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	4928      	ldr	r1, [pc, #160]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d006      	beq.n	8001ff2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fe6:	685a      	ldr	r2, [r3, #4]
 8001fe8:	4922      	ldr	r1, [pc, #136]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	604b      	str	r3, [r1, #4]
 8001ff0:	e006      	b.n	8002000 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	491e      	ldr	r1, [pc, #120]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	4918      	ldr	r1, [pc, #96]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4914      	ldr	r1, [pc, #80]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8002024:	4013      	ands	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d021      	beq.n	8002078 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
 8002040:	e021      	b.n	8002086 <HAL_GPIO_Init+0x2e2>
 8002042:	bf00      	nop
 8002044:	10320000 	.word	0x10320000
 8002048:	10310000 	.word	0x10310000
 800204c:	10220000 	.word	0x10220000
 8002050:	10210000 	.word	0x10210000
 8002054:	10120000 	.word	0x10120000
 8002058:	10110000 	.word	0x10110000
 800205c:	40021000 	.word	0x40021000
 8002060:	40010000 	.word	0x40010000
 8002064:	40010800 	.word	0x40010800
 8002068:	40010c00 	.word	0x40010c00
 800206c:	40011000 	.word	0x40011000
 8002070:	40011400 	.word	0x40011400
 8002074:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_GPIO_Init+0x304>)
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	43db      	mvns	r3, r3
 8002080:	4909      	ldr	r1, [pc, #36]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8002082:	4013      	ands	r3, r2
 8002084:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	3301      	adds	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	fa22 f303 	lsr.w	r3, r2, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	f47f ae8e 	bne.w	8001db8 <HAL_GPIO_Init+0x14>
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	372c      	adds	r7, #44	; 0x2c
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr
 80020a8:	40010400 	.word	0x40010400

080020ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
 80020b8:	4613      	mov	r3, r2
 80020ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020bc:	787b      	ldrb	r3, [r7, #1]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020c8:	e003      	b.n	80020d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ca:	887b      	ldrh	r3, [r7, #2]
 80020cc:	041a      	lsls	r2, r3, #16
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	611a      	str	r2, [r3, #16]
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020e6:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	88fb      	ldrh	r3, [r7, #6]
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020f2:	4a05      	ldr	r2, [pc, #20]	; (8002108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	88fb      	ldrh	r3, [r7, #6]
 80020f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020f8:	88fb      	ldrh	r3, [r7, #6]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f000 f806 	bl	800210c <HAL_GPIO_EXTI_Callback>
  }
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40010400 	.word	0x40010400

0800210c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e272      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 8087 	beq.w	800224e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002140:	4b92      	ldr	r3, [pc, #584]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 030c 	and.w	r3, r3, #12
 8002148:	2b04      	cmp	r3, #4
 800214a:	d00c      	beq.n	8002166 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800214c:	4b8f      	ldr	r3, [pc, #572]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b08      	cmp	r3, #8
 8002156:	d112      	bne.n	800217e <HAL_RCC_OscConfig+0x5e>
 8002158:	4b8c      	ldr	r3, [pc, #560]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d10b      	bne.n	800217e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002166:	4b89      	ldr	r3, [pc, #548]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d06c      	beq.n	800224c <HAL_RCC_OscConfig+0x12c>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d168      	bne.n	800224c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e24c      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x76>
 8002188:	4b80      	ldr	r3, [pc, #512]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a7f      	ldr	r2, [pc, #508]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e02e      	b.n	80021f4 <HAL_RCC_OscConfig+0xd4>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x98>
 800219e:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a7a      	ldr	r2, [pc, #488]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b78      	ldr	r3, [pc, #480]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a77      	ldr	r2, [pc, #476]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_RCC_OscConfig+0xd4>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0xbc>
 80021c2:	4b72      	ldr	r3, [pc, #456]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a71      	ldr	r2, [pc, #452]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b6f      	ldr	r3, [pc, #444]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a6e      	ldr	r2, [pc, #440]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xd4>
 80021dc:	4b6b      	ldr	r3, [pc, #428]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a6a      	ldr	r2, [pc, #424]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b68      	ldr	r3, [pc, #416]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a67      	ldr	r2, [pc, #412]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fc:	f7fe fc94 	bl	8000b28 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe fc90 	bl	8000b28 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	; 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e200      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b5d      	ldr	r3, [pc, #372]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xe4>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe fc80 	bl	8000b28 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe fc7c 	bl	8000b28 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	; 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e1ec      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x10c>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d063      	beq.n	8002322 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800225a:	4b4c      	ldr	r3, [pc, #304]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00b      	beq.n	800227e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b08      	cmp	r3, #8
 8002270:	d11c      	bne.n	80022ac <HAL_RCC_OscConfig+0x18c>
 8002272:	4b46      	ldr	r3, [pc, #280]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d116      	bne.n	80022ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800227e:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d005      	beq.n	8002296 <HAL_RCC_OscConfig+0x176>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e1c0      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002296:	4b3d      	ldr	r3, [pc, #244]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4939      	ldr	r1, [pc, #228]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022aa:	e03a      	b.n	8002322 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b4:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fc35 	bl	8000b28 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe fc31 	bl	8000b28 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1a1      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d4:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4927      	ldr	r1, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	600b      	str	r3, [r1, #0]
 80022f4:	e015      	b.n	8002322 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCC_OscConfig+0x270>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fc14 	bl	8000b28 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002304:	f7fe fc10 	bl	8000b28 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e180      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002316:	4b1d      	ldr	r3, [pc, #116]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d03a      	beq.n	80023a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d019      	beq.n	800236a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002336:	4b17      	ldr	r3, [pc, #92]	; (8002394 <HAL_RCC_OscConfig+0x274>)
 8002338:	2201      	movs	r2, #1
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7fe fbf4 	bl	8000b28 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7fe fbf0 	bl	8000b28 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e160      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_RCC_OscConfig+0x26c>)
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0f0      	beq.n	8002344 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002362:	2001      	movs	r0, #1
 8002364:	f000 fad8 	bl	8002918 <RCC_Delay>
 8002368:	e01c      	b.n	80023a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_OscConfig+0x274>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7fe fbda 	bl	8000b28 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002376:	e00f      	b.n	8002398 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002378:	f7fe fbd6 	bl	8000b28 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d908      	bls.n	8002398 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e146      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	42420000 	.word	0x42420000
 8002394:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	4b92      	ldr	r3, [pc, #584]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e9      	bne.n	8002378 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a6 	beq.w	80024fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10d      	bne.n	80023de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023cc:	61d3      	str	r3, [r2, #28]
 80023ce:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	60bb      	str	r3, [r7, #8]
 80023d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023de:	4b82      	ldr	r3, [pc, #520]	; (80025e8 <HAL_RCC_OscConfig+0x4c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d118      	bne.n	800241c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ea:	4b7f      	ldr	r3, [pc, #508]	; (80025e8 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a7e      	ldr	r2, [pc, #504]	; (80025e8 <HAL_RCC_OscConfig+0x4c8>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f6:	f7fe fb97 	bl	8000b28 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fe:	f7fe fb93 	bl	8000b28 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	; 0x64
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e103      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b75      	ldr	r3, [pc, #468]	; (80025e8 <HAL_RCC_OscConfig+0x4c8>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x312>
 8002424:	4b6f      	ldr	r3, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a6e      	ldr	r2, [pc, #440]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	e02d      	b.n	800248e <HAL_RCC_OscConfig+0x36e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10c      	bne.n	8002454 <HAL_RCC_OscConfig+0x334>
 800243a:	4b6a      	ldr	r3, [pc, #424]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a69      	ldr	r2, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a66      	ldr	r2, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	e01c      	b.n	800248e <HAL_RCC_OscConfig+0x36e>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d10c      	bne.n	8002476 <HAL_RCC_OscConfig+0x356>
 800245c:	4b61      	ldr	r3, [pc, #388]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	4a60      	ldr	r2, [pc, #384]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6213      	str	r3, [r2, #32]
 8002468:	4b5e      	ldr	r3, [pc, #376]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a5d      	ldr	r2, [pc, #372]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0301 	orr.w	r3, r3, #1
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	e00b      	b.n	800248e <HAL_RCC_OscConfig+0x36e>
 8002476:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	4a5a      	ldr	r2, [pc, #360]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	6213      	str	r3, [r2, #32]
 8002482:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a57      	ldr	r2, [pc, #348]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 0304 	bic.w	r3, r3, #4
 800248c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d015      	beq.n	80024c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002496:	f7fe fb47 	bl	8000b28 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe fb43 	bl	8000b28 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e0b1      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b4:	4b4b      	ldr	r3, [pc, #300]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ee      	beq.n	800249e <HAL_RCC_OscConfig+0x37e>
 80024c0:	e014      	b.n	80024ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fb31 	bl	8000b28 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c8:	e00a      	b.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f7fe fb2d 	bl	8000b28 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e09b      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024e0:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1ee      	bne.n	80024ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024ec:	7dfb      	ldrb	r3, [r7, #23]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d105      	bne.n	80024fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f2:	4b3c      	ldr	r3, [pc, #240]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4a3b      	ldr	r2, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 8087 	beq.w	8002616 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002508:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d061      	beq.n	80025d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d146      	bne.n	80025aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800251c:	4b33      	ldr	r3, [pc, #204]	; (80025ec <HAL_RCC_OscConfig+0x4cc>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fb01 	bl	8000b28 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fafd 	bl	8000b28 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e06d      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253c:	4b29      	ldr	r3, [pc, #164]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f0      	bne.n	800252a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d108      	bne.n	8002564 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002552:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4921      	ldr	r1, [pc, #132]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a19      	ldr	r1, [r3, #32]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	430b      	orrs	r3, r1
 8002576:	491b      	ldr	r1, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_RCC_OscConfig+0x4cc>)
 800257e:	2201      	movs	r2, #1
 8002580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002582:	f7fe fad1 	bl	8000b28 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258a:	f7fe facd 	bl	8000b28 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e03d      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f0      	beq.n	800258a <HAL_RCC_OscConfig+0x46a>
 80025a8:	e035      	b.n	8002616 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_OscConfig+0x4cc>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe faba 	bl	8000b28 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fab6 	bl	8000b28 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e026      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x498>
 80025d6:	e01e      	b.n	8002616 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e019      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40007000 	.word	0x40007000
 80025ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_OscConfig+0x500>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	429a      	cmp	r2, r3
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0d0      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002638:	4b6a      	ldr	r3, [pc, #424]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d910      	bls.n	8002668 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002646:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f023 0207 	bic.w	r2, r3, #7
 800264e:	4965      	ldr	r1, [pc, #404]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	429a      	cmp	r2, r3
 8002662:	d001      	beq.n	8002668 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0b8      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002680:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4a58      	ldr	r2, [pc, #352]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002686:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800268a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002698:	4b53      	ldr	r3, [pc, #332]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4a52      	ldr	r2, [pc, #328]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80026a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a4:	4b50      	ldr	r3, [pc, #320]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	494d      	ldr	r1, [pc, #308]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d040      	beq.n	8002744 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b47      	ldr	r3, [pc, #284]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d115      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e07f      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d107      	bne.n	80026f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026e2:	4b41      	ldr	r3, [pc, #260]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e073      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f2:	4b3d      	ldr	r3, [pc, #244]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e06b      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002702:	4b39      	ldr	r3, [pc, #228]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 0203 	bic.w	r2, r3, #3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	4936      	ldr	r1, [pc, #216]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	4313      	orrs	r3, r2
 8002712:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002714:	f7fe fa08 	bl	8000b28 <HAL_GetTick>
 8002718:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	e00a      	b.n	8002732 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800271c:	f7fe fa04 	bl	8000b28 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f241 3288 	movw	r2, #5000	; 0x1388
 800272a:	4293      	cmp	r3, r2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e053      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 020c 	and.w	r2, r3, #12
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	429a      	cmp	r2, r3
 8002742:	d1eb      	bne.n	800271c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d210      	bcs.n	8002774 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4922      	ldr	r1, [pc, #136]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b20      	ldr	r3, [pc, #128]	; (80027e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e032      	b.n	80027da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002780:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4916      	ldr	r1, [pc, #88]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800279e:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	490e      	ldr	r1, [pc, #56]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027b2:	f000 f821 	bl	80027f8 <HAL_RCC_GetSysClockFreq>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	490a      	ldr	r1, [pc, #40]	; (80027ec <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	5ccb      	ldrb	r3, [r1, r3]
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	4a09      	ldr	r2, [pc, #36]	; (80027f0 <HAL_RCC_ClockConfig+0x1cc>)
 80027cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_ClockConfig+0x1d0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe f966 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08002e88 	.word	0x08002e88
 80027f0:	20000004 	.word	0x20000004
 80027f4:	20000008 	.word	0x20000008

080027f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027f8:	b490      	push	{r4, r7}
 80027fa:	b08a      	sub	sp, #40	; 0x28
 80027fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027fe:	4b29      	ldr	r3, [pc, #164]	; (80028a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002800:	1d3c      	adds	r4, r7, #4
 8002802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002804:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002808:	f240 2301 	movw	r3, #513	; 0x201
 800280c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	; 0x24
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002822:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 030c 	and.w	r3, r3, #12
 800282e:	2b04      	cmp	r3, #4
 8002830:	d002      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0x40>
 8002832:	2b08      	cmp	r3, #8
 8002834:	d003      	beq.n	800283e <HAL_RCC_GetSysClockFreq+0x46>
 8002836:	e02b      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800283a:	623b      	str	r3, [r7, #32]
      break;
 800283c:	e02b      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	0c9b      	lsrs	r3, r3, #18
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3328      	adds	r3, #40	; 0x28
 8002848:	443b      	add	r3, r7
 800284a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800284e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d012      	beq.n	8002880 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	0c5b      	lsrs	r3, r3, #17
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	3328      	adds	r3, #40	; 0x28
 8002866:	443b      	add	r3, r7
 8002868:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800286c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002872:	fb03 f202 	mul.w	r2, r3, r2
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	e004      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	4a0b      	ldr	r2, [pc, #44]	; (80028b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800288a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288c:	623b      	str	r3, [r7, #32]
      break;
 800288e:	e002      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8002892:	623b      	str	r3, [r7, #32]
      break;
 8002894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002896:	6a3b      	ldr	r3, [r7, #32]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3728      	adds	r7, #40	; 0x28
 800289c:	46bd      	mov	sp, r7
 800289e:	bc90      	pop	{r4, r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	08002e68 	.word	0x08002e68
 80028a8:	40021000 	.word	0x40021000
 80028ac:	007a1200 	.word	0x007a1200
 80028b0:	003d0900 	.word	0x003d0900

080028b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b8:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028cc:	f7ff fff2 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	4903      	ldr	r1, [pc, #12]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80028de:	5ccb      	ldrb	r3, [r1, r3]
 80028e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08002e98 	.word	0x08002e98

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f4:	f7ff ffde 	bl	80028b4 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	0adb      	lsrs	r3, r3, #11
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4903      	ldr	r1, [pc, #12]	; (8002914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	08002e98 	.word	0x08002e98

08002918 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002920:	4b0a      	ldr	r3, [pc, #40]	; (800294c <RCC_Delay+0x34>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <RCC_Delay+0x38>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	0a5b      	lsrs	r3, r3, #9
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002934:	bf00      	nop
  }
  while (Delay --);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1e5a      	subs	r2, r3, #1
 800293a:	60fa      	str	r2, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f9      	bne.n	8002934 <RCC_Delay+0x1c>
}
 8002940:	bf00      	nop
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	20000004 	.word	0x20000004
 8002950:	10624dd3 	.word	0x10624dd3

08002954 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b00      	cmp	r3, #0
 800296e:	d07d      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002970:	2300      	movs	r3, #0
 8002972:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002974:	4b4f      	ldr	r3, [pc, #316]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10d      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002980:	4b4c      	ldr	r3, [pc, #304]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	4a4b      	ldr	r2, [pc, #300]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800298a:	61d3      	str	r3, [r2, #28]
 800298c:	4b49      	ldr	r3, [pc, #292]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002998:	2301      	movs	r3, #1
 800299a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b46      	ldr	r3, [pc, #280]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d118      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a8:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a42      	ldr	r2, [pc, #264]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b4:	f7fe f8b8 	bl	8000b28 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	e008      	b.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029bc:	f7fe f8b4 	bl	8000b28 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e06d      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ce:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029da:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d02e      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d027      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a00:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a02:	4b2e      	ldr	r3, [pc, #184]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a0e:	4a29      	ldr	r2, [pc, #164]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d014      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe f883 	bl	8000b28 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe f87f 	bl	8000b28 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e036      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ee      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4917      	ldr	r1, [pc, #92]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	4a13      	ldr	r2, [pc, #76]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	490b      	ldr	r1, [pc, #44]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40007000 	.word	0x40007000
 8002abc:	42420440 	.word	0x42420440

08002ac0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b08d      	sub	sp, #52	; 0x34
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ac8:	4b58      	ldr	r3, [pc, #352]	; (8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002aca:	f107 040c 	add.w	r4, r7, #12
 8002ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ad4:	f240 2301 	movw	r3, #513	; 0x201
 8002ad8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	2300      	movs	r3, #0
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	f200 808e 	bhi.w	8002c18 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d049      	beq.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d079      	beq.n	8002bfc <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002b08:	e086      	b.n	8002c18 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b10:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d07f      	beq.n	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	0c9b      	lsrs	r3, r3, #18
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	3330      	adds	r3, #48	; 0x30
 8002b26:	443b      	add	r3, r7
 8002b28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b2c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d017      	beq.n	8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b38:	4b3d      	ldr	r3, [pc, #244]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	0c5b      	lsrs	r3, r3, #17
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	3330      	adds	r3, #48	; 0x30
 8002b44:	443b      	add	r3, r7
 8002b46:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00d      	beq.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b56:	4a37      	ldr	r2, [pc, #220]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b66:	e004      	b.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	4a33      	ldr	r2, [pc, #204]	; (8002c38 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b7e:	d102      	bne.n	8002b86 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b84:	e04a      	b.n	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4a2c      	ldr	r2, [pc, #176]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b94:	e042      	b.n	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ba6:	d108      	bne.n	8002bba <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb8:	e01f      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc4:	d109      	bne.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002bc6:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002bd2:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bd8:	e00f      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be4:	d11c      	bne.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002be6:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002bf2:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002bf6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002bf8:	e012      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002bfa:	e011      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bfc:	f7ff fe78 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0b9b      	lsrs	r3, r3, #14
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c16:	e004      	b.n	8002c22 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002c18:	bf00      	nop
 8002c1a:	e002      	b.n	8002c22 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002c1c:	bf00      	nop
 8002c1e:	e000      	b.n	8002c22 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002c20:	bf00      	nop
    }
  }
  return (frequency);
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3734      	adds	r7, #52	; 0x34
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd90      	pop	{r4, r7, pc}
 8002c2c:	08002e78 	.word	0x08002e78
 8002c30:	40021000 	.word	0x40021000
 8002c34:	007a1200 	.word	0x007a1200
 8002c38:	003d0900 	.word	0x003d0900
 8002c3c:	aaaaaaab 	.word	0xaaaaaaab

08002c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e03f      	b.n	8002cd2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fd fea2 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2224      	movs	r2, #36	; 0x24
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f829 	bl	8002cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d16:	f023 030c 	bic.w	r3, r3, #12
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	68b9      	ldr	r1, [r7, #8]
 8002d20:	430b      	orrs	r3, r1
 8002d22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a2c      	ldr	r2, [pc, #176]	; (8002df0 <UART_SetConfig+0x114>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d103      	bne.n	8002d4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d44:	f7ff fdd4 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	e002      	b.n	8002d52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d4c:	f7ff fdbc 	bl	80028c8 <HAL_RCC_GetPCLK1Freq>
 8002d50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009a      	lsls	r2, r3, #2
 8002d5c:	441a      	add	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	4a22      	ldr	r2, [pc, #136]	; (8002df4 <UART_SetConfig+0x118>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	0119      	lsls	r1, r3, #4
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009a      	lsls	r2, r3, #2
 8002d7c:	441a      	add	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d88:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <UART_SetConfig+0x118>)
 8002d8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2064      	movs	r0, #100	; 0x64
 8002d92:	fb00 f303 	mul.w	r3, r0, r3
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	3332      	adds	r3, #50	; 0x32
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <UART_SetConfig+0x118>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da8:	4419      	add	r1, r3
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <UART_SetConfig+0x118>)
 8002dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2064      	movs	r0, #100	; 0x64
 8002dca:	fb00 f303 	mul.w	r3, r0, r3
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	3332      	adds	r3, #50	; 0x32
 8002dd4:	4a07      	ldr	r2, [pc, #28]	; (8002df4 <UART_SetConfig+0x118>)
 8002dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dda:	095b      	lsrs	r3, r3, #5
 8002ddc:	f003 020f 	and.w	r2, r3, #15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	440a      	add	r2, r1
 8002de6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40013800 	.word	0x40013800
 8002df4:	51eb851f 	.word	0x51eb851f

08002df8 <__libc_init_array>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	2600      	movs	r6, #0
 8002dfc:	4d0c      	ldr	r5, [pc, #48]	; (8002e30 <__libc_init_array+0x38>)
 8002dfe:	4c0d      	ldr	r4, [pc, #52]	; (8002e34 <__libc_init_array+0x3c>)
 8002e00:	1b64      	subs	r4, r4, r5
 8002e02:	10a4      	asrs	r4, r4, #2
 8002e04:	42a6      	cmp	r6, r4
 8002e06:	d109      	bne.n	8002e1c <__libc_init_array+0x24>
 8002e08:	f000 f822 	bl	8002e50 <_init>
 8002e0c:	2600      	movs	r6, #0
 8002e0e:	4d0a      	ldr	r5, [pc, #40]	; (8002e38 <__libc_init_array+0x40>)
 8002e10:	4c0a      	ldr	r4, [pc, #40]	; (8002e3c <__libc_init_array+0x44>)
 8002e12:	1b64      	subs	r4, r4, r5
 8002e14:	10a4      	asrs	r4, r4, #2
 8002e16:	42a6      	cmp	r6, r4
 8002e18:	d105      	bne.n	8002e26 <__libc_init_array+0x2e>
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
 8002e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e20:	4798      	blx	r3
 8002e22:	3601      	adds	r6, #1
 8002e24:	e7ee      	b.n	8002e04 <__libc_init_array+0xc>
 8002e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2a:	4798      	blx	r3
 8002e2c:	3601      	adds	r6, #1
 8002e2e:	e7f2      	b.n	8002e16 <__libc_init_array+0x1e>
 8002e30:	08002ea0 	.word	0x08002ea0
 8002e34:	08002ea0 	.word	0x08002ea0
 8002e38:	08002ea0 	.word	0x08002ea0
 8002e3c:	08002ea4 	.word	0x08002ea4

08002e40 <memset>:
 8002e40:	4603      	mov	r3, r0
 8002e42:	4402      	add	r2, r0
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d100      	bne.n	8002e4a <memset+0xa>
 8002e48:	4770      	bx	lr
 8002e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e4e:	e7f9      	b.n	8002e44 <memset+0x4>

08002e50 <_init>:
 8002e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e52:	bf00      	nop
 8002e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e56:	bc08      	pop	{r3}
 8002e58:	469e      	mov	lr, r3
 8002e5a:	4770      	bx	lr

08002e5c <_fini>:
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	bf00      	nop
 8002e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e62:	bc08      	pop	{r3}
 8002e64:	469e      	mov	lr, r3
 8002e66:	4770      	bx	lr


MultiADCs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007314  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08007428  08007428  00017428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800789c  0800789c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800789c  0800789c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800789c  0800789c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800789c  0800789c  0001789c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078a0  080078a0  000178a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080078a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000994  200001e0  08007a84  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b74  08007a84  00020b74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000965f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002324  00000000  00000000  00029868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002bb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b0  00000000  00000000  0002c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ca8  00000000  00000000  0002cdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2c3  00000000  00000000  00045aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000893f0  00000000  00000000  00051d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db153  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  000db1a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800740c 	.word	0x0800740c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800740c 	.word	0x0800740c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ff8:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8000ffa:	4a2f      	ldr	r2, [pc, #188]	; (80010b8 <MX_ADC1_Init+0xd4>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ffe:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001004:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001006:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001008:	2201      	movs	r2, #1
 800100a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100c:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_ADC1_Init+0xd0>)
 800100e:	2200      	movs	r2, #0
 8001010:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001014:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001018:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_ADC1_Init+0xd0>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001022:	2203      	movs	r2, #3
 8001024:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001026:	4823      	ldr	r0, [pc, #140]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001028:	f001 f954 	bl	80022d4 <HAL_ADC_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_ADC1_Init+0x52>
  {
    Error_Handler();
 8001032:	f000 fef6 	bl	8001e22 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8001036:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800103a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	4619      	mov	r1, r3
 8001042:	481c      	ldr	r0, [pc, #112]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001044:	f001 ff08 	bl	8002e58 <HAL_ADCEx_MultiModeConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fee8 	bl	8001e22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001052:	2300      	movs	r3, #0
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2301      	movs	r3, #1
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4814      	ldr	r0, [pc, #80]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001064:	f001 fb92 	bl	800278c <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800106e:	f000 fed8 	bl	8001e22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001072:	2304      	movs	r3, #4
 8001074:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001076:	2302      	movs	r3, #2
 8001078:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_ADC1_Init+0xd0>)
 8001080:	f001 fb84 	bl	800278c <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800108a:	f000 feca 	bl	8001e22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800108e:	230b      	movs	r3, #11
 8001090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001092:	2303      	movs	r3, #3
 8001094:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_ADC1_Init+0xd0>)
 800109c:	f001 fb76 	bl	800278c <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010a6:	f000 febc 	bl	8001e22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001fc 	.word	0x200001fc
 80010b8:	40012400 	.word	0x40012400

080010bc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <MX_ADC2_Init+0xb0>)
 80010ce:	4a28      	ldr	r2, [pc, #160]	; (8001170 <MX_ADC2_Init+0xb4>)
 80010d0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010d2:	4b26      	ldr	r3, [pc, #152]	; (800116c <MX_ADC2_Init+0xb0>)
 80010d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_ADC2_Init+0xb0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <MX_ADC2_Init+0xb0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_ADC2_Init+0xb0>)
 80010e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010ec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <MX_ADC2_Init+0xb0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 3;
 80010f4:	4b1d      	ldr	r3, [pc, #116]	; (800116c <MX_ADC2_Init+0xb0>)
 80010f6:	2203      	movs	r2, #3
 80010f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fa:	481c      	ldr	r0, [pc, #112]	; (800116c <MX_ADC2_Init+0xb0>)
 80010fc:	f001 f8ea 	bl	80022d4 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC2_Init+0x4e>
  {
    Error_Handler();
 8001106:	f000 fe8c 	bl	8001e22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2301      	movs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001112:	2307      	movs	r3, #7
 8001114:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4619      	mov	r1, r3
 800111a:	4814      	ldr	r0, [pc, #80]	; (800116c <MX_ADC2_Init+0xb0>)
 800111c:	f001 fb36 	bl	800278c <HAL_ADC_ConfigChannel>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 fe7c 	bl	8001e22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800112a:	2308      	movs	r3, #8
 800112c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112e:	2302      	movs	r3, #2
 8001130:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	480d      	ldr	r0, [pc, #52]	; (800116c <MX_ADC2_Init+0xb0>)
 8001138:	f001 fb28 	bl	800278c <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001142:	f000 fe6e 	bl	8001e22 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001146:	230a      	movs	r3, #10
 8001148:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800114a:	2303      	movs	r3, #3
 800114c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	4806      	ldr	r0, [pc, #24]	; (800116c <MX_ADC2_Init+0xb0>)
 8001154:	f001 fb1a 	bl	800278c <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC2_Init+0xa6>
  {
    Error_Handler();
 800115e:	f000 fe60 	bl	8001e22 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000022c 	.word	0x2000022c
 8001170:	40012800 	.word	0x40012800

08001174 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a65      	ldr	r2, [pc, #404]	; (8001324 <HAL_ADC_MspInit+0x1b0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d168      	bne.n	8001266 <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001194:	4b64      	ldr	r3, [pc, #400]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	4a63      	ldr	r2, [pc, #396]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119e:	6193      	str	r3, [r2, #24]
 80011a0:	4b61      	ldr	r3, [pc, #388]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ac:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	4a5d      	ldr	r2, [pc, #372]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011b2:	f043 0310 	orr.w	r3, r3, #16
 80011b6:	6193      	str	r3, [r2, #24]
 80011b8:	4b5b      	ldr	r3, [pc, #364]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f003 0310 	and.w	r3, r3, #16
 80011c0:	623b      	str	r3, [r7, #32]
 80011c2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c4:	4b58      	ldr	r3, [pc, #352]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	4a57      	ldr	r2, [pc, #348]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6193      	str	r3, [r2, #24]
 80011d0:	4b55      	ldr	r3, [pc, #340]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	69fb      	ldr	r3, [r7, #28]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA0-WKUP     ------> ADC1_IN0
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011dc:	2303      	movs	r3, #3
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e0:	2303      	movs	r3, #3
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e8:	4619      	mov	r1, r3
 80011ea:	4850      	ldr	r0, [pc, #320]	; (800132c <HAL_ADC_MspInit+0x1b8>)
 80011ec:	f002 f982 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80011f0:	2311      	movs	r3, #17
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f4:	2303      	movs	r3, #3
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011fc:	4619      	mov	r1, r3
 80011fe:	484c      	ldr	r0, [pc, #304]	; (8001330 <HAL_ADC_MspInit+0x1bc>)
 8001200:	f002 f978 	bl	80034f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001206:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_ADC_MspInit+0x1c4>)
 8001208:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120a:	4b4a      	ldr	r3, [pc, #296]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001216:	4b47      	ldr	r3, [pc, #284]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001218:	2280      	movs	r2, #128	; 0x80
 800121a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800121c:	4b45      	ldr	r3, [pc, #276]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800121e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001222:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001224:	4b43      	ldr	r3, [pc, #268]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800122a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800122c:	4b41      	ldr	r3, [pc, #260]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800122e:	2220      	movs	r2, #32
 8001230:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001232:	4b40      	ldr	r3, [pc, #256]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001238:	483e      	ldr	r0, [pc, #248]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800123a:	f001 ff6d 	bl	8003118 <HAL_DMA_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001244:	f000 fded 	bl	8001e22 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3a      	ldr	r2, [pc, #232]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 800124c:	621a      	str	r2, [r3, #32]
 800124e:	4a39      	ldr	r2, [pc, #228]	; (8001334 <HAL_ADC_MspInit+0x1c0>)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2012      	movs	r0, #18
 800125a:	f001 ff26 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800125e:	2012      	movs	r0, #18
 8001260:	f001 ff3f 	bl	80030e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001264:	e05a      	b.n	800131c <HAL_ADC_MspInit+0x1a8>
  else if(adcHandle->Instance==ADC2)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a34      	ldr	r2, [pc, #208]	; (800133c <HAL_ADC_MspInit+0x1c8>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d155      	bne.n	800131c <HAL_ADC_MspInit+0x1a8>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	4a2c      	ldr	r2, [pc, #176]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 8001276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127a:	6193      	str	r3, [r2, #24]
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	4a26      	ldr	r2, [pc, #152]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 800128e:	f043 0310 	orr.w	r3, r3, #16
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a20      	ldr	r2, [pc, #128]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0304 	and.w	r3, r3, #4
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012be:	f043 0308 	orr.w	r3, r3, #8
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <HAL_ADC_MspInit+0x1b4>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d0:	2303      	movs	r3, #3
 80012d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d4:	2303      	movs	r3, #3
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012dc:	4619      	mov	r1, r3
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <HAL_ADC_MspInit+0x1b8>)
 80012e0:	f002 f908 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012e4:	2302      	movs	r3, #2
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e8:	2303      	movs	r3, #3
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f0:	4619      	mov	r1, r3
 80012f2:	480f      	ldr	r0, [pc, #60]	; (8001330 <HAL_ADC_MspInit+0x1bc>)
 80012f4:	f002 f8fe 	bl	80034f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fc:	2303      	movs	r3, #3
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001304:	4619      	mov	r1, r3
 8001306:	480e      	ldr	r0, [pc, #56]	; (8001340 <HAL_ADC_MspInit+0x1cc>)
 8001308:	f002 f8f4 	bl	80034f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800130c:	2200      	movs	r2, #0
 800130e:	2100      	movs	r1, #0
 8001310:	2012      	movs	r0, #18
 8001312:	f001 feca 	bl	80030aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001316:	2012      	movs	r0, #18
 8001318:	f001 fee3 	bl	80030e2 <HAL_NVIC_EnableIRQ>
}
 800131c:	bf00      	nop
 800131e:	3738      	adds	r7, #56	; 0x38
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40012400 	.word	0x40012400
 8001328:	40021000 	.word	0x40021000
 800132c:	40011000 	.word	0x40011000
 8001330:	40010800 	.word	0x40010800
 8001334:	2000025c 	.word	0x2000025c
 8001338:	40020008 	.word	0x40020008
 800133c:	40012800 	.word	0x40012800
 8001340:	40010c00 	.word	0x40010c00

08001344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	4b0c      	ldr	r3, [pc, #48]	; (800137c <MX_DMA_Init+0x38>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <MX_DMA_Init+0x38>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6153      	str	r3, [r2, #20]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <MX_DMA_Init+0x38>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	200b      	movs	r0, #11
 8001368:	f001 fe9f 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800136c:	200b      	movs	r0, #11
 800136e:	f001 feb8 	bl	80030e2 <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40021000 	.word	0x40021000

08001380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0310 	add.w	r3, r7, #16
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <MX_GPIO_Init+0xa8>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a23      	ldr	r2, [pc, #140]	; (8001428 <MX_GPIO_Init+0xa8>)
 800139a:	f043 0310 	orr.w	r3, r3, #16
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b21      	ldr	r3, [pc, #132]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0310 	and.w	r3, r3, #16
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	4b1e      	ldr	r3, [pc, #120]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013b2:	f043 0320 	orr.w	r3, r3, #32
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013ca:	f043 0304 	orr.w	r3, r3, #4
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0304 	and.w	r3, r3, #4
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a11      	ldr	r2, [pc, #68]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <MX_GPIO_Init+0xa8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0308 	and.w	r3, r3, #8
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_GPIO_Init+0xac>)
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <MX_GPIO_Init+0xb0>)
 800140a:	f002 f873 	bl	80034f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2028      	movs	r0, #40	; 0x28
 8001414:	f001 fe49 	bl	80030aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001418:	2028      	movs	r0, #40	; 0x28
 800141a:	f001 fe62 	bl	80030e2 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000
 800142c:	10110000 	.word	0x10110000
 8001430:	40011000 	.word	0x40011000

08001434 <ADC_Start>:
/* USER CODE BEGIN 0 */



void ADC_Start(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
	while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001438:	bf00      	nop
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <ADC_Start+0x3c>)
 800143c:	f001 fba0 	bl	8002b80 <HAL_ADCEx_Calibration_Start>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f9      	bne.n	800143a <ADC_Start+0x6>
	while(HAL_ADCEx_Calibration_Start(&hadc2) != HAL_OK);
 8001446:	bf00      	nop
 8001448:	480a      	ldr	r0, [pc, #40]	; (8001474 <ADC_Start+0x40>)
 800144a:	f001 fb99 	bl	8002b80 <HAL_ADCEx_Calibration_Start>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1f9      	bne.n	8001448 <ADC_Start+0x14>
	HAL_Delay(10);
 8001454:	200a      	movs	r0, #10
 8001456:	f000 ff19 	bl	800228c <HAL_Delay>
	HAL_ADC_Start(&hadc2);
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <ADC_Start+0x40>)
 800145c:	f001 f812 	bl	8002484 <HAL_ADC_Start>
	HAL_ADCEx_MultiModeStart_DMA(&hadc1, ADC_Buffer, (uint32_t)2 * CHANNELS);
 8001460:	2206      	movs	r2, #6
 8001462:	4905      	ldr	r1, [pc, #20]	; (8001478 <ADC_Start+0x44>)
 8001464:	4802      	ldr	r0, [pc, #8]	; (8001470 <ADC_Start+0x3c>)
 8001466:	f001 fc37 	bl	8002cd8 <HAL_ADCEx_MultiModeStart_DMA>
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	200001fc 	.word	0x200001fc
 8001474:	2000022c 	.word	0x2000022c
 8001478:	200002a0 	.word	0x200002a0

0800147c <CalcRMScorection>:

void CalcRMScorection()
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
		while(indexCircBuffer!= 0);
 8001482:	bf00      	nop
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <CalcRMScorection+0x70>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1fb      	bne.n	8001484 <CalcRMScorection+0x8>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
		__disable_irq();
		uint32_t timeOfBufforing = time[BUFFERSIZE-1]- time[0];
 8001490:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <CalcRMScorection+0x74>)
 8001492:	f8d3 21fc 	ldr.w	r2, [r3, #508]	; 0x1fc
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <CalcRMScorection+0x74>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	60fb      	str	r3, [r7, #12]
		uint32_t halfPhase = 1000000/EXPECTEDFREQ/2;
 800149e:	f242 7310 	movw	r3, #10000	; 0x2710
 80014a2:	60bb      	str	r3, [r7, #8]
		uint16_t halfPeriods = timeOfBufforing/halfPhase;
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ac:	80fb      	strh	r3, [r7, #6]

		while(time[BUFFERSIZE-1-correctionRMS] > time[0] + halfPhase*halfPeriods) correctionRMS++;
 80014ae:	e005      	b.n	80014bc <CalcRMScorection+0x40>
 80014b0:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <CalcRMScorection+0x78>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <CalcRMScorection+0x78>)
 80014ba:	701a      	strb	r2, [r3, #0]
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <CalcRMScorection+0x78>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <CalcRMScorection+0x74>)
 80014c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <CalcRMScorection+0x74>)
 80014cc:	6819      	ldr	r1, [r3, #0]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	fb00 f303 	mul.w	r3, r0, r3
 80014d6:	440b      	add	r3, r1
 80014d8:	429a      	cmp	r2, r3
 80014da:	d8e9      	bhi.n	80014b0 <CalcRMScorection+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 80014dc:	b662      	cpsie	i
}
 80014de:	bf00      	nop
		__enable_irq();
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000ab8 	.word	0x20000ab8
 80014f0:	200008b8 	.word	0x200008b8
 80014f4:	20000af8 	.word	0x20000af8

080014f8 <CalibrateZero>:

void CalibrateZero()
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0

	printf("Starting calibration...\n");
 80014fe:	484c      	ldr	r0, [pc, #304]	; (8001630 <CalibrateZero+0x138>)
 8001500:	f003 fdfe 	bl	8005100 <puts>
	//printf("Press button when voltage and current is equal to 0\n");
	while(indexCircBuffer!= 0);
 8001504:	bf00      	nop
 8001506:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <CalibrateZero+0x13c>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1fb      	bne.n	8001506 <CalibrateZero+0xe>
  __ASM volatile ("cpsid i" : : : "memory");
 800150e:	b672      	cpsid	i
}
 8001510:	bf00      	nop
	__disable_irq();
	//while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET);

	int32_t sum[CHANNELS*2] = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
	for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 8001522:	4b45      	ldr	r3, [pc, #276]	; (8001638 <CalibrateZero+0x140>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	83fb      	strh	r3, [r7, #30]
 8001528:	e02e      	b.n	8001588 <CalibrateZero+0x90>
	{
		for(uint8_t j = 0; j < CHANNELS*2;j++)
 800152a:	2300      	movs	r3, #0
 800152c:	777b      	strb	r3, [r7, #29]
 800152e:	e025      	b.n	800157c <CalibrateZero+0x84>
		{
			sum[j] += data[i][j];
 8001530:	7f7b      	ldrb	r3, [r7, #29]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	3320      	adds	r3, #32
 8001536:	443b      	add	r3, r7
 8001538:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800153c:	8bfa      	ldrh	r2, [r7, #30]
 800153e:	7f78      	ldrb	r0, [r7, #29]
 8001540:	4c3e      	ldr	r4, [pc, #248]	; (800163c <CalibrateZero+0x144>)
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4403      	add	r3, r0
 800154c:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 8001550:	461a      	mov	r2, r3
 8001552:	7f7b      	ldrb	r3, [r7, #29]
 8001554:	440a      	add	r2, r1
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	3320      	adds	r3, #32
 800155a:	443b      	add	r3, r7
 800155c:	f843 2c20 	str.w	r2, [r3, #-32]
			data[i][j] = 0;
 8001560:	8bfa      	ldrh	r2, [r7, #30]
 8001562:	7f79      	ldrb	r1, [r7, #29]
 8001564:	4835      	ldr	r0, [pc, #212]	; (800163c <CalibrateZero+0x144>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	440b      	add	r3, r1
 8001570:	2200      	movs	r2, #0
 8001572:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for(uint8_t j = 0; j < CHANNELS*2;j++)
 8001576:	7f7b      	ldrb	r3, [r7, #29]
 8001578:	3301      	adds	r3, #1
 800157a:	777b      	strb	r3, [r7, #29]
 800157c:	7f7b      	ldrb	r3, [r7, #29]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d9d6      	bls.n	8001530 <CalibrateZero+0x38>
	for(uint16_t i = correctionRMS; i < BUFFERSIZE;i++)
 8001582:	8bfb      	ldrh	r3, [r7, #30]
 8001584:	3301      	adds	r3, #1
 8001586:	83fb      	strh	r3, [r7, #30]
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	2b7f      	cmp	r3, #127	; 0x7f
 800158c:	d9cd      	bls.n	800152a <CalibrateZero+0x32>
		}
	}
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 800158e:	2300      	movs	r3, #0
 8001590:	773b      	strb	r3, [r7, #28]
 8001592:	e02e      	b.n	80015f2 <CalibrateZero+0xfa>
	{
		calibZeros[j] += (sum[j]/(BUFFERSIZE-correctionRMS));
 8001594:	7f3b      	ldrb	r3, [r7, #28]
 8001596:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <CalibrateZero+0x148>)
 8001598:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800159c:	7f3b      	ldrb	r3, [r7, #28]
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	3320      	adds	r3, #32
 80015a2:	443b      	add	r3, r7
 80015a4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <CalibrateZero+0x140>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80015b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	7f3b      	ldrb	r3, [r7, #28]
 80015b8:	440a      	add	r2, r1
 80015ba:	b291      	uxth	r1, r2
 80015bc:	4a20      	ldr	r2, [pc, #128]	; (8001640 <CalibrateZero+0x148>)
 80015be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		data[0][j] = -calibZeros[j];
 80015c2:	7f3b      	ldrb	r3, [r7, #28]
 80015c4:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <CalibrateZero+0x148>)
 80015c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ca:	425b      	negs	r3, r3
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	7f3b      	ldrb	r3, [r7, #28]
 80015d0:	b211      	sxth	r1, r2
 80015d2:	4a1a      	ldr	r2, [pc, #104]	; (800163c <CalibrateZero+0x144>)
 80015d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		RMS[j] = 0;
 80015d8:	7f3b      	ldrb	r3, [r7, #28]
 80015da:	4a1a      	ldr	r2, [pc, #104]	; (8001644 <CalibrateZero+0x14c>)
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	18d1      	adds	r1, r2, r3
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS*2;j++)
 80015ec:	7f3b      	ldrb	r3, [r7, #28]
 80015ee:	3301      	adds	r3, #1
 80015f0:	773b      	strb	r3, [r7, #28]
 80015f2:	7f3b      	ldrb	r3, [r7, #28]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d9cd      	bls.n	8001594 <CalibrateZero+0x9c>
	}
	for(uint8_t j = 0; j < CHANNELS;j++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	76fb      	strb	r3, [r7, #27]
 80015fc:	e00c      	b.n	8001618 <CalibrateZero+0x120>
	{
		P[j] = 0;
 80015fe:	7efb      	ldrb	r3, [r7, #27]
 8001600:	4a11      	ldr	r2, [pc, #68]	; (8001648 <CalibrateZero+0x150>)
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	18d1      	adds	r1, r2, r3
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9c1 2300 	strd	r2, r3, [r1]
	for(uint8_t j = 0; j < CHANNELS;j++)
 8001612:	7efb      	ldrb	r3, [r7, #27]
 8001614:	3301      	adds	r3, #1
 8001616:	76fb      	strb	r3, [r7, #27]
 8001618:	7efb      	ldrb	r3, [r7, #27]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d9ef      	bls.n	80015fe <CalibrateZero+0x106>
	}


	printf("Calibration completed\n");
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <CalibrateZero+0x154>)
 8001620:	f003 fd6e 	bl	8005100 <puts>
  __ASM volatile ("cpsie i" : : : "memory");
 8001624:	b662      	cpsie	i
}
 8001626:	bf00      	nop
	__enable_irq();
}
 8001628:	bf00      	nop
 800162a:	3724      	adds	r7, #36	; 0x24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	08007428 	.word	0x08007428
 8001634:	20000ab8 	.word	0x20000ab8
 8001638:	20000af8 	.word	0x20000af8
 800163c:	200002b8 	.word	0x200002b8
 8001640:	20000abc 	.word	0x20000abc
 8001644:	20000ac8 	.word	0x20000ac8
 8001648:	20000b00 	.word	0x20000b00
 800164c:	08007440 	.word	0x08007440

08001650 <takeData>:

void takeData(uint32_t* buffer)
{
 8001650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001654:	b091      	sub	sp, #68	; 0x44
 8001656:	af00      	add	r7, sp, #0
 8001658:	6378      	str	r0, [r7, #52]	; 0x34
	if(oversamplingIndex == OVERSAMPLING)
 800165a:	4bb9      	ldr	r3, [pc, #740]	; (8001940 <takeData+0x2f0>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b08      	cmp	r3, #8
 8001660:	f040 8169 	bne.w	8001936 <takeData+0x2e6>
	{
		oversamplingIndex = 0;
 8001664:	4ab6      	ldr	r2, [pc, #728]	; (8001940 <takeData+0x2f0>)
 8001666:	2300      	movs	r3, #0
 8001668:	7013      	strb	r3, [r2, #0]
		time[indexCircBuffer] = getCurrentMicros();
 800166a:	4bb6      	ldr	r3, [pc, #728]	; (8001944 <takeData+0x2f4>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	461c      	mov	r4, r3
 8001670:	f000 fa32 	bl	8001ad8 <getCurrentMicros>
 8001674:	4602      	mov	r2, r0
 8001676:	4bb4      	ldr	r3, [pc, #720]	; (8001948 <takeData+0x2f8>)
 8001678:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 800167c:	2300      	movs	r3, #0
 800167e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001682:	e036      	b.n	80016f2 <takeData+0xa2>
		{
			RMS[i] += data[indexCircBuffer][i]*data[indexCircBuffer][i];
 8001684:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001688:	4ab0      	ldr	r2, [pc, #704]	; (800194c <takeData+0x2fc>)
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4413      	add	r3, r2
 800168e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001692:	4bac      	ldr	r3, [pc, #688]	; (8001944 <takeData+0x2f4>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	461c      	mov	r4, r3
 8001698:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800169c:	4dac      	ldr	r5, [pc, #688]	; (8001950 <takeData+0x300>)
 800169e:	4623      	mov	r3, r4
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4423      	add	r3, r4
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80016ac:	461e      	mov	r6, r3
 80016ae:	4ba5      	ldr	r3, [pc, #660]	; (8001944 <takeData+0x2f4>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	461c      	mov	r4, r3
 80016b4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80016b8:	4da5      	ldr	r5, [pc, #660]	; (8001950 <takeData+0x300>)
 80016ba:	4623      	mov	r3, r4
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4423      	add	r3, r4
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80016c8:	fb06 f303 	mul.w	r3, r6, r3
 80016cc:	17da      	asrs	r2, r3, #31
 80016ce:	4698      	mov	r8, r3
 80016d0:	4691      	mov	r9, r2
 80016d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016d6:	eb10 0a08 	adds.w	sl, r0, r8
 80016da:	eb41 0b09 	adc.w	fp, r1, r9
 80016de:	4a9b      	ldr	r2, [pc, #620]	; (800194c <takeData+0x2fc>)
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	e9c3 ab00 	strd	sl, fp, [r3]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 80016e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016ec:	3301      	adds	r3, #1
 80016ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80016f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d9c4      	bls.n	8001684 <takeData+0x34>
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001700:	e040      	b.n	8001784 <takeData+0x134>
		{
			P[i] += data[indexCircBuffer][2*i]*data[indexCircBuffer][2*i+1];
 8001702:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001706:	4a93      	ldr	r2, [pc, #588]	; (8001954 <takeData+0x304>)
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4413      	add	r3, r2
 800170c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001710:	4b8c      	ldr	r3, [pc, #560]	; (8001944 <takeData+0x2f4>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	461d      	mov	r5, r3
 8001716:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800171a:	005a      	lsls	r2, r3, #1
 800171c:	4c8c      	ldr	r4, [pc, #560]	; (8001950 <takeData+0x300>)
 800171e:	462b      	mov	r3, r5
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	442b      	add	r3, r5
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 800172c:	461e      	mov	r6, r3
 800172e:	4b85      	ldr	r3, [pc, #532]	; (8001944 <takeData+0x2f4>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	461d      	mov	r5, r3
 8001734:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	4c84      	ldr	r4, [pc, #528]	; (8001950 <takeData+0x300>)
 800173e:	462b      	mov	r3, r5
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	442b      	add	r3, r5
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
 800174c:	fb06 f303 	mul.w	r3, r6, r3
 8001750:	17da      	asrs	r2, r3, #31
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
 8001754:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001756:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800175a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800175e:	4622      	mov	r2, r4
 8001760:	1882      	adds	r2, r0, r2
 8001762:	623a      	str	r2, [r7, #32]
 8001764:	462a      	mov	r2, r5
 8001766:	eb41 0202 	adc.w	r2, r1, r2
 800176a:	627a      	str	r2, [r7, #36]	; 0x24
 800176c:	4a79      	ldr	r2, [pc, #484]	; (8001954 <takeData+0x304>)
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4413      	add	r3, r2
 8001772:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001776:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 800177a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800177e:	3301      	adds	r3, #1
 8001780:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001784:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001788:	2b02      	cmp	r3, #2
 800178a:	d9ba      	bls.n	8001702 <takeData+0xb2>
		}
		indexCircBuffer++;
 800178c:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <takeData+0x2f4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	3301      	adds	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <takeData+0x2f4>)
 8001796:	801a      	strh	r2, [r3, #0]
		if(indexCircBuffer == BUFFERSIZE)
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <takeData+0x2f4>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	2b80      	cmp	r3, #128	; 0x80
 800179e:	d111      	bne.n	80017c4 <takeData+0x174>
		{
			indexCircBuffer = 0;
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <takeData+0x2f4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	801a      	strh	r2, [r3, #0]
			calibCounter++;
 80017a6:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <takeData+0x308>)
 80017a8:	881b      	ldrh	r3, [r3, #0]
 80017aa:	3301      	adds	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	4b6a      	ldr	r3, [pc, #424]	; (8001958 <takeData+0x308>)
 80017b0:	801a      	strh	r2, [r3, #0]
			if(calibCounter == CALIBRATIONPERIOD)
 80017b2:	4b69      	ldr	r3, [pc, #420]	; (8001958 <takeData+0x308>)
 80017b4:	881b      	ldrh	r3, [r3, #0]
 80017b6:	2b80      	cmp	r3, #128	; 0x80
 80017b8:	d104      	bne.n	80017c4 <takeData+0x174>
			{
				calibCounter = 0;
 80017ba:	4b67      	ldr	r3, [pc, #412]	; (8001958 <takeData+0x308>)
 80017bc:	2200      	movs	r2, #0
 80017be:	801a      	strh	r2, [r3, #0]
				CalibrateZero();
 80017c0:	f7ff fe9a 	bl	80014f8 <CalibrateZero>
			}
			//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		}
		for(uint8_t i = 0; i < CHANNELS;i++)
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80017ca:	e04a      	b.n	8001862 <takeData+0x212>
		{
			P[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i]*data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][2*i+1];
 80017cc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017d0:	4a60      	ldr	r2, [pc, #384]	; (8001954 <takeData+0x304>)
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017da:	4b5a      	ldr	r3, [pc, #360]	; (8001944 <takeData+0x2f4>)
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	4b5e      	ldr	r3, [pc, #376]	; (800195c <takeData+0x30c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4413      	add	r3, r2
 80017e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017ee:	005c      	lsls	r4, r3, #1
 80017f0:	4d57      	ldr	r5, [pc, #348]	; (8001950 <takeData+0x300>)
 80017f2:	4613      	mov	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4423      	add	r3, r4
 80017fc:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 8001800:	461e      	mov	r6, r3
 8001802:	4b50      	ldr	r3, [pc, #320]	; (8001944 <takeData+0x2f4>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	4b54      	ldr	r3, [pc, #336]	; (800195c <takeData+0x30c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4413      	add	r3, r2
 800180e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001812:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	1c5c      	adds	r4, r3, #1
 800181a:	4d4d      	ldr	r5, [pc, #308]	; (8001950 <takeData+0x300>)
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4423      	add	r3, r4
 8001826:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 800182a:	fb06 f303 	mul.w	r3, r6, r3
 800182e:	17da      	asrs	r2, r3, #31
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	61fa      	str	r2, [r7, #28]
 8001834:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001838:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800183c:	4622      	mov	r2, r4
 800183e:	1a82      	subs	r2, r0, r2
 8001840:	613a      	str	r2, [r7, #16]
 8001842:	462a      	mov	r2, r5
 8001844:	eb61 0202 	sbc.w	r2, r1, r2
 8001848:	617a      	str	r2, [r7, #20]
 800184a:	4a42      	ldr	r2, [pc, #264]	; (8001954 <takeData+0x304>)
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001854:	e9c3 1200 	strd	r1, r2, [r3]
		for(uint8_t i = 0; i < CHANNELS;i++)
 8001858:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800185c:	3301      	adds	r3, #1
 800185e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001862:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001866:	2b02      	cmp	r3, #2
 8001868:	d9b0      	bls.n	80017cc <takeData+0x17c>
		}
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 800186a:	2300      	movs	r3, #0
 800186c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001870:	e05d      	b.n	800192e <takeData+0x2de>
		{
			RMS[i] -= data[(indexCircBuffer+correctionRMS)% BUFFERSIZE][i]*data[(indexCircBuffer+ correctionRMS)% BUFFERSIZE][i];
 8001872:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001876:	4a35      	ldr	r2, [pc, #212]	; (800194c <takeData+0x2fc>)
 8001878:	00db      	lsls	r3, r3, #3
 800187a:	4413      	add	r3, r2
 800187c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001880:	4b30      	ldr	r3, [pc, #192]	; (8001944 <takeData+0x2f4>)
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b35      	ldr	r3, [pc, #212]	; (800195c <takeData+0x30c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001890:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 8001894:	4d2e      	ldr	r5, [pc, #184]	; (8001950 <takeData+0x300>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4423      	add	r3, r4
 80018a0:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80018a4:	461e      	mov	r6, r3
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <takeData+0x2f4>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <takeData+0x30c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4413      	add	r3, r2
 80018b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018b6:	f897 403c 	ldrb.w	r4, [r7, #60]	; 0x3c
 80018ba:	4d25      	ldr	r5, [pc, #148]	; (8001950 <takeData+0x300>)
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4423      	add	r3, r4
 80018c6:	f935 3013 	ldrsh.w	r3, [r5, r3, lsl #1]
 80018ca:	fb06 f303 	mul.w	r3, r6, r3
 80018ce:	17da      	asrs	r2, r3, #31
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	60fa      	str	r2, [r7, #12]
 80018d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018d8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018dc:	4622      	mov	r2, r4
 80018de:	1a82      	subs	r2, r0, r2
 80018e0:	603a      	str	r2, [r7, #0]
 80018e2:	462a      	mov	r2, r5
 80018e4:	eb61 0202 	sbc.w	r2, r1, r2
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	4a18      	ldr	r2, [pc, #96]	; (800194c <takeData+0x2fc>)
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80018f4:	e9c3 1200 	strd	r1, r2, [r3]
			data[indexCircBuffer][i] = -calibZeros[i];
 80018f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80018fc:	4a18      	ldr	r2, [pc, #96]	; (8001960 <takeData+0x310>)
 80018fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001902:	425b      	negs	r3, r3
 8001904:	b299      	uxth	r1, r3
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <takeData+0x2f4>)
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001910:	b20c      	sxth	r4, r1
 8001912:	490f      	ldr	r1, [pc, #60]	; (8001950 <takeData+0x300>)
 8001914:	4603      	mov	r3, r0
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4403      	add	r3, r0
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	4622      	mov	r2, r4
 8001920:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t i = 0; i < CHANNELS*2;i++)
 8001924:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001928:	3301      	adds	r3, #1
 800192a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800192e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001932:	2b05      	cmp	r3, #5
 8001934:	d99d      	bls.n	8001872 <takeData+0x222>
		}

	}
	for(uint8_t i = 0; i < CHANNELS;i++)
 8001936:	2300      	movs	r3, #0
 8001938:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800193c:	e06a      	b.n	8001a14 <takeData+0x3c4>
 800193e:	bf00      	nop
 8001940:	20000aba 	.word	0x20000aba
 8001944:	20000ab8 	.word	0x20000ab8
 8001948:	200008b8 	.word	0x200008b8
 800194c:	20000ac8 	.word	0x20000ac8
 8001950:	200002b8 	.word	0x200002b8
 8001954:	20000b00 	.word	0x20000b00
 8001958:	20000afa 	.word	0x20000afa
 800195c:	20000af8 	.word	0x20000af8
 8001960:	20000abc 	.word	0x20000abc
	{
		data[indexCircBuffer][2*i] += (uint16_t) buffer[i];
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <takeData+0x3e4>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800196e:	005a      	lsls	r2, r3, #1
 8001970:	4931      	ldr	r1, [pc, #196]	; (8001a38 <takeData+0x3e8>)
 8001972:	4603      	mov	r3, r0
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4403      	add	r3, r0
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8001980:	b29a      	uxth	r2, r3
 8001982:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800198a:	440b      	add	r3, r1
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	4413      	add	r3, r2
 8001992:	b299      	uxth	r1, r3
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <takeData+0x3e4>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800199e:	005a      	lsls	r2, r3, #1
 80019a0:	b20c      	sxth	r4, r1
 80019a2:	4925      	ldr	r1, [pc, #148]	; (8001a38 <takeData+0x3e8>)
 80019a4:	4603      	mov	r3, r0
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4403      	add	r3, r0
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	4413      	add	r3, r2
 80019ae:	4622      	mov	r2, r4
 80019b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		data[indexCircBuffer][2*i+1] += (uint16_t) (buffer[i] >> 16);
 80019b4:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <takeData+0x3e4>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	491d      	ldr	r1, [pc, #116]	; (8001a38 <takeData+0x3e8>)
 80019c4:	4603      	mov	r3, r0
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4403      	add	r3, r0
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80019d2:	b29a      	uxth	r2, r3
 80019d4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80019dc:	440b      	add	r3, r1
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b299      	uxth	r1, r3
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <takeData+0x3e4>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	b20c      	sxth	r4, r1
 80019f8:	490f      	ldr	r1, [pc, #60]	; (8001a38 <takeData+0x3e8>)
 80019fa:	4603      	mov	r3, r0
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4403      	add	r3, r0
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	4622      	mov	r2, r4
 8001a06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint8_t i = 0; i < CHANNELS;i++)
 8001a0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001a0e:	3301      	adds	r3, #1
 8001a10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001a14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d9a3      	bls.n	8001964 <takeData+0x314>
	}
	oversamplingIndex++;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <takeData+0x3ec>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <takeData+0x3ec>)
 8001a26:	701a      	strb	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	3744      	adds	r7, #68	; 0x44
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a32:	bf00      	nop
 8001a34:	20000ab8 	.word	0x20000ab8
 8001a38:	200002b8 	.word	0x200002b8
 8001a3c:	20000aba 	.word	0x20000aba

08001a40 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
	if(hadc)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d002      	beq.n	8001a54 <HAL_ADC_ConvHalfCpltCallback+0x14>
	{
		takeData(ADC_Buffer);
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8001a50:	f7ff fdfe 	bl	8001650 <takeData>
	}
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200002a0 	.word	0x200002a0

08001a60 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	if(hadc)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d004      	beq.n	8001a78 <HAL_ADC_ConvCpltCallback+0x18>
	{
		takeData(halfOfADC_Buffer);
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_ADC_ConvCpltCallback+0x20>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fdec 	bl	8001650 <takeData>
	}
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000000 	.word	0x20000000

08001a84 <__io_putchar>:


int __io_putchar(int ch)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b0a      	cmp	r3, #10
 8001a90:	d102      	bne.n	8001a98 <__io_putchar+0x14>
    __io_putchar('\r');
 8001a92:	200d      	movs	r0, #13
 8001a94:	f7ff fff6 	bl	8001a84 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001a98:	1d39      	adds	r1, r7, #4
 8001a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <__io_putchar+0x2c>)
 8001aa2:	f002 fcaa 	bl	80043fa <HAL_UART_Transmit>

  return 1;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000b1c 	.word	0x20000b1c

08001ab4 <LL_SYSTICK_IsActiveCounterFlag>:

static inline uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk));
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <LL_SYSTICK_IsActiveCounterFlag+0x20>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <getCurrentMicros>:

uint32_t getCurrentMicros(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
  /* Ensure COUNTFLAG is reset by reading SysTick control and status register */
  LL_SYSTICK_IsActiveCounterFlag();
 8001ade:	f7ff ffe9 	bl	8001ab4 <LL_SYSTICK_IsActiveCounterFlag>
  uint32_t m = HAL_GetTick();
 8001ae2:	f000 fbc9 	bl	8002278 <HAL_GetTick>
 8001ae6:	60f8      	str	r0, [r7, #12]
  const uint32_t tms = SysTick->LOAD + 1;
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <getCurrentMicros+0x60>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	3301      	adds	r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
  __IO uint32_t u = tms - SysTick->VAL;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <getCurrentMicros+0x60>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	68ba      	ldr	r2, [r7, #8]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	607b      	str	r3, [r7, #4]
  if (LL_SYSTICK_IsActiveCounterFlag()) {
 8001afa:	f7ff ffdb 	bl	8001ab4 <LL_SYSTICK_IsActiveCounterFlag>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <getCurrentMicros+0x3c>
    m = HAL_GetTick();
 8001b04:	f000 fbb8 	bl	8002278 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]
    u = tms - SysTick->VAL;
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <getCurrentMicros+0x60>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	607b      	str	r3, [r7, #4]
  }
  return (m * 1000 + (u * 1000) / tms);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b24:	fb03 f101 	mul.w	r1, r3, r1
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b2e:	4413      	add	r3, r2
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	e000e010 	.word	0xe000e010
 8001b3c:	00000000 	.word	0x00000000

08001b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b44:	b093      	sub	sp, #76	; 0x4c
 8001b46:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b48:	f000 fb3e 	bl	80021c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  indexCircBuffer = 0;
 8001b4c:	4b82      	ldr	r3, [pc, #520]	; (8001d58 <main+0x218>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	801a      	strh	r2, [r3, #0]
  oversamplingIndex = 0;
 8001b52:	4b82      	ldr	r3, [pc, #520]	; (8001d5c <main+0x21c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
  correctionRMS = 1;
 8001b58:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <main+0x220>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
  calibCounter = 0;
 8001b5e:	4b81      	ldr	r3, [pc, #516]	; (8001d64 <main+0x224>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b64:	f000 f906 	bl	8001d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b68:	f7ff fc0a 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b6c:	f7ff fbea 	bl	8001344 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b70:	f000 fa9c 	bl	80020ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b74:	f7ff fa36 	bl	8000fe4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b78:	f7ff faa0 	bl	80010bc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  ADC_Start();
 8001b7c:	f7ff fc5a 	bl	8001434 <ADC_Start>
  HAL_Delay(1500);
 8001b80:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001b84:	f000 fb82 	bl	800228c <HAL_Delay>
  CalibrateZero();
 8001b88:	f7ff fcb6 	bl	80014f8 <CalibrateZero>
  CalcRMScorection();
 8001b8c:	f7ff fc76 	bl	800147c <CalcRMScorection>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(1000);
 8001b90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b94:	f000 fb7a 	bl	800228c <HAL_Delay>
	float V1 = sqrt((float)RMS[0]/(BUFFERSIZE-correctionRMS))/VOLTAGESCALE;
 8001b98:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <main+0x228>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7ff f889 	bl	8000cb8 <__aeabi_ul2f>
 8001ba6:	4606      	mov	r6, r0
 8001ba8:	4b6d      	ldr	r3, [pc, #436]	; (8001d60 <main+0x220>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f873 	bl	8000c9c <__aeabi_i2f>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f7ff f976 	bl	8000eac <__aeabi_fdiv>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fc30 	bl	8000428 <__aeabi_f2d>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f005 fb48 	bl	8007264 <sqrt>
 8001bd4:	a35a      	add	r3, pc, #360	; (adr r3, 8001d40 <main+0x200>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fda7 	bl	800072c <__aeabi_ddiv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f7fe ff4f 	bl	8000a88 <__aeabi_d2f>
 8001bea:	4603      	mov	r3, r0
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
	float A1 = sqrt((float)RMS[1]/(BUFFERSIZE-correctionRMS))/CURRENTSCALE;
 8001bee:	4b5e      	ldr	r3, [pc, #376]	; (8001d68 <main+0x228>)
 8001bf0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f7ff f85e 	bl	8000cb8 <__aeabi_ul2f>
 8001bfc:	4606      	mov	r6, r0
 8001bfe:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <main+0x220>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f848 	bl	8000c9c <__aeabi_i2f>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4630      	mov	r0, r6
 8001c12:	f7ff f94b 	bl	8000eac <__aeabi_fdiv>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fc05 	bl	8000428 <__aeabi_f2d>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f005 fb1d 	bl	8007264 <sqrt>
 8001c2a:	a347      	add	r3, pc, #284	; (adr r3, 8001d48 <main+0x208>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fd7c 	bl	800072c <__aeabi_ddiv>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ff24 	bl	8000a88 <__aeabi_d2f>
 8001c40:	4603      	mov	r3, r0
 8001c42:	623b      	str	r3, [r7, #32]
	float S1 = V1*A1;
 8001c44:	6a39      	ldr	r1, [r7, #32]
 8001c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c48:	f7ff f87c 	bl	8000d44 <__aeabi_fmul>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	61fb      	str	r3, [r7, #28]
	float P1 = -P[0];
 8001c50:	4b46      	ldr	r3, [pc, #280]	; (8001d6c <main+0x22c>)
 8001c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c56:	2100      	movs	r1, #0
 8001c58:	4254      	negs	r4, r2
 8001c5a:	eb61 0503 	sbc.w	r5, r1, r3
 8001c5e:	4620      	mov	r0, r4
 8001c60:	4629      	mov	r1, r5
 8001c62:	f7ff f831 	bl	8000cc8 <__aeabi_l2f>
 8001c66:	4603      	mov	r3, r0
 8001c68:	61bb      	str	r3, [r7, #24]
	P1 /= ((BUFFERSIZE-correctionRMS)*(VOLTAGESCALE*CURRENTSCALE));
 8001c6a:	69b8      	ldr	r0, [r7, #24]
 8001c6c:	f7fe fbdc 	bl	8000428 <__aeabi_f2d>
 8001c70:	4680      	mov	r8, r0
 8001c72:	4689      	mov	r9, r1
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <main+0x220>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fbc1 	bl	8000404 <__aeabi_i2d>
 8001c82:	a333      	add	r3, pc, #204	; (adr r3, 8001d50 <main+0x210>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	f7fe fc26 	bl	80004d8 <__aeabi_dmul>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4640      	mov	r0, r8
 8001c92:	4649      	mov	r1, r9
 8001c94:	f7fe fd4a 	bl	800072c <__aeabi_ddiv>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f7fe fef2 	bl	8000a88 <__aeabi_d2f>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	61bb      	str	r3, [r7, #24]
	float Q1 = sqrt(S1*S1-P1*P1);
 8001ca8:	69f9      	ldr	r1, [r7, #28]
 8001caa:	69f8      	ldr	r0, [r7, #28]
 8001cac:	f7ff f84a 	bl	8000d44 <__aeabi_fmul>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	461e      	mov	r6, r3
 8001cb4:	69b9      	ldr	r1, [r7, #24]
 8001cb6:	69b8      	ldr	r0, [r7, #24]
 8001cb8:	f7ff f844 	bl	8000d44 <__aeabi_fmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f7fe ff35 	bl	8000b30 <__aeabi_fsub>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fbad 	bl	8000428 <__aeabi_f2d>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f005 fac5 	bl	8007264 <sqrt>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe fed1 	bl	8000a88 <__aeabi_d2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	617b      	str	r3, [r7, #20]

	printf("RMS: V: %.1f,  A:%.2f,  P:%.2f,  Q:%.2f,  S:%.2f\n",V1 ,A1, P1, Q1, S1);
 8001cea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001cec:	f7fe fb9c 	bl	8000428 <__aeabi_f2d>
 8001cf0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001cf4:	6a38      	ldr	r0, [r7, #32]
 8001cf6:	f7fe fb97 	bl	8000428 <__aeabi_f2d>
 8001cfa:	4680      	mov	r8, r0
 8001cfc:	4689      	mov	r9, r1
 8001cfe:	69b8      	ldr	r0, [r7, #24]
 8001d00:	f7fe fb92 	bl	8000428 <__aeabi_f2d>
 8001d04:	4682      	mov	sl, r0
 8001d06:	468b      	mov	fp, r1
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	f7fe fb8d 	bl	8000428 <__aeabi_f2d>
 8001d0e:	e9c7 0100 	strd	r0, r1, [r7]
 8001d12:	69f8      	ldr	r0, [r7, #28]
 8001d14:	f7fe fb88 	bl	8000428 <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001d20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d24:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8001d28:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001d2c:	e9cd 8900 	strd	r8, r9, [sp]
 8001d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d34:	480e      	ldr	r0, [pc, #56]	; (8001d70 <main+0x230>)
 8001d36:	f003 f95d 	bl	8004ff4 <iprintf>
  {
 8001d3a:	e729      	b.n	8001b90 <main+0x50>
 8001d3c:	f3af 8000 	nop.w
 8001d40:	66666666 	.word	0x66666666
 8001d44:	40416666 	.word	0x40416666
 8001d48:	33333333 	.word	0x33333333
 8001d4c:	4076a333 	.word	0x4076a333
 8001d50:	ae147ae0 	.word	0xae147ae0
 8001d54:	40c89e47 	.word	0x40c89e47
 8001d58:	20000ab8 	.word	0x20000ab8
 8001d5c:	20000aba 	.word	0x20000aba
 8001d60:	20000af8 	.word	0x20000af8
 8001d64:	20000afa 	.word	0x20000afa
 8001d68:	20000ac8 	.word	0x20000ac8
 8001d6c:	20000b00 	.word	0x20000b00
 8001d70:	08007458 	.word	0x08007458

08001d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b094      	sub	sp, #80	; 0x50
 8001d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d7e:	2228      	movs	r2, #40	; 0x28
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fcce 	bl	8004724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	605a      	str	r2, [r3, #4]
 8001da0:	609a      	str	r2, [r3, #8]
 8001da2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da4:	2302      	movs	r3, #2
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da8:	2301      	movs	r3, #1
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dac:	2310      	movs	r3, #16
 8001dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001db0:	2302      	movs	r3, #2
 8001db2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001db4:	2300      	movs	r3, #0
 8001db6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001db8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f001 fd3c 	bl	8003840 <HAL_RCC_OscConfig>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001dce:	f000 f828 	bl	8001e22 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd2:	230f      	movs	r3, #15
 8001dd4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2102      	movs	r1, #2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f001 ffa8 	bl	8003d44 <HAL_RCC_ClockConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001dfa:	f000 f812 	bl	8001e22 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8001e02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e06:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 f932 	bl	8004074 <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001e16:	f000 f804 	bl	8001e22 <Error_Handler>
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	3750      	adds	r7, #80	; 0x50
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e26:	b672      	cpsid	i
}
 8001e28:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <Error_Handler+0x8>

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_MspInit+0x5c>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	4a14      	ldr	r2, [pc, #80]	; (8001e88 <HAL_MspInit+0x5c>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6193      	str	r3, [r2, #24]
 8001e3e:	4b12      	ldr	r3, [pc, #72]	; (8001e88 <HAL_MspInit+0x5c>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	4b0f      	ldr	r3, [pc, #60]	; (8001e88 <HAL_MspInit+0x5c>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_MspInit+0x5c>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	61d3      	str	r3, [r2, #28]
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <HAL_MspInit+0x5c>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	607b      	str	r3, [r7, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_MspInit+0x60>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	4a04      	ldr	r2, [pc, #16]	; (8001e8c <HAL_MspInit+0x60>)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40010000 	.word	0x40010000

08001e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <NMI_Handler+0x4>

08001e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e9a:	e7fe      	b.n	8001e9a <HardFault_Handler+0x4>

08001e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <MemManage_Handler+0x4>

08001ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <BusFault_Handler+0x4>

08001ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <UsageFault_Handler+0x4>

08001eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bc80      	pop	{r7}
 8001ed0:	4770      	bx	lr

08001ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed6:	f000 f9bd 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA1_Channel1_IRQHandler+0x10>)
 8001ee6:	f001 f9d1 	bl	800328c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000025c 	.word	0x2000025c

08001ef4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <ADC1_2_IRQHandler+0x14>)
 8001efa:	f000 fb71 	bl	80025e0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001efe:	4803      	ldr	r0, [pc, #12]	; (8001f0c <ADC1_2_IRQHandler+0x18>)
 8001f00:	f000 fb6e 	bl	80025e0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200001fc 	.word	0x200001fc
 8001f0c:	2000022c 	.word	0x2000022c

08001f10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f18:	f001 fc70 	bl	80037fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
	return 1;
 8001f24:	2301      	movs	r3, #1
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <_kill>:

int _kill(int pid, int sig)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f38:	f002 fbca 	bl	80046d0 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2216      	movs	r2, #22
 8001f40:	601a      	str	r2, [r3, #0]
	return -1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_exit>:

void _exit (int status)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f56:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff ffe7 	bl	8001f2e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f60:	e7fe      	b.n	8001f60 <_exit+0x12>

08001f62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
 8001f72:	e00a      	b.n	8001f8a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f74:	f3af 8000 	nop.w
 8001f78:	4601      	mov	r1, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	60ba      	str	r2, [r7, #8]
 8001f80:	b2ca      	uxtb	r2, r1
 8001f82:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3301      	adds	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	dbf0      	blt.n	8001f74 <_read+0x12>
	}

return len;
 8001f92:	687b      	ldr	r3, [r7, #4]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e009      	b.n	8001fc2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	60ba      	str	r2, [r7, #8]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd64 	bl	8001a84 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbf1      	blt.n	8001fae <_write+0x12>
	}
	return len;
 8001fca:	687b      	ldr	r3, [r7, #4]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <_close>:

int _close(int file)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	return -1;
 8001fdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ffa:	605a      	str	r2, [r3, #4]
	return 0;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	bc80      	pop	{r7}
 8002006:	4770      	bx	lr

08002008 <_isatty>:

int _isatty(int file)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr

0800201c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800203c:	4a14      	ldr	r2, [pc, #80]	; (8002090 <_sbrk+0x5c>)
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <_sbrk+0x60>)
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <_sbrk+0x64>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002050:	4b11      	ldr	r3, [pc, #68]	; (8002098 <_sbrk+0x64>)
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <_sbrk+0x68>)
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002056:	4b10      	ldr	r3, [pc, #64]	; (8002098 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d207      	bcs.n	8002074 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002064:	f002 fb34 	bl	80046d0 <__errno>
 8002068:	4603      	mov	r3, r0
 800206a:	220c      	movs	r2, #12
 800206c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	e009      	b.n	8002088 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <_sbrk+0x64>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	4a05      	ldr	r2, [pc, #20]	; (8002098 <_sbrk+0x64>)
 8002084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002086:	68fb      	ldr	r3, [r7, #12]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20005000 	.word	0x20005000
 8002094:	00000400 	.word	0x00000400
 8002098:	20000b18 	.word	0x20000b18
 800209c:	20000b78 	.word	0x20000b78

080020a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020b2:	4a12      	ldr	r2, [pc, #72]	; (80020fc <MX_USART2_UART_Init+0x50>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e2:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_USART2_UART_Init+0x4c>)
 80020e4:	f002 f93c 	bl	8004360 <HAL_UART_Init>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ee:	f7ff fe98 	bl	8001e22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000b1c 	.word	0x20000b1c
 80020fc:	40004400 	.word	0x40004400

08002100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a15      	ldr	r2, [pc, #84]	; (8002170 <HAL_UART_MspInit+0x70>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d123      	bne.n	8002168 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <HAL_UART_MspInit+0x74>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4a13      	ldr	r2, [pc, #76]	; (8002174 <HAL_UART_MspInit+0x74>)
 8002126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800212a:	61d3      	str	r3, [r2, #28]
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <HAL_UART_MspInit+0x74>)
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <HAL_UART_MspInit+0x74>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <HAL_UART_MspInit+0x74>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <HAL_UART_MspInit+0x74>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002150:	230c      	movs	r3, #12
 8002152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002158:	2302      	movs	r3, #2
 800215a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	4619      	mov	r1, r3
 8002162:	4805      	ldr	r0, [pc, #20]	; (8002178 <HAL_UART_MspInit+0x78>)
 8002164:	f001 f9c6 	bl	80034f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002168:	bf00      	nop
 800216a:	3720      	adds	r7, #32
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40004400 	.word	0x40004400
 8002174:	40021000 	.word	0x40021000
 8002178:	40010800 	.word	0x40010800

0800217c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800217c:	480c      	ldr	r0, [pc, #48]	; (80021b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217e:	490d      	ldr	r1, [pc, #52]	; (80021b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002180:	4a0d      	ldr	r2, [pc, #52]	; (80021b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002184:	e002      	b.n	800218c <LoopCopyDataInit>

08002186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218a:	3304      	adds	r3, #4

0800218c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800218c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002190:	d3f9      	bcc.n	8002186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002194:	4c0a      	ldr	r4, [pc, #40]	; (80021c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002198:	e001      	b.n	800219e <LoopFillZerobss>

0800219a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800219c:	3204      	adds	r2, #4

0800219e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a0:	d3fb      	bcc.n	800219a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021a2:	f7ff ff7d 	bl	80020a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f002 fa99 	bl	80046dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021aa:	f7ff fcc9 	bl	8001b40 <main>
  bx lr
 80021ae:	4770      	bx	lr
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021b8:	080078a4 	.word	0x080078a4
  ldr r2, =_sbss
 80021bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021c0:	20000b74 	.word	0x20000b74

080021c4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <CAN1_RX1_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_Init+0x28>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_Init+0x28>)
 80021d2:	f043 0310 	orr.w	r3, r3, #16
 80021d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 ff5b 	bl	8003094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 f808 	bl	80021f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fe22 	bl	8001e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x54>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_InitTick+0x58>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	fbb3 f3f1 	udiv	r3, r3, r1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f000 ff73 	bl	80030fe <HAL_SYSTICK_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00e      	b.n	8002240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d80a      	bhi.n	800223e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002228:	2200      	movs	r2, #0
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f000 ff3b 	bl	80030aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_InitTick+0x5c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000004 	.word	0x20000004
 800224c:	2000000c 	.word	0x2000000c
 8002250:	20000008 	.word	0x20000008

08002254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_IncTick+0x1c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x20>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_IncTick+0x20>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	2000000c 	.word	0x2000000c
 8002274:	20000b60 	.word	0x20000b60

08002278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <HAL_GetTick+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000b60 	.word	0x20000b60

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fff0 	bl	8002278 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d005      	beq.n	80022b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_Delay+0x44>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b2:	bf00      	nop
 80022b4:	f7ff ffe0 	bl	8002278 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d8f7      	bhi.n	80022b4 <HAL_Delay+0x28>
  {
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000000c 	.word	0x2000000c

080022d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0be      	b.n	8002474 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	d109      	bne.n	8002318 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7fe ff2e 	bl	8001174 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 fb89 	bl	8002a30 <ADC_ConversionStop_Disable>
 800231e:	4603      	mov	r3, r0
 8002320:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	f040 8099 	bne.w	8002462 <HAL_ADC_Init+0x18e>
 8002330:	7dfb      	ldrb	r3, [r7, #23]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 8095 	bne.w	8002462 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002340:	f023 0302 	bic.w	r3, r3, #2
 8002344:	f043 0202 	orr.w	r2, r3, #2
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002354:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	7b1b      	ldrb	r3, [r3, #12]
 800235a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800235c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	4313      	orrs	r3, r2
 8002362:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800236c:	d003      	beq.n	8002376 <HAL_ADC_Init+0xa2>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_ADC_Init+0xa8>
 8002376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237a:	e000      	b.n	800237e <HAL_ADC_Init+0xaa>
 800237c:	2300      	movs	r3, #0
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7d1b      	ldrb	r3, [r3, #20]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d119      	bne.n	80023c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	7b1b      	ldrb	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d109      	bne.n	80023a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	3b01      	subs	r3, #1
 800239a:	035a      	lsls	r2, r3, #13
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	e00b      	b.n	80023c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ac:	f043 0220 	orr.w	r2, r3, #32
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <HAL_ADC_Init+0x1a8>)
 80023dc:	4013      	ands	r3, r2
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6812      	ldr	r2, [r2, #0]
 80023e2:	68b9      	ldr	r1, [r7, #8]
 80023e4:	430b      	orrs	r3, r1
 80023e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f0:	d003      	beq.n	80023fa <HAL_ADC_Init+0x126>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d104      	bne.n	8002404 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	3b01      	subs	r3, #1
 8002400:	051b      	lsls	r3, r3, #20
 8002402:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	430a      	orrs	r2, r1
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_ADC_Init+0x1ac>)
 8002420:	4013      	ands	r3, r2
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	429a      	cmp	r2, r3
 8002426:	d10b      	bne.n	8002440 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	f043 0201 	orr.w	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800243e:	e018      	b.n	8002472 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002444:	f023 0312 	bic.w	r3, r3, #18
 8002448:	f043 0210 	orr.w	r2, r3, #16
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002454:	f043 0201 	orr.w	r2, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002460:	e007      	b.n	8002472 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	f043 0210 	orr.w	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	ffe1f7fd 	.word	0xffe1f7fd
 8002480:	ff1f0efe 	.word	0xff1f0efe

08002484 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_ADC_Start+0x1a>
 800249a:	2302      	movs	r3, #2
 800249c:	e098      	b.n	80025d0 <HAL_ADC_Start+0x14c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fa68 	bl	800297c <ADC_Enable>
 80024ac:	4603      	mov	r3, r0
 80024ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 8087 	bne.w	80025c6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c0:	f023 0301 	bic.w	r3, r3, #1
 80024c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a41      	ldr	r2, [pc, #260]	; (80025d8 <HAL_ADC_Start+0x154>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_Start+0x5e>
 80024d6:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_ADC_Start+0x158>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d115      	bne.n	800250e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d026      	beq.n	800254a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002500:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002504:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800250c:	e01d      	b.n	800254a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002512:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a2f      	ldr	r2, [pc, #188]	; (80025dc <HAL_ADC_Start+0x158>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d004      	beq.n	800252e <HAL_ADC_Start+0xaa>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a2b      	ldr	r2, [pc, #172]	; (80025d8 <HAL_ADC_Start+0x154>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d10d      	bne.n	800254a <HAL_ADC_Start+0xc6>
 800252e:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <HAL_ADC_Start+0x158>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002542:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	f023 0206 	bic.w	r2, r3, #6
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	62da      	str	r2, [r3, #44]	; 0x2c
 8002562:	e002      	b.n	800256a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f06f 0202 	mvn.w	r2, #2
 800257a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002586:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800258a:	d113      	bne.n	80025b4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002590:	4a11      	ldr	r2, [pc, #68]	; (80025d8 <HAL_ADC_Start+0x154>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d105      	bne.n	80025a2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_ADC_Start+0x158>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d108      	bne.n	80025b4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025b0:	609a      	str	r2, [r3, #8]
 80025b2:	e00c      	b.n	80025ce <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	e003      	b.n	80025ce <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40012800 	.word	0x40012800
 80025dc:	40012400 	.word	0x40012400

080025e0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b20      	cmp	r3, #32
 80025f4:	d140      	bne.n	8002678 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d139      	bne.n	8002678 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	d105      	bne.n	800261c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002614:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002626:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800262a:	d11d      	bne.n	8002668 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002630:	2b00      	cmp	r3, #0
 8002632:	d119      	bne.n	8002668 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0220 	bic.w	r2, r2, #32
 8002642:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff f9f9 	bl	8001a60 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f06f 0212 	mvn.w	r2, #18
 8002676:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b80      	cmp	r3, #128	; 0x80
 8002684:	d14f      	bne.n	8002726 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b04      	cmp	r3, #4
 8002692:	d148      	bne.n	8002726 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	d105      	bne.n	80026ac <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80026b6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80026ba:	d012      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d125      	bne.n	8002716 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026d4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026d8:	d11d      	bne.n	8002716 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d119      	bne.n	8002716 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	f043 0201 	orr.w	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 fb94 	bl	8002e44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 020c 	mvn.w	r2, #12
 8002724:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d114      	bne.n	800275e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b01      	cmp	r3, #1
 8002740:	d10d      	bne.n	800275e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002746:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f809 	bl	8002766 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f06f 0201 	mvn.w	r2, #1
 800275c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800276e:	bf00      	nop
 8002770:	370c      	adds	r7, #12
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
	...

0800278c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800279a:	2300      	movs	r3, #0
 800279c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x20>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e0dc      	b.n	8002966 <HAL_ADC_ConfigChannel+0x1da>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b06      	cmp	r3, #6
 80027ba:	d81c      	bhi.n	80027f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	3b05      	subs	r3, #5
 80027ce:	221f      	movs	r2, #31
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4019      	ands	r1, r3
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b05      	subs	r3, #5
 80027e8:	fa00 f203 	lsl.w	r2, r0, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	635a      	str	r2, [r3, #52]	; 0x34
 80027f4:	e03c      	b.n	8002870 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b0c      	cmp	r3, #12
 80027fc:	d81c      	bhi.n	8002838 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	3b23      	subs	r3, #35	; 0x23
 8002810:	221f      	movs	r2, #31
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	4019      	ands	r1, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	3b23      	subs	r3, #35	; 0x23
 800282a:	fa00 f203 	lsl.w	r2, r0, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	631a      	str	r2, [r3, #48]	; 0x30
 8002836:	e01b      	b.n	8002870 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b41      	subs	r3, #65	; 0x41
 800284a:	221f      	movs	r2, #31
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	4019      	ands	r1, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b41      	subs	r3, #65	; 0x41
 8002864:	fa00 f203 	lsl.w	r2, r0, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b09      	cmp	r3, #9
 8002876:	d91c      	bls.n	80028b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68d9      	ldr	r1, [r3, #12]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	3b1e      	subs	r3, #30
 800288a:	2207      	movs	r2, #7
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	43db      	mvns	r3, r3
 8002892:	4019      	ands	r1, r3
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6898      	ldr	r0, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	3b1e      	subs	r3, #30
 80028a4:	fa00 f203 	lsl.w	r2, r0, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	e019      	b.n	80028e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6919      	ldr	r1, [r3, #16]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	2207      	movs	r2, #7
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	43db      	mvns	r3, r3
 80028ca:	4019      	ands	r1, r3
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	6898      	ldr	r0, [r3, #8]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	fa00 f203 	lsl.w	r2, r0, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d003      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028f2:	2b11      	cmp	r3, #17
 80028f4:	d132      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_ADC_ConfigChannel+0x1e4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d125      	bne.n	800294c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d126      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800291c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d11a      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_ADC_ConfigChannel+0x1e8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a13      	ldr	r2, [pc, #76]	; (8002978 <HAL_ADC_ConfigChannel+0x1ec>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	0c9a      	lsrs	r2, r3, #18
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800293c:	e002      	b.n	8002944 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	3b01      	subs	r3, #1
 8002942:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f9      	bne.n	800293e <HAL_ADC_ConfigChannel+0x1b2>
 800294a:	e007      	b.n	800295c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002964:	7bfb      	ldrb	r3, [r7, #15]
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr
 8002970:	40012400 	.word	0x40012400
 8002974:	20000004 	.word	0x20000004
 8002978:	431bde83 	.word	0x431bde83

0800297c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b01      	cmp	r3, #1
 8002998:	d040      	beq.n	8002a1c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <ADC_Enable+0xac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <ADC_Enable+0xb0>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	0c9b      	lsrs	r3, r3, #18
 80029b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029b8:	e002      	b.n	80029c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	3b01      	subs	r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f9      	bne.n	80029ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029c6:	f7ff fc57 	bl	8002278 <HAL_GetTick>
 80029ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029cc:	e01f      	b.n	8002a0e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ce:	f7ff fc53 	bl	8002278 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d918      	bls.n	8002a0e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d011      	beq.n	8002a0e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e007      	b.n	8002a1e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d1d8      	bne.n	80029ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	431bde83 	.word	0x431bde83

08002a30 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d12e      	bne.n	8002aa8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0201 	bic.w	r2, r2, #1
 8002a58:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a5a:	f7ff fc0d 	bl	8002278 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a60:	e01b      	b.n	8002a9a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a62:	f7ff fc09 	bl	8002278 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d914      	bls.n	8002a9a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d10d      	bne.n	8002a9a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a82:	f043 0210 	orr.w	r2, r3, #16
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	f043 0201 	orr.w	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e007      	b.n	8002aaa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d0dc      	beq.n	8002a62 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d127      	bne.n	8002b1c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ae2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002ae6:	d115      	bne.n	8002b14 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d111      	bne.n	8002b14 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f7fe ffa3 	bl	8001a60 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002b1a:	e004      	b.n	8002b26 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7fe ff7f 	bl	8001a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b084      	sub	sp, #16
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7ff fe01 	bl	8002778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_ADCEx_Calibration_Start+0x1e>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e095      	b.n	8002cca <HAL_ADCEx_Calibration_Start+0x14a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ff42 	bl	8002a30 <ADC_ConversionStop_Disable>
 8002bac:	4603      	mov	r3, r0
 8002bae:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f040 8084 	bne.w	8002cc0 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bc0:	f023 0302 	bic.w	r3, r3, #2
 8002bc4:	f043 0202 	orr.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002bcc:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_ADCEx_Calibration_Start+0x154>)
 8002bce:	681c      	ldr	r4, [r3, #0]
 8002bd0:	2002      	movs	r0, #2
 8002bd2:	f001 fb05 	bl	80041e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002bdc:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002bde:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002be0:	e002      	b.n	8002be8 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	3b01      	subs	r3, #1
 8002be6:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f9      	bne.n	8002be2 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff fec4 	bl	800297c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0208 	orr.w	r2, r2, #8
 8002c02:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c04:	f7ff fb38 	bl	8002278 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c0a:	e01b      	b.n	8002c44 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c0c:	f7ff fb34 	bl	8002278 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b0a      	cmp	r3, #10
 8002c18:	d914      	bls.n	8002c44 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 0308 	and.w	r3, r3, #8
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00d      	beq.n	8002c44 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2c:	f023 0312 	bic.w	r3, r3, #18
 8002c30:	f043 0210 	orr.w	r2, r3, #16
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e042      	b.n	8002cca <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1dc      	bne.n	8002c0c <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0204 	orr.w	r2, r2, #4
 8002c60:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002c62:	f7ff fb09 	bl	8002278 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c68:	e01b      	b.n	8002ca2 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002c6a:	f7ff fb05 	bl	8002278 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b0a      	cmp	r3, #10
 8002c76:	d914      	bls.n	8002ca2 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	f023 0312 	bic.w	r3, r3, #18
 8002c8e:	f043 0210 	orr.w	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e013      	b.n	8002cca <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1dc      	bne.n	8002c6a <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	f023 0303 	bic.w	r3, r3, #3
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd90      	pop	{r4, r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b092      	sub	sp, #72	; 0x48
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  ADC_HandleTypeDef tmphadcSlave={0};
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	2230      	movs	r2, #48	; 0x30
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 fd16 	bl	8004724 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e08f      	b.n	8002e26 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002d0e:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8002d10:	617b      	str	r3, [r7, #20]
  
  /* On STM32F1 devices, ADC slave regular group must be configured with      */
  /* conversion trigger ADC_SOFTWARE_START.                                   */
  /* Note: External trigger of ADC slave must be enabled, it is already done  */
  /*       into function "HAL_ADC_Init()".                                    */
  if(!ADC_IS_SOFTWARE_START_REGULAR(&tmphadcSlave))  
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d1a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d1e:	d00b      	beq.n	8002d38 <HAL_ADCEx_MultiModeStart_DMA+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e076      	b.n	8002e26 <HAL_ADCEx_MultiModeStart_DMA+0x14e>
  }
  
  /* Enable the ADC peripherals: master and slave (in case if not already     */
  /* enabled previously)                                                      */
  tmp_hal_status = ADC_Enable(hadc);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fe1f 	bl	800297c <ADC_Enable>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (tmp_hal_status == HAL_OK)
 8002d44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d107      	bne.n	8002d5c <HAL_ADCEx_MultiModeStart_DMA+0x84>
  {
    tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8002d4c:	f107 0314 	add.w	r3, r7, #20
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fe13 	bl	800297c <ADC_Enable>
 8002d56:	4603      	mov	r3, r0
 8002d58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }
  
  /* Start conversion if all ADCs of multimode are effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d15a      	bne.n	8002e1a <HAL_ADCEx_MultiModeStart_DMA+0x142>
  {
    /* Set ADC state (ADC master)                                             */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d68:	4b32      	ldr	r3, [pc, #200]	; (8002e34 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_MULTIMODE_SLAVE,
                      HAL_ADC_STATE_REG_BUSY);
      
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_ADCEx_MultiModeStart_DMA+0xba>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	629a      	str	r2, [r3, #40]	; 0x28
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    
    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	4a24      	ldr	r2, [pc, #144]	; (8002e38 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
       
    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <HAL_ADCEx_MultiModeStart_DMA+0x164>)
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_ADCEx_MultiModeStart_DMA+0x168>)
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0202 	mvn.w	r2, #2
 8002dc0:	601a      	str	r2, [r3, #0]
    
    /* Enable ADC DMA mode of ADC master */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd0:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a18      	ldr	r0, [r3, #32]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	334c      	adds	r3, #76	; 0x4c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f000 f9f3 	bl	80031cc <HAL_DMA_Start_IT>
    /* Start conversion of regular group if software start has been selected. */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002df0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002df4:	d108      	bne.n	8002e08 <HAL_ADCEx_MultiModeStart_DMA+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e04:	609a      	str	r2, [r3, #8]
 8002e06:	e00c      	b.n	8002e22 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689a      	ldr	r2, [r3, #8]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	e003      	b.n	8002e22 <HAL_ADCEx_MultiModeStart_DMA+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e22:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3748      	adds	r7, #72	; 0x48
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40012800 	.word	0x40012800
 8002e34:	ffeffcfe 	.word	0xffeffcfe
 8002e38:	08002ab3 	.word	0x08002ab3
 8002e3c:	08002b2f 	.word	0x08002b2f
 8002e40:	08002b4b 	.word	0x08002b4b

08002e44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc80      	pop	{r7}
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc: ADC handle
  * @param  multimode: Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b090      	sub	sp, #64	; 0x40
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ADC_HandleTypeDef tmphadcSlave={0};
 8002e68:	f107 030c 	add.w	r3, r7, #12
 8002e6c:	2230      	movs	r2, #48	; 0x30
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 fc57 	bl	8004724 <memset>
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x2c>
 8002e80:	2302      	movs	r3, #2
 8002e82:	e032      	b.n	8002eea <HAL_ADCEx_MultiModeConfigChannel+0x92>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Set a temporary handle of the ADC slave associated to the ADC master     */
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>)
 8002e8e:	60fb      	str	r3, [r7, #12]
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d016      	beq.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d010      	beq.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x74>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d10b      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x74>
  {
    MODIFY_REG(hadc->Instance->CR1,
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f423 2170 	bic.w	r1, r3, #983040	; 0xf0000
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	e008      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x86>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	; 0x28
    
    tmp_hal_status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ee6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8002eea:	4618      	mov	r0, r3
 8002eec:	3740      	adds	r7, #64	; 0x40
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40012800 	.word	0x40012800
 8002ef8:	40012400 	.word	0x40012400

08002efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4906      	ldr	r1, [pc, #24]	; (8002f94 <__NVIC_EnableIRQ+0x34>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	; (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	; (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f1c3 0307 	rsb	r3, r3, #7
 8003006:	2b04      	cmp	r3, #4
 8003008:	bf28      	it	cs
 800300a:	2304      	movcs	r3, #4
 800300c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3304      	adds	r3, #4
 8003012:	2b06      	cmp	r3, #6
 8003014:	d902      	bls.n	800301c <NVIC_EncodePriority+0x30>
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3b03      	subs	r3, #3
 800301a:	e000      	b.n	800301e <NVIC_EncodePriority+0x32>
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003020:	f04f 32ff 	mov.w	r2, #4294967295
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	401a      	ands	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003034:	f04f 31ff 	mov.w	r1, #4294967295
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	43d9      	mvns	r1, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003044:	4313      	orrs	r3, r2
         );
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	; 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003060:	d301      	bcc.n	8003066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003062:	2301      	movs	r3, #1
 8003064:	e00f      	b.n	8003086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003066:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <SysTick_Config+0x40>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3b01      	subs	r3, #1
 800306c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306e:	210f      	movs	r1, #15
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f7ff ff90 	bl	8002f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <SysTick_Config+0x40>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <SysTick_Config+0x40>)
 8003080:	2207      	movs	r2, #7
 8003082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	e000e010 	.word	0xe000e010

08003094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7ff ff2d 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030bc:	f7ff ff42 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 80030c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	f7ff ff90 	bl	8002fec <NVIC_EncodePriority>
 80030cc:	4602      	mov	r2, r0
 80030ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff5f 	bl	8002f98 <__NVIC_SetPriority>
}
 80030da:	bf00      	nop
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	4603      	mov	r3, r0
 80030ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7ff ff35 	bl	8002f60 <__NVIC_EnableIRQ>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7ff ffa2 	bl	8003050 <SysTick_Config>
 800310c:	4603      	mov	r3, r0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
	...

08003118 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e043      	b.n	80031b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_DMA_Init+0xa8>)
 8003136:	4413      	add	r3, r2
 8003138:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_DMA_Init+0xac>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	091b      	lsrs	r3, r3, #4
 8003140:	009a      	lsls	r2, r3, #2
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_DMA_Init+0xb0>)
 800314a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003162:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003166:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800317c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	bffdfff8 	.word	0xbffdfff8
 80031c4:	cccccccd 	.word	0xcccccccd
 80031c8:	40020000 	.word	0x40020000

080031cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
 80031d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031da:	2300      	movs	r3, #0
 80031dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <HAL_DMA_Start_IT+0x20>
 80031e8:	2302      	movs	r3, #2
 80031ea:	e04a      	b.n	8003282 <HAL_DMA_Start_IT+0xb6>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d13a      	bne.n	8003274 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f938 	bl	8003498 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 020e 	orr.w	r2, r2, #14
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e00f      	b.n	8003262 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 0204 	bic.w	r2, r2, #4
 8003250:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 020a 	orr.w	r2, r2, #10
 8003260:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f042 0201 	orr.w	r2, r2, #1
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e005      	b.n	8003280 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800327c:	2302      	movs	r3, #2
 800327e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
	...

0800328c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	2204      	movs	r2, #4
 80032aa:	409a      	lsls	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d04f      	beq.n	8003354 <HAL_DMA_IRQHandler+0xc8>
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d04a      	beq.n	8003354 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d107      	bne.n	80032dc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0204 	bic.w	r2, r2, #4
 80032da:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a66      	ldr	r2, [pc, #408]	; (800347c <HAL_DMA_IRQHandler+0x1f0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d029      	beq.n	800333a <HAL_DMA_IRQHandler+0xae>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a65      	ldr	r2, [pc, #404]	; (8003480 <HAL_DMA_IRQHandler+0x1f4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d022      	beq.n	8003336 <HAL_DMA_IRQHandler+0xaa>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a63      	ldr	r2, [pc, #396]	; (8003484 <HAL_DMA_IRQHandler+0x1f8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d01a      	beq.n	8003330 <HAL_DMA_IRQHandler+0xa4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a62      	ldr	r2, [pc, #392]	; (8003488 <HAL_DMA_IRQHandler+0x1fc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d012      	beq.n	800332a <HAL_DMA_IRQHandler+0x9e>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a60      	ldr	r2, [pc, #384]	; (800348c <HAL_DMA_IRQHandler+0x200>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00a      	beq.n	8003324 <HAL_DMA_IRQHandler+0x98>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a5f      	ldr	r2, [pc, #380]	; (8003490 <HAL_DMA_IRQHandler+0x204>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d102      	bne.n	800331e <HAL_DMA_IRQHandler+0x92>
 8003318:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800331c:	e00e      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 800331e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003322:	e00b      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 8003324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003328:	e008      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 800332a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800332e:	e005      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 8003330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003334:	e002      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 8003336:	2340      	movs	r3, #64	; 0x40
 8003338:	e000      	b.n	800333c <HAL_DMA_IRQHandler+0xb0>
 800333a:	2304      	movs	r3, #4
 800333c:	4a55      	ldr	r2, [pc, #340]	; (8003494 <HAL_DMA_IRQHandler+0x208>)
 800333e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8094 	beq.w	8003472 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003352:	e08e      	b.n	8003472 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	2202      	movs	r2, #2
 800335a:	409a      	lsls	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d056      	beq.n	8003412 <HAL_DMA_IRQHandler+0x186>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d051      	beq.n	8003412 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 020a 	bic.w	r2, r2, #10
 800338a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a38      	ldr	r2, [pc, #224]	; (800347c <HAL_DMA_IRQHandler+0x1f0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d029      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x166>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a37      	ldr	r2, [pc, #220]	; (8003480 <HAL_DMA_IRQHandler+0x1f4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d022      	beq.n	80033ee <HAL_DMA_IRQHandler+0x162>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a35      	ldr	r2, [pc, #212]	; (8003484 <HAL_DMA_IRQHandler+0x1f8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d01a      	beq.n	80033e8 <HAL_DMA_IRQHandler+0x15c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a34      	ldr	r2, [pc, #208]	; (8003488 <HAL_DMA_IRQHandler+0x1fc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d012      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x156>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a32      	ldr	r2, [pc, #200]	; (800348c <HAL_DMA_IRQHandler+0x200>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d00a      	beq.n	80033dc <HAL_DMA_IRQHandler+0x150>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a31      	ldr	r2, [pc, #196]	; (8003490 <HAL_DMA_IRQHandler+0x204>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d102      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x14a>
 80033d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033d4:	e00e      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033da:	e00b      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e0:	e008      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033e6:	e005      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033ec:	e002      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033ee:	2320      	movs	r3, #32
 80033f0:	e000      	b.n	80033f4 <HAL_DMA_IRQHandler+0x168>
 80033f2:	2302      	movs	r3, #2
 80033f4:	4a27      	ldr	r2, [pc, #156]	; (8003494 <HAL_DMA_IRQHandler+0x208>)
 80033f6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	2b00      	cmp	r3, #0
 8003406:	d034      	beq.n	8003472 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003410:	e02f      	b.n	8003472 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2208      	movs	r2, #8
 8003418:	409a      	lsls	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d028      	beq.n	8003474 <HAL_DMA_IRQHandler+0x1e8>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d023      	beq.n	8003474 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 020e 	bic.w	r2, r2, #14
 800343a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f202 	lsl.w	r2, r1, r2
 800344a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	2b00      	cmp	r3, #0
 8003468:	d004      	beq.n	8003474 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	4798      	blx	r3
    }
  }
  return;
 8003472:	bf00      	nop
 8003474:	bf00      	nop
}
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40020008 	.word	0x40020008
 8003480:	4002001c 	.word	0x4002001c
 8003484:	40020030 	.word	0x40020030
 8003488:	40020044 	.word	0x40020044
 800348c:	40020058 	.word	0x40020058
 8003490:	4002006c 	.word	0x4002006c
 8003494:	40020000 	.word	0x40020000

08003498 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f202 	lsl.w	r2, r1, r2
 80034b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d108      	bne.n	80034d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034d6:	e007      	b.n	80034e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	60da      	str	r2, [r3, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b08b      	sub	sp, #44	; 0x2c
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003506:	e169      	b.n	80037dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003508:	2201      	movs	r2, #1
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	429a      	cmp	r2, r3
 8003522:	f040 8158 	bne.w	80037d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4a9a      	ldr	r2, [pc, #616]	; (8003794 <HAL_GPIO_Init+0x2a0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d05e      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003530:	4a98      	ldr	r2, [pc, #608]	; (8003794 <HAL_GPIO_Init+0x2a0>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d875      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003536:	4a98      	ldr	r2, [pc, #608]	; (8003798 <HAL_GPIO_Init+0x2a4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d058      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 800353c:	4a96      	ldr	r2, [pc, #600]	; (8003798 <HAL_GPIO_Init+0x2a4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d86f      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003542:	4a96      	ldr	r2, [pc, #600]	; (800379c <HAL_GPIO_Init+0x2a8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d052      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003548:	4a94      	ldr	r2, [pc, #592]	; (800379c <HAL_GPIO_Init+0x2a8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d869      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800354e:	4a94      	ldr	r2, [pc, #592]	; (80037a0 <HAL_GPIO_Init+0x2ac>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d04c      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003554:	4a92      	ldr	r2, [pc, #584]	; (80037a0 <HAL_GPIO_Init+0x2ac>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d863      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800355a:	4a92      	ldr	r2, [pc, #584]	; (80037a4 <HAL_GPIO_Init+0x2b0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d046      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
 8003560:	4a90      	ldr	r2, [pc, #576]	; (80037a4 <HAL_GPIO_Init+0x2b0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d85d      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 8003566:	2b12      	cmp	r3, #18
 8003568:	d82a      	bhi.n	80035c0 <HAL_GPIO_Init+0xcc>
 800356a:	2b12      	cmp	r3, #18
 800356c:	d859      	bhi.n	8003622 <HAL_GPIO_Init+0x12e>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <HAL_GPIO_Init+0x80>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035ef 	.word	0x080035ef
 8003578:	080035c9 	.word	0x080035c9
 800357c:	080035db 	.word	0x080035db
 8003580:	0800361d 	.word	0x0800361d
 8003584:	08003623 	.word	0x08003623
 8003588:	08003623 	.word	0x08003623
 800358c:	08003623 	.word	0x08003623
 8003590:	08003623 	.word	0x08003623
 8003594:	08003623 	.word	0x08003623
 8003598:	08003623 	.word	0x08003623
 800359c:	08003623 	.word	0x08003623
 80035a0:	08003623 	.word	0x08003623
 80035a4:	08003623 	.word	0x08003623
 80035a8:	08003623 	.word	0x08003623
 80035ac:	08003623 	.word	0x08003623
 80035b0:	08003623 	.word	0x08003623
 80035b4:	08003623 	.word	0x08003623
 80035b8:	080035d1 	.word	0x080035d1
 80035bc:	080035e5 	.word	0x080035e5
 80035c0:	4a79      	ldr	r2, [pc, #484]	; (80037a8 <HAL_GPIO_Init+0x2b4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035c6:	e02c      	b.n	8003622 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	623b      	str	r3, [r7, #32]
          break;
 80035ce:	e029      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	3304      	adds	r3, #4
 80035d6:	623b      	str	r3, [r7, #32]
          break;
 80035d8:	e024      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	3308      	adds	r3, #8
 80035e0:	623b      	str	r3, [r7, #32]
          break;
 80035e2:	e01f      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	330c      	adds	r3, #12
 80035ea:	623b      	str	r3, [r7, #32]
          break;
 80035ec:	e01a      	b.n	8003624 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035f6:	2304      	movs	r3, #4
 80035f8:	623b      	str	r3, [r7, #32]
          break;
 80035fa:	e013      	b.n	8003624 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003604:	2308      	movs	r3, #8
 8003606:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	611a      	str	r2, [r3, #16]
          break;
 800360e:	e009      	b.n	8003624 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003610:	2308      	movs	r3, #8
 8003612:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69fa      	ldr	r2, [r7, #28]
 8003618:	615a      	str	r2, [r3, #20]
          break;
 800361a:	e003      	b.n	8003624 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
          break;
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x130>
          break;
 8003622:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2bff      	cmp	r3, #255	; 0xff
 8003628:	d801      	bhi.n	800362e <HAL_GPIO_Init+0x13a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	e001      	b.n	8003632 <HAL_GPIO_Init+0x13e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	2bff      	cmp	r3, #255	; 0xff
 8003638:	d802      	bhi.n	8003640 <HAL_GPIO_Init+0x14c>
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	e002      	b.n	8003646 <HAL_GPIO_Init+0x152>
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	3b08      	subs	r3, #8
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	210f      	movs	r1, #15
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	fa01 f303 	lsl.w	r3, r1, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	401a      	ands	r2, r3
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	431a      	orrs	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80b1 	beq.w	80037d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003674:	4b4d      	ldr	r3, [pc, #308]	; (80037ac <HAL_GPIO_Init+0x2b8>)
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	4a4c      	ldr	r2, [pc, #304]	; (80037ac <HAL_GPIO_Init+0x2b8>)
 800367a:	f043 0301 	orr.w	r3, r3, #1
 800367e:	6193      	str	r3, [r2, #24]
 8003680:	4b4a      	ldr	r3, [pc, #296]	; (80037ac <HAL_GPIO_Init+0x2b8>)
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800368c:	4a48      	ldr	r2, [pc, #288]	; (80037b0 <HAL_GPIO_Init+0x2bc>)
 800368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003690:	089b      	lsrs	r3, r3, #2
 8003692:	3302      	adds	r3, #2
 8003694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003698:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	220f      	movs	r2, #15
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4013      	ands	r3, r2
 80036ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a40      	ldr	r2, [pc, #256]	; (80037b4 <HAL_GPIO_Init+0x2c0>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_GPIO_Init+0x1ec>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <HAL_GPIO_Init+0x2c4>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00d      	beq.n	80036dc <HAL_GPIO_Init+0x1e8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a3e      	ldr	r2, [pc, #248]	; (80037bc <HAL_GPIO_Init+0x2c8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <HAL_GPIO_Init+0x1e4>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a3d      	ldr	r2, [pc, #244]	; (80037c0 <HAL_GPIO_Init+0x2cc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d101      	bne.n	80036d4 <HAL_GPIO_Init+0x1e0>
 80036d0:	2303      	movs	r3, #3
 80036d2:	e006      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036d4:	2304      	movs	r3, #4
 80036d6:	e004      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036d8:	2302      	movs	r3, #2
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_GPIO_Init+0x1ee>
 80036e0:	2300      	movs	r3, #0
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	f002 0203 	and.w	r2, r2, #3
 80036e8:	0092      	lsls	r2, r2, #2
 80036ea:	4093      	lsls	r3, r2
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036f2:	492f      	ldr	r1, [pc, #188]	; (80037b0 <HAL_GPIO_Init+0x2bc>)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	089b      	lsrs	r3, r3, #2
 80036f8:	3302      	adds	r3, #2
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d006      	beq.n	800371a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800370c:	4b2d      	ldr	r3, [pc, #180]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	492c      	ldr	r1, [pc, #176]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e006      	b.n	8003728 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	43db      	mvns	r3, r3
 8003722:	4928      	ldr	r1, [pc, #160]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003724:	4013      	ands	r3, r2
 8003726:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d006      	beq.n	8003742 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003734:	4b23      	ldr	r3, [pc, #140]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	4922      	ldr	r1, [pc, #136]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
 8003740:	e006      	b.n	8003750 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003742:	4b20      	ldr	r3, [pc, #128]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	43db      	mvns	r3, r3
 800374a:	491e      	ldr	r1, [pc, #120]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800374c:	4013      	ands	r3, r2
 800374e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800375c:	4b19      	ldr	r3, [pc, #100]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	4918      	ldr	r1, [pc, #96]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	608b      	str	r3, [r1, #8]
 8003768:	e006      	b.n	8003778 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	43db      	mvns	r3, r3
 8003772:	4914      	ldr	r1, [pc, #80]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003774:	4013      	ands	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d021      	beq.n	80037c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	490e      	ldr	r1, [pc, #56]	; (80037c4 <HAL_GPIO_Init+0x2d0>)
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	60cb      	str	r3, [r1, #12]
 8003790:	e021      	b.n	80037d6 <HAL_GPIO_Init+0x2e2>
 8003792:	bf00      	nop
 8003794:	10320000 	.word	0x10320000
 8003798:	10310000 	.word	0x10310000
 800379c:	10220000 	.word	0x10220000
 80037a0:	10210000 	.word	0x10210000
 80037a4:	10120000 	.word	0x10120000
 80037a8:	10110000 	.word	0x10110000
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40010800 	.word	0x40010800
 80037b8:	40010c00 	.word	0x40010c00
 80037bc:	40011000 	.word	0x40011000
 80037c0:	40011400 	.word	0x40011400
 80037c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <HAL_GPIO_Init+0x304>)
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	4909      	ldr	r1, [pc, #36]	; (80037f8 <HAL_GPIO_Init+0x304>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	3301      	adds	r3, #1
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	fa22 f303 	lsr.w	r3, r2, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f47f ae8e 	bne.w	8003508 <HAL_GPIO_Init+0x14>
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	372c      	adds	r7, #44	; 0x2c
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	40010400 	.word	0x40010400

080037fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	88fb      	ldrh	r3, [r7, #6]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d006      	beq.n	8003820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003812:	4a05      	ldr	r2, [pc, #20]	; (8003828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f806 	bl	800382c <HAL_GPIO_EXTI_Callback>
  }
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40010400 	.word	0x40010400

0800382c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr

08003840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e272      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 8087 	beq.w	800396e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003860:	4b92      	ldr	r3, [pc, #584]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b04      	cmp	r3, #4
 800386a:	d00c      	beq.n	8003886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800386c:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d112      	bne.n	800389e <HAL_RCC_OscConfig+0x5e>
 8003878:	4b8c      	ldr	r3, [pc, #560]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003884:	d10b      	bne.n	800389e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003886:	4b89      	ldr	r3, [pc, #548]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d06c      	beq.n	800396c <HAL_RCC_OscConfig+0x12c>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d168      	bne.n	800396c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e24c      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x76>
 80038a8:	4b80      	ldr	r3, [pc, #512]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a7f      	ldr	r2, [pc, #508]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	e02e      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x98>
 80038be:	4b7b      	ldr	r3, [pc, #492]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a7a      	ldr	r2, [pc, #488]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	4b78      	ldr	r3, [pc, #480]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a77      	ldr	r2, [pc, #476]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	e01d      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e0:	d10c      	bne.n	80038fc <HAL_RCC_OscConfig+0xbc>
 80038e2:	4b72      	ldr	r3, [pc, #456]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a71      	ldr	r2, [pc, #452]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	4b6f      	ldr	r3, [pc, #444]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a6e      	ldr	r2, [pc, #440]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	e00b      	b.n	8003914 <HAL_RCC_OscConfig+0xd4>
 80038fc:	4b6b      	ldr	r3, [pc, #428]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6a      	ldr	r2, [pc, #424]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	4b68      	ldr	r3, [pc, #416]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a67      	ldr	r2, [pc, #412]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800390e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391c:	f7fe fcac 	bl	8002278 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003924:	f7fe fca8 	bl	8002278 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b64      	cmp	r3, #100	; 0x64
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e200      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b5d      	ldr	r3, [pc, #372]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0xe4>
 8003942:	e014      	b.n	800396e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe fc98 	bl	8002278 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fe fc94 	bl	8002278 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e1ec      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800395e:	4b53      	ldr	r3, [pc, #332]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x10c>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d063      	beq.n	8003a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397a:	4b4c      	ldr	r3, [pc, #304]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003986:	4b49      	ldr	r3, [pc, #292]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11c      	bne.n	80039cc <HAL_RCC_OscConfig+0x18c>
 8003992:	4b46      	ldr	r3, [pc, #280]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	4b43      	ldr	r3, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_RCC_OscConfig+0x176>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e1c0      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b3d      	ldr	r3, [pc, #244]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4939      	ldr	r1, [pc, #228]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e03a      	b.n	8003a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <HAL_RCC_OscConfig+0x270>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe fc4d 	bl	8002278 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fe fc49 	bl	8002278 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e1a1      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	4b2d      	ldr	r3, [pc, #180]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4927      	ldr	r1, [pc, #156]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x270>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fc2c 	bl	8002278 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fe fc28 	bl	8002278 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e180      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d03a      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d019      	beq.n	8003a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fc0c 	bl	8002278 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a64:	f7fe fc08 	bl	8002278 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e160      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a76:	4b0d      	ldr	r3, [pc, #52]	; (8003aac <HAL_RCC_OscConfig+0x26c>)
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0f0      	beq.n	8003a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a82:	2001      	movs	r0, #1
 8003a84:	f000 fad8 	bl	8004038 <RCC_Delay>
 8003a88:	e01c      	b.n	8003ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a90:	f7fe fbf2 	bl	8002278 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a96:	e00f      	b.n	8003ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a98:	f7fe fbee 	bl	8002278 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d908      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e146      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	42420000 	.word	0x42420000
 8003ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab8:	4b92      	ldr	r3, [pc, #584]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e9      	bne.n	8003a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80a6 	beq.w	8003c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad6:	4b8b      	ldr	r3, [pc, #556]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10d      	bne.n	8003afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ae2:	4b88      	ldr	r3, [pc, #544]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	4a87      	ldr	r2, [pc, #540]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	61d3      	str	r3, [r2, #28]
 8003aee:	4b85      	ldr	r3, [pc, #532]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003afa:	2301      	movs	r3, #1
 8003afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b82      	ldr	r3, [pc, #520]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d118      	bne.n	8003b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a7e      	ldr	r2, [pc, #504]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b16:	f7fe fbaf 	bl	8002278 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1e:	f7fe fbab 	bl	8002278 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b64      	cmp	r3, #100	; 0x64
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e103      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b30:	4b75      	ldr	r3, [pc, #468]	; (8003d08 <HAL_RCC_OscConfig+0x4c8>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0f0      	beq.n	8003b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d106      	bne.n	8003b52 <HAL_RCC_OscConfig+0x312>
 8003b44:	4b6f      	ldr	r3, [pc, #444]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	4a6e      	ldr	r2, [pc, #440]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b4a:	f043 0301 	orr.w	r3, r3, #1
 8003b4e:	6213      	str	r3, [r2, #32]
 8003b50:	e02d      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10c      	bne.n	8003b74 <HAL_RCC_OscConfig+0x334>
 8003b5a:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a69      	ldr	r2, [pc, #420]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	6213      	str	r3, [r2, #32]
 8003b66:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	4a66      	ldr	r2, [pc, #408]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 0304 	bic.w	r3, r3, #4
 8003b70:	6213      	str	r3, [r2, #32]
 8003b72:	e01c      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b05      	cmp	r3, #5
 8003b7a:	d10c      	bne.n	8003b96 <HAL_RCC_OscConfig+0x356>
 8003b7c:	4b61      	ldr	r3, [pc, #388]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	4a60      	ldr	r2, [pc, #384]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b82:	f043 0304 	orr.w	r3, r3, #4
 8003b86:	6213      	str	r3, [r2, #32]
 8003b88:	4b5e      	ldr	r3, [pc, #376]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6213      	str	r3, [r2, #32]
 8003b94:	e00b      	b.n	8003bae <HAL_RCC_OscConfig+0x36e>
 8003b96:	4b5b      	ldr	r3, [pc, #364]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4a5a      	ldr	r2, [pc, #360]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 0301 	bic.w	r3, r3, #1
 8003ba0:	6213      	str	r3, [r2, #32]
 8003ba2:	4b58      	ldr	r3, [pc, #352]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4a57      	ldr	r2, [pc, #348]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003ba8:	f023 0304 	bic.w	r3, r3, #4
 8003bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d015      	beq.n	8003be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fe fb5f 	bl	8002278 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bbc:	e00a      	b.n	8003bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbe:	f7fe fb5b 	bl	8002278 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0b1      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd4:	4b4b      	ldr	r3, [pc, #300]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0ee      	beq.n	8003bbe <HAL_RCC_OscConfig+0x37e>
 8003be0:	e014      	b.n	8003c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003be2:	f7fe fb49 	bl	8002278 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be8:	e00a      	b.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bea:	f7fe fb45 	bl	8002278 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d901      	bls.n	8003c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e09b      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c00:	4b40      	ldr	r3, [pc, #256]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ee      	bne.n	8003bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c12:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	4a3b      	ldr	r2, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 8087 	beq.w	8003d36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c28:	4b36      	ldr	r3, [pc, #216]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 030c 	and.w	r3, r3, #12
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d061      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d146      	bne.n	8003cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3c:	4b33      	ldr	r3, [pc, #204]	; (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe fb19 	bl	8002278 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fe fb15 	bl	8002278 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e06d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5c:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d1f0      	bne.n	8003c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d108      	bne.n	8003c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c72:	4b24      	ldr	r3, [pc, #144]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4921      	ldr	r1, [pc, #132]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c84:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a19      	ldr	r1, [r3, #32]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	430b      	orrs	r3, r1
 8003c96:	491b      	ldr	r1, [pc, #108]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c9c:	4b1b      	ldr	r3, [pc, #108]	; (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca2:	f7fe fae9 	bl	8002278 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003caa:	f7fe fae5 	bl	8002278 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e03d      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cbc:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d0f0      	beq.n	8003caa <HAL_RCC_OscConfig+0x46a>
 8003cc8:	e035      	b.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_RCC_OscConfig+0x4cc>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd0:	f7fe fad2 	bl	8002278 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd8:	f7fe face 	bl	8002278 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e026      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_RCC_OscConfig+0x4c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x498>
 8003cf6:	e01e      	b.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e019      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40007000 	.word	0x40007000
 8003d0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_RCC_OscConfig+0x500>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d106      	bne.n	8003d32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0d0      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b6a      	ldr	r3, [pc, #424]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b67      	ldr	r3, [pc, #412]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	4965      	ldr	r1, [pc, #404]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b63      	ldr	r3, [pc, #396]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e0b8      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003da0:	4b59      	ldr	r3, [pc, #356]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a58      	ldr	r2, [pc, #352]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003da6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003daa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0308 	and.w	r3, r3, #8
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d005      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003db8:	4b53      	ldr	r3, [pc, #332]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	4a52      	ldr	r2, [pc, #328]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003dc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc4:	4b50      	ldr	r3, [pc, #320]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	494d      	ldr	r1, [pc, #308]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d040      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d107      	bne.n	8003dfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dea:	4b47      	ldr	r3, [pc, #284]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d115      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e07f      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d107      	bne.n	8003e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e02:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e073      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e12:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e06b      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e22:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f023 0203 	bic.w	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4936      	ldr	r1, [pc, #216]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e34:	f7fe fa20 	bl	8002278 <HAL_GetTick>
 8003e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e3c:	f7fe fa1c 	bl	8002278 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e053      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e52:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 020c 	and.w	r2, r3, #12
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d1eb      	bne.n	8003e3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d210      	bcs.n	8003e94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0207 	bic.w	r2, r3, #7
 8003e7a:	4922      	ldr	r1, [pc, #136]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e82:	4b20      	ldr	r3, [pc, #128]	; (8003f04 <HAL_RCC_ClockConfig+0x1c0>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e032      	b.n	8003efa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4916      	ldr	r1, [pc, #88]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d009      	beq.n	8003ed2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	490e      	ldr	r1, [pc, #56]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ed2:	f000 f821 	bl	8003f18 <HAL_RCC_GetSysClockFreq>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_ClockConfig+0x1c4>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	490a      	ldr	r1, [pc, #40]	; (8003f0c <HAL_RCC_ClockConfig+0x1c8>)
 8003ee4:	5ccb      	ldrb	r3, [r1, r3]
 8003ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eea:	4a09      	ldr	r2, [pc, #36]	; (8003f10 <HAL_RCC_ClockConfig+0x1cc>)
 8003eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <HAL_RCC_ClockConfig+0x1d0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe f97e 	bl	80021f4 <HAL_InitTick>

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40022000 	.word	0x40022000
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	080074ac 	.word	0x080074ac
 8003f10:	20000004 	.word	0x20000004
 8003f14:	20000008 	.word	0x20000008

08003f18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f18:	b490      	push	{r4, r7}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003f1e:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003f20:	1d3c      	adds	r4, r7, #4
 8003f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003f28:	f240 2301 	movw	r3, #513	; 0x201
 8003f2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
 8003f32:	2300      	movs	r3, #0
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	2300      	movs	r3, #0
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f42:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x40>
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x46>
 8003f56:	e02b      	b.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f58:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f5a:	623b      	str	r3, [r7, #32]
      break;
 8003f5c:	e02b      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	0c9b      	lsrs	r3, r3, #18
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	3328      	adds	r3, #40	; 0x28
 8003f68:	443b      	add	r3, r7
 8003f6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f6e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d012      	beq.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	0c5b      	lsrs	r3, r3, #17
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	3328      	adds	r3, #40	; 0x28
 8003f86:	443b      	add	r3, r7
 8003f88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	4a0e      	ldr	r2, [pc, #56]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f92:	fb03 f202 	mul.w	r2, r3, r2
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	e004      	b.n	8003faa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4a0b      	ldr	r2, [pc, #44]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa4:	fb02 f303 	mul.w	r3, r2, r3
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	623b      	str	r3, [r7, #32]
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fb2:	623b      	str	r3, [r7, #32]
      break;
 8003fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc90      	pop	{r4, r7}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	0800748c 	.word	0x0800748c
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	007a1200 	.word	0x007a1200
 8003fd0:	003d0900 	.word	0x003d0900

08003fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd8:	4b02      	ldr	r3, [pc, #8]	; (8003fe4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fda:	681b      	ldr	r3, [r3, #0]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	20000004 	.word	0x20000004

08003fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fec:	f7ff fff2 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	4b05      	ldr	r3, [pc, #20]	; (8004008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	4903      	ldr	r1, [pc, #12]	; (800400c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ffe:	5ccb      	ldrb	r3, [r1, r3]
 8004000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004004:	4618      	mov	r0, r3
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	080074bc 	.word	0x080074bc

08004010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004014:	f7ff ffde 	bl	8003fd4 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	0adb      	lsrs	r3, r3, #11
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4903      	ldr	r1, [pc, #12]	; (8004034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	080074bc 	.word	0x080074bc

08004038 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <RCC_Delay+0x34>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a0a      	ldr	r2, [pc, #40]	; (8004070 <RCC_Delay+0x38>)
 8004046:	fba2 2303 	umull	r2, r3, r2, r3
 800404a:	0a5b      	lsrs	r3, r3, #9
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	fb02 f303 	mul.w	r3, r2, r3
 8004052:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004054:	bf00      	nop
  }
  while (Delay --);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	60fa      	str	r2, [r7, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1f9      	bne.n	8004054 <RCC_Delay+0x1c>
}
 8004060:	bf00      	nop
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	bc80      	pop	{r7}
 800406a:	4770      	bx	lr
 800406c:	20000004 	.word	0x20000004
 8004070:	10624dd3 	.word	0x10624dd3

08004074 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d07d      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004090:	2300      	movs	r3, #0
 8004092:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004094:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10d      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040a0:	4b4c      	ldr	r3, [pc, #304]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	4a4b      	ldr	r2, [pc, #300]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040aa:	61d3      	str	r3, [r2, #28]
 80040ac:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040b8:	2301      	movs	r3, #1
 80040ba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040bc:	4b46      	ldr	r3, [pc, #280]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d118      	bne.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040c8:	4b43      	ldr	r3, [pc, #268]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a42      	ldr	r2, [pc, #264]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040d4:	f7fe f8d0 	bl	8002278 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	e008      	b.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040dc:	f7fe f8cc 	bl	8002278 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e06d      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	4b3a      	ldr	r3, [pc, #232]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040fa:	4b36      	ldr	r3, [pc, #216]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004102:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d02e      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	429a      	cmp	r2, r3
 8004116:	d027      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004118:	4b2e      	ldr	r3, [pc, #184]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004120:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004122:	4b2e      	ldr	r3, [pc, #184]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004128:	4b2c      	ldr	r3, [pc, #176]	; (80041dc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800412e:	4a29      	ldr	r2, [pc, #164]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b00      	cmp	r3, #0
 800413c:	d014      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413e:	f7fe f89b 	bl	8002278 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004144:	e00a      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fe f897 	bl	8002278 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	f241 3288 	movw	r2, #5000	; 0x1388
 8004154:	4293      	cmp	r3, r2
 8004156:	d901      	bls.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e036      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415c:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ee      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004168:	4b1a      	ldr	r3, [pc, #104]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	4917      	ldr	r1, [pc, #92]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004176:	4313      	orrs	r3, r2
 8004178:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800417a:	7dfb      	ldrb	r3, [r7, #23]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d105      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004180:	4b14      	ldr	r3, [pc, #80]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	4a13      	ldr	r2, [pc, #76]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800418a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	490b      	ldr	r1, [pc, #44]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0310 	and.w	r3, r3, #16
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b6:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	4904      	ldr	r1, [pc, #16]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	40007000 	.word	0x40007000
 80041dc:	42420440 	.word	0x42420440

080041e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b08d      	sub	sp, #52	; 0x34
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041e8:	4b58      	ldr	r3, [pc, #352]	; (800434c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80041ea:	f107 040c 	add.w	r4, r7, #12
 80041ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041f4:	f240 2301 	movw	r3, #513	; 0x201
 80041f8:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	2300      	movs	r3, #0
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004202:	2300      	movs	r3, #0
 8004204:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	2300      	movs	r3, #0
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b10      	cmp	r3, #16
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b10      	cmp	r3, #16
 8004218:	f200 808e 	bhi.w	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d049      	beq.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b02      	cmp	r3, #2
 8004226:	d079      	beq.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004228:	e086      	b.n	8004338 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800422a:	4b49      	ldr	r3, [pc, #292]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004230:	4b47      	ldr	r3, [pc, #284]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d07f      	beq.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	0c9b      	lsrs	r3, r3, #18
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	3330      	adds	r3, #48	; 0x30
 8004246:	443b      	add	r3, r7
 8004248:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800424c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004258:	4b3d      	ldr	r3, [pc, #244]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0c5b      	lsrs	r3, r3, #17
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	3330      	adds	r3, #48	; 0x30
 8004264:	443b      	add	r3, r7
 8004266:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004276:	4a37      	ldr	r2, [pc, #220]	; (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	fbb2 f2f3 	udiv	r2, r2, r3
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	fb02 f303 	mul.w	r3, r2, r3
 8004284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004286:	e004      	b.n	8004292 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	4a33      	ldr	r2, [pc, #204]	; (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800428c:	fb02 f303 	mul.w	r3, r2, r3
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004292:	4b2f      	ldr	r3, [pc, #188]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429e:	d102      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80042a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042a4:	e04a      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4a2c      	ldr	r2, [pc, #176]	; (800435c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80042b4:	e042      	b.n	800433c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80042b6:	4b26      	ldr	r3, [pc, #152]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c6:	d108      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d003      	beq.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80042d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d8:	e01f      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042e4:	d109      	bne.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80042f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042f8:	e00f      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004300:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004304:	d11c      	bne.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8004306:	4b12      	ldr	r3, [pc, #72]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8004312:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004318:	e012      	b.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800431a:	e011      	b.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800431c:	f7ff fe78 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 8004320:	4602      	mov	r2, r0
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	0b9b      	lsrs	r3, r3, #14
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	3301      	adds	r3, #1
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	fbb2 f3f3 	udiv	r3, r2, r3
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004336:	e004      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004338:	bf00      	nop
 800433a:	e002      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8004340:	bf00      	nop
    }
  }
  return (frequency);
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004344:	4618      	mov	r0, r3
 8004346:	3734      	adds	r7, #52	; 0x34
 8004348:	46bd      	mov	sp, r7
 800434a:	bd90      	pop	{r4, r7, pc}
 800434c:	0800749c 	.word	0x0800749c
 8004350:	40021000 	.word	0x40021000
 8004354:	007a1200 	.word	0x007a1200
 8004358:	003d0900 	.word	0x003d0900
 800435c:	aaaaaaab 	.word	0xaaaaaaab

08004360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e03f      	b.n	80043f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd feba 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 f905 	bl	80045b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3708      	adds	r7, #8
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b08a      	sub	sp, #40	; 0x28
 80043fe:	af02      	add	r7, sp, #8
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	603b      	str	r3, [r7, #0]
 8004406:	4613      	mov	r3, r2
 8004408:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	d17c      	bne.n	8004514 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_UART_Transmit+0x2c>
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e075      	b.n	8004516 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d101      	bne.n	8004438 <HAL_UART_Transmit+0x3e>
 8004434:	2302      	movs	r3, #2
 8004436:	e06e      	b.n	8004516 <HAL_UART_Transmit+0x11c>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2221      	movs	r2, #33	; 0x21
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444e:	f7fd ff13 	bl	8002278 <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	d108      	bne.n	800447c <HAL_UART_Transmit+0x82>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e003      	b.n	8004484 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800448c:	e02a      	b.n	80044e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	2180      	movs	r1, #128	; 0x80
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f840 	bl	800451e <UART_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e036      	b.n	8004516 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3302      	adds	r3, #2
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e007      	b.n	80044d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3b01      	subs	r3, #1
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1cf      	bne.n	800448e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2140      	movs	r1, #64	; 0x40
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f810 	bl	800451e <UART_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e006      	b.n	8004516 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004510:	2300      	movs	r3, #0
 8004512:	e000      	b.n	8004516 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004514:	2302      	movs	r3, #2
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	3720      	adds	r7, #32
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452e:	e02c      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d028      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <UART_WaitOnFlagUntilTimeout+0x30>
 800453e:	f7fd fe9b 	bl	8002278 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	429a      	cmp	r2, r3
 800454c:	d21d      	bcs.n	800458a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800455c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695a      	ldr	r2, [r3, #20]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f022 0201 	bic.w	r2, r2, #1
 800456c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e00f      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d0c3      	beq.n	8004530 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045ee:	f023 030c 	bic.w	r3, r3, #12
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <UART_SetConfig+0x114>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d103      	bne.n	8004624 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7ff fcf8 	bl	8004010 <HAL_RCC_GetPCLK2Freq>
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	e002      	b.n	800462a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7ff fce0 	bl	8003fe8 <HAL_RCC_GetPCLK1Freq>
 8004628:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009a      	lsls	r2, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	4a22      	ldr	r2, [pc, #136]	; (80046cc <UART_SetConfig+0x118>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	0119      	lsls	r1, r3, #4
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009a      	lsls	r2, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004660:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <UART_SetConfig+0x118>)
 8004662:	fba3 0302 	umull	r0, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2064      	movs	r0, #100	; 0x64
 800466a:	fb00 f303 	mul.w	r3, r0, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	3332      	adds	r3, #50	; 0x32
 8004674:	4a15      	ldr	r2, [pc, #84]	; (80046cc <UART_SetConfig+0x118>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004680:	4419      	add	r1, r3
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009a      	lsls	r2, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	fbb2 f2f3 	udiv	r2, r2, r3
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <UART_SetConfig+0x118>)
 800469a:	fba3 0302 	umull	r0, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2064      	movs	r0, #100	; 0x64
 80046a2:	fb00 f303 	mul.w	r3, r0, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	3332      	adds	r3, #50	; 0x32
 80046ac:	4a07      	ldr	r2, [pc, #28]	; (80046cc <UART_SetConfig+0x118>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	f003 020f 	and.w	r2, r3, #15
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	440a      	add	r2, r1
 80046be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40013800 	.word	0x40013800
 80046cc:	51eb851f 	.word	0x51eb851f

080046d0 <__errno>:
 80046d0:	4b01      	ldr	r3, [pc, #4]	; (80046d8 <__errno+0x8>)
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000010 	.word	0x20000010

080046dc <__libc_init_array>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	2600      	movs	r6, #0
 80046e0:	4d0c      	ldr	r5, [pc, #48]	; (8004714 <__libc_init_array+0x38>)
 80046e2:	4c0d      	ldr	r4, [pc, #52]	; (8004718 <__libc_init_array+0x3c>)
 80046e4:	1b64      	subs	r4, r4, r5
 80046e6:	10a4      	asrs	r4, r4, #2
 80046e8:	42a6      	cmp	r6, r4
 80046ea:	d109      	bne.n	8004700 <__libc_init_array+0x24>
 80046ec:	f002 fe8e 	bl	800740c <_init>
 80046f0:	2600      	movs	r6, #0
 80046f2:	4d0a      	ldr	r5, [pc, #40]	; (800471c <__libc_init_array+0x40>)
 80046f4:	4c0a      	ldr	r4, [pc, #40]	; (8004720 <__libc_init_array+0x44>)
 80046f6:	1b64      	subs	r4, r4, r5
 80046f8:	10a4      	asrs	r4, r4, #2
 80046fa:	42a6      	cmp	r6, r4
 80046fc:	d105      	bne.n	800470a <__libc_init_array+0x2e>
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	f855 3b04 	ldr.w	r3, [r5], #4
 8004704:	4798      	blx	r3
 8004706:	3601      	adds	r6, #1
 8004708:	e7ee      	b.n	80046e8 <__libc_init_array+0xc>
 800470a:	f855 3b04 	ldr.w	r3, [r5], #4
 800470e:	4798      	blx	r3
 8004710:	3601      	adds	r6, #1
 8004712:	e7f2      	b.n	80046fa <__libc_init_array+0x1e>
 8004714:	0800789c 	.word	0x0800789c
 8004718:	0800789c 	.word	0x0800789c
 800471c:	0800789c 	.word	0x0800789c
 8004720:	080078a0 	.word	0x080078a0

08004724 <memset>:
 8004724:	4603      	mov	r3, r0
 8004726:	4402      	add	r2, r0
 8004728:	4293      	cmp	r3, r2
 800472a:	d100      	bne.n	800472e <memset+0xa>
 800472c:	4770      	bx	lr
 800472e:	f803 1b01 	strb.w	r1, [r3], #1
 8004732:	e7f9      	b.n	8004728 <memset+0x4>

08004734 <__cvt>:
 8004734:	2b00      	cmp	r3, #0
 8004736:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800473a:	461f      	mov	r7, r3
 800473c:	bfbb      	ittet	lt
 800473e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004742:	461f      	movlt	r7, r3
 8004744:	2300      	movge	r3, #0
 8004746:	232d      	movlt	r3, #45	; 0x2d
 8004748:	b088      	sub	sp, #32
 800474a:	4614      	mov	r4, r2
 800474c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800474e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004750:	7013      	strb	r3, [r2, #0]
 8004752:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004754:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004758:	f023 0820 	bic.w	r8, r3, #32
 800475c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004760:	d005      	beq.n	800476e <__cvt+0x3a>
 8004762:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004766:	d100      	bne.n	800476a <__cvt+0x36>
 8004768:	3501      	adds	r5, #1
 800476a:	2302      	movs	r3, #2
 800476c:	e000      	b.n	8004770 <__cvt+0x3c>
 800476e:	2303      	movs	r3, #3
 8004770:	aa07      	add	r2, sp, #28
 8004772:	9204      	str	r2, [sp, #16]
 8004774:	aa06      	add	r2, sp, #24
 8004776:	e9cd a202 	strd	sl, r2, [sp, #8]
 800477a:	e9cd 3500 	strd	r3, r5, [sp]
 800477e:	4622      	mov	r2, r4
 8004780:	463b      	mov	r3, r7
 8004782:	f000 fe11 	bl	80053a8 <_dtoa_r>
 8004786:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800478a:	4606      	mov	r6, r0
 800478c:	d102      	bne.n	8004794 <__cvt+0x60>
 800478e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004790:	07db      	lsls	r3, r3, #31
 8004792:	d522      	bpl.n	80047da <__cvt+0xa6>
 8004794:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004798:	eb06 0905 	add.w	r9, r6, r5
 800479c:	d110      	bne.n	80047c0 <__cvt+0x8c>
 800479e:	7833      	ldrb	r3, [r6, #0]
 80047a0:	2b30      	cmp	r3, #48	; 0x30
 80047a2:	d10a      	bne.n	80047ba <__cvt+0x86>
 80047a4:	2200      	movs	r2, #0
 80047a6:	2300      	movs	r3, #0
 80047a8:	4620      	mov	r0, r4
 80047aa:	4639      	mov	r1, r7
 80047ac:	f7fc f8fc 	bl	80009a8 <__aeabi_dcmpeq>
 80047b0:	b918      	cbnz	r0, 80047ba <__cvt+0x86>
 80047b2:	f1c5 0501 	rsb	r5, r5, #1
 80047b6:	f8ca 5000 	str.w	r5, [sl]
 80047ba:	f8da 3000 	ldr.w	r3, [sl]
 80047be:	4499      	add	r9, r3
 80047c0:	2200      	movs	r2, #0
 80047c2:	2300      	movs	r3, #0
 80047c4:	4620      	mov	r0, r4
 80047c6:	4639      	mov	r1, r7
 80047c8:	f7fc f8ee 	bl	80009a8 <__aeabi_dcmpeq>
 80047cc:	b108      	cbz	r0, 80047d2 <__cvt+0x9e>
 80047ce:	f8cd 901c 	str.w	r9, [sp, #28]
 80047d2:	2230      	movs	r2, #48	; 0x30
 80047d4:	9b07      	ldr	r3, [sp, #28]
 80047d6:	454b      	cmp	r3, r9
 80047d8:	d307      	bcc.n	80047ea <__cvt+0xb6>
 80047da:	4630      	mov	r0, r6
 80047dc:	9b07      	ldr	r3, [sp, #28]
 80047de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80047e0:	1b9b      	subs	r3, r3, r6
 80047e2:	6013      	str	r3, [r2, #0]
 80047e4:	b008      	add	sp, #32
 80047e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ea:	1c59      	adds	r1, r3, #1
 80047ec:	9107      	str	r1, [sp, #28]
 80047ee:	701a      	strb	r2, [r3, #0]
 80047f0:	e7f0      	b.n	80047d4 <__cvt+0xa0>

080047f2 <__exponent>:
 80047f2:	4603      	mov	r3, r0
 80047f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f6:	2900      	cmp	r1, #0
 80047f8:	f803 2b02 	strb.w	r2, [r3], #2
 80047fc:	bfb6      	itet	lt
 80047fe:	222d      	movlt	r2, #45	; 0x2d
 8004800:	222b      	movge	r2, #43	; 0x2b
 8004802:	4249      	neglt	r1, r1
 8004804:	2909      	cmp	r1, #9
 8004806:	7042      	strb	r2, [r0, #1]
 8004808:	dd2b      	ble.n	8004862 <__exponent+0x70>
 800480a:	f10d 0407 	add.w	r4, sp, #7
 800480e:	46a4      	mov	ip, r4
 8004810:	270a      	movs	r7, #10
 8004812:	fb91 f6f7 	sdiv	r6, r1, r7
 8004816:	460a      	mov	r2, r1
 8004818:	46a6      	mov	lr, r4
 800481a:	fb07 1516 	mls	r5, r7, r6, r1
 800481e:	2a63      	cmp	r2, #99	; 0x63
 8004820:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004824:	4631      	mov	r1, r6
 8004826:	f104 34ff 	add.w	r4, r4, #4294967295
 800482a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800482e:	dcf0      	bgt.n	8004812 <__exponent+0x20>
 8004830:	3130      	adds	r1, #48	; 0x30
 8004832:	f1ae 0502 	sub.w	r5, lr, #2
 8004836:	f804 1c01 	strb.w	r1, [r4, #-1]
 800483a:	4629      	mov	r1, r5
 800483c:	1c44      	adds	r4, r0, #1
 800483e:	4561      	cmp	r1, ip
 8004840:	d30a      	bcc.n	8004858 <__exponent+0x66>
 8004842:	f10d 0209 	add.w	r2, sp, #9
 8004846:	eba2 020e 	sub.w	r2, r2, lr
 800484a:	4565      	cmp	r5, ip
 800484c:	bf88      	it	hi
 800484e:	2200      	movhi	r2, #0
 8004850:	4413      	add	r3, r2
 8004852:	1a18      	subs	r0, r3, r0
 8004854:	b003      	add	sp, #12
 8004856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004858:	f811 2b01 	ldrb.w	r2, [r1], #1
 800485c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004860:	e7ed      	b.n	800483e <__exponent+0x4c>
 8004862:	2330      	movs	r3, #48	; 0x30
 8004864:	3130      	adds	r1, #48	; 0x30
 8004866:	7083      	strb	r3, [r0, #2]
 8004868:	70c1      	strb	r1, [r0, #3]
 800486a:	1d03      	adds	r3, r0, #4
 800486c:	e7f1      	b.n	8004852 <__exponent+0x60>
	...

08004870 <_printf_float>:
 8004870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004874:	b091      	sub	sp, #68	; 0x44
 8004876:	460c      	mov	r4, r1
 8004878:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800487c:	4616      	mov	r6, r2
 800487e:	461f      	mov	r7, r3
 8004880:	4605      	mov	r5, r0
 8004882:	f001 fd33 	bl	80062ec <_localeconv_r>
 8004886:	6803      	ldr	r3, [r0, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	9309      	str	r3, [sp, #36]	; 0x24
 800488c:	f7fb fc60 	bl	8000150 <strlen>
 8004890:	2300      	movs	r3, #0
 8004892:	930e      	str	r3, [sp, #56]	; 0x38
 8004894:	f8d8 3000 	ldr.w	r3, [r8]
 8004898:	900a      	str	r0, [sp, #40]	; 0x28
 800489a:	3307      	adds	r3, #7
 800489c:	f023 0307 	bic.w	r3, r3, #7
 80048a0:	f103 0208 	add.w	r2, r3, #8
 80048a4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80048a8:	f8d4 b000 	ldr.w	fp, [r4]
 80048ac:	f8c8 2000 	str.w	r2, [r8]
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048b8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80048bc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80048c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	4640      	mov	r0, r8
 80048c8:	4b9c      	ldr	r3, [pc, #624]	; (8004b3c <_printf_float+0x2cc>)
 80048ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048cc:	f7fc f89e 	bl	8000a0c <__aeabi_dcmpun>
 80048d0:	bb70      	cbnz	r0, 8004930 <_printf_float+0xc0>
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295
 80048d6:	4640      	mov	r0, r8
 80048d8:	4b98      	ldr	r3, [pc, #608]	; (8004b3c <_printf_float+0x2cc>)
 80048da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80048dc:	f7fc f878 	bl	80009d0 <__aeabi_dcmple>
 80048e0:	bb30      	cbnz	r0, 8004930 <_printf_float+0xc0>
 80048e2:	2200      	movs	r2, #0
 80048e4:	2300      	movs	r3, #0
 80048e6:	4640      	mov	r0, r8
 80048e8:	4651      	mov	r1, sl
 80048ea:	f7fc f867 	bl	80009bc <__aeabi_dcmplt>
 80048ee:	b110      	cbz	r0, 80048f6 <_printf_float+0x86>
 80048f0:	232d      	movs	r3, #45	; 0x2d
 80048f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048f6:	4b92      	ldr	r3, [pc, #584]	; (8004b40 <_printf_float+0x2d0>)
 80048f8:	4892      	ldr	r0, [pc, #584]	; (8004b44 <_printf_float+0x2d4>)
 80048fa:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80048fe:	bf94      	ite	ls
 8004900:	4698      	movls	r8, r3
 8004902:	4680      	movhi	r8, r0
 8004904:	2303      	movs	r3, #3
 8004906:	f04f 0a00 	mov.w	sl, #0
 800490a:	6123      	str	r3, [r4, #16]
 800490c:	f02b 0304 	bic.w	r3, fp, #4
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	4633      	mov	r3, r6
 8004914:	4621      	mov	r1, r4
 8004916:	4628      	mov	r0, r5
 8004918:	9700      	str	r7, [sp, #0]
 800491a:	aa0f      	add	r2, sp, #60	; 0x3c
 800491c:	f000 f9d4 	bl	8004cc8 <_printf_common>
 8004920:	3001      	adds	r0, #1
 8004922:	f040 8090 	bne.w	8004a46 <_printf_float+0x1d6>
 8004926:	f04f 30ff 	mov.w	r0, #4294967295
 800492a:	b011      	add	sp, #68	; 0x44
 800492c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004930:	4642      	mov	r2, r8
 8004932:	4653      	mov	r3, sl
 8004934:	4640      	mov	r0, r8
 8004936:	4651      	mov	r1, sl
 8004938:	f7fc f868 	bl	8000a0c <__aeabi_dcmpun>
 800493c:	b148      	cbz	r0, 8004952 <_printf_float+0xe2>
 800493e:	f1ba 0f00 	cmp.w	sl, #0
 8004942:	bfb8      	it	lt
 8004944:	232d      	movlt	r3, #45	; 0x2d
 8004946:	4880      	ldr	r0, [pc, #512]	; (8004b48 <_printf_float+0x2d8>)
 8004948:	bfb8      	it	lt
 800494a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800494e:	4b7f      	ldr	r3, [pc, #508]	; (8004b4c <_printf_float+0x2dc>)
 8004950:	e7d3      	b.n	80048fa <_printf_float+0x8a>
 8004952:	6863      	ldr	r3, [r4, #4]
 8004954:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	d142      	bne.n	80049e2 <_printf_float+0x172>
 800495c:	2306      	movs	r3, #6
 800495e:	6063      	str	r3, [r4, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	9206      	str	r2, [sp, #24]
 8004964:	aa0e      	add	r2, sp, #56	; 0x38
 8004966:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800496a:	aa0d      	add	r2, sp, #52	; 0x34
 800496c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004970:	9203      	str	r2, [sp, #12]
 8004972:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004976:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800497a:	6023      	str	r3, [r4, #0]
 800497c:	6863      	ldr	r3, [r4, #4]
 800497e:	4642      	mov	r2, r8
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	4628      	mov	r0, r5
 8004984:	4653      	mov	r3, sl
 8004986:	910b      	str	r1, [sp, #44]	; 0x2c
 8004988:	f7ff fed4 	bl	8004734 <__cvt>
 800498c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800498e:	4680      	mov	r8, r0
 8004990:	2947      	cmp	r1, #71	; 0x47
 8004992:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004994:	d108      	bne.n	80049a8 <_printf_float+0x138>
 8004996:	1cc8      	adds	r0, r1, #3
 8004998:	db02      	blt.n	80049a0 <_printf_float+0x130>
 800499a:	6863      	ldr	r3, [r4, #4]
 800499c:	4299      	cmp	r1, r3
 800499e:	dd40      	ble.n	8004a22 <_printf_float+0x1b2>
 80049a0:	f1a9 0902 	sub.w	r9, r9, #2
 80049a4:	fa5f f989 	uxtb.w	r9, r9
 80049a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80049ac:	d81f      	bhi.n	80049ee <_printf_float+0x17e>
 80049ae:	464a      	mov	r2, r9
 80049b0:	3901      	subs	r1, #1
 80049b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049b6:	910d      	str	r1, [sp, #52]	; 0x34
 80049b8:	f7ff ff1b 	bl	80047f2 <__exponent>
 80049bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049be:	4682      	mov	sl, r0
 80049c0:	1813      	adds	r3, r2, r0
 80049c2:	2a01      	cmp	r2, #1
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	dc02      	bgt.n	80049ce <_printf_float+0x15e>
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	07d2      	lsls	r2, r2, #31
 80049cc:	d501      	bpl.n	80049d2 <_printf_float+0x162>
 80049ce:	3301      	adds	r3, #1
 80049d0:	6123      	str	r3, [r4, #16]
 80049d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d09b      	beq.n	8004912 <_printf_float+0xa2>
 80049da:	232d      	movs	r3, #45	; 0x2d
 80049dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049e0:	e797      	b.n	8004912 <_printf_float+0xa2>
 80049e2:	2947      	cmp	r1, #71	; 0x47
 80049e4:	d1bc      	bne.n	8004960 <_printf_float+0xf0>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1ba      	bne.n	8004960 <_printf_float+0xf0>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e7b7      	b.n	800495e <_printf_float+0xee>
 80049ee:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80049f2:	d118      	bne.n	8004a26 <_printf_float+0x1b6>
 80049f4:	2900      	cmp	r1, #0
 80049f6:	6863      	ldr	r3, [r4, #4]
 80049f8:	dd0b      	ble.n	8004a12 <_printf_float+0x1a2>
 80049fa:	6121      	str	r1, [r4, #16]
 80049fc:	b913      	cbnz	r3, 8004a04 <_printf_float+0x194>
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	07d0      	lsls	r0, r2, #31
 8004a02:	d502      	bpl.n	8004a0a <_printf_float+0x19a>
 8004a04:	3301      	adds	r3, #1
 8004a06:	440b      	add	r3, r1
 8004a08:	6123      	str	r3, [r4, #16]
 8004a0a:	f04f 0a00 	mov.w	sl, #0
 8004a0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a10:	e7df      	b.n	80049d2 <_printf_float+0x162>
 8004a12:	b913      	cbnz	r3, 8004a1a <_printf_float+0x1aa>
 8004a14:	6822      	ldr	r2, [r4, #0]
 8004a16:	07d2      	lsls	r2, r2, #31
 8004a18:	d501      	bpl.n	8004a1e <_printf_float+0x1ae>
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	e7f4      	b.n	8004a08 <_printf_float+0x198>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e7f2      	b.n	8004a08 <_printf_float+0x198>
 8004a22:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004a26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a28:	4299      	cmp	r1, r3
 8004a2a:	db05      	blt.n	8004a38 <_printf_float+0x1c8>
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	6121      	str	r1, [r4, #16]
 8004a30:	07d8      	lsls	r0, r3, #31
 8004a32:	d5ea      	bpl.n	8004a0a <_printf_float+0x19a>
 8004a34:	1c4b      	adds	r3, r1, #1
 8004a36:	e7e7      	b.n	8004a08 <_printf_float+0x198>
 8004a38:	2900      	cmp	r1, #0
 8004a3a:	bfcc      	ite	gt
 8004a3c:	2201      	movgt	r2, #1
 8004a3e:	f1c1 0202 	rsble	r2, r1, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	e7e0      	b.n	8004a08 <_printf_float+0x198>
 8004a46:	6823      	ldr	r3, [r4, #0]
 8004a48:	055a      	lsls	r2, r3, #21
 8004a4a:	d407      	bmi.n	8004a5c <_printf_float+0x1ec>
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	4642      	mov	r2, r8
 8004a50:	4631      	mov	r1, r6
 8004a52:	4628      	mov	r0, r5
 8004a54:	47b8      	blx	r7
 8004a56:	3001      	adds	r0, #1
 8004a58:	d12b      	bne.n	8004ab2 <_printf_float+0x242>
 8004a5a:	e764      	b.n	8004926 <_printf_float+0xb6>
 8004a5c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a60:	f240 80dd 	bls.w	8004c1e <_printf_float+0x3ae>
 8004a64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f7fb ff9c 	bl	80009a8 <__aeabi_dcmpeq>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d033      	beq.n	8004adc <_printf_float+0x26c>
 8004a74:	2301      	movs	r3, #1
 8004a76:	4631      	mov	r1, r6
 8004a78:	4628      	mov	r0, r5
 8004a7a:	4a35      	ldr	r2, [pc, #212]	; (8004b50 <_printf_float+0x2e0>)
 8004a7c:	47b8      	blx	r7
 8004a7e:	3001      	adds	r0, #1
 8004a80:	f43f af51 	beq.w	8004926 <_printf_float+0xb6>
 8004a84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	db02      	blt.n	8004a92 <_printf_float+0x222>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	07d8      	lsls	r0, r3, #31
 8004a90:	d50f      	bpl.n	8004ab2 <_printf_float+0x242>
 8004a92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a96:	4631      	mov	r1, r6
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b8      	blx	r7
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	f43f af42 	beq.w	8004926 <_printf_float+0xb6>
 8004aa2:	f04f 0800 	mov.w	r8, #0
 8004aa6:	f104 091a 	add.w	r9, r4, #26
 8004aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aac:	3b01      	subs	r3, #1
 8004aae:	4543      	cmp	r3, r8
 8004ab0:	dc09      	bgt.n	8004ac6 <_printf_float+0x256>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	079b      	lsls	r3, r3, #30
 8004ab6:	f100 8102 	bmi.w	8004cbe <_printf_float+0x44e>
 8004aba:	68e0      	ldr	r0, [r4, #12]
 8004abc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004abe:	4298      	cmp	r0, r3
 8004ac0:	bfb8      	it	lt
 8004ac2:	4618      	movlt	r0, r3
 8004ac4:	e731      	b.n	800492a <_printf_float+0xba>
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	464a      	mov	r2, r9
 8004aca:	4631      	mov	r1, r6
 8004acc:	4628      	mov	r0, r5
 8004ace:	47b8      	blx	r7
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	f43f af28 	beq.w	8004926 <_printf_float+0xb6>
 8004ad6:	f108 0801 	add.w	r8, r8, #1
 8004ada:	e7e6      	b.n	8004aaa <_printf_float+0x23a>
 8004adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	dc38      	bgt.n	8004b54 <_printf_float+0x2e4>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <_printf_float+0x2e0>)
 8004aea:	47b8      	blx	r7
 8004aec:	3001      	adds	r0, #1
 8004aee:	f43f af1a 	beq.w	8004926 <_printf_float+0xb6>
 8004af2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004af6:	4313      	orrs	r3, r2
 8004af8:	d102      	bne.n	8004b00 <_printf_float+0x290>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	07d9      	lsls	r1, r3, #31
 8004afe:	d5d8      	bpl.n	8004ab2 <_printf_float+0x242>
 8004b00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b04:	4631      	mov	r1, r6
 8004b06:	4628      	mov	r0, r5
 8004b08:	47b8      	blx	r7
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	f43f af0b 	beq.w	8004926 <_printf_float+0xb6>
 8004b10:	f04f 0900 	mov.w	r9, #0
 8004b14:	f104 0a1a 	add.w	sl, r4, #26
 8004b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b1a:	425b      	negs	r3, r3
 8004b1c:	454b      	cmp	r3, r9
 8004b1e:	dc01      	bgt.n	8004b24 <_printf_float+0x2b4>
 8004b20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b22:	e794      	b.n	8004a4e <_printf_float+0x1de>
 8004b24:	2301      	movs	r3, #1
 8004b26:	4652      	mov	r2, sl
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	47b8      	blx	r7
 8004b2e:	3001      	adds	r0, #1
 8004b30:	f43f aef9 	beq.w	8004926 <_printf_float+0xb6>
 8004b34:	f109 0901 	add.w	r9, r9, #1
 8004b38:	e7ee      	b.n	8004b18 <_printf_float+0x2a8>
 8004b3a:	bf00      	nop
 8004b3c:	7fefffff 	.word	0x7fefffff
 8004b40:	080074c8 	.word	0x080074c8
 8004b44:	080074cc 	.word	0x080074cc
 8004b48:	080074d4 	.word	0x080074d4
 8004b4c:	080074d0 	.word	0x080074d0
 8004b50:	080074d8 	.word	0x080074d8
 8004b54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	bfa8      	it	ge
 8004b5c:	461a      	movge	r2, r3
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	4691      	mov	r9, r2
 8004b62:	dc37      	bgt.n	8004bd4 <_printf_float+0x364>
 8004b64:	f04f 0b00 	mov.w	fp, #0
 8004b68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b6c:	f104 021a 	add.w	r2, r4, #26
 8004b70:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004b74:	ebaa 0309 	sub.w	r3, sl, r9
 8004b78:	455b      	cmp	r3, fp
 8004b7a:	dc33      	bgt.n	8004be4 <_printf_float+0x374>
 8004b7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b80:	429a      	cmp	r2, r3
 8004b82:	db3b      	blt.n	8004bfc <_printf_float+0x38c>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	07da      	lsls	r2, r3, #31
 8004b88:	d438      	bmi.n	8004bfc <_printf_float+0x38c>
 8004b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004b8e:	eba3 020a 	sub.w	r2, r3, sl
 8004b92:	eba3 0901 	sub.w	r9, r3, r1
 8004b96:	4591      	cmp	r9, r2
 8004b98:	bfa8      	it	ge
 8004b9a:	4691      	movge	r9, r2
 8004b9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ba0:	dc34      	bgt.n	8004c0c <_printf_float+0x39c>
 8004ba2:	f04f 0800 	mov.w	r8, #0
 8004ba6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004baa:	f104 0a1a 	add.w	sl, r4, #26
 8004bae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	eba3 0309 	sub.w	r3, r3, r9
 8004bb8:	4543      	cmp	r3, r8
 8004bba:	f77f af7a 	ble.w	8004ab2 <_printf_float+0x242>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4652      	mov	r2, sl
 8004bc2:	4631      	mov	r1, r6
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	47b8      	blx	r7
 8004bc8:	3001      	adds	r0, #1
 8004bca:	f43f aeac 	beq.w	8004926 <_printf_float+0xb6>
 8004bce:	f108 0801 	add.w	r8, r8, #1
 8004bd2:	e7ec      	b.n	8004bae <_printf_float+0x33e>
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4642      	mov	r2, r8
 8004bda:	4628      	mov	r0, r5
 8004bdc:	47b8      	blx	r7
 8004bde:	3001      	adds	r0, #1
 8004be0:	d1c0      	bne.n	8004b64 <_printf_float+0x2f4>
 8004be2:	e6a0      	b.n	8004926 <_printf_float+0xb6>
 8004be4:	2301      	movs	r3, #1
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	920b      	str	r2, [sp, #44]	; 0x2c
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	f43f ae99 	beq.w	8004926 <_printf_float+0xb6>
 8004bf4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bf6:	f10b 0b01 	add.w	fp, fp, #1
 8004bfa:	e7b9      	b.n	8004b70 <_printf_float+0x300>
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c02:	4628      	mov	r0, r5
 8004c04:	47b8      	blx	r7
 8004c06:	3001      	adds	r0, #1
 8004c08:	d1bf      	bne.n	8004b8a <_printf_float+0x31a>
 8004c0a:	e68c      	b.n	8004926 <_printf_float+0xb6>
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	eb08 020a 	add.w	r2, r8, sl
 8004c16:	47b8      	blx	r7
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d1c2      	bne.n	8004ba2 <_printf_float+0x332>
 8004c1c:	e683      	b.n	8004926 <_printf_float+0xb6>
 8004c1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c20:	2a01      	cmp	r2, #1
 8004c22:	dc01      	bgt.n	8004c28 <_printf_float+0x3b8>
 8004c24:	07db      	lsls	r3, r3, #31
 8004c26:	d537      	bpl.n	8004c98 <_printf_float+0x428>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	4642      	mov	r2, r8
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	f43f ae77 	beq.w	8004926 <_printf_float+0xb6>
 8004c38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	f43f ae6f 	beq.w	8004926 <_printf_float+0xb6>
 8004c48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f7fb feaa 	bl	80009a8 <__aeabi_dcmpeq>
 8004c54:	b9d8      	cbnz	r0, 8004c8e <_printf_float+0x41e>
 8004c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c58:	f108 0201 	add.w	r2, r8, #1
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	d10e      	bne.n	8004c86 <_printf_float+0x416>
 8004c68:	e65d      	b.n	8004926 <_printf_float+0xb6>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	464a      	mov	r2, r9
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f ae56 	beq.w	8004926 <_printf_float+0xb6>
 8004c7a:	f108 0801 	add.w	r8, r8, #1
 8004c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4543      	cmp	r3, r8
 8004c84:	dcf1      	bgt.n	8004c6a <_printf_float+0x3fa>
 8004c86:	4653      	mov	r3, sl
 8004c88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c8c:	e6e0      	b.n	8004a50 <_printf_float+0x1e0>
 8004c8e:	f04f 0800 	mov.w	r8, #0
 8004c92:	f104 091a 	add.w	r9, r4, #26
 8004c96:	e7f2      	b.n	8004c7e <_printf_float+0x40e>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	e7df      	b.n	8004c5e <_printf_float+0x3ee>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	464a      	mov	r2, r9
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	f43f ae3c 	beq.w	8004926 <_printf_float+0xb6>
 8004cae:	f108 0801 	add.w	r8, r8, #1
 8004cb2:	68e3      	ldr	r3, [r4, #12]
 8004cb4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004cb6:	1a5b      	subs	r3, r3, r1
 8004cb8:	4543      	cmp	r3, r8
 8004cba:	dcf0      	bgt.n	8004c9e <_printf_float+0x42e>
 8004cbc:	e6fd      	b.n	8004aba <_printf_float+0x24a>
 8004cbe:	f04f 0800 	mov.w	r8, #0
 8004cc2:	f104 0919 	add.w	r9, r4, #25
 8004cc6:	e7f4      	b.n	8004cb2 <_printf_float+0x442>

08004cc8 <_printf_common>:
 8004cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	4616      	mov	r6, r2
 8004cce:	4699      	mov	r9, r3
 8004cd0:	688a      	ldr	r2, [r1, #8]
 8004cd2:	690b      	ldr	r3, [r1, #16]
 8004cd4:	4607      	mov	r7, r0
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	bfb8      	it	lt
 8004cda:	4613      	movlt	r3, r2
 8004cdc:	6033      	str	r3, [r6, #0]
 8004cde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ce8:	b10a      	cbz	r2, 8004cee <_printf_common+0x26>
 8004cea:	3301      	adds	r3, #1
 8004cec:	6033      	str	r3, [r6, #0]
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	0699      	lsls	r1, r3, #26
 8004cf2:	bf42      	ittt	mi
 8004cf4:	6833      	ldrmi	r3, [r6, #0]
 8004cf6:	3302      	addmi	r3, #2
 8004cf8:	6033      	strmi	r3, [r6, #0]
 8004cfa:	6825      	ldr	r5, [r4, #0]
 8004cfc:	f015 0506 	ands.w	r5, r5, #6
 8004d00:	d106      	bne.n	8004d10 <_printf_common+0x48>
 8004d02:	f104 0a19 	add.w	sl, r4, #25
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	6832      	ldr	r2, [r6, #0]
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	dc28      	bgt.n	8004d62 <_printf_common+0x9a>
 8004d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d14:	1e13      	subs	r3, r2, #0
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	bf18      	it	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	0692      	lsls	r2, r2, #26
 8004d1e:	d42d      	bmi.n	8004d7c <_printf_common+0xb4>
 8004d20:	4649      	mov	r1, r9
 8004d22:	4638      	mov	r0, r7
 8004d24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d28:	47c0      	blx	r8
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d020      	beq.n	8004d70 <_printf_common+0xa8>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	68e5      	ldr	r5, [r4, #12]
 8004d32:	f003 0306 	and.w	r3, r3, #6
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	bf18      	it	ne
 8004d3a:	2500      	movne	r5, #0
 8004d3c:	6832      	ldr	r2, [r6, #0]
 8004d3e:	f04f 0600 	mov.w	r6, #0
 8004d42:	68a3      	ldr	r3, [r4, #8]
 8004d44:	bf08      	it	eq
 8004d46:	1aad      	subeq	r5, r5, r2
 8004d48:	6922      	ldr	r2, [r4, #16]
 8004d4a:	bf08      	it	eq
 8004d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bfc4      	itt	gt
 8004d54:	1a9b      	subgt	r3, r3, r2
 8004d56:	18ed      	addgt	r5, r5, r3
 8004d58:	341a      	adds	r4, #26
 8004d5a:	42b5      	cmp	r5, r6
 8004d5c:	d11a      	bne.n	8004d94 <_printf_common+0xcc>
 8004d5e:	2000      	movs	r0, #0
 8004d60:	e008      	b.n	8004d74 <_printf_common+0xac>
 8004d62:	2301      	movs	r3, #1
 8004d64:	4652      	mov	r2, sl
 8004d66:	4649      	mov	r1, r9
 8004d68:	4638      	mov	r0, r7
 8004d6a:	47c0      	blx	r8
 8004d6c:	3001      	adds	r0, #1
 8004d6e:	d103      	bne.n	8004d78 <_printf_common+0xb0>
 8004d70:	f04f 30ff 	mov.w	r0, #4294967295
 8004d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d78:	3501      	adds	r5, #1
 8004d7a:	e7c4      	b.n	8004d06 <_printf_common+0x3e>
 8004d7c:	2030      	movs	r0, #48	; 0x30
 8004d7e:	18e1      	adds	r1, r4, r3
 8004d80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d8a:	4422      	add	r2, r4
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d92:	e7c5      	b.n	8004d20 <_printf_common+0x58>
 8004d94:	2301      	movs	r3, #1
 8004d96:	4622      	mov	r2, r4
 8004d98:	4649      	mov	r1, r9
 8004d9a:	4638      	mov	r0, r7
 8004d9c:	47c0      	blx	r8
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d0e6      	beq.n	8004d70 <_printf_common+0xa8>
 8004da2:	3601      	adds	r6, #1
 8004da4:	e7d9      	b.n	8004d5a <_printf_common+0x92>
	...

08004da8 <_printf_i>:
 8004da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dac:	7e0f      	ldrb	r7, [r1, #24]
 8004dae:	4691      	mov	r9, r2
 8004db0:	2f78      	cmp	r7, #120	; 0x78
 8004db2:	4680      	mov	r8, r0
 8004db4:	460c      	mov	r4, r1
 8004db6:	469a      	mov	sl, r3
 8004db8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dbe:	d807      	bhi.n	8004dd0 <_printf_i+0x28>
 8004dc0:	2f62      	cmp	r7, #98	; 0x62
 8004dc2:	d80a      	bhi.n	8004dda <_printf_i+0x32>
 8004dc4:	2f00      	cmp	r7, #0
 8004dc6:	f000 80d9 	beq.w	8004f7c <_printf_i+0x1d4>
 8004dca:	2f58      	cmp	r7, #88	; 0x58
 8004dcc:	f000 80a4 	beq.w	8004f18 <_printf_i+0x170>
 8004dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dd8:	e03a      	b.n	8004e50 <_printf_i+0xa8>
 8004dda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dde:	2b15      	cmp	r3, #21
 8004de0:	d8f6      	bhi.n	8004dd0 <_printf_i+0x28>
 8004de2:	a101      	add	r1, pc, #4	; (adr r1, 8004de8 <_printf_i+0x40>)
 8004de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004de8:	08004e41 	.word	0x08004e41
 8004dec:	08004e55 	.word	0x08004e55
 8004df0:	08004dd1 	.word	0x08004dd1
 8004df4:	08004dd1 	.word	0x08004dd1
 8004df8:	08004dd1 	.word	0x08004dd1
 8004dfc:	08004dd1 	.word	0x08004dd1
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004dd1 	.word	0x08004dd1
 8004e08:	08004dd1 	.word	0x08004dd1
 8004e0c:	08004dd1 	.word	0x08004dd1
 8004e10:	08004dd1 	.word	0x08004dd1
 8004e14:	08004f63 	.word	0x08004f63
 8004e18:	08004e85 	.word	0x08004e85
 8004e1c:	08004f45 	.word	0x08004f45
 8004e20:	08004dd1 	.word	0x08004dd1
 8004e24:	08004dd1 	.word	0x08004dd1
 8004e28:	08004f85 	.word	0x08004f85
 8004e2c:	08004dd1 	.word	0x08004dd1
 8004e30:	08004e85 	.word	0x08004e85
 8004e34:	08004dd1 	.word	0x08004dd1
 8004e38:	08004dd1 	.word	0x08004dd1
 8004e3c:	08004f4d 	.word	0x08004f4d
 8004e40:	682b      	ldr	r3, [r5, #0]
 8004e42:	1d1a      	adds	r2, r3, #4
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	602a      	str	r2, [r5, #0]
 8004e48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e50:	2301      	movs	r3, #1
 8004e52:	e0a4      	b.n	8004f9e <_printf_i+0x1f6>
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	6829      	ldr	r1, [r5, #0]
 8004e58:	0606      	lsls	r6, r0, #24
 8004e5a:	f101 0304 	add.w	r3, r1, #4
 8004e5e:	d50a      	bpl.n	8004e76 <_printf_i+0xce>
 8004e60:	680e      	ldr	r6, [r1, #0]
 8004e62:	602b      	str	r3, [r5, #0]
 8004e64:	2e00      	cmp	r6, #0
 8004e66:	da03      	bge.n	8004e70 <_printf_i+0xc8>
 8004e68:	232d      	movs	r3, #45	; 0x2d
 8004e6a:	4276      	negs	r6, r6
 8004e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e70:	230a      	movs	r3, #10
 8004e72:	485e      	ldr	r0, [pc, #376]	; (8004fec <_printf_i+0x244>)
 8004e74:	e019      	b.n	8004eaa <_printf_i+0x102>
 8004e76:	680e      	ldr	r6, [r1, #0]
 8004e78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e7c:	602b      	str	r3, [r5, #0]
 8004e7e:	bf18      	it	ne
 8004e80:	b236      	sxthne	r6, r6
 8004e82:	e7ef      	b.n	8004e64 <_printf_i+0xbc>
 8004e84:	682b      	ldr	r3, [r5, #0]
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	1d19      	adds	r1, r3, #4
 8004e8a:	6029      	str	r1, [r5, #0]
 8004e8c:	0601      	lsls	r1, r0, #24
 8004e8e:	d501      	bpl.n	8004e94 <_printf_i+0xec>
 8004e90:	681e      	ldr	r6, [r3, #0]
 8004e92:	e002      	b.n	8004e9a <_printf_i+0xf2>
 8004e94:	0646      	lsls	r6, r0, #25
 8004e96:	d5fb      	bpl.n	8004e90 <_printf_i+0xe8>
 8004e98:	881e      	ldrh	r6, [r3, #0]
 8004e9a:	2f6f      	cmp	r7, #111	; 0x6f
 8004e9c:	bf0c      	ite	eq
 8004e9e:	2308      	moveq	r3, #8
 8004ea0:	230a      	movne	r3, #10
 8004ea2:	4852      	ldr	r0, [pc, #328]	; (8004fec <_printf_i+0x244>)
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eaa:	6865      	ldr	r5, [r4, #4]
 8004eac:	2d00      	cmp	r5, #0
 8004eae:	bfa8      	it	ge
 8004eb0:	6821      	ldrge	r1, [r4, #0]
 8004eb2:	60a5      	str	r5, [r4, #8]
 8004eb4:	bfa4      	itt	ge
 8004eb6:	f021 0104 	bicge.w	r1, r1, #4
 8004eba:	6021      	strge	r1, [r4, #0]
 8004ebc:	b90e      	cbnz	r6, 8004ec2 <_printf_i+0x11a>
 8004ebe:	2d00      	cmp	r5, #0
 8004ec0:	d04d      	beq.n	8004f5e <_printf_i+0x1b6>
 8004ec2:	4615      	mov	r5, r2
 8004ec4:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ec8:	fb03 6711 	mls	r7, r3, r1, r6
 8004ecc:	5dc7      	ldrb	r7, [r0, r7]
 8004ece:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ed2:	4637      	mov	r7, r6
 8004ed4:	42bb      	cmp	r3, r7
 8004ed6:	460e      	mov	r6, r1
 8004ed8:	d9f4      	bls.n	8004ec4 <_printf_i+0x11c>
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d10b      	bne.n	8004ef6 <_printf_i+0x14e>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	07de      	lsls	r6, r3, #31
 8004ee2:	d508      	bpl.n	8004ef6 <_printf_i+0x14e>
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	6861      	ldr	r1, [r4, #4]
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	bfde      	ittt	le
 8004eec:	2330      	movle	r3, #48	; 0x30
 8004eee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ef2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ef6:	1b52      	subs	r2, r2, r5
 8004ef8:	6122      	str	r2, [r4, #16]
 8004efa:	464b      	mov	r3, r9
 8004efc:	4621      	mov	r1, r4
 8004efe:	4640      	mov	r0, r8
 8004f00:	f8cd a000 	str.w	sl, [sp]
 8004f04:	aa03      	add	r2, sp, #12
 8004f06:	f7ff fedf 	bl	8004cc8 <_printf_common>
 8004f0a:	3001      	adds	r0, #1
 8004f0c:	d14c      	bne.n	8004fa8 <_printf_i+0x200>
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f12:	b004      	add	sp, #16
 8004f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f18:	4834      	ldr	r0, [pc, #208]	; (8004fec <_printf_i+0x244>)
 8004f1a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f1e:	6829      	ldr	r1, [r5, #0]
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f26:	6029      	str	r1, [r5, #0]
 8004f28:	061d      	lsls	r5, r3, #24
 8004f2a:	d514      	bpl.n	8004f56 <_printf_i+0x1ae>
 8004f2c:	07df      	lsls	r7, r3, #31
 8004f2e:	bf44      	itt	mi
 8004f30:	f043 0320 	orrmi.w	r3, r3, #32
 8004f34:	6023      	strmi	r3, [r4, #0]
 8004f36:	b91e      	cbnz	r6, 8004f40 <_printf_i+0x198>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	f023 0320 	bic.w	r3, r3, #32
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	2310      	movs	r3, #16
 8004f42:	e7af      	b.n	8004ea4 <_printf_i+0xfc>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	f043 0320 	orr.w	r3, r3, #32
 8004f4a:	6023      	str	r3, [r4, #0]
 8004f4c:	2378      	movs	r3, #120	; 0x78
 8004f4e:	4828      	ldr	r0, [pc, #160]	; (8004ff0 <_printf_i+0x248>)
 8004f50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f54:	e7e3      	b.n	8004f1e <_printf_i+0x176>
 8004f56:	0659      	lsls	r1, r3, #25
 8004f58:	bf48      	it	mi
 8004f5a:	b2b6      	uxthmi	r6, r6
 8004f5c:	e7e6      	b.n	8004f2c <_printf_i+0x184>
 8004f5e:	4615      	mov	r5, r2
 8004f60:	e7bb      	b.n	8004eda <_printf_i+0x132>
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	6826      	ldr	r6, [r4, #0]
 8004f66:	1d18      	adds	r0, r3, #4
 8004f68:	6961      	ldr	r1, [r4, #20]
 8004f6a:	6028      	str	r0, [r5, #0]
 8004f6c:	0635      	lsls	r5, r6, #24
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	d501      	bpl.n	8004f76 <_printf_i+0x1ce>
 8004f72:	6019      	str	r1, [r3, #0]
 8004f74:	e002      	b.n	8004f7c <_printf_i+0x1d4>
 8004f76:	0670      	lsls	r0, r6, #25
 8004f78:	d5fb      	bpl.n	8004f72 <_printf_i+0x1ca>
 8004f7a:	8019      	strh	r1, [r3, #0]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	4615      	mov	r5, r2
 8004f80:	6123      	str	r3, [r4, #16]
 8004f82:	e7ba      	b.n	8004efa <_printf_i+0x152>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	2100      	movs	r1, #0
 8004f88:	1d1a      	adds	r2, r3, #4
 8004f8a:	602a      	str	r2, [r5, #0]
 8004f8c:	681d      	ldr	r5, [r3, #0]
 8004f8e:	6862      	ldr	r2, [r4, #4]
 8004f90:	4628      	mov	r0, r5
 8004f92:	f001 fa1f 	bl	80063d4 <memchr>
 8004f96:	b108      	cbz	r0, 8004f9c <_printf_i+0x1f4>
 8004f98:	1b40      	subs	r0, r0, r5
 8004f9a:	6060      	str	r0, [r4, #4]
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	6123      	str	r3, [r4, #16]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fa6:	e7a8      	b.n	8004efa <_printf_i+0x152>
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4649      	mov	r1, r9
 8004fac:	4640      	mov	r0, r8
 8004fae:	6923      	ldr	r3, [r4, #16]
 8004fb0:	47d0      	blx	sl
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d0ab      	beq.n	8004f0e <_printf_i+0x166>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	079b      	lsls	r3, r3, #30
 8004fba:	d413      	bmi.n	8004fe4 <_printf_i+0x23c>
 8004fbc:	68e0      	ldr	r0, [r4, #12]
 8004fbe:	9b03      	ldr	r3, [sp, #12]
 8004fc0:	4298      	cmp	r0, r3
 8004fc2:	bfb8      	it	lt
 8004fc4:	4618      	movlt	r0, r3
 8004fc6:	e7a4      	b.n	8004f12 <_printf_i+0x16a>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	4632      	mov	r2, r6
 8004fcc:	4649      	mov	r1, r9
 8004fce:	4640      	mov	r0, r8
 8004fd0:	47d0      	blx	sl
 8004fd2:	3001      	adds	r0, #1
 8004fd4:	d09b      	beq.n	8004f0e <_printf_i+0x166>
 8004fd6:	3501      	adds	r5, #1
 8004fd8:	68e3      	ldr	r3, [r4, #12]
 8004fda:	9903      	ldr	r1, [sp, #12]
 8004fdc:	1a5b      	subs	r3, r3, r1
 8004fde:	42ab      	cmp	r3, r5
 8004fe0:	dcf2      	bgt.n	8004fc8 <_printf_i+0x220>
 8004fe2:	e7eb      	b.n	8004fbc <_printf_i+0x214>
 8004fe4:	2500      	movs	r5, #0
 8004fe6:	f104 0619 	add.w	r6, r4, #25
 8004fea:	e7f5      	b.n	8004fd8 <_printf_i+0x230>
 8004fec:	080074da 	.word	0x080074da
 8004ff0:	080074eb 	.word	0x080074eb

08004ff4 <iprintf>:
 8004ff4:	b40f      	push	{r0, r1, r2, r3}
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <iprintf+0x2c>)
 8004ff8:	b513      	push	{r0, r1, r4, lr}
 8004ffa:	681c      	ldr	r4, [r3, #0]
 8004ffc:	b124      	cbz	r4, 8005008 <iprintf+0x14>
 8004ffe:	69a3      	ldr	r3, [r4, #24]
 8005000:	b913      	cbnz	r3, 8005008 <iprintf+0x14>
 8005002:	4620      	mov	r0, r4
 8005004:	f001 f8d4 	bl	80061b0 <__sinit>
 8005008:	ab05      	add	r3, sp, #20
 800500a:	4620      	mov	r0, r4
 800500c:	9a04      	ldr	r2, [sp, #16]
 800500e:	68a1      	ldr	r1, [r4, #8]
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	f001 fe95 	bl	8006d40 <_vfiprintf_r>
 8005016:	b002      	add	sp, #8
 8005018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800501c:	b004      	add	sp, #16
 800501e:	4770      	bx	lr
 8005020:	20000010 	.word	0x20000010

08005024 <_puts_r>:
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	460e      	mov	r6, r1
 8005028:	4605      	mov	r5, r0
 800502a:	b118      	cbz	r0, 8005034 <_puts_r+0x10>
 800502c:	6983      	ldr	r3, [r0, #24]
 800502e:	b90b      	cbnz	r3, 8005034 <_puts_r+0x10>
 8005030:	f001 f8be 	bl	80061b0 <__sinit>
 8005034:	69ab      	ldr	r3, [r5, #24]
 8005036:	68ac      	ldr	r4, [r5, #8]
 8005038:	b913      	cbnz	r3, 8005040 <_puts_r+0x1c>
 800503a:	4628      	mov	r0, r5
 800503c:	f001 f8b8 	bl	80061b0 <__sinit>
 8005040:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <_puts_r+0xd0>)
 8005042:	429c      	cmp	r4, r3
 8005044:	d120      	bne.n	8005088 <_puts_r+0x64>
 8005046:	686c      	ldr	r4, [r5, #4]
 8005048:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800504a:	07db      	lsls	r3, r3, #31
 800504c:	d405      	bmi.n	800505a <_puts_r+0x36>
 800504e:	89a3      	ldrh	r3, [r4, #12]
 8005050:	0598      	lsls	r0, r3, #22
 8005052:	d402      	bmi.n	800505a <_puts_r+0x36>
 8005054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005056:	f001 f94e 	bl	80062f6 <__retarget_lock_acquire_recursive>
 800505a:	89a3      	ldrh	r3, [r4, #12]
 800505c:	0719      	lsls	r1, r3, #28
 800505e:	d51d      	bpl.n	800509c <_puts_r+0x78>
 8005060:	6923      	ldr	r3, [r4, #16]
 8005062:	b1db      	cbz	r3, 800509c <_puts_r+0x78>
 8005064:	3e01      	subs	r6, #1
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800506c:	3b01      	subs	r3, #1
 800506e:	60a3      	str	r3, [r4, #8]
 8005070:	bb39      	cbnz	r1, 80050c2 <_puts_r+0x9e>
 8005072:	2b00      	cmp	r3, #0
 8005074:	da38      	bge.n	80050e8 <_puts_r+0xc4>
 8005076:	4622      	mov	r2, r4
 8005078:	210a      	movs	r1, #10
 800507a:	4628      	mov	r0, r5
 800507c:	f000 f848 	bl	8005110 <__swbuf_r>
 8005080:	3001      	adds	r0, #1
 8005082:	d011      	beq.n	80050a8 <_puts_r+0x84>
 8005084:	250a      	movs	r5, #10
 8005086:	e011      	b.n	80050ac <_puts_r+0x88>
 8005088:	4b1b      	ldr	r3, [pc, #108]	; (80050f8 <_puts_r+0xd4>)
 800508a:	429c      	cmp	r4, r3
 800508c:	d101      	bne.n	8005092 <_puts_r+0x6e>
 800508e:	68ac      	ldr	r4, [r5, #8]
 8005090:	e7da      	b.n	8005048 <_puts_r+0x24>
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <_puts_r+0xd8>)
 8005094:	429c      	cmp	r4, r3
 8005096:	bf08      	it	eq
 8005098:	68ec      	ldreq	r4, [r5, #12]
 800509a:	e7d5      	b.n	8005048 <_puts_r+0x24>
 800509c:	4621      	mov	r1, r4
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 f888 	bl	80051b4 <__swsetup_r>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d0dd      	beq.n	8005064 <_puts_r+0x40>
 80050a8:	f04f 35ff 	mov.w	r5, #4294967295
 80050ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050ae:	07da      	lsls	r2, r3, #31
 80050b0:	d405      	bmi.n	80050be <_puts_r+0x9a>
 80050b2:	89a3      	ldrh	r3, [r4, #12]
 80050b4:	059b      	lsls	r3, r3, #22
 80050b6:	d402      	bmi.n	80050be <_puts_r+0x9a>
 80050b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050ba:	f001 f91d 	bl	80062f8 <__retarget_lock_release_recursive>
 80050be:	4628      	mov	r0, r5
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	da04      	bge.n	80050d0 <_puts_r+0xac>
 80050c6:	69a2      	ldr	r2, [r4, #24]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	dc06      	bgt.n	80050da <_puts_r+0xb6>
 80050cc:	290a      	cmp	r1, #10
 80050ce:	d004      	beq.n	80050da <_puts_r+0xb6>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	6022      	str	r2, [r4, #0]
 80050d6:	7019      	strb	r1, [r3, #0]
 80050d8:	e7c5      	b.n	8005066 <_puts_r+0x42>
 80050da:	4622      	mov	r2, r4
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 f817 	bl	8005110 <__swbuf_r>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d1bf      	bne.n	8005066 <_puts_r+0x42>
 80050e6:	e7df      	b.n	80050a8 <_puts_r+0x84>
 80050e8:	250a      	movs	r5, #10
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	6022      	str	r2, [r4, #0]
 80050f0:	701d      	strb	r5, [r3, #0]
 80050f2:	e7db      	b.n	80050ac <_puts_r+0x88>
 80050f4:	080075ac 	.word	0x080075ac
 80050f8:	080075cc 	.word	0x080075cc
 80050fc:	0800758c 	.word	0x0800758c

08005100 <puts>:
 8005100:	4b02      	ldr	r3, [pc, #8]	; (800510c <puts+0xc>)
 8005102:	4601      	mov	r1, r0
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	f7ff bf8d 	b.w	8005024 <_puts_r>
 800510a:	bf00      	nop
 800510c:	20000010 	.word	0x20000010

08005110 <__swbuf_r>:
 8005110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005112:	460e      	mov	r6, r1
 8005114:	4614      	mov	r4, r2
 8005116:	4605      	mov	r5, r0
 8005118:	b118      	cbz	r0, 8005122 <__swbuf_r+0x12>
 800511a:	6983      	ldr	r3, [r0, #24]
 800511c:	b90b      	cbnz	r3, 8005122 <__swbuf_r+0x12>
 800511e:	f001 f847 	bl	80061b0 <__sinit>
 8005122:	4b21      	ldr	r3, [pc, #132]	; (80051a8 <__swbuf_r+0x98>)
 8005124:	429c      	cmp	r4, r3
 8005126:	d12b      	bne.n	8005180 <__swbuf_r+0x70>
 8005128:	686c      	ldr	r4, [r5, #4]
 800512a:	69a3      	ldr	r3, [r4, #24]
 800512c:	60a3      	str	r3, [r4, #8]
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	071a      	lsls	r2, r3, #28
 8005132:	d52f      	bpl.n	8005194 <__swbuf_r+0x84>
 8005134:	6923      	ldr	r3, [r4, #16]
 8005136:	b36b      	cbz	r3, 8005194 <__swbuf_r+0x84>
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	b2f6      	uxtb	r6, r6
 800513e:	1ac0      	subs	r0, r0, r3
 8005140:	6963      	ldr	r3, [r4, #20]
 8005142:	4637      	mov	r7, r6
 8005144:	4283      	cmp	r3, r0
 8005146:	dc04      	bgt.n	8005152 <__swbuf_r+0x42>
 8005148:	4621      	mov	r1, r4
 800514a:	4628      	mov	r0, r5
 800514c:	f000 ff9c 	bl	8006088 <_fflush_r>
 8005150:	bb30      	cbnz	r0, 80051a0 <__swbuf_r+0x90>
 8005152:	68a3      	ldr	r3, [r4, #8]
 8005154:	3001      	adds	r0, #1
 8005156:	3b01      	subs	r3, #1
 8005158:	60a3      	str	r3, [r4, #8]
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	6022      	str	r2, [r4, #0]
 8005160:	701e      	strb	r6, [r3, #0]
 8005162:	6963      	ldr	r3, [r4, #20]
 8005164:	4283      	cmp	r3, r0
 8005166:	d004      	beq.n	8005172 <__swbuf_r+0x62>
 8005168:	89a3      	ldrh	r3, [r4, #12]
 800516a:	07db      	lsls	r3, r3, #31
 800516c:	d506      	bpl.n	800517c <__swbuf_r+0x6c>
 800516e:	2e0a      	cmp	r6, #10
 8005170:	d104      	bne.n	800517c <__swbuf_r+0x6c>
 8005172:	4621      	mov	r1, r4
 8005174:	4628      	mov	r0, r5
 8005176:	f000 ff87 	bl	8006088 <_fflush_r>
 800517a:	b988      	cbnz	r0, 80051a0 <__swbuf_r+0x90>
 800517c:	4638      	mov	r0, r7
 800517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005180:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <__swbuf_r+0x9c>)
 8005182:	429c      	cmp	r4, r3
 8005184:	d101      	bne.n	800518a <__swbuf_r+0x7a>
 8005186:	68ac      	ldr	r4, [r5, #8]
 8005188:	e7cf      	b.n	800512a <__swbuf_r+0x1a>
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <__swbuf_r+0xa0>)
 800518c:	429c      	cmp	r4, r3
 800518e:	bf08      	it	eq
 8005190:	68ec      	ldreq	r4, [r5, #12]
 8005192:	e7ca      	b.n	800512a <__swbuf_r+0x1a>
 8005194:	4621      	mov	r1, r4
 8005196:	4628      	mov	r0, r5
 8005198:	f000 f80c 	bl	80051b4 <__swsetup_r>
 800519c:	2800      	cmp	r0, #0
 800519e:	d0cb      	beq.n	8005138 <__swbuf_r+0x28>
 80051a0:	f04f 37ff 	mov.w	r7, #4294967295
 80051a4:	e7ea      	b.n	800517c <__swbuf_r+0x6c>
 80051a6:	bf00      	nop
 80051a8:	080075ac 	.word	0x080075ac
 80051ac:	080075cc 	.word	0x080075cc
 80051b0:	0800758c 	.word	0x0800758c

080051b4 <__swsetup_r>:
 80051b4:	4b32      	ldr	r3, [pc, #200]	; (8005280 <__swsetup_r+0xcc>)
 80051b6:	b570      	push	{r4, r5, r6, lr}
 80051b8:	681d      	ldr	r5, [r3, #0]
 80051ba:	4606      	mov	r6, r0
 80051bc:	460c      	mov	r4, r1
 80051be:	b125      	cbz	r5, 80051ca <__swsetup_r+0x16>
 80051c0:	69ab      	ldr	r3, [r5, #24]
 80051c2:	b913      	cbnz	r3, 80051ca <__swsetup_r+0x16>
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 fff3 	bl	80061b0 <__sinit>
 80051ca:	4b2e      	ldr	r3, [pc, #184]	; (8005284 <__swsetup_r+0xd0>)
 80051cc:	429c      	cmp	r4, r3
 80051ce:	d10f      	bne.n	80051f0 <__swsetup_r+0x3c>
 80051d0:	686c      	ldr	r4, [r5, #4]
 80051d2:	89a3      	ldrh	r3, [r4, #12]
 80051d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051d8:	0719      	lsls	r1, r3, #28
 80051da:	d42c      	bmi.n	8005236 <__swsetup_r+0x82>
 80051dc:	06dd      	lsls	r5, r3, #27
 80051de:	d411      	bmi.n	8005204 <__swsetup_r+0x50>
 80051e0:	2309      	movs	r3, #9
 80051e2:	6033      	str	r3, [r6, #0]
 80051e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	e03e      	b.n	800526e <__swsetup_r+0xba>
 80051f0:	4b25      	ldr	r3, [pc, #148]	; (8005288 <__swsetup_r+0xd4>)
 80051f2:	429c      	cmp	r4, r3
 80051f4:	d101      	bne.n	80051fa <__swsetup_r+0x46>
 80051f6:	68ac      	ldr	r4, [r5, #8]
 80051f8:	e7eb      	b.n	80051d2 <__swsetup_r+0x1e>
 80051fa:	4b24      	ldr	r3, [pc, #144]	; (800528c <__swsetup_r+0xd8>)
 80051fc:	429c      	cmp	r4, r3
 80051fe:	bf08      	it	eq
 8005200:	68ec      	ldreq	r4, [r5, #12]
 8005202:	e7e6      	b.n	80051d2 <__swsetup_r+0x1e>
 8005204:	0758      	lsls	r0, r3, #29
 8005206:	d512      	bpl.n	800522e <__swsetup_r+0x7a>
 8005208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800520a:	b141      	cbz	r1, 800521e <__swsetup_r+0x6a>
 800520c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005210:	4299      	cmp	r1, r3
 8005212:	d002      	beq.n	800521a <__swsetup_r+0x66>
 8005214:	4630      	mov	r0, r6
 8005216:	f001 fc8f 	bl	8006b38 <_free_r>
 800521a:	2300      	movs	r3, #0
 800521c:	6363      	str	r3, [r4, #52]	; 0x34
 800521e:	89a3      	ldrh	r3, [r4, #12]
 8005220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005224:	81a3      	strh	r3, [r4, #12]
 8005226:	2300      	movs	r3, #0
 8005228:	6063      	str	r3, [r4, #4]
 800522a:	6923      	ldr	r3, [r4, #16]
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f043 0308 	orr.w	r3, r3, #8
 8005234:	81a3      	strh	r3, [r4, #12]
 8005236:	6923      	ldr	r3, [r4, #16]
 8005238:	b94b      	cbnz	r3, 800524e <__swsetup_r+0x9a>
 800523a:	89a3      	ldrh	r3, [r4, #12]
 800523c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005244:	d003      	beq.n	800524e <__swsetup_r+0x9a>
 8005246:	4621      	mov	r1, r4
 8005248:	4630      	mov	r0, r6
 800524a:	f001 f87b 	bl	8006344 <__smakebuf_r>
 800524e:	89a0      	ldrh	r0, [r4, #12]
 8005250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005254:	f010 0301 	ands.w	r3, r0, #1
 8005258:	d00a      	beq.n	8005270 <__swsetup_r+0xbc>
 800525a:	2300      	movs	r3, #0
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	6963      	ldr	r3, [r4, #20]
 8005260:	425b      	negs	r3, r3
 8005262:	61a3      	str	r3, [r4, #24]
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	b943      	cbnz	r3, 800527a <__swsetup_r+0xc6>
 8005268:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800526c:	d1ba      	bne.n	80051e4 <__swsetup_r+0x30>
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	0781      	lsls	r1, r0, #30
 8005272:	bf58      	it	pl
 8005274:	6963      	ldrpl	r3, [r4, #20]
 8005276:	60a3      	str	r3, [r4, #8]
 8005278:	e7f4      	b.n	8005264 <__swsetup_r+0xb0>
 800527a:	2000      	movs	r0, #0
 800527c:	e7f7      	b.n	800526e <__swsetup_r+0xba>
 800527e:	bf00      	nop
 8005280:	20000010 	.word	0x20000010
 8005284:	080075ac 	.word	0x080075ac
 8005288:	080075cc 	.word	0x080075cc
 800528c:	0800758c 	.word	0x0800758c

08005290 <quorem>:
 8005290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	6903      	ldr	r3, [r0, #16]
 8005296:	690c      	ldr	r4, [r1, #16]
 8005298:	4607      	mov	r7, r0
 800529a:	42a3      	cmp	r3, r4
 800529c:	f2c0 8082 	blt.w	80053a4 <quorem+0x114>
 80052a0:	3c01      	subs	r4, #1
 80052a2:	f100 0514 	add.w	r5, r0, #20
 80052a6:	f101 0814 	add.w	r8, r1, #20
 80052aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b8:	3301      	adds	r3, #1
 80052ba:	429a      	cmp	r2, r3
 80052bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80052c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052c8:	d331      	bcc.n	800532e <quorem+0x9e>
 80052ca:	f04f 0e00 	mov.w	lr, #0
 80052ce:	4640      	mov	r0, r8
 80052d0:	46ac      	mov	ip, r5
 80052d2:	46f2      	mov	sl, lr
 80052d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80052d8:	b293      	uxth	r3, r2
 80052da:	fb06 e303 	mla	r3, r6, r3, lr
 80052de:	0c12      	lsrs	r2, r2, #16
 80052e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	fb06 e202 	mla	r2, r6, r2, lr
 80052ea:	ebaa 0303 	sub.w	r3, sl, r3
 80052ee:	f8dc a000 	ldr.w	sl, [ip]
 80052f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80052f6:	fa1f fa8a 	uxth.w	sl, sl
 80052fa:	4453      	add	r3, sl
 80052fc:	f8dc a000 	ldr.w	sl, [ip]
 8005300:	b292      	uxth	r2, r2
 8005302:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005306:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800530a:	b29b      	uxth	r3, r3
 800530c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005310:	4581      	cmp	r9, r0
 8005312:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005316:	f84c 3b04 	str.w	r3, [ip], #4
 800531a:	d2db      	bcs.n	80052d4 <quorem+0x44>
 800531c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005320:	b92b      	cbnz	r3, 800532e <quorem+0x9e>
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	3b04      	subs	r3, #4
 8005326:	429d      	cmp	r5, r3
 8005328:	461a      	mov	r2, r3
 800532a:	d32f      	bcc.n	800538c <quorem+0xfc>
 800532c:	613c      	str	r4, [r7, #16]
 800532e:	4638      	mov	r0, r7
 8005330:	f001 faea 	bl	8006908 <__mcmp>
 8005334:	2800      	cmp	r0, #0
 8005336:	db25      	blt.n	8005384 <quorem+0xf4>
 8005338:	4628      	mov	r0, r5
 800533a:	f04f 0c00 	mov.w	ip, #0
 800533e:	3601      	adds	r6, #1
 8005340:	f858 1b04 	ldr.w	r1, [r8], #4
 8005344:	f8d0 e000 	ldr.w	lr, [r0]
 8005348:	b28b      	uxth	r3, r1
 800534a:	ebac 0303 	sub.w	r3, ip, r3
 800534e:	fa1f f28e 	uxth.w	r2, lr
 8005352:	4413      	add	r3, r2
 8005354:	0c0a      	lsrs	r2, r1, #16
 8005356:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800535a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800535e:	b29b      	uxth	r3, r3
 8005360:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005364:	45c1      	cmp	r9, r8
 8005366:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800536a:	f840 3b04 	str.w	r3, [r0], #4
 800536e:	d2e7      	bcs.n	8005340 <quorem+0xb0>
 8005370:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005374:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005378:	b922      	cbnz	r2, 8005384 <quorem+0xf4>
 800537a:	3b04      	subs	r3, #4
 800537c:	429d      	cmp	r5, r3
 800537e:	461a      	mov	r2, r3
 8005380:	d30a      	bcc.n	8005398 <quorem+0x108>
 8005382:	613c      	str	r4, [r7, #16]
 8005384:	4630      	mov	r0, r6
 8005386:	b003      	add	sp, #12
 8005388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538c:	6812      	ldr	r2, [r2, #0]
 800538e:	3b04      	subs	r3, #4
 8005390:	2a00      	cmp	r2, #0
 8005392:	d1cb      	bne.n	800532c <quorem+0x9c>
 8005394:	3c01      	subs	r4, #1
 8005396:	e7c6      	b.n	8005326 <quorem+0x96>
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	3b04      	subs	r3, #4
 800539c:	2a00      	cmp	r2, #0
 800539e:	d1f0      	bne.n	8005382 <quorem+0xf2>
 80053a0:	3c01      	subs	r4, #1
 80053a2:	e7eb      	b.n	800537c <quorem+0xec>
 80053a4:	2000      	movs	r0, #0
 80053a6:	e7ee      	b.n	8005386 <quorem+0xf6>

080053a8 <_dtoa_r>:
 80053a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ac:	4616      	mov	r6, r2
 80053ae:	461f      	mov	r7, r3
 80053b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80053b2:	b099      	sub	sp, #100	; 0x64
 80053b4:	4605      	mov	r5, r0
 80053b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80053ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80053be:	b974      	cbnz	r4, 80053de <_dtoa_r+0x36>
 80053c0:	2010      	movs	r0, #16
 80053c2:	f000 ffff 	bl	80063c4 <malloc>
 80053c6:	4602      	mov	r2, r0
 80053c8:	6268      	str	r0, [r5, #36]	; 0x24
 80053ca:	b920      	cbnz	r0, 80053d6 <_dtoa_r+0x2e>
 80053cc:	21ea      	movs	r1, #234	; 0xea
 80053ce:	4ba8      	ldr	r3, [pc, #672]	; (8005670 <_dtoa_r+0x2c8>)
 80053d0:	48a8      	ldr	r0, [pc, #672]	; (8005674 <_dtoa_r+0x2cc>)
 80053d2:	f001 fe4b 	bl	800706c <__assert_func>
 80053d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053da:	6004      	str	r4, [r0, #0]
 80053dc:	60c4      	str	r4, [r0, #12]
 80053de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053e0:	6819      	ldr	r1, [r3, #0]
 80053e2:	b151      	cbz	r1, 80053fa <_dtoa_r+0x52>
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	2301      	movs	r3, #1
 80053e8:	4093      	lsls	r3, r2
 80053ea:	604a      	str	r2, [r1, #4]
 80053ec:	608b      	str	r3, [r1, #8]
 80053ee:	4628      	mov	r0, r5
 80053f0:	f001 f84c 	bl	800648c <_Bfree>
 80053f4:	2200      	movs	r2, #0
 80053f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	1e3b      	subs	r3, r7, #0
 80053fc:	bfaf      	iteee	ge
 80053fe:	2300      	movge	r3, #0
 8005400:	2201      	movlt	r2, #1
 8005402:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005406:	9305      	strlt	r3, [sp, #20]
 8005408:	bfa8      	it	ge
 800540a:	f8c8 3000 	strge.w	r3, [r8]
 800540e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005412:	4b99      	ldr	r3, [pc, #612]	; (8005678 <_dtoa_r+0x2d0>)
 8005414:	bfb8      	it	lt
 8005416:	f8c8 2000 	strlt.w	r2, [r8]
 800541a:	ea33 0309 	bics.w	r3, r3, r9
 800541e:	d119      	bne.n	8005454 <_dtoa_r+0xac>
 8005420:	f242 730f 	movw	r3, #9999	; 0x270f
 8005424:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800542c:	4333      	orrs	r3, r6
 800542e:	f000 857f 	beq.w	8005f30 <_dtoa_r+0xb88>
 8005432:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005434:	b953      	cbnz	r3, 800544c <_dtoa_r+0xa4>
 8005436:	4b91      	ldr	r3, [pc, #580]	; (800567c <_dtoa_r+0x2d4>)
 8005438:	e022      	b.n	8005480 <_dtoa_r+0xd8>
 800543a:	4b91      	ldr	r3, [pc, #580]	; (8005680 <_dtoa_r+0x2d8>)
 800543c:	9303      	str	r3, [sp, #12]
 800543e:	3308      	adds	r3, #8
 8005440:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005442:	6013      	str	r3, [r2, #0]
 8005444:	9803      	ldr	r0, [sp, #12]
 8005446:	b019      	add	sp, #100	; 0x64
 8005448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800544c:	4b8b      	ldr	r3, [pc, #556]	; (800567c <_dtoa_r+0x2d4>)
 800544e:	9303      	str	r3, [sp, #12]
 8005450:	3303      	adds	r3, #3
 8005452:	e7f5      	b.n	8005440 <_dtoa_r+0x98>
 8005454:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005458:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800545c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005460:	2200      	movs	r2, #0
 8005462:	2300      	movs	r3, #0
 8005464:	f7fb faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8005468:	4680      	mov	r8, r0
 800546a:	b158      	cbz	r0, 8005484 <_dtoa_r+0xdc>
 800546c:	2301      	movs	r3, #1
 800546e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8558 	beq.w	8005f2a <_dtoa_r+0xb82>
 800547a:	4882      	ldr	r0, [pc, #520]	; (8005684 <_dtoa_r+0x2dc>)
 800547c:	6018      	str	r0, [r3, #0]
 800547e:	1e43      	subs	r3, r0, #1
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	e7df      	b.n	8005444 <_dtoa_r+0x9c>
 8005484:	ab16      	add	r3, sp, #88	; 0x58
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	ab17      	add	r3, sp, #92	; 0x5c
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4628      	mov	r0, r5
 800548e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005492:	f001 fae1 	bl	8006a58 <__d2b>
 8005496:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800549a:	4683      	mov	fp, r0
 800549c:	2c00      	cmp	r4, #0
 800549e:	d07f      	beq.n	80055a0 <_dtoa_r+0x1f8>
 80054a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054a6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80054aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054ae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80054b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80054b6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80054ba:	2200      	movs	r2, #0
 80054bc:	4b72      	ldr	r3, [pc, #456]	; (8005688 <_dtoa_r+0x2e0>)
 80054be:	f7fa fe53 	bl	8000168 <__aeabi_dsub>
 80054c2:	a365      	add	r3, pc, #404	; (adr r3, 8005658 <_dtoa_r+0x2b0>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f7fb f806 	bl	80004d8 <__aeabi_dmul>
 80054cc:	a364      	add	r3, pc, #400	; (adr r3, 8005660 <_dtoa_r+0x2b8>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	f7fa fe4b 	bl	800016c <__adddf3>
 80054d6:	4606      	mov	r6, r0
 80054d8:	4620      	mov	r0, r4
 80054da:	460f      	mov	r7, r1
 80054dc:	f7fa ff92 	bl	8000404 <__aeabi_i2d>
 80054e0:	a361      	add	r3, pc, #388	; (adr r3, 8005668 <_dtoa_r+0x2c0>)
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f7fa fff7 	bl	80004d8 <__aeabi_dmul>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4630      	mov	r0, r6
 80054f0:	4639      	mov	r1, r7
 80054f2:	f7fa fe3b 	bl	800016c <__adddf3>
 80054f6:	4606      	mov	r6, r0
 80054f8:	460f      	mov	r7, r1
 80054fa:	f7fb fa9d 	bl	8000a38 <__aeabi_d2iz>
 80054fe:	2200      	movs	r2, #0
 8005500:	4682      	mov	sl, r0
 8005502:	2300      	movs	r3, #0
 8005504:	4630      	mov	r0, r6
 8005506:	4639      	mov	r1, r7
 8005508:	f7fb fa58 	bl	80009bc <__aeabi_dcmplt>
 800550c:	b148      	cbz	r0, 8005522 <_dtoa_r+0x17a>
 800550e:	4650      	mov	r0, sl
 8005510:	f7fa ff78 	bl	8000404 <__aeabi_i2d>
 8005514:	4632      	mov	r2, r6
 8005516:	463b      	mov	r3, r7
 8005518:	f7fb fa46 	bl	80009a8 <__aeabi_dcmpeq>
 800551c:	b908      	cbnz	r0, 8005522 <_dtoa_r+0x17a>
 800551e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005522:	f1ba 0f16 	cmp.w	sl, #22
 8005526:	d858      	bhi.n	80055da <_dtoa_r+0x232>
 8005528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800552c:	4b57      	ldr	r3, [pc, #348]	; (800568c <_dtoa_r+0x2e4>)
 800552e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005536:	f7fb fa41 	bl	80009bc <__aeabi_dcmplt>
 800553a:	2800      	cmp	r0, #0
 800553c:	d04f      	beq.n	80055de <_dtoa_r+0x236>
 800553e:	2300      	movs	r3, #0
 8005540:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005544:	930f      	str	r3, [sp, #60]	; 0x3c
 8005546:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005548:	1b1c      	subs	r4, r3, r4
 800554a:	1e63      	subs	r3, r4, #1
 800554c:	9309      	str	r3, [sp, #36]	; 0x24
 800554e:	bf49      	itett	mi
 8005550:	f1c4 0301 	rsbmi	r3, r4, #1
 8005554:	2300      	movpl	r3, #0
 8005556:	9306      	strmi	r3, [sp, #24]
 8005558:	2300      	movmi	r3, #0
 800555a:	bf54      	ite	pl
 800555c:	9306      	strpl	r3, [sp, #24]
 800555e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005560:	f1ba 0f00 	cmp.w	sl, #0
 8005564:	db3d      	blt.n	80055e2 <_dtoa_r+0x23a>
 8005566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005568:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800556c:	4453      	add	r3, sl
 800556e:	9309      	str	r3, [sp, #36]	; 0x24
 8005570:	2300      	movs	r3, #0
 8005572:	930a      	str	r3, [sp, #40]	; 0x28
 8005574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005576:	2b09      	cmp	r3, #9
 8005578:	f200 808c 	bhi.w	8005694 <_dtoa_r+0x2ec>
 800557c:	2b05      	cmp	r3, #5
 800557e:	bfc4      	itt	gt
 8005580:	3b04      	subgt	r3, #4
 8005582:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005586:	bfc8      	it	gt
 8005588:	2400      	movgt	r4, #0
 800558a:	f1a3 0302 	sub.w	r3, r3, #2
 800558e:	bfd8      	it	le
 8005590:	2401      	movle	r4, #1
 8005592:	2b03      	cmp	r3, #3
 8005594:	f200 808a 	bhi.w	80056ac <_dtoa_r+0x304>
 8005598:	e8df f003 	tbb	[pc, r3]
 800559c:	5b4d4f2d 	.word	0x5b4d4f2d
 80055a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80055a4:	441c      	add	r4, r3
 80055a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80055aa:	2b20      	cmp	r3, #32
 80055ac:	bfc3      	ittte	gt
 80055ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055b2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80055b6:	fa09 f303 	lslgt.w	r3, r9, r3
 80055ba:	f1c3 0320 	rsble	r3, r3, #32
 80055be:	bfc6      	itte	gt
 80055c0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055c4:	4318      	orrgt	r0, r3
 80055c6:	fa06 f003 	lslle.w	r0, r6, r3
 80055ca:	f7fa ff0b 	bl	80003e4 <__aeabi_ui2d>
 80055ce:	2301      	movs	r3, #1
 80055d0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80055d4:	3c01      	subs	r4, #1
 80055d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80055d8:	e76f      	b.n	80054ba <_dtoa_r+0x112>
 80055da:	2301      	movs	r3, #1
 80055dc:	e7b2      	b.n	8005544 <_dtoa_r+0x19c>
 80055de:	900f      	str	r0, [sp, #60]	; 0x3c
 80055e0:	e7b1      	b.n	8005546 <_dtoa_r+0x19e>
 80055e2:	9b06      	ldr	r3, [sp, #24]
 80055e4:	eba3 030a 	sub.w	r3, r3, sl
 80055e8:	9306      	str	r3, [sp, #24]
 80055ea:	f1ca 0300 	rsb	r3, sl, #0
 80055ee:	930a      	str	r3, [sp, #40]	; 0x28
 80055f0:	2300      	movs	r3, #0
 80055f2:	930e      	str	r3, [sp, #56]	; 0x38
 80055f4:	e7be      	b.n	8005574 <_dtoa_r+0x1cc>
 80055f6:	2300      	movs	r3, #0
 80055f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80055fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	dc58      	bgt.n	80056b2 <_dtoa_r+0x30a>
 8005600:	f04f 0901 	mov.w	r9, #1
 8005604:	464b      	mov	r3, r9
 8005606:	f8cd 9020 	str.w	r9, [sp, #32]
 800560a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800560e:	2200      	movs	r2, #0
 8005610:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005612:	6042      	str	r2, [r0, #4]
 8005614:	2204      	movs	r2, #4
 8005616:	f102 0614 	add.w	r6, r2, #20
 800561a:	429e      	cmp	r6, r3
 800561c:	6841      	ldr	r1, [r0, #4]
 800561e:	d94e      	bls.n	80056be <_dtoa_r+0x316>
 8005620:	4628      	mov	r0, r5
 8005622:	f000 fef3 	bl	800640c <_Balloc>
 8005626:	9003      	str	r0, [sp, #12]
 8005628:	2800      	cmp	r0, #0
 800562a:	d14c      	bne.n	80056c6 <_dtoa_r+0x31e>
 800562c:	4602      	mov	r2, r0
 800562e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005632:	4b17      	ldr	r3, [pc, #92]	; (8005690 <_dtoa_r+0x2e8>)
 8005634:	e6cc      	b.n	80053d0 <_dtoa_r+0x28>
 8005636:	2301      	movs	r3, #1
 8005638:	e7de      	b.n	80055f8 <_dtoa_r+0x250>
 800563a:	2300      	movs	r3, #0
 800563c:	930b      	str	r3, [sp, #44]	; 0x2c
 800563e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005640:	eb0a 0903 	add.w	r9, sl, r3
 8005644:	f109 0301 	add.w	r3, r9, #1
 8005648:	2b01      	cmp	r3, #1
 800564a:	9308      	str	r3, [sp, #32]
 800564c:	bfb8      	it	lt
 800564e:	2301      	movlt	r3, #1
 8005650:	e7dd      	b.n	800560e <_dtoa_r+0x266>
 8005652:	2301      	movs	r3, #1
 8005654:	e7f2      	b.n	800563c <_dtoa_r+0x294>
 8005656:	bf00      	nop
 8005658:	636f4361 	.word	0x636f4361
 800565c:	3fd287a7 	.word	0x3fd287a7
 8005660:	8b60c8b3 	.word	0x8b60c8b3
 8005664:	3fc68a28 	.word	0x3fc68a28
 8005668:	509f79fb 	.word	0x509f79fb
 800566c:	3fd34413 	.word	0x3fd34413
 8005670:	08007509 	.word	0x08007509
 8005674:	08007520 	.word	0x08007520
 8005678:	7ff00000 	.word	0x7ff00000
 800567c:	08007505 	.word	0x08007505
 8005680:	080074fc 	.word	0x080074fc
 8005684:	080074d9 	.word	0x080074d9
 8005688:	3ff80000 	.word	0x3ff80000
 800568c:	08007670 	.word	0x08007670
 8005690:	0800757b 	.word	0x0800757b
 8005694:	2401      	movs	r4, #1
 8005696:	2300      	movs	r3, #0
 8005698:	940b      	str	r4, [sp, #44]	; 0x2c
 800569a:	9322      	str	r3, [sp, #136]	; 0x88
 800569c:	f04f 39ff 	mov.w	r9, #4294967295
 80056a0:	2200      	movs	r2, #0
 80056a2:	2312      	movs	r3, #18
 80056a4:	f8cd 9020 	str.w	r9, [sp, #32]
 80056a8:	9223      	str	r2, [sp, #140]	; 0x8c
 80056aa:	e7b0      	b.n	800560e <_dtoa_r+0x266>
 80056ac:	2301      	movs	r3, #1
 80056ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b0:	e7f4      	b.n	800569c <_dtoa_r+0x2f4>
 80056b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80056b6:	464b      	mov	r3, r9
 80056b8:	f8cd 9020 	str.w	r9, [sp, #32]
 80056bc:	e7a7      	b.n	800560e <_dtoa_r+0x266>
 80056be:	3101      	adds	r1, #1
 80056c0:	6041      	str	r1, [r0, #4]
 80056c2:	0052      	lsls	r2, r2, #1
 80056c4:	e7a7      	b.n	8005616 <_dtoa_r+0x26e>
 80056c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80056c8:	9a03      	ldr	r2, [sp, #12]
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	9b08      	ldr	r3, [sp, #32]
 80056ce:	2b0e      	cmp	r3, #14
 80056d0:	f200 80a8 	bhi.w	8005824 <_dtoa_r+0x47c>
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	f000 80a5 	beq.w	8005824 <_dtoa_r+0x47c>
 80056da:	f1ba 0f00 	cmp.w	sl, #0
 80056de:	dd34      	ble.n	800574a <_dtoa_r+0x3a2>
 80056e0:	4a9a      	ldr	r2, [pc, #616]	; (800594c <_dtoa_r+0x5a4>)
 80056e2:	f00a 030f 	and.w	r3, sl, #15
 80056e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056ea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80056ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80056f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80056fa:	d016      	beq.n	800572a <_dtoa_r+0x382>
 80056fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005700:	4b93      	ldr	r3, [pc, #588]	; (8005950 <_dtoa_r+0x5a8>)
 8005702:	2703      	movs	r7, #3
 8005704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005708:	f7fb f810 	bl	800072c <__aeabi_ddiv>
 800570c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005710:	f004 040f 	and.w	r4, r4, #15
 8005714:	4e8e      	ldr	r6, [pc, #568]	; (8005950 <_dtoa_r+0x5a8>)
 8005716:	b954      	cbnz	r4, 800572e <_dtoa_r+0x386>
 8005718:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800571c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005720:	f7fb f804 	bl	800072c <__aeabi_ddiv>
 8005724:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005728:	e029      	b.n	800577e <_dtoa_r+0x3d6>
 800572a:	2702      	movs	r7, #2
 800572c:	e7f2      	b.n	8005714 <_dtoa_r+0x36c>
 800572e:	07e1      	lsls	r1, r4, #31
 8005730:	d508      	bpl.n	8005744 <_dtoa_r+0x39c>
 8005732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005736:	e9d6 2300 	ldrd	r2, r3, [r6]
 800573a:	f7fa fecd 	bl	80004d8 <__aeabi_dmul>
 800573e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005742:	3701      	adds	r7, #1
 8005744:	1064      	asrs	r4, r4, #1
 8005746:	3608      	adds	r6, #8
 8005748:	e7e5      	b.n	8005716 <_dtoa_r+0x36e>
 800574a:	f000 80a5 	beq.w	8005898 <_dtoa_r+0x4f0>
 800574e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005752:	f1ca 0400 	rsb	r4, sl, #0
 8005756:	4b7d      	ldr	r3, [pc, #500]	; (800594c <_dtoa_r+0x5a4>)
 8005758:	f004 020f 	and.w	r2, r4, #15
 800575c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f7fa feb8 	bl	80004d8 <__aeabi_dmul>
 8005768:	2702      	movs	r7, #2
 800576a:	2300      	movs	r3, #0
 800576c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005770:	4e77      	ldr	r6, [pc, #476]	; (8005950 <_dtoa_r+0x5a8>)
 8005772:	1124      	asrs	r4, r4, #4
 8005774:	2c00      	cmp	r4, #0
 8005776:	f040 8084 	bne.w	8005882 <_dtoa_r+0x4da>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1d2      	bne.n	8005724 <_dtoa_r+0x37c>
 800577e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 808b 	beq.w	800589c <_dtoa_r+0x4f4>
 8005786:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800578a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800578e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005792:	2200      	movs	r2, #0
 8005794:	4b6f      	ldr	r3, [pc, #444]	; (8005954 <_dtoa_r+0x5ac>)
 8005796:	f7fb f911 	bl	80009bc <__aeabi_dcmplt>
 800579a:	2800      	cmp	r0, #0
 800579c:	d07e      	beq.n	800589c <_dtoa_r+0x4f4>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d07b      	beq.n	800589c <_dtoa_r+0x4f4>
 80057a4:	f1b9 0f00 	cmp.w	r9, #0
 80057a8:	dd38      	ble.n	800581c <_dtoa_r+0x474>
 80057aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057ae:	2200      	movs	r2, #0
 80057b0:	4b69      	ldr	r3, [pc, #420]	; (8005958 <_dtoa_r+0x5b0>)
 80057b2:	f7fa fe91 	bl	80004d8 <__aeabi_dmul>
 80057b6:	464c      	mov	r4, r9
 80057b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057bc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80057c0:	3701      	adds	r7, #1
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7fa fe1e 	bl	8000404 <__aeabi_i2d>
 80057c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057cc:	f7fa fe84 	bl	80004d8 <__aeabi_dmul>
 80057d0:	2200      	movs	r2, #0
 80057d2:	4b62      	ldr	r3, [pc, #392]	; (800595c <_dtoa_r+0x5b4>)
 80057d4:	f7fa fcca 	bl	800016c <__adddf3>
 80057d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057e0:	9611      	str	r6, [sp, #68]	; 0x44
 80057e2:	2c00      	cmp	r4, #0
 80057e4:	d15d      	bne.n	80058a2 <_dtoa_r+0x4fa>
 80057e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ea:	2200      	movs	r2, #0
 80057ec:	4b5c      	ldr	r3, [pc, #368]	; (8005960 <_dtoa_r+0x5b8>)
 80057ee:	f7fa fcbb 	bl	8000168 <__aeabi_dsub>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057fa:	4633      	mov	r3, r6
 80057fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80057fe:	f7fb f8fb 	bl	80009f8 <__aeabi_dcmpgt>
 8005802:	2800      	cmp	r0, #0
 8005804:	f040 829c 	bne.w	8005d40 <_dtoa_r+0x998>
 8005808:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800580c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800580e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005812:	f7fb f8d3 	bl	80009bc <__aeabi_dcmplt>
 8005816:	2800      	cmp	r0, #0
 8005818:	f040 8290 	bne.w	8005d3c <_dtoa_r+0x994>
 800581c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005820:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005824:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005826:	2b00      	cmp	r3, #0
 8005828:	f2c0 8152 	blt.w	8005ad0 <_dtoa_r+0x728>
 800582c:	f1ba 0f0e 	cmp.w	sl, #14
 8005830:	f300 814e 	bgt.w	8005ad0 <_dtoa_r+0x728>
 8005834:	4b45      	ldr	r3, [pc, #276]	; (800594c <_dtoa_r+0x5a4>)
 8005836:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800583a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800583e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005842:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005844:	2b00      	cmp	r3, #0
 8005846:	f280 80db 	bge.w	8005a00 <_dtoa_r+0x658>
 800584a:	9b08      	ldr	r3, [sp, #32]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f300 80d7 	bgt.w	8005a00 <_dtoa_r+0x658>
 8005852:	f040 8272 	bne.w	8005d3a <_dtoa_r+0x992>
 8005856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800585a:	2200      	movs	r2, #0
 800585c:	4b40      	ldr	r3, [pc, #256]	; (8005960 <_dtoa_r+0x5b8>)
 800585e:	f7fa fe3b 	bl	80004d8 <__aeabi_dmul>
 8005862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005866:	f7fb f8bd 	bl	80009e4 <__aeabi_dcmpge>
 800586a:	9c08      	ldr	r4, [sp, #32]
 800586c:	4626      	mov	r6, r4
 800586e:	2800      	cmp	r0, #0
 8005870:	f040 8248 	bne.w	8005d04 <_dtoa_r+0x95c>
 8005874:	2331      	movs	r3, #49	; 0x31
 8005876:	9f03      	ldr	r7, [sp, #12]
 8005878:	f10a 0a01 	add.w	sl, sl, #1
 800587c:	f807 3b01 	strb.w	r3, [r7], #1
 8005880:	e244      	b.n	8005d0c <_dtoa_r+0x964>
 8005882:	07e2      	lsls	r2, r4, #31
 8005884:	d505      	bpl.n	8005892 <_dtoa_r+0x4ea>
 8005886:	e9d6 2300 	ldrd	r2, r3, [r6]
 800588a:	f7fa fe25 	bl	80004d8 <__aeabi_dmul>
 800588e:	2301      	movs	r3, #1
 8005890:	3701      	adds	r7, #1
 8005892:	1064      	asrs	r4, r4, #1
 8005894:	3608      	adds	r6, #8
 8005896:	e76d      	b.n	8005774 <_dtoa_r+0x3cc>
 8005898:	2702      	movs	r7, #2
 800589a:	e770      	b.n	800577e <_dtoa_r+0x3d6>
 800589c:	46d0      	mov	r8, sl
 800589e:	9c08      	ldr	r4, [sp, #32]
 80058a0:	e78f      	b.n	80057c2 <_dtoa_r+0x41a>
 80058a2:	9903      	ldr	r1, [sp, #12]
 80058a4:	4b29      	ldr	r3, [pc, #164]	; (800594c <_dtoa_r+0x5a4>)
 80058a6:	4421      	add	r1, r4
 80058a8:	9112      	str	r1, [sp, #72]	; 0x48
 80058aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80058b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80058b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058b8:	2900      	cmp	r1, #0
 80058ba:	d055      	beq.n	8005968 <_dtoa_r+0x5c0>
 80058bc:	2000      	movs	r0, #0
 80058be:	4929      	ldr	r1, [pc, #164]	; (8005964 <_dtoa_r+0x5bc>)
 80058c0:	f7fa ff34 	bl	800072c <__aeabi_ddiv>
 80058c4:	463b      	mov	r3, r7
 80058c6:	4632      	mov	r2, r6
 80058c8:	f7fa fc4e 	bl	8000168 <__aeabi_dsub>
 80058cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80058d0:	9f03      	ldr	r7, [sp, #12]
 80058d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058d6:	f7fb f8af 	bl	8000a38 <__aeabi_d2iz>
 80058da:	4604      	mov	r4, r0
 80058dc:	f7fa fd92 	bl	8000404 <__aeabi_i2d>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058e8:	f7fa fc3e 	bl	8000168 <__aeabi_dsub>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	3430      	adds	r4, #48	; 0x30
 80058f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80058fa:	f807 4b01 	strb.w	r4, [r7], #1
 80058fe:	f7fb f85d 	bl	80009bc <__aeabi_dcmplt>
 8005902:	2800      	cmp	r0, #0
 8005904:	d174      	bne.n	80059f0 <_dtoa_r+0x648>
 8005906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800590a:	2000      	movs	r0, #0
 800590c:	4911      	ldr	r1, [pc, #68]	; (8005954 <_dtoa_r+0x5ac>)
 800590e:	f7fa fc2b 	bl	8000168 <__aeabi_dsub>
 8005912:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005916:	f7fb f851 	bl	80009bc <__aeabi_dcmplt>
 800591a:	2800      	cmp	r0, #0
 800591c:	f040 80b7 	bne.w	8005a8e <_dtoa_r+0x6e6>
 8005920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005922:	429f      	cmp	r7, r3
 8005924:	f43f af7a 	beq.w	800581c <_dtoa_r+0x474>
 8005928:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800592c:	2200      	movs	r2, #0
 800592e:	4b0a      	ldr	r3, [pc, #40]	; (8005958 <_dtoa_r+0x5b0>)
 8005930:	f7fa fdd2 	bl	80004d8 <__aeabi_dmul>
 8005934:	2200      	movs	r2, #0
 8005936:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800593a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <_dtoa_r+0x5b0>)
 8005940:	f7fa fdca 	bl	80004d8 <__aeabi_dmul>
 8005944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005948:	e7c3      	b.n	80058d2 <_dtoa_r+0x52a>
 800594a:	bf00      	nop
 800594c:	08007670 	.word	0x08007670
 8005950:	08007648 	.word	0x08007648
 8005954:	3ff00000 	.word	0x3ff00000
 8005958:	40240000 	.word	0x40240000
 800595c:	401c0000 	.word	0x401c0000
 8005960:	40140000 	.word	0x40140000
 8005964:	3fe00000 	.word	0x3fe00000
 8005968:	4630      	mov	r0, r6
 800596a:	4639      	mov	r1, r7
 800596c:	f7fa fdb4 	bl	80004d8 <__aeabi_dmul>
 8005970:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005972:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005976:	9c03      	ldr	r4, [sp, #12]
 8005978:	9314      	str	r3, [sp, #80]	; 0x50
 800597a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800597e:	f7fb f85b 	bl	8000a38 <__aeabi_d2iz>
 8005982:	9015      	str	r0, [sp, #84]	; 0x54
 8005984:	f7fa fd3e 	bl	8000404 <__aeabi_i2d>
 8005988:	4602      	mov	r2, r0
 800598a:	460b      	mov	r3, r1
 800598c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005990:	f7fa fbea 	bl	8000168 <__aeabi_dsub>
 8005994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005996:	4606      	mov	r6, r0
 8005998:	3330      	adds	r3, #48	; 0x30
 800599a:	f804 3b01 	strb.w	r3, [r4], #1
 800599e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059a0:	460f      	mov	r7, r1
 80059a2:	429c      	cmp	r4, r3
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	d124      	bne.n	80059f4 <_dtoa_r+0x64c>
 80059aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059ae:	4bb0      	ldr	r3, [pc, #704]	; (8005c70 <_dtoa_r+0x8c8>)
 80059b0:	f7fa fbdc 	bl	800016c <__adddf3>
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fb f81c 	bl	80009f8 <__aeabi_dcmpgt>
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d163      	bne.n	8005a8c <_dtoa_r+0x6e4>
 80059c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059c8:	2000      	movs	r0, #0
 80059ca:	49a9      	ldr	r1, [pc, #676]	; (8005c70 <_dtoa_r+0x8c8>)
 80059cc:	f7fa fbcc 	bl	8000168 <__aeabi_dsub>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4630      	mov	r0, r6
 80059d6:	4639      	mov	r1, r7
 80059d8:	f7fa fff0 	bl	80009bc <__aeabi_dcmplt>
 80059dc:	2800      	cmp	r0, #0
 80059de:	f43f af1d 	beq.w	800581c <_dtoa_r+0x474>
 80059e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80059e4:	1e7b      	subs	r3, r7, #1
 80059e6:	9314      	str	r3, [sp, #80]	; 0x50
 80059e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80059ec:	2b30      	cmp	r3, #48	; 0x30
 80059ee:	d0f8      	beq.n	80059e2 <_dtoa_r+0x63a>
 80059f0:	46c2      	mov	sl, r8
 80059f2:	e03b      	b.n	8005a6c <_dtoa_r+0x6c4>
 80059f4:	4b9f      	ldr	r3, [pc, #636]	; (8005c74 <_dtoa_r+0x8cc>)
 80059f6:	f7fa fd6f 	bl	80004d8 <__aeabi_dmul>
 80059fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059fe:	e7bc      	b.n	800597a <_dtoa_r+0x5d2>
 8005a00:	9f03      	ldr	r7, [sp, #12]
 8005a02:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005a06:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	f7fa fe8d 	bl	800072c <__aeabi_ddiv>
 8005a12:	f7fb f811 	bl	8000a38 <__aeabi_d2iz>
 8005a16:	4604      	mov	r4, r0
 8005a18:	f7fa fcf4 	bl	8000404 <__aeabi_i2d>
 8005a1c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a20:	f7fa fd5a 	bl	80004d8 <__aeabi_dmul>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4640      	mov	r0, r8
 8005a2a:	4649      	mov	r1, r9
 8005a2c:	f7fa fb9c 	bl	8000168 <__aeabi_dsub>
 8005a30:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005a34:	f807 6b01 	strb.w	r6, [r7], #1
 8005a38:	9e03      	ldr	r6, [sp, #12]
 8005a3a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005a3e:	1bbe      	subs	r6, r7, r6
 8005a40:	45b4      	cmp	ip, r6
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	d136      	bne.n	8005ab6 <_dtoa_r+0x70e>
 8005a48:	f7fa fb90 	bl	800016c <__adddf3>
 8005a4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a50:	4680      	mov	r8, r0
 8005a52:	4689      	mov	r9, r1
 8005a54:	f7fa ffd0 	bl	80009f8 <__aeabi_dcmpgt>
 8005a58:	bb58      	cbnz	r0, 8005ab2 <_dtoa_r+0x70a>
 8005a5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a5e:	4640      	mov	r0, r8
 8005a60:	4649      	mov	r1, r9
 8005a62:	f7fa ffa1 	bl	80009a8 <__aeabi_dcmpeq>
 8005a66:	b108      	cbz	r0, 8005a6c <_dtoa_r+0x6c4>
 8005a68:	07e1      	lsls	r1, r4, #31
 8005a6a:	d422      	bmi.n	8005ab2 <_dtoa_r+0x70a>
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	4659      	mov	r1, fp
 8005a70:	f000 fd0c 	bl	800648c <_Bfree>
 8005a74:	2300      	movs	r3, #0
 8005a76:	703b      	strb	r3, [r7, #0]
 8005a78:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005a7a:	f10a 0001 	add.w	r0, sl, #1
 8005a7e:	6018      	str	r0, [r3, #0]
 8005a80:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f43f acde 	beq.w	8005444 <_dtoa_r+0x9c>
 8005a88:	601f      	str	r7, [r3, #0]
 8005a8a:	e4db      	b.n	8005444 <_dtoa_r+0x9c>
 8005a8c:	4627      	mov	r7, r4
 8005a8e:	463b      	mov	r3, r7
 8005a90:	461f      	mov	r7, r3
 8005a92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a96:	2a39      	cmp	r2, #57	; 0x39
 8005a98:	d107      	bne.n	8005aaa <_dtoa_r+0x702>
 8005a9a:	9a03      	ldr	r2, [sp, #12]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d1f7      	bne.n	8005a90 <_dtoa_r+0x6e8>
 8005aa0:	2230      	movs	r2, #48	; 0x30
 8005aa2:	9903      	ldr	r1, [sp, #12]
 8005aa4:	f108 0801 	add.w	r8, r8, #1
 8005aa8:	700a      	strb	r2, [r1, #0]
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	3201      	adds	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	e79e      	b.n	80059f0 <_dtoa_r+0x648>
 8005ab2:	46d0      	mov	r8, sl
 8005ab4:	e7eb      	b.n	8005a8e <_dtoa_r+0x6e6>
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4b6e      	ldr	r3, [pc, #440]	; (8005c74 <_dtoa_r+0x8cc>)
 8005aba:	f7fa fd0d 	bl	80004d8 <__aeabi_dmul>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4680      	mov	r8, r0
 8005ac4:	4689      	mov	r9, r1
 8005ac6:	f7fa ff6f 	bl	80009a8 <__aeabi_dcmpeq>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d09b      	beq.n	8005a06 <_dtoa_r+0x65e>
 8005ace:	e7cd      	b.n	8005a6c <_dtoa_r+0x6c4>
 8005ad0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	f000 80d0 	beq.w	8005c78 <_dtoa_r+0x8d0>
 8005ad8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ada:	2a01      	cmp	r2, #1
 8005adc:	f300 80ae 	bgt.w	8005c3c <_dtoa_r+0x894>
 8005ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	f000 80a6 	beq.w	8005c34 <_dtoa_r+0x88c>
 8005ae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005aec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005aee:	9f06      	ldr	r7, [sp, #24]
 8005af0:	9a06      	ldr	r2, [sp, #24]
 8005af2:	2101      	movs	r1, #1
 8005af4:	441a      	add	r2, r3
 8005af6:	9206      	str	r2, [sp, #24]
 8005af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005afa:	4628      	mov	r0, r5
 8005afc:	441a      	add	r2, r3
 8005afe:	9209      	str	r2, [sp, #36]	; 0x24
 8005b00:	f000 fd7a 	bl	80065f8 <__i2b>
 8005b04:	4606      	mov	r6, r0
 8005b06:	2f00      	cmp	r7, #0
 8005b08:	dd0c      	ble.n	8005b24 <_dtoa_r+0x77c>
 8005b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dd09      	ble.n	8005b24 <_dtoa_r+0x77c>
 8005b10:	42bb      	cmp	r3, r7
 8005b12:	bfa8      	it	ge
 8005b14:	463b      	movge	r3, r7
 8005b16:	9a06      	ldr	r2, [sp, #24]
 8005b18:	1aff      	subs	r7, r7, r3
 8005b1a:	1ad2      	subs	r2, r2, r3
 8005b1c:	9206      	str	r2, [sp, #24]
 8005b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	9309      	str	r3, [sp, #36]	; 0x24
 8005b24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b26:	b1f3      	cbz	r3, 8005b66 <_dtoa_r+0x7be>
 8005b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 80a8 	beq.w	8005c80 <_dtoa_r+0x8d8>
 8005b30:	2c00      	cmp	r4, #0
 8005b32:	dd10      	ble.n	8005b56 <_dtoa_r+0x7ae>
 8005b34:	4631      	mov	r1, r6
 8005b36:	4622      	mov	r2, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 fe1b 	bl	8006774 <__pow5mult>
 8005b3e:	465a      	mov	r2, fp
 8005b40:	4601      	mov	r1, r0
 8005b42:	4606      	mov	r6, r0
 8005b44:	4628      	mov	r0, r5
 8005b46:	f000 fd6d 	bl	8006624 <__multiply>
 8005b4a:	4680      	mov	r8, r0
 8005b4c:	4659      	mov	r1, fp
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f000 fc9c 	bl	800648c <_Bfree>
 8005b54:	46c3      	mov	fp, r8
 8005b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b58:	1b1a      	subs	r2, r3, r4
 8005b5a:	d004      	beq.n	8005b66 <_dtoa_r+0x7be>
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f000 fe08 	bl	8006774 <__pow5mult>
 8005b64:	4683      	mov	fp, r0
 8005b66:	2101      	movs	r1, #1
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f000 fd45 	bl	80065f8 <__i2b>
 8005b6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b70:	4604      	mov	r4, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f340 8086 	ble.w	8005c84 <_dtoa_r+0x8dc>
 8005b78:	461a      	mov	r2, r3
 8005b7a:	4601      	mov	r1, r0
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 fdf9 	bl	8006774 <__pow5mult>
 8005b82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b84:	4604      	mov	r4, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	dd7f      	ble.n	8005c8a <_dtoa_r+0x8e2>
 8005b8a:	f04f 0800 	mov.w	r8, #0
 8005b8e:	6923      	ldr	r3, [r4, #16]
 8005b90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b94:	6918      	ldr	r0, [r3, #16]
 8005b96:	f000 fce1 	bl	800655c <__hi0bits>
 8005b9a:	f1c0 0020 	rsb	r0, r0, #32
 8005b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ba0:	4418      	add	r0, r3
 8005ba2:	f010 001f 	ands.w	r0, r0, #31
 8005ba6:	f000 8092 	beq.w	8005cce <_dtoa_r+0x926>
 8005baa:	f1c0 0320 	rsb	r3, r0, #32
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	f340 808a 	ble.w	8005cc8 <_dtoa_r+0x920>
 8005bb4:	f1c0 001c 	rsb	r0, r0, #28
 8005bb8:	9b06      	ldr	r3, [sp, #24]
 8005bba:	4407      	add	r7, r0
 8005bbc:	4403      	add	r3, r0
 8005bbe:	9306      	str	r3, [sp, #24]
 8005bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc2:	4403      	add	r3, r0
 8005bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc6:	9b06      	ldr	r3, [sp, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	dd05      	ble.n	8005bd8 <_dtoa_r+0x830>
 8005bcc:	4659      	mov	r1, fp
 8005bce:	461a      	mov	r2, r3
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f000 fe29 	bl	8006828 <__lshift>
 8005bd6:	4683      	mov	fp, r0
 8005bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	dd05      	ble.n	8005bea <_dtoa_r+0x842>
 8005bde:	4621      	mov	r1, r4
 8005be0:	461a      	mov	r2, r3
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 fe20 	bl	8006828 <__lshift>
 8005be8:	4604      	mov	r4, r0
 8005bea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d070      	beq.n	8005cd2 <_dtoa_r+0x92a>
 8005bf0:	4621      	mov	r1, r4
 8005bf2:	4658      	mov	r0, fp
 8005bf4:	f000 fe88 	bl	8006908 <__mcmp>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	da6a      	bge.n	8005cd2 <_dtoa_r+0x92a>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4659      	mov	r1, fp
 8005c00:	220a      	movs	r2, #10
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 fc64 	bl	80064d0 <__multadd>
 8005c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0a:	4683      	mov	fp, r0
 8005c0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8194 	beq.w	8005f3e <_dtoa_r+0xb96>
 8005c16:	4631      	mov	r1, r6
 8005c18:	2300      	movs	r3, #0
 8005c1a:	220a      	movs	r2, #10
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 fc57 	bl	80064d0 <__multadd>
 8005c22:	f1b9 0f00 	cmp.w	r9, #0
 8005c26:	4606      	mov	r6, r0
 8005c28:	f300 8093 	bgt.w	8005d52 <_dtoa_r+0x9aa>
 8005c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	dc57      	bgt.n	8005ce2 <_dtoa_r+0x93a>
 8005c32:	e08e      	b.n	8005d52 <_dtoa_r+0x9aa>
 8005c34:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005c36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c3a:	e757      	b.n	8005aec <_dtoa_r+0x744>
 8005c3c:	9b08      	ldr	r3, [sp, #32]
 8005c3e:	1e5c      	subs	r4, r3, #1
 8005c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	bfb7      	itett	lt
 8005c46:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c48:	1b1c      	subge	r4, r3, r4
 8005c4a:	1ae2      	sublt	r2, r4, r3
 8005c4c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005c4e:	bfbe      	ittt	lt
 8005c50:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005c52:	189b      	addlt	r3, r3, r2
 8005c54:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005c56:	9b08      	ldr	r3, [sp, #32]
 8005c58:	bfb8      	it	lt
 8005c5a:	2400      	movlt	r4, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfbb      	ittet	lt
 8005c60:	9b06      	ldrlt	r3, [sp, #24]
 8005c62:	9a08      	ldrlt	r2, [sp, #32]
 8005c64:	9f06      	ldrge	r7, [sp, #24]
 8005c66:	1a9f      	sublt	r7, r3, r2
 8005c68:	bfac      	ite	ge
 8005c6a:	9b08      	ldrge	r3, [sp, #32]
 8005c6c:	2300      	movlt	r3, #0
 8005c6e:	e73f      	b.n	8005af0 <_dtoa_r+0x748>
 8005c70:	3fe00000 	.word	0x3fe00000
 8005c74:	40240000 	.word	0x40240000
 8005c78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005c7a:	9f06      	ldr	r7, [sp, #24]
 8005c7c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005c7e:	e742      	b.n	8005b06 <_dtoa_r+0x75e>
 8005c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c82:	e76b      	b.n	8005b5c <_dtoa_r+0x7b4>
 8005c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	dc19      	bgt.n	8005cbe <_dtoa_r+0x916>
 8005c8a:	9b04      	ldr	r3, [sp, #16]
 8005c8c:	b9bb      	cbnz	r3, 8005cbe <_dtoa_r+0x916>
 8005c8e:	9b05      	ldr	r3, [sp, #20]
 8005c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c94:	b99b      	cbnz	r3, 8005cbe <_dtoa_r+0x916>
 8005c96:	9b05      	ldr	r3, [sp, #20]
 8005c98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c9c:	0d1b      	lsrs	r3, r3, #20
 8005c9e:	051b      	lsls	r3, r3, #20
 8005ca0:	b183      	cbz	r3, 8005cc4 <_dtoa_r+0x91c>
 8005ca2:	f04f 0801 	mov.w	r8, #1
 8005ca6:	9b06      	ldr	r3, [sp, #24]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	9306      	str	r3, [sp, #24]
 8005cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cae:	3301      	adds	r3, #1
 8005cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f47f af6a 	bne.w	8005b8e <_dtoa_r+0x7e6>
 8005cba:	2001      	movs	r0, #1
 8005cbc:	e76f      	b.n	8005b9e <_dtoa_r+0x7f6>
 8005cbe:	f04f 0800 	mov.w	r8, #0
 8005cc2:	e7f6      	b.n	8005cb2 <_dtoa_r+0x90a>
 8005cc4:	4698      	mov	r8, r3
 8005cc6:	e7f4      	b.n	8005cb2 <_dtoa_r+0x90a>
 8005cc8:	f43f af7d 	beq.w	8005bc6 <_dtoa_r+0x81e>
 8005ccc:	4618      	mov	r0, r3
 8005cce:	301c      	adds	r0, #28
 8005cd0:	e772      	b.n	8005bb8 <_dtoa_r+0x810>
 8005cd2:	9b08      	ldr	r3, [sp, #32]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	dc36      	bgt.n	8005d46 <_dtoa_r+0x99e>
 8005cd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	dd33      	ble.n	8005d46 <_dtoa_r+0x99e>
 8005cde:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ce2:	f1b9 0f00 	cmp.w	r9, #0
 8005ce6:	d10d      	bne.n	8005d04 <_dtoa_r+0x95c>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	464b      	mov	r3, r9
 8005cec:	2205      	movs	r2, #5
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f000 fbee 	bl	80064d0 <__multadd>
 8005cf4:	4601      	mov	r1, r0
 8005cf6:	4604      	mov	r4, r0
 8005cf8:	4658      	mov	r0, fp
 8005cfa:	f000 fe05 	bl	8006908 <__mcmp>
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	f73f adb8 	bgt.w	8005874 <_dtoa_r+0x4cc>
 8005d04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005d06:	9f03      	ldr	r7, [sp, #12]
 8005d08:	ea6f 0a03 	mvn.w	sl, r3
 8005d0c:	f04f 0800 	mov.w	r8, #0
 8005d10:	4621      	mov	r1, r4
 8005d12:	4628      	mov	r0, r5
 8005d14:	f000 fbba 	bl	800648c <_Bfree>
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	f43f aea7 	beq.w	8005a6c <_dtoa_r+0x6c4>
 8005d1e:	f1b8 0f00 	cmp.w	r8, #0
 8005d22:	d005      	beq.n	8005d30 <_dtoa_r+0x988>
 8005d24:	45b0      	cmp	r8, r6
 8005d26:	d003      	beq.n	8005d30 <_dtoa_r+0x988>
 8005d28:	4641      	mov	r1, r8
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	f000 fbae 	bl	800648c <_Bfree>
 8005d30:	4631      	mov	r1, r6
 8005d32:	4628      	mov	r0, r5
 8005d34:	f000 fbaa 	bl	800648c <_Bfree>
 8005d38:	e698      	b.n	8005a6c <_dtoa_r+0x6c4>
 8005d3a:	2400      	movs	r4, #0
 8005d3c:	4626      	mov	r6, r4
 8005d3e:	e7e1      	b.n	8005d04 <_dtoa_r+0x95c>
 8005d40:	46c2      	mov	sl, r8
 8005d42:	4626      	mov	r6, r4
 8005d44:	e596      	b.n	8005874 <_dtoa_r+0x4cc>
 8005d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80fd 	beq.w	8005f4c <_dtoa_r+0xba4>
 8005d52:	2f00      	cmp	r7, #0
 8005d54:	dd05      	ble.n	8005d62 <_dtoa_r+0x9ba>
 8005d56:	4631      	mov	r1, r6
 8005d58:	463a      	mov	r2, r7
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f000 fd64 	bl	8006828 <__lshift>
 8005d60:	4606      	mov	r6, r0
 8005d62:	f1b8 0f00 	cmp.w	r8, #0
 8005d66:	d05c      	beq.n	8005e22 <_dtoa_r+0xa7a>
 8005d68:	4628      	mov	r0, r5
 8005d6a:	6871      	ldr	r1, [r6, #4]
 8005d6c:	f000 fb4e 	bl	800640c <_Balloc>
 8005d70:	4607      	mov	r7, r0
 8005d72:	b928      	cbnz	r0, 8005d80 <_dtoa_r+0x9d8>
 8005d74:	4602      	mov	r2, r0
 8005d76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d7a:	4b7f      	ldr	r3, [pc, #508]	; (8005f78 <_dtoa_r+0xbd0>)
 8005d7c:	f7ff bb28 	b.w	80053d0 <_dtoa_r+0x28>
 8005d80:	6932      	ldr	r2, [r6, #16]
 8005d82:	f106 010c 	add.w	r1, r6, #12
 8005d86:	3202      	adds	r2, #2
 8005d88:	0092      	lsls	r2, r2, #2
 8005d8a:	300c      	adds	r0, #12
 8005d8c:	f000 fb30 	bl	80063f0 <memcpy>
 8005d90:	2201      	movs	r2, #1
 8005d92:	4639      	mov	r1, r7
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 fd47 	bl	8006828 <__lshift>
 8005d9a:	46b0      	mov	r8, r6
 8005d9c:	4606      	mov	r6, r0
 8005d9e:	9b03      	ldr	r3, [sp, #12]
 8005da0:	3301      	adds	r3, #1
 8005da2:	9308      	str	r3, [sp, #32]
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	444b      	add	r3, r9
 8005da8:	930a      	str	r3, [sp, #40]	; 0x28
 8005daa:	9b04      	ldr	r3, [sp, #16]
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	9309      	str	r3, [sp, #36]	; 0x24
 8005db2:	9b08      	ldr	r3, [sp, #32]
 8005db4:	4621      	mov	r1, r4
 8005db6:	3b01      	subs	r3, #1
 8005db8:	4658      	mov	r0, fp
 8005dba:	9304      	str	r3, [sp, #16]
 8005dbc:	f7ff fa68 	bl	8005290 <quorem>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	4641      	mov	r1, r8
 8005dc4:	3330      	adds	r3, #48	; 0x30
 8005dc6:	9006      	str	r0, [sp, #24]
 8005dc8:	4658      	mov	r0, fp
 8005dca:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dcc:	f000 fd9c 	bl	8006908 <__mcmp>
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	4681      	mov	r9, r0
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	f000 fdb2 	bl	8006940 <__mdiff>
 8005ddc:	68c2      	ldr	r2, [r0, #12]
 8005dde:	4607      	mov	r7, r0
 8005de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de2:	bb02      	cbnz	r2, 8005e26 <_dtoa_r+0xa7e>
 8005de4:	4601      	mov	r1, r0
 8005de6:	4658      	mov	r0, fp
 8005de8:	f000 fd8e 	bl	8006908 <__mcmp>
 8005dec:	4602      	mov	r2, r0
 8005dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005df0:	4639      	mov	r1, r7
 8005df2:	4628      	mov	r0, r5
 8005df4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005df8:	f000 fb48 	bl	800648c <_Bfree>
 8005dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005dfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e00:	9f08      	ldr	r7, [sp, #32]
 8005e02:	ea43 0102 	orr.w	r1, r3, r2
 8005e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e0c:	d10d      	bne.n	8005e2a <_dtoa_r+0xa82>
 8005e0e:	2b39      	cmp	r3, #57	; 0x39
 8005e10:	d029      	beq.n	8005e66 <_dtoa_r+0xabe>
 8005e12:	f1b9 0f00 	cmp.w	r9, #0
 8005e16:	dd01      	ble.n	8005e1c <_dtoa_r+0xa74>
 8005e18:	9b06      	ldr	r3, [sp, #24]
 8005e1a:	3331      	adds	r3, #49	; 0x31
 8005e1c:	9a04      	ldr	r2, [sp, #16]
 8005e1e:	7013      	strb	r3, [r2, #0]
 8005e20:	e776      	b.n	8005d10 <_dtoa_r+0x968>
 8005e22:	4630      	mov	r0, r6
 8005e24:	e7b9      	b.n	8005d9a <_dtoa_r+0x9f2>
 8005e26:	2201      	movs	r2, #1
 8005e28:	e7e2      	b.n	8005df0 <_dtoa_r+0xa48>
 8005e2a:	f1b9 0f00 	cmp.w	r9, #0
 8005e2e:	db06      	blt.n	8005e3e <_dtoa_r+0xa96>
 8005e30:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005e32:	ea41 0909 	orr.w	r9, r1, r9
 8005e36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e38:	ea59 0101 	orrs.w	r1, r9, r1
 8005e3c:	d120      	bne.n	8005e80 <_dtoa_r+0xad8>
 8005e3e:	2a00      	cmp	r2, #0
 8005e40:	ddec      	ble.n	8005e1c <_dtoa_r+0xa74>
 8005e42:	4659      	mov	r1, fp
 8005e44:	2201      	movs	r2, #1
 8005e46:	4628      	mov	r0, r5
 8005e48:	9308      	str	r3, [sp, #32]
 8005e4a:	f000 fced 	bl	8006828 <__lshift>
 8005e4e:	4621      	mov	r1, r4
 8005e50:	4683      	mov	fp, r0
 8005e52:	f000 fd59 	bl	8006908 <__mcmp>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	9b08      	ldr	r3, [sp, #32]
 8005e5a:	dc02      	bgt.n	8005e62 <_dtoa_r+0xaba>
 8005e5c:	d1de      	bne.n	8005e1c <_dtoa_r+0xa74>
 8005e5e:	07da      	lsls	r2, r3, #31
 8005e60:	d5dc      	bpl.n	8005e1c <_dtoa_r+0xa74>
 8005e62:	2b39      	cmp	r3, #57	; 0x39
 8005e64:	d1d8      	bne.n	8005e18 <_dtoa_r+0xa70>
 8005e66:	2339      	movs	r3, #57	; 0x39
 8005e68:	9a04      	ldr	r2, [sp, #16]
 8005e6a:	7013      	strb	r3, [r2, #0]
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	461f      	mov	r7, r3
 8005e70:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005e74:	3b01      	subs	r3, #1
 8005e76:	2a39      	cmp	r2, #57	; 0x39
 8005e78:	d050      	beq.n	8005f1c <_dtoa_r+0xb74>
 8005e7a:	3201      	adds	r2, #1
 8005e7c:	701a      	strb	r2, [r3, #0]
 8005e7e:	e747      	b.n	8005d10 <_dtoa_r+0x968>
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	dd03      	ble.n	8005e8c <_dtoa_r+0xae4>
 8005e84:	2b39      	cmp	r3, #57	; 0x39
 8005e86:	d0ee      	beq.n	8005e66 <_dtoa_r+0xabe>
 8005e88:	3301      	adds	r3, #1
 8005e8a:	e7c7      	b.n	8005e1c <_dtoa_r+0xa74>
 8005e8c:	9a08      	ldr	r2, [sp, #32]
 8005e8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005e90:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e94:	428a      	cmp	r2, r1
 8005e96:	d02a      	beq.n	8005eee <_dtoa_r+0xb46>
 8005e98:	4659      	mov	r1, fp
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	220a      	movs	r2, #10
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f000 fb16 	bl	80064d0 <__multadd>
 8005ea4:	45b0      	cmp	r8, r6
 8005ea6:	4683      	mov	fp, r0
 8005ea8:	f04f 0300 	mov.w	r3, #0
 8005eac:	f04f 020a 	mov.w	r2, #10
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	d107      	bne.n	8005ec6 <_dtoa_r+0xb1e>
 8005eb6:	f000 fb0b 	bl	80064d0 <__multadd>
 8005eba:	4680      	mov	r8, r0
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	9b08      	ldr	r3, [sp, #32]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	9308      	str	r3, [sp, #32]
 8005ec4:	e775      	b.n	8005db2 <_dtoa_r+0xa0a>
 8005ec6:	f000 fb03 	bl	80064d0 <__multadd>
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4680      	mov	r8, r0
 8005ece:	2300      	movs	r3, #0
 8005ed0:	220a      	movs	r2, #10
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 fafc 	bl	80064d0 <__multadd>
 8005ed8:	4606      	mov	r6, r0
 8005eda:	e7f0      	b.n	8005ebe <_dtoa_r+0xb16>
 8005edc:	f1b9 0f00 	cmp.w	r9, #0
 8005ee0:	bfcc      	ite	gt
 8005ee2:	464f      	movgt	r7, r9
 8005ee4:	2701      	movle	r7, #1
 8005ee6:	f04f 0800 	mov.w	r8, #0
 8005eea:	9a03      	ldr	r2, [sp, #12]
 8005eec:	4417      	add	r7, r2
 8005eee:	4659      	mov	r1, fp
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	9308      	str	r3, [sp, #32]
 8005ef6:	f000 fc97 	bl	8006828 <__lshift>
 8005efa:	4621      	mov	r1, r4
 8005efc:	4683      	mov	fp, r0
 8005efe:	f000 fd03 	bl	8006908 <__mcmp>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	dcb2      	bgt.n	8005e6c <_dtoa_r+0xac4>
 8005f06:	d102      	bne.n	8005f0e <_dtoa_r+0xb66>
 8005f08:	9b08      	ldr	r3, [sp, #32]
 8005f0a:	07db      	lsls	r3, r3, #31
 8005f0c:	d4ae      	bmi.n	8005e6c <_dtoa_r+0xac4>
 8005f0e:	463b      	mov	r3, r7
 8005f10:	461f      	mov	r7, r3
 8005f12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f16:	2a30      	cmp	r2, #48	; 0x30
 8005f18:	d0fa      	beq.n	8005f10 <_dtoa_r+0xb68>
 8005f1a:	e6f9      	b.n	8005d10 <_dtoa_r+0x968>
 8005f1c:	9a03      	ldr	r2, [sp, #12]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d1a5      	bne.n	8005e6e <_dtoa_r+0xac6>
 8005f22:	2331      	movs	r3, #49	; 0x31
 8005f24:	f10a 0a01 	add.w	sl, sl, #1
 8005f28:	e779      	b.n	8005e1e <_dtoa_r+0xa76>
 8005f2a:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <_dtoa_r+0xbd4>)
 8005f2c:	f7ff baa8 	b.w	8005480 <_dtoa_r+0xd8>
 8005f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	f47f aa81 	bne.w	800543a <_dtoa_r+0x92>
 8005f38:	4b11      	ldr	r3, [pc, #68]	; (8005f80 <_dtoa_r+0xbd8>)
 8005f3a:	f7ff baa1 	b.w	8005480 <_dtoa_r+0xd8>
 8005f3e:	f1b9 0f00 	cmp.w	r9, #0
 8005f42:	dc03      	bgt.n	8005f4c <_dtoa_r+0xba4>
 8005f44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	f73f aecb 	bgt.w	8005ce2 <_dtoa_r+0x93a>
 8005f4c:	9f03      	ldr	r7, [sp, #12]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4658      	mov	r0, fp
 8005f52:	f7ff f99d 	bl	8005290 <quorem>
 8005f56:	9a03      	ldr	r2, [sp, #12]
 8005f58:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f5c:	f807 3b01 	strb.w	r3, [r7], #1
 8005f60:	1aba      	subs	r2, r7, r2
 8005f62:	4591      	cmp	r9, r2
 8005f64:	ddba      	ble.n	8005edc <_dtoa_r+0xb34>
 8005f66:	4659      	mov	r1, fp
 8005f68:	2300      	movs	r3, #0
 8005f6a:	220a      	movs	r2, #10
 8005f6c:	4628      	mov	r0, r5
 8005f6e:	f000 faaf 	bl	80064d0 <__multadd>
 8005f72:	4683      	mov	fp, r0
 8005f74:	e7eb      	b.n	8005f4e <_dtoa_r+0xba6>
 8005f76:	bf00      	nop
 8005f78:	0800757b 	.word	0x0800757b
 8005f7c:	080074d8 	.word	0x080074d8
 8005f80:	080074fc 	.word	0x080074fc

08005f84 <__sflush_r>:
 8005f84:	898a      	ldrh	r2, [r1, #12]
 8005f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f88:	4605      	mov	r5, r0
 8005f8a:	0710      	lsls	r0, r2, #28
 8005f8c:	460c      	mov	r4, r1
 8005f8e:	d457      	bmi.n	8006040 <__sflush_r+0xbc>
 8005f90:	684b      	ldr	r3, [r1, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	dc04      	bgt.n	8005fa0 <__sflush_r+0x1c>
 8005f96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dc01      	bgt.n	8005fa0 <__sflush_r+0x1c>
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fa2:	2e00      	cmp	r6, #0
 8005fa4:	d0fa      	beq.n	8005f9c <__sflush_r+0x18>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fac:	682f      	ldr	r7, [r5, #0]
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	d032      	beq.n	8006018 <__sflush_r+0x94>
 8005fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fb4:	89a3      	ldrh	r3, [r4, #12]
 8005fb6:	075a      	lsls	r2, r3, #29
 8005fb8:	d505      	bpl.n	8005fc6 <__sflush_r+0x42>
 8005fba:	6863      	ldr	r3, [r4, #4]
 8005fbc:	1ac0      	subs	r0, r0, r3
 8005fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fc0:	b10b      	cbz	r3, 8005fc6 <__sflush_r+0x42>
 8005fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fc4:	1ac0      	subs	r0, r0, r3
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	4602      	mov	r2, r0
 8005fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fcc:	4628      	mov	r0, r5
 8005fce:	6a21      	ldr	r1, [r4, #32]
 8005fd0:	47b0      	blx	r6
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	d106      	bne.n	8005fe6 <__sflush_r+0x62>
 8005fd8:	6829      	ldr	r1, [r5, #0]
 8005fda:	291d      	cmp	r1, #29
 8005fdc:	d82c      	bhi.n	8006038 <__sflush_r+0xb4>
 8005fde:	4a29      	ldr	r2, [pc, #164]	; (8006084 <__sflush_r+0x100>)
 8005fe0:	40ca      	lsrs	r2, r1
 8005fe2:	07d6      	lsls	r6, r2, #31
 8005fe4:	d528      	bpl.n	8006038 <__sflush_r+0xb4>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	6062      	str	r2, [r4, #4]
 8005fea:	6922      	ldr	r2, [r4, #16]
 8005fec:	04d9      	lsls	r1, r3, #19
 8005fee:	6022      	str	r2, [r4, #0]
 8005ff0:	d504      	bpl.n	8005ffc <__sflush_r+0x78>
 8005ff2:	1c42      	adds	r2, r0, #1
 8005ff4:	d101      	bne.n	8005ffa <__sflush_r+0x76>
 8005ff6:	682b      	ldr	r3, [r5, #0]
 8005ff8:	b903      	cbnz	r3, 8005ffc <__sflush_r+0x78>
 8005ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8005ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ffe:	602f      	str	r7, [r5, #0]
 8006000:	2900      	cmp	r1, #0
 8006002:	d0cb      	beq.n	8005f9c <__sflush_r+0x18>
 8006004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006008:	4299      	cmp	r1, r3
 800600a:	d002      	beq.n	8006012 <__sflush_r+0x8e>
 800600c:	4628      	mov	r0, r5
 800600e:	f000 fd93 	bl	8006b38 <_free_r>
 8006012:	2000      	movs	r0, #0
 8006014:	6360      	str	r0, [r4, #52]	; 0x34
 8006016:	e7c2      	b.n	8005f9e <__sflush_r+0x1a>
 8006018:	6a21      	ldr	r1, [r4, #32]
 800601a:	2301      	movs	r3, #1
 800601c:	4628      	mov	r0, r5
 800601e:	47b0      	blx	r6
 8006020:	1c41      	adds	r1, r0, #1
 8006022:	d1c7      	bne.n	8005fb4 <__sflush_r+0x30>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0c4      	beq.n	8005fb4 <__sflush_r+0x30>
 800602a:	2b1d      	cmp	r3, #29
 800602c:	d001      	beq.n	8006032 <__sflush_r+0xae>
 800602e:	2b16      	cmp	r3, #22
 8006030:	d101      	bne.n	8006036 <__sflush_r+0xb2>
 8006032:	602f      	str	r7, [r5, #0]
 8006034:	e7b2      	b.n	8005f9c <__sflush_r+0x18>
 8006036:	89a3      	ldrh	r3, [r4, #12]
 8006038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800603c:	81a3      	strh	r3, [r4, #12]
 800603e:	e7ae      	b.n	8005f9e <__sflush_r+0x1a>
 8006040:	690f      	ldr	r7, [r1, #16]
 8006042:	2f00      	cmp	r7, #0
 8006044:	d0aa      	beq.n	8005f9c <__sflush_r+0x18>
 8006046:	0793      	lsls	r3, r2, #30
 8006048:	bf18      	it	ne
 800604a:	2300      	movne	r3, #0
 800604c:	680e      	ldr	r6, [r1, #0]
 800604e:	bf08      	it	eq
 8006050:	694b      	ldreq	r3, [r1, #20]
 8006052:	1bf6      	subs	r6, r6, r7
 8006054:	600f      	str	r7, [r1, #0]
 8006056:	608b      	str	r3, [r1, #8]
 8006058:	2e00      	cmp	r6, #0
 800605a:	dd9f      	ble.n	8005f9c <__sflush_r+0x18>
 800605c:	4633      	mov	r3, r6
 800605e:	463a      	mov	r2, r7
 8006060:	4628      	mov	r0, r5
 8006062:	6a21      	ldr	r1, [r4, #32]
 8006064:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006068:	47e0      	blx	ip
 800606a:	2800      	cmp	r0, #0
 800606c:	dc06      	bgt.n	800607c <__sflush_r+0xf8>
 800606e:	89a3      	ldrh	r3, [r4, #12]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006078:	81a3      	strh	r3, [r4, #12]
 800607a:	e790      	b.n	8005f9e <__sflush_r+0x1a>
 800607c:	4407      	add	r7, r0
 800607e:	1a36      	subs	r6, r6, r0
 8006080:	e7ea      	b.n	8006058 <__sflush_r+0xd4>
 8006082:	bf00      	nop
 8006084:	20400001 	.word	0x20400001

08006088 <_fflush_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	4605      	mov	r5, r0
 800608e:	460c      	mov	r4, r1
 8006090:	b913      	cbnz	r3, 8006098 <_fflush_r+0x10>
 8006092:	2500      	movs	r5, #0
 8006094:	4628      	mov	r0, r5
 8006096:	bd38      	pop	{r3, r4, r5, pc}
 8006098:	b118      	cbz	r0, 80060a2 <_fflush_r+0x1a>
 800609a:	6983      	ldr	r3, [r0, #24]
 800609c:	b90b      	cbnz	r3, 80060a2 <_fflush_r+0x1a>
 800609e:	f000 f887 	bl	80061b0 <__sinit>
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <_fflush_r+0x6c>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	d11b      	bne.n	80060e0 <_fflush_r+0x58>
 80060a8:	686c      	ldr	r4, [r5, #4]
 80060aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0ef      	beq.n	8006092 <_fflush_r+0xa>
 80060b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060b4:	07d0      	lsls	r0, r2, #31
 80060b6:	d404      	bmi.n	80060c2 <_fflush_r+0x3a>
 80060b8:	0599      	lsls	r1, r3, #22
 80060ba:	d402      	bmi.n	80060c2 <_fflush_r+0x3a>
 80060bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060be:	f000 f91a 	bl	80062f6 <__retarget_lock_acquire_recursive>
 80060c2:	4628      	mov	r0, r5
 80060c4:	4621      	mov	r1, r4
 80060c6:	f7ff ff5d 	bl	8005f84 <__sflush_r>
 80060ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060cc:	4605      	mov	r5, r0
 80060ce:	07da      	lsls	r2, r3, #31
 80060d0:	d4e0      	bmi.n	8006094 <_fflush_r+0xc>
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	059b      	lsls	r3, r3, #22
 80060d6:	d4dd      	bmi.n	8006094 <_fflush_r+0xc>
 80060d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060da:	f000 f90d 	bl	80062f8 <__retarget_lock_release_recursive>
 80060de:	e7d9      	b.n	8006094 <_fflush_r+0xc>
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <_fflush_r+0x70>)
 80060e2:	429c      	cmp	r4, r3
 80060e4:	d101      	bne.n	80060ea <_fflush_r+0x62>
 80060e6:	68ac      	ldr	r4, [r5, #8]
 80060e8:	e7df      	b.n	80060aa <_fflush_r+0x22>
 80060ea:	4b04      	ldr	r3, [pc, #16]	; (80060fc <_fflush_r+0x74>)
 80060ec:	429c      	cmp	r4, r3
 80060ee:	bf08      	it	eq
 80060f0:	68ec      	ldreq	r4, [r5, #12]
 80060f2:	e7da      	b.n	80060aa <_fflush_r+0x22>
 80060f4:	080075ac 	.word	0x080075ac
 80060f8:	080075cc 	.word	0x080075cc
 80060fc:	0800758c 	.word	0x0800758c

08006100 <std>:
 8006100:	2300      	movs	r3, #0
 8006102:	b510      	push	{r4, lr}
 8006104:	4604      	mov	r4, r0
 8006106:	e9c0 3300 	strd	r3, r3, [r0]
 800610a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800610e:	6083      	str	r3, [r0, #8]
 8006110:	8181      	strh	r1, [r0, #12]
 8006112:	6643      	str	r3, [r0, #100]	; 0x64
 8006114:	81c2      	strh	r2, [r0, #14]
 8006116:	6183      	str	r3, [r0, #24]
 8006118:	4619      	mov	r1, r3
 800611a:	2208      	movs	r2, #8
 800611c:	305c      	adds	r0, #92	; 0x5c
 800611e:	f7fe fb01 	bl	8004724 <memset>
 8006122:	4b05      	ldr	r3, [pc, #20]	; (8006138 <std+0x38>)
 8006124:	6224      	str	r4, [r4, #32]
 8006126:	6263      	str	r3, [r4, #36]	; 0x24
 8006128:	4b04      	ldr	r3, [pc, #16]	; (800613c <std+0x3c>)
 800612a:	62a3      	str	r3, [r4, #40]	; 0x28
 800612c:	4b04      	ldr	r3, [pc, #16]	; (8006140 <std+0x40>)
 800612e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <std+0x44>)
 8006132:	6323      	str	r3, [r4, #48]	; 0x30
 8006134:	bd10      	pop	{r4, pc}
 8006136:	bf00      	nop
 8006138:	08006fc1 	.word	0x08006fc1
 800613c:	08006fe3 	.word	0x08006fe3
 8006140:	0800701b 	.word	0x0800701b
 8006144:	0800703f 	.word	0x0800703f

08006148 <_cleanup_r>:
 8006148:	4901      	ldr	r1, [pc, #4]	; (8006150 <_cleanup_r+0x8>)
 800614a:	f000 b8af 	b.w	80062ac <_fwalk_reent>
 800614e:	bf00      	nop
 8006150:	08006089 	.word	0x08006089

08006154 <__sfmoreglue>:
 8006154:	2268      	movs	r2, #104	; 0x68
 8006156:	b570      	push	{r4, r5, r6, lr}
 8006158:	1e4d      	subs	r5, r1, #1
 800615a:	4355      	muls	r5, r2
 800615c:	460e      	mov	r6, r1
 800615e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006162:	f000 fd51 	bl	8006c08 <_malloc_r>
 8006166:	4604      	mov	r4, r0
 8006168:	b140      	cbz	r0, 800617c <__sfmoreglue+0x28>
 800616a:	2100      	movs	r1, #0
 800616c:	e9c0 1600 	strd	r1, r6, [r0]
 8006170:	300c      	adds	r0, #12
 8006172:	60a0      	str	r0, [r4, #8]
 8006174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006178:	f7fe fad4 	bl	8004724 <memset>
 800617c:	4620      	mov	r0, r4
 800617e:	bd70      	pop	{r4, r5, r6, pc}

08006180 <__sfp_lock_acquire>:
 8006180:	4801      	ldr	r0, [pc, #4]	; (8006188 <__sfp_lock_acquire+0x8>)
 8006182:	f000 b8b8 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 8006186:	bf00      	nop
 8006188:	20000b65 	.word	0x20000b65

0800618c <__sfp_lock_release>:
 800618c:	4801      	ldr	r0, [pc, #4]	; (8006194 <__sfp_lock_release+0x8>)
 800618e:	f000 b8b3 	b.w	80062f8 <__retarget_lock_release_recursive>
 8006192:	bf00      	nop
 8006194:	20000b65 	.word	0x20000b65

08006198 <__sinit_lock_acquire>:
 8006198:	4801      	ldr	r0, [pc, #4]	; (80061a0 <__sinit_lock_acquire+0x8>)
 800619a:	f000 b8ac 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 800619e:	bf00      	nop
 80061a0:	20000b66 	.word	0x20000b66

080061a4 <__sinit_lock_release>:
 80061a4:	4801      	ldr	r0, [pc, #4]	; (80061ac <__sinit_lock_release+0x8>)
 80061a6:	f000 b8a7 	b.w	80062f8 <__retarget_lock_release_recursive>
 80061aa:	bf00      	nop
 80061ac:	20000b66 	.word	0x20000b66

080061b0 <__sinit>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	4604      	mov	r4, r0
 80061b4:	f7ff fff0 	bl	8006198 <__sinit_lock_acquire>
 80061b8:	69a3      	ldr	r3, [r4, #24]
 80061ba:	b11b      	cbz	r3, 80061c4 <__sinit+0x14>
 80061bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061c0:	f7ff bff0 	b.w	80061a4 <__sinit_lock_release>
 80061c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061c8:	6523      	str	r3, [r4, #80]	; 0x50
 80061ca:	4b13      	ldr	r3, [pc, #76]	; (8006218 <__sinit+0x68>)
 80061cc:	4a13      	ldr	r2, [pc, #76]	; (800621c <__sinit+0x6c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	bf08      	it	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	4620      	mov	r0, r4
 80061da:	bf08      	it	eq
 80061dc:	61a3      	streq	r3, [r4, #24]
 80061de:	f000 f81f 	bl	8006220 <__sfp>
 80061e2:	6060      	str	r0, [r4, #4]
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 f81b 	bl	8006220 <__sfp>
 80061ea:	60a0      	str	r0, [r4, #8]
 80061ec:	4620      	mov	r0, r4
 80061ee:	f000 f817 	bl	8006220 <__sfp>
 80061f2:	2200      	movs	r2, #0
 80061f4:	2104      	movs	r1, #4
 80061f6:	60e0      	str	r0, [r4, #12]
 80061f8:	6860      	ldr	r0, [r4, #4]
 80061fa:	f7ff ff81 	bl	8006100 <std>
 80061fe:	2201      	movs	r2, #1
 8006200:	2109      	movs	r1, #9
 8006202:	68a0      	ldr	r0, [r4, #8]
 8006204:	f7ff ff7c 	bl	8006100 <std>
 8006208:	2202      	movs	r2, #2
 800620a:	2112      	movs	r1, #18
 800620c:	68e0      	ldr	r0, [r4, #12]
 800620e:	f7ff ff77 	bl	8006100 <std>
 8006212:	2301      	movs	r3, #1
 8006214:	61a3      	str	r3, [r4, #24]
 8006216:	e7d1      	b.n	80061bc <__sinit+0xc>
 8006218:	080074c4 	.word	0x080074c4
 800621c:	08006149 	.word	0x08006149

08006220 <__sfp>:
 8006220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006222:	4607      	mov	r7, r0
 8006224:	f7ff ffac 	bl	8006180 <__sfp_lock_acquire>
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <__sfp+0x84>)
 800622a:	681e      	ldr	r6, [r3, #0]
 800622c:	69b3      	ldr	r3, [r6, #24]
 800622e:	b913      	cbnz	r3, 8006236 <__sfp+0x16>
 8006230:	4630      	mov	r0, r6
 8006232:	f7ff ffbd 	bl	80061b0 <__sinit>
 8006236:	3648      	adds	r6, #72	; 0x48
 8006238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800623c:	3b01      	subs	r3, #1
 800623e:	d503      	bpl.n	8006248 <__sfp+0x28>
 8006240:	6833      	ldr	r3, [r6, #0]
 8006242:	b30b      	cbz	r3, 8006288 <__sfp+0x68>
 8006244:	6836      	ldr	r6, [r6, #0]
 8006246:	e7f7      	b.n	8006238 <__sfp+0x18>
 8006248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800624c:	b9d5      	cbnz	r5, 8006284 <__sfp+0x64>
 800624e:	4b16      	ldr	r3, [pc, #88]	; (80062a8 <__sfp+0x88>)
 8006250:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006254:	60e3      	str	r3, [r4, #12]
 8006256:	6665      	str	r5, [r4, #100]	; 0x64
 8006258:	f000 f84c 	bl	80062f4 <__retarget_lock_init_recursive>
 800625c:	f7ff ff96 	bl	800618c <__sfp_lock_release>
 8006260:	2208      	movs	r2, #8
 8006262:	4629      	mov	r1, r5
 8006264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800626c:	6025      	str	r5, [r4, #0]
 800626e:	61a5      	str	r5, [r4, #24]
 8006270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006274:	f7fe fa56 	bl	8004724 <memset>
 8006278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800627c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006280:	4620      	mov	r0, r4
 8006282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006284:	3468      	adds	r4, #104	; 0x68
 8006286:	e7d9      	b.n	800623c <__sfp+0x1c>
 8006288:	2104      	movs	r1, #4
 800628a:	4638      	mov	r0, r7
 800628c:	f7ff ff62 	bl	8006154 <__sfmoreglue>
 8006290:	4604      	mov	r4, r0
 8006292:	6030      	str	r0, [r6, #0]
 8006294:	2800      	cmp	r0, #0
 8006296:	d1d5      	bne.n	8006244 <__sfp+0x24>
 8006298:	f7ff ff78 	bl	800618c <__sfp_lock_release>
 800629c:	230c      	movs	r3, #12
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	e7ee      	b.n	8006280 <__sfp+0x60>
 80062a2:	bf00      	nop
 80062a4:	080074c4 	.word	0x080074c4
 80062a8:	ffff0001 	.word	0xffff0001

080062ac <_fwalk_reent>:
 80062ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062b0:	4606      	mov	r6, r0
 80062b2:	4688      	mov	r8, r1
 80062b4:	2700      	movs	r7, #0
 80062b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062be:	f1b9 0901 	subs.w	r9, r9, #1
 80062c2:	d505      	bpl.n	80062d0 <_fwalk_reent+0x24>
 80062c4:	6824      	ldr	r4, [r4, #0]
 80062c6:	2c00      	cmp	r4, #0
 80062c8:	d1f7      	bne.n	80062ba <_fwalk_reent+0xe>
 80062ca:	4638      	mov	r0, r7
 80062cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062d0:	89ab      	ldrh	r3, [r5, #12]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d907      	bls.n	80062e6 <_fwalk_reent+0x3a>
 80062d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062da:	3301      	adds	r3, #1
 80062dc:	d003      	beq.n	80062e6 <_fwalk_reent+0x3a>
 80062de:	4629      	mov	r1, r5
 80062e0:	4630      	mov	r0, r6
 80062e2:	47c0      	blx	r8
 80062e4:	4307      	orrs	r7, r0
 80062e6:	3568      	adds	r5, #104	; 0x68
 80062e8:	e7e9      	b.n	80062be <_fwalk_reent+0x12>
	...

080062ec <_localeconv_r>:
 80062ec:	4800      	ldr	r0, [pc, #0]	; (80062f0 <_localeconv_r+0x4>)
 80062ee:	4770      	bx	lr
 80062f0:	20000164 	.word	0x20000164

080062f4 <__retarget_lock_init_recursive>:
 80062f4:	4770      	bx	lr

080062f6 <__retarget_lock_acquire_recursive>:
 80062f6:	4770      	bx	lr

080062f8 <__retarget_lock_release_recursive>:
 80062f8:	4770      	bx	lr

080062fa <__swhatbuf_r>:
 80062fa:	b570      	push	{r4, r5, r6, lr}
 80062fc:	460e      	mov	r6, r1
 80062fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006302:	4614      	mov	r4, r2
 8006304:	2900      	cmp	r1, #0
 8006306:	461d      	mov	r5, r3
 8006308:	b096      	sub	sp, #88	; 0x58
 800630a:	da08      	bge.n	800631e <__swhatbuf_r+0x24>
 800630c:	2200      	movs	r2, #0
 800630e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006312:	602a      	str	r2, [r5, #0]
 8006314:	061a      	lsls	r2, r3, #24
 8006316:	d410      	bmi.n	800633a <__swhatbuf_r+0x40>
 8006318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800631c:	e00e      	b.n	800633c <__swhatbuf_r+0x42>
 800631e:	466a      	mov	r2, sp
 8006320:	f000 fee4 	bl	80070ec <_fstat_r>
 8006324:	2800      	cmp	r0, #0
 8006326:	dbf1      	blt.n	800630c <__swhatbuf_r+0x12>
 8006328:	9a01      	ldr	r2, [sp, #4]
 800632a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800632e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006332:	425a      	negs	r2, r3
 8006334:	415a      	adcs	r2, r3
 8006336:	602a      	str	r2, [r5, #0]
 8006338:	e7ee      	b.n	8006318 <__swhatbuf_r+0x1e>
 800633a:	2340      	movs	r3, #64	; 0x40
 800633c:	2000      	movs	r0, #0
 800633e:	6023      	str	r3, [r4, #0]
 8006340:	b016      	add	sp, #88	; 0x58
 8006342:	bd70      	pop	{r4, r5, r6, pc}

08006344 <__smakebuf_r>:
 8006344:	898b      	ldrh	r3, [r1, #12]
 8006346:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006348:	079d      	lsls	r5, r3, #30
 800634a:	4606      	mov	r6, r0
 800634c:	460c      	mov	r4, r1
 800634e:	d507      	bpl.n	8006360 <__smakebuf_r+0x1c>
 8006350:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	6123      	str	r3, [r4, #16]
 8006358:	2301      	movs	r3, #1
 800635a:	6163      	str	r3, [r4, #20]
 800635c:	b002      	add	sp, #8
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	466a      	mov	r2, sp
 8006362:	ab01      	add	r3, sp, #4
 8006364:	f7ff ffc9 	bl	80062fa <__swhatbuf_r>
 8006368:	9900      	ldr	r1, [sp, #0]
 800636a:	4605      	mov	r5, r0
 800636c:	4630      	mov	r0, r6
 800636e:	f000 fc4b 	bl	8006c08 <_malloc_r>
 8006372:	b948      	cbnz	r0, 8006388 <__smakebuf_r+0x44>
 8006374:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006378:	059a      	lsls	r2, r3, #22
 800637a:	d4ef      	bmi.n	800635c <__smakebuf_r+0x18>
 800637c:	f023 0303 	bic.w	r3, r3, #3
 8006380:	f043 0302 	orr.w	r3, r3, #2
 8006384:	81a3      	strh	r3, [r4, #12]
 8006386:	e7e3      	b.n	8006350 <__smakebuf_r+0xc>
 8006388:	4b0d      	ldr	r3, [pc, #52]	; (80063c0 <__smakebuf_r+0x7c>)
 800638a:	62b3      	str	r3, [r6, #40]	; 0x28
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	6020      	str	r0, [r4, #0]
 8006390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	9b00      	ldr	r3, [sp, #0]
 8006398:	6120      	str	r0, [r4, #16]
 800639a:	6163      	str	r3, [r4, #20]
 800639c:	9b01      	ldr	r3, [sp, #4]
 800639e:	b15b      	cbz	r3, 80063b8 <__smakebuf_r+0x74>
 80063a0:	4630      	mov	r0, r6
 80063a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063a6:	f000 feb3 	bl	8007110 <_isatty_r>
 80063aa:	b128      	cbz	r0, 80063b8 <__smakebuf_r+0x74>
 80063ac:	89a3      	ldrh	r3, [r4, #12]
 80063ae:	f023 0303 	bic.w	r3, r3, #3
 80063b2:	f043 0301 	orr.w	r3, r3, #1
 80063b6:	81a3      	strh	r3, [r4, #12]
 80063b8:	89a0      	ldrh	r0, [r4, #12]
 80063ba:	4305      	orrs	r5, r0
 80063bc:	81a5      	strh	r5, [r4, #12]
 80063be:	e7cd      	b.n	800635c <__smakebuf_r+0x18>
 80063c0:	08006149 	.word	0x08006149

080063c4 <malloc>:
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <malloc+0xc>)
 80063c6:	4601      	mov	r1, r0
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	f000 bc1d 	b.w	8006c08 <_malloc_r>
 80063ce:	bf00      	nop
 80063d0:	20000010 	.word	0x20000010

080063d4 <memchr>:
 80063d4:	4603      	mov	r3, r0
 80063d6:	b510      	push	{r4, lr}
 80063d8:	b2c9      	uxtb	r1, r1
 80063da:	4402      	add	r2, r0
 80063dc:	4293      	cmp	r3, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	d101      	bne.n	80063e6 <memchr+0x12>
 80063e2:	2000      	movs	r0, #0
 80063e4:	e003      	b.n	80063ee <memchr+0x1a>
 80063e6:	7804      	ldrb	r4, [r0, #0]
 80063e8:	3301      	adds	r3, #1
 80063ea:	428c      	cmp	r4, r1
 80063ec:	d1f6      	bne.n	80063dc <memchr+0x8>
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <memcpy>:
 80063f0:	440a      	add	r2, r1
 80063f2:	4291      	cmp	r1, r2
 80063f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063f8:	d100      	bne.n	80063fc <memcpy+0xc>
 80063fa:	4770      	bx	lr
 80063fc:	b510      	push	{r4, lr}
 80063fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006402:	4291      	cmp	r1, r2
 8006404:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006408:	d1f9      	bne.n	80063fe <memcpy+0xe>
 800640a:	bd10      	pop	{r4, pc}

0800640c <_Balloc>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006410:	4604      	mov	r4, r0
 8006412:	460d      	mov	r5, r1
 8006414:	b976      	cbnz	r6, 8006434 <_Balloc+0x28>
 8006416:	2010      	movs	r0, #16
 8006418:	f7ff ffd4 	bl	80063c4 <malloc>
 800641c:	4602      	mov	r2, r0
 800641e:	6260      	str	r0, [r4, #36]	; 0x24
 8006420:	b920      	cbnz	r0, 800642c <_Balloc+0x20>
 8006422:	2166      	movs	r1, #102	; 0x66
 8006424:	4b17      	ldr	r3, [pc, #92]	; (8006484 <_Balloc+0x78>)
 8006426:	4818      	ldr	r0, [pc, #96]	; (8006488 <_Balloc+0x7c>)
 8006428:	f000 fe20 	bl	800706c <__assert_func>
 800642c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006430:	6006      	str	r6, [r0, #0]
 8006432:	60c6      	str	r6, [r0, #12]
 8006434:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006436:	68f3      	ldr	r3, [r6, #12]
 8006438:	b183      	cbz	r3, 800645c <_Balloc+0x50>
 800643a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006442:	b9b8      	cbnz	r0, 8006474 <_Balloc+0x68>
 8006444:	2101      	movs	r1, #1
 8006446:	fa01 f605 	lsl.w	r6, r1, r5
 800644a:	1d72      	adds	r2, r6, #5
 800644c:	4620      	mov	r0, r4
 800644e:	0092      	lsls	r2, r2, #2
 8006450:	f000 fb5e 	bl	8006b10 <_calloc_r>
 8006454:	b160      	cbz	r0, 8006470 <_Balloc+0x64>
 8006456:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800645a:	e00e      	b.n	800647a <_Balloc+0x6e>
 800645c:	2221      	movs	r2, #33	; 0x21
 800645e:	2104      	movs	r1, #4
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fb55 	bl	8006b10 <_calloc_r>
 8006466:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006468:	60f0      	str	r0, [r6, #12]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e4      	bne.n	800643a <_Balloc+0x2e>
 8006470:	2000      	movs	r0, #0
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	6802      	ldr	r2, [r0, #0]
 8006476:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800647a:	2300      	movs	r3, #0
 800647c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006480:	e7f7      	b.n	8006472 <_Balloc+0x66>
 8006482:	bf00      	nop
 8006484:	08007509 	.word	0x08007509
 8006488:	080075ec 	.word	0x080075ec

0800648c <_Bfree>:
 800648c:	b570      	push	{r4, r5, r6, lr}
 800648e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006490:	4605      	mov	r5, r0
 8006492:	460c      	mov	r4, r1
 8006494:	b976      	cbnz	r6, 80064b4 <_Bfree+0x28>
 8006496:	2010      	movs	r0, #16
 8006498:	f7ff ff94 	bl	80063c4 <malloc>
 800649c:	4602      	mov	r2, r0
 800649e:	6268      	str	r0, [r5, #36]	; 0x24
 80064a0:	b920      	cbnz	r0, 80064ac <_Bfree+0x20>
 80064a2:	218a      	movs	r1, #138	; 0x8a
 80064a4:	4b08      	ldr	r3, [pc, #32]	; (80064c8 <_Bfree+0x3c>)
 80064a6:	4809      	ldr	r0, [pc, #36]	; (80064cc <_Bfree+0x40>)
 80064a8:	f000 fde0 	bl	800706c <__assert_func>
 80064ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064b0:	6006      	str	r6, [r0, #0]
 80064b2:	60c6      	str	r6, [r0, #12]
 80064b4:	b13c      	cbz	r4, 80064c6 <_Bfree+0x3a>
 80064b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064b8:	6862      	ldr	r2, [r4, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c0:	6021      	str	r1, [r4, #0]
 80064c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064c6:	bd70      	pop	{r4, r5, r6, pc}
 80064c8:	08007509 	.word	0x08007509
 80064cc:	080075ec 	.word	0x080075ec

080064d0 <__multadd>:
 80064d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	4607      	mov	r7, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	461e      	mov	r6, r3
 80064da:	2000      	movs	r0, #0
 80064dc:	690d      	ldr	r5, [r1, #16]
 80064de:	f101 0c14 	add.w	ip, r1, #20
 80064e2:	f8dc 3000 	ldr.w	r3, [ip]
 80064e6:	3001      	adds	r0, #1
 80064e8:	b299      	uxth	r1, r3
 80064ea:	fb02 6101 	mla	r1, r2, r1, r6
 80064ee:	0c1e      	lsrs	r6, r3, #16
 80064f0:	0c0b      	lsrs	r3, r1, #16
 80064f2:	fb02 3306 	mla	r3, r2, r6, r3
 80064f6:	b289      	uxth	r1, r1
 80064f8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064fc:	4285      	cmp	r5, r0
 80064fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006502:	f84c 1b04 	str.w	r1, [ip], #4
 8006506:	dcec      	bgt.n	80064e2 <__multadd+0x12>
 8006508:	b30e      	cbz	r6, 800654e <__multadd+0x7e>
 800650a:	68a3      	ldr	r3, [r4, #8]
 800650c:	42ab      	cmp	r3, r5
 800650e:	dc19      	bgt.n	8006544 <__multadd+0x74>
 8006510:	6861      	ldr	r1, [r4, #4]
 8006512:	4638      	mov	r0, r7
 8006514:	3101      	adds	r1, #1
 8006516:	f7ff ff79 	bl	800640c <_Balloc>
 800651a:	4680      	mov	r8, r0
 800651c:	b928      	cbnz	r0, 800652a <__multadd+0x5a>
 800651e:	4602      	mov	r2, r0
 8006520:	21b5      	movs	r1, #181	; 0xb5
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <__multadd+0x84>)
 8006524:	480c      	ldr	r0, [pc, #48]	; (8006558 <__multadd+0x88>)
 8006526:	f000 fda1 	bl	800706c <__assert_func>
 800652a:	6922      	ldr	r2, [r4, #16]
 800652c:	f104 010c 	add.w	r1, r4, #12
 8006530:	3202      	adds	r2, #2
 8006532:	0092      	lsls	r2, r2, #2
 8006534:	300c      	adds	r0, #12
 8006536:	f7ff ff5b 	bl	80063f0 <memcpy>
 800653a:	4621      	mov	r1, r4
 800653c:	4638      	mov	r0, r7
 800653e:	f7ff ffa5 	bl	800648c <_Bfree>
 8006542:	4644      	mov	r4, r8
 8006544:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006548:	3501      	adds	r5, #1
 800654a:	615e      	str	r6, [r3, #20]
 800654c:	6125      	str	r5, [r4, #16]
 800654e:	4620      	mov	r0, r4
 8006550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006554:	0800757b 	.word	0x0800757b
 8006558:	080075ec 	.word	0x080075ec

0800655c <__hi0bits>:
 800655c:	0c02      	lsrs	r2, r0, #16
 800655e:	0412      	lsls	r2, r2, #16
 8006560:	4603      	mov	r3, r0
 8006562:	b9ca      	cbnz	r2, 8006598 <__hi0bits+0x3c>
 8006564:	0403      	lsls	r3, r0, #16
 8006566:	2010      	movs	r0, #16
 8006568:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800656c:	bf04      	itt	eq
 800656e:	021b      	lsleq	r3, r3, #8
 8006570:	3008      	addeq	r0, #8
 8006572:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006576:	bf04      	itt	eq
 8006578:	011b      	lsleq	r3, r3, #4
 800657a:	3004      	addeq	r0, #4
 800657c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006580:	bf04      	itt	eq
 8006582:	009b      	lsleq	r3, r3, #2
 8006584:	3002      	addeq	r0, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	db05      	blt.n	8006596 <__hi0bits+0x3a>
 800658a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800658e:	f100 0001 	add.w	r0, r0, #1
 8006592:	bf08      	it	eq
 8006594:	2020      	moveq	r0, #32
 8006596:	4770      	bx	lr
 8006598:	2000      	movs	r0, #0
 800659a:	e7e5      	b.n	8006568 <__hi0bits+0xc>

0800659c <__lo0bits>:
 800659c:	6803      	ldr	r3, [r0, #0]
 800659e:	4602      	mov	r2, r0
 80065a0:	f013 0007 	ands.w	r0, r3, #7
 80065a4:	d00b      	beq.n	80065be <__lo0bits+0x22>
 80065a6:	07d9      	lsls	r1, r3, #31
 80065a8:	d421      	bmi.n	80065ee <__lo0bits+0x52>
 80065aa:	0798      	lsls	r0, r3, #30
 80065ac:	bf49      	itett	mi
 80065ae:	085b      	lsrmi	r3, r3, #1
 80065b0:	089b      	lsrpl	r3, r3, #2
 80065b2:	2001      	movmi	r0, #1
 80065b4:	6013      	strmi	r3, [r2, #0]
 80065b6:	bf5c      	itt	pl
 80065b8:	2002      	movpl	r0, #2
 80065ba:	6013      	strpl	r3, [r2, #0]
 80065bc:	4770      	bx	lr
 80065be:	b299      	uxth	r1, r3
 80065c0:	b909      	cbnz	r1, 80065c6 <__lo0bits+0x2a>
 80065c2:	2010      	movs	r0, #16
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	b2d9      	uxtb	r1, r3
 80065c8:	b909      	cbnz	r1, 80065ce <__lo0bits+0x32>
 80065ca:	3008      	adds	r0, #8
 80065cc:	0a1b      	lsrs	r3, r3, #8
 80065ce:	0719      	lsls	r1, r3, #28
 80065d0:	bf04      	itt	eq
 80065d2:	091b      	lsreq	r3, r3, #4
 80065d4:	3004      	addeq	r0, #4
 80065d6:	0799      	lsls	r1, r3, #30
 80065d8:	bf04      	itt	eq
 80065da:	089b      	lsreq	r3, r3, #2
 80065dc:	3002      	addeq	r0, #2
 80065de:	07d9      	lsls	r1, r3, #31
 80065e0:	d403      	bmi.n	80065ea <__lo0bits+0x4e>
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	f100 0001 	add.w	r0, r0, #1
 80065e8:	d003      	beq.n	80065f2 <__lo0bits+0x56>
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4770      	bx	lr
 80065ee:	2000      	movs	r0, #0
 80065f0:	4770      	bx	lr
 80065f2:	2020      	movs	r0, #32
 80065f4:	4770      	bx	lr
	...

080065f8 <__i2b>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	460c      	mov	r4, r1
 80065fc:	2101      	movs	r1, #1
 80065fe:	f7ff ff05 	bl	800640c <_Balloc>
 8006602:	4602      	mov	r2, r0
 8006604:	b928      	cbnz	r0, 8006612 <__i2b+0x1a>
 8006606:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800660a:	4b04      	ldr	r3, [pc, #16]	; (800661c <__i2b+0x24>)
 800660c:	4804      	ldr	r0, [pc, #16]	; (8006620 <__i2b+0x28>)
 800660e:	f000 fd2d 	bl	800706c <__assert_func>
 8006612:	2301      	movs	r3, #1
 8006614:	6144      	str	r4, [r0, #20]
 8006616:	6103      	str	r3, [r0, #16]
 8006618:	bd10      	pop	{r4, pc}
 800661a:	bf00      	nop
 800661c:	0800757b 	.word	0x0800757b
 8006620:	080075ec 	.word	0x080075ec

08006624 <__multiply>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	4691      	mov	r9, r2
 800662a:	690a      	ldr	r2, [r1, #16]
 800662c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006630:	460c      	mov	r4, r1
 8006632:	429a      	cmp	r2, r3
 8006634:	bfbe      	ittt	lt
 8006636:	460b      	movlt	r3, r1
 8006638:	464c      	movlt	r4, r9
 800663a:	4699      	movlt	r9, r3
 800663c:	6927      	ldr	r7, [r4, #16]
 800663e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006642:	68a3      	ldr	r3, [r4, #8]
 8006644:	6861      	ldr	r1, [r4, #4]
 8006646:	eb07 060a 	add.w	r6, r7, sl
 800664a:	42b3      	cmp	r3, r6
 800664c:	b085      	sub	sp, #20
 800664e:	bfb8      	it	lt
 8006650:	3101      	addlt	r1, #1
 8006652:	f7ff fedb 	bl	800640c <_Balloc>
 8006656:	b930      	cbnz	r0, 8006666 <__multiply+0x42>
 8006658:	4602      	mov	r2, r0
 800665a:	f240 115d 	movw	r1, #349	; 0x15d
 800665e:	4b43      	ldr	r3, [pc, #268]	; (800676c <__multiply+0x148>)
 8006660:	4843      	ldr	r0, [pc, #268]	; (8006770 <__multiply+0x14c>)
 8006662:	f000 fd03 	bl	800706c <__assert_func>
 8006666:	f100 0514 	add.w	r5, r0, #20
 800666a:	462b      	mov	r3, r5
 800666c:	2200      	movs	r2, #0
 800666e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006672:	4543      	cmp	r3, r8
 8006674:	d321      	bcc.n	80066ba <__multiply+0x96>
 8006676:	f104 0314 	add.w	r3, r4, #20
 800667a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800667e:	f109 0314 	add.w	r3, r9, #20
 8006682:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006686:	9202      	str	r2, [sp, #8]
 8006688:	1b3a      	subs	r2, r7, r4
 800668a:	3a15      	subs	r2, #21
 800668c:	f022 0203 	bic.w	r2, r2, #3
 8006690:	3204      	adds	r2, #4
 8006692:	f104 0115 	add.w	r1, r4, #21
 8006696:	428f      	cmp	r7, r1
 8006698:	bf38      	it	cc
 800669a:	2204      	movcc	r2, #4
 800669c:	9201      	str	r2, [sp, #4]
 800669e:	9a02      	ldr	r2, [sp, #8]
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d80c      	bhi.n	80066c0 <__multiply+0x9c>
 80066a6:	2e00      	cmp	r6, #0
 80066a8:	dd03      	ble.n	80066b2 <__multiply+0x8e>
 80066aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d059      	beq.n	8006766 <__multiply+0x142>
 80066b2:	6106      	str	r6, [r0, #16]
 80066b4:	b005      	add	sp, #20
 80066b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ba:	f843 2b04 	str.w	r2, [r3], #4
 80066be:	e7d8      	b.n	8006672 <__multiply+0x4e>
 80066c0:	f8b3 a000 	ldrh.w	sl, [r3]
 80066c4:	f1ba 0f00 	cmp.w	sl, #0
 80066c8:	d023      	beq.n	8006712 <__multiply+0xee>
 80066ca:	46a9      	mov	r9, r5
 80066cc:	f04f 0c00 	mov.w	ip, #0
 80066d0:	f104 0e14 	add.w	lr, r4, #20
 80066d4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066d8:	f8d9 1000 	ldr.w	r1, [r9]
 80066dc:	fa1f fb82 	uxth.w	fp, r2
 80066e0:	b289      	uxth	r1, r1
 80066e2:	fb0a 110b 	mla	r1, sl, fp, r1
 80066e6:	4461      	add	r1, ip
 80066e8:	f8d9 c000 	ldr.w	ip, [r9]
 80066ec:	0c12      	lsrs	r2, r2, #16
 80066ee:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80066f2:	fb0a c202 	mla	r2, sl, r2, ip
 80066f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066fa:	b289      	uxth	r1, r1
 80066fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006700:	4577      	cmp	r7, lr
 8006702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006706:	f849 1b04 	str.w	r1, [r9], #4
 800670a:	d8e3      	bhi.n	80066d4 <__multiply+0xb0>
 800670c:	9a01      	ldr	r2, [sp, #4]
 800670e:	f845 c002 	str.w	ip, [r5, r2]
 8006712:	9a03      	ldr	r2, [sp, #12]
 8006714:	3304      	adds	r3, #4
 8006716:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800671a:	f1b9 0f00 	cmp.w	r9, #0
 800671e:	d020      	beq.n	8006762 <__multiply+0x13e>
 8006720:	46ae      	mov	lr, r5
 8006722:	f04f 0a00 	mov.w	sl, #0
 8006726:	6829      	ldr	r1, [r5, #0]
 8006728:	f104 0c14 	add.w	ip, r4, #20
 800672c:	f8bc b000 	ldrh.w	fp, [ip]
 8006730:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006734:	b289      	uxth	r1, r1
 8006736:	fb09 220b 	mla	r2, r9, fp, r2
 800673a:	4492      	add	sl, r2
 800673c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006740:	f84e 1b04 	str.w	r1, [lr], #4
 8006744:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006748:	f8be 1000 	ldrh.w	r1, [lr]
 800674c:	0c12      	lsrs	r2, r2, #16
 800674e:	fb09 1102 	mla	r1, r9, r2, r1
 8006752:	4567      	cmp	r7, ip
 8006754:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800675c:	d8e6      	bhi.n	800672c <__multiply+0x108>
 800675e:	9a01      	ldr	r2, [sp, #4]
 8006760:	50a9      	str	r1, [r5, r2]
 8006762:	3504      	adds	r5, #4
 8006764:	e79b      	b.n	800669e <__multiply+0x7a>
 8006766:	3e01      	subs	r6, #1
 8006768:	e79d      	b.n	80066a6 <__multiply+0x82>
 800676a:	bf00      	nop
 800676c:	0800757b 	.word	0x0800757b
 8006770:	080075ec 	.word	0x080075ec

08006774 <__pow5mult>:
 8006774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006778:	4615      	mov	r5, r2
 800677a:	f012 0203 	ands.w	r2, r2, #3
 800677e:	4606      	mov	r6, r0
 8006780:	460f      	mov	r7, r1
 8006782:	d007      	beq.n	8006794 <__pow5mult+0x20>
 8006784:	4c25      	ldr	r4, [pc, #148]	; (800681c <__pow5mult+0xa8>)
 8006786:	3a01      	subs	r2, #1
 8006788:	2300      	movs	r3, #0
 800678a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800678e:	f7ff fe9f 	bl	80064d0 <__multadd>
 8006792:	4607      	mov	r7, r0
 8006794:	10ad      	asrs	r5, r5, #2
 8006796:	d03d      	beq.n	8006814 <__pow5mult+0xa0>
 8006798:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800679a:	b97c      	cbnz	r4, 80067bc <__pow5mult+0x48>
 800679c:	2010      	movs	r0, #16
 800679e:	f7ff fe11 	bl	80063c4 <malloc>
 80067a2:	4602      	mov	r2, r0
 80067a4:	6270      	str	r0, [r6, #36]	; 0x24
 80067a6:	b928      	cbnz	r0, 80067b4 <__pow5mult+0x40>
 80067a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067ac:	4b1c      	ldr	r3, [pc, #112]	; (8006820 <__pow5mult+0xac>)
 80067ae:	481d      	ldr	r0, [pc, #116]	; (8006824 <__pow5mult+0xb0>)
 80067b0:	f000 fc5c 	bl	800706c <__assert_func>
 80067b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067b8:	6004      	str	r4, [r0, #0]
 80067ba:	60c4      	str	r4, [r0, #12]
 80067bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067c4:	b94c      	cbnz	r4, 80067da <__pow5mult+0x66>
 80067c6:	f240 2171 	movw	r1, #625	; 0x271
 80067ca:	4630      	mov	r0, r6
 80067cc:	f7ff ff14 	bl	80065f8 <__i2b>
 80067d0:	2300      	movs	r3, #0
 80067d2:	4604      	mov	r4, r0
 80067d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80067d8:	6003      	str	r3, [r0, #0]
 80067da:	f04f 0900 	mov.w	r9, #0
 80067de:	07eb      	lsls	r3, r5, #31
 80067e0:	d50a      	bpl.n	80067f8 <__pow5mult+0x84>
 80067e2:	4639      	mov	r1, r7
 80067e4:	4622      	mov	r2, r4
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ff1c 	bl	8006624 <__multiply>
 80067ec:	4680      	mov	r8, r0
 80067ee:	4639      	mov	r1, r7
 80067f0:	4630      	mov	r0, r6
 80067f2:	f7ff fe4b 	bl	800648c <_Bfree>
 80067f6:	4647      	mov	r7, r8
 80067f8:	106d      	asrs	r5, r5, #1
 80067fa:	d00b      	beq.n	8006814 <__pow5mult+0xa0>
 80067fc:	6820      	ldr	r0, [r4, #0]
 80067fe:	b938      	cbnz	r0, 8006810 <__pow5mult+0x9c>
 8006800:	4622      	mov	r2, r4
 8006802:	4621      	mov	r1, r4
 8006804:	4630      	mov	r0, r6
 8006806:	f7ff ff0d 	bl	8006624 <__multiply>
 800680a:	6020      	str	r0, [r4, #0]
 800680c:	f8c0 9000 	str.w	r9, [r0]
 8006810:	4604      	mov	r4, r0
 8006812:	e7e4      	b.n	80067de <__pow5mult+0x6a>
 8006814:	4638      	mov	r0, r7
 8006816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800681a:	bf00      	nop
 800681c:	08007738 	.word	0x08007738
 8006820:	08007509 	.word	0x08007509
 8006824:	080075ec 	.word	0x080075ec

08006828 <__lshift>:
 8006828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800682c:	460c      	mov	r4, r1
 800682e:	4607      	mov	r7, r0
 8006830:	4691      	mov	r9, r2
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	6849      	ldr	r1, [r1, #4]
 8006836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800683a:	68a3      	ldr	r3, [r4, #8]
 800683c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006840:	f108 0601 	add.w	r6, r8, #1
 8006844:	42b3      	cmp	r3, r6
 8006846:	db0b      	blt.n	8006860 <__lshift+0x38>
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff fddf 	bl	800640c <_Balloc>
 800684e:	4605      	mov	r5, r0
 8006850:	b948      	cbnz	r0, 8006866 <__lshift+0x3e>
 8006852:	4602      	mov	r2, r0
 8006854:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006858:	4b29      	ldr	r3, [pc, #164]	; (8006900 <__lshift+0xd8>)
 800685a:	482a      	ldr	r0, [pc, #168]	; (8006904 <__lshift+0xdc>)
 800685c:	f000 fc06 	bl	800706c <__assert_func>
 8006860:	3101      	adds	r1, #1
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	e7ee      	b.n	8006844 <__lshift+0x1c>
 8006866:	2300      	movs	r3, #0
 8006868:	f100 0114 	add.w	r1, r0, #20
 800686c:	f100 0210 	add.w	r2, r0, #16
 8006870:	4618      	mov	r0, r3
 8006872:	4553      	cmp	r3, sl
 8006874:	db37      	blt.n	80068e6 <__lshift+0xbe>
 8006876:	6920      	ldr	r0, [r4, #16]
 8006878:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800687c:	f104 0314 	add.w	r3, r4, #20
 8006880:	f019 091f 	ands.w	r9, r9, #31
 8006884:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006888:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800688c:	d02f      	beq.n	80068ee <__lshift+0xc6>
 800688e:	468a      	mov	sl, r1
 8006890:	f04f 0c00 	mov.w	ip, #0
 8006894:	f1c9 0e20 	rsb	lr, r9, #32
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	fa02 f209 	lsl.w	r2, r2, r9
 800689e:	ea42 020c 	orr.w	r2, r2, ip
 80068a2:	f84a 2b04 	str.w	r2, [sl], #4
 80068a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068aa:	4298      	cmp	r0, r3
 80068ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80068b0:	d8f2      	bhi.n	8006898 <__lshift+0x70>
 80068b2:	1b03      	subs	r3, r0, r4
 80068b4:	3b15      	subs	r3, #21
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	3304      	adds	r3, #4
 80068bc:	f104 0215 	add.w	r2, r4, #21
 80068c0:	4290      	cmp	r0, r2
 80068c2:	bf38      	it	cc
 80068c4:	2304      	movcc	r3, #4
 80068c6:	f841 c003 	str.w	ip, [r1, r3]
 80068ca:	f1bc 0f00 	cmp.w	ip, #0
 80068ce:	d001      	beq.n	80068d4 <__lshift+0xac>
 80068d0:	f108 0602 	add.w	r6, r8, #2
 80068d4:	3e01      	subs	r6, #1
 80068d6:	4638      	mov	r0, r7
 80068d8:	4621      	mov	r1, r4
 80068da:	612e      	str	r6, [r5, #16]
 80068dc:	f7ff fdd6 	bl	800648c <_Bfree>
 80068e0:	4628      	mov	r0, r5
 80068e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80068ea:	3301      	adds	r3, #1
 80068ec:	e7c1      	b.n	8006872 <__lshift+0x4a>
 80068ee:	3904      	subs	r1, #4
 80068f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f4:	4298      	cmp	r0, r3
 80068f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80068fa:	d8f9      	bhi.n	80068f0 <__lshift+0xc8>
 80068fc:	e7ea      	b.n	80068d4 <__lshift+0xac>
 80068fe:	bf00      	nop
 8006900:	0800757b 	.word	0x0800757b
 8006904:	080075ec 	.word	0x080075ec

08006908 <__mcmp>:
 8006908:	4603      	mov	r3, r0
 800690a:	690a      	ldr	r2, [r1, #16]
 800690c:	6900      	ldr	r0, [r0, #16]
 800690e:	b530      	push	{r4, r5, lr}
 8006910:	1a80      	subs	r0, r0, r2
 8006912:	d10d      	bne.n	8006930 <__mcmp+0x28>
 8006914:	3314      	adds	r3, #20
 8006916:	3114      	adds	r1, #20
 8006918:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800691c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006920:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006924:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006928:	4295      	cmp	r5, r2
 800692a:	d002      	beq.n	8006932 <__mcmp+0x2a>
 800692c:	d304      	bcc.n	8006938 <__mcmp+0x30>
 800692e:	2001      	movs	r0, #1
 8006930:	bd30      	pop	{r4, r5, pc}
 8006932:	42a3      	cmp	r3, r4
 8006934:	d3f4      	bcc.n	8006920 <__mcmp+0x18>
 8006936:	e7fb      	b.n	8006930 <__mcmp+0x28>
 8006938:	f04f 30ff 	mov.w	r0, #4294967295
 800693c:	e7f8      	b.n	8006930 <__mcmp+0x28>
	...

08006940 <__mdiff>:
 8006940:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	460d      	mov	r5, r1
 8006946:	4607      	mov	r7, r0
 8006948:	4611      	mov	r1, r2
 800694a:	4628      	mov	r0, r5
 800694c:	4614      	mov	r4, r2
 800694e:	f7ff ffdb 	bl	8006908 <__mcmp>
 8006952:	1e06      	subs	r6, r0, #0
 8006954:	d111      	bne.n	800697a <__mdiff+0x3a>
 8006956:	4631      	mov	r1, r6
 8006958:	4638      	mov	r0, r7
 800695a:	f7ff fd57 	bl	800640c <_Balloc>
 800695e:	4602      	mov	r2, r0
 8006960:	b928      	cbnz	r0, 800696e <__mdiff+0x2e>
 8006962:	f240 2132 	movw	r1, #562	; 0x232
 8006966:	4b3a      	ldr	r3, [pc, #232]	; (8006a50 <__mdiff+0x110>)
 8006968:	483a      	ldr	r0, [pc, #232]	; (8006a54 <__mdiff+0x114>)
 800696a:	f000 fb7f 	bl	800706c <__assert_func>
 800696e:	2301      	movs	r3, #1
 8006970:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006974:	4610      	mov	r0, r2
 8006976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697a:	bfa4      	itt	ge
 800697c:	4623      	movge	r3, r4
 800697e:	462c      	movge	r4, r5
 8006980:	4638      	mov	r0, r7
 8006982:	6861      	ldr	r1, [r4, #4]
 8006984:	bfa6      	itte	ge
 8006986:	461d      	movge	r5, r3
 8006988:	2600      	movge	r6, #0
 800698a:	2601      	movlt	r6, #1
 800698c:	f7ff fd3e 	bl	800640c <_Balloc>
 8006990:	4602      	mov	r2, r0
 8006992:	b918      	cbnz	r0, 800699c <__mdiff+0x5c>
 8006994:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006998:	4b2d      	ldr	r3, [pc, #180]	; (8006a50 <__mdiff+0x110>)
 800699a:	e7e5      	b.n	8006968 <__mdiff+0x28>
 800699c:	f102 0814 	add.w	r8, r2, #20
 80069a0:	46c2      	mov	sl, r8
 80069a2:	f04f 0c00 	mov.w	ip, #0
 80069a6:	6927      	ldr	r7, [r4, #16]
 80069a8:	60c6      	str	r6, [r0, #12]
 80069aa:	692e      	ldr	r6, [r5, #16]
 80069ac:	f104 0014 	add.w	r0, r4, #20
 80069b0:	f105 0914 	add.w	r9, r5, #20
 80069b4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80069b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069bc:	3410      	adds	r4, #16
 80069be:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80069c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80069c6:	fa1f f18b 	uxth.w	r1, fp
 80069ca:	448c      	add	ip, r1
 80069cc:	b299      	uxth	r1, r3
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	ebac 0101 	sub.w	r1, ip, r1
 80069d4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80069dc:	b289      	uxth	r1, r1
 80069de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80069e2:	454e      	cmp	r6, r9
 80069e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80069e8:	f84a 3b04 	str.w	r3, [sl], #4
 80069ec:	d8e7      	bhi.n	80069be <__mdiff+0x7e>
 80069ee:	1b73      	subs	r3, r6, r5
 80069f0:	3b15      	subs	r3, #21
 80069f2:	f023 0303 	bic.w	r3, r3, #3
 80069f6:	3515      	adds	r5, #21
 80069f8:	3304      	adds	r3, #4
 80069fa:	42ae      	cmp	r6, r5
 80069fc:	bf38      	it	cc
 80069fe:	2304      	movcc	r3, #4
 8006a00:	4418      	add	r0, r3
 8006a02:	4443      	add	r3, r8
 8006a04:	461e      	mov	r6, r3
 8006a06:	4605      	mov	r5, r0
 8006a08:	4575      	cmp	r5, lr
 8006a0a:	d30e      	bcc.n	8006a2a <__mdiff+0xea>
 8006a0c:	f10e 0103 	add.w	r1, lr, #3
 8006a10:	1a09      	subs	r1, r1, r0
 8006a12:	f021 0103 	bic.w	r1, r1, #3
 8006a16:	3803      	subs	r0, #3
 8006a18:	4586      	cmp	lr, r0
 8006a1a:	bf38      	it	cc
 8006a1c:	2100      	movcc	r1, #0
 8006a1e:	4419      	add	r1, r3
 8006a20:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006a24:	b18b      	cbz	r3, 8006a4a <__mdiff+0x10a>
 8006a26:	6117      	str	r7, [r2, #16]
 8006a28:	e7a4      	b.n	8006974 <__mdiff+0x34>
 8006a2a:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a2e:	fa1f f188 	uxth.w	r1, r8
 8006a32:	4461      	add	r1, ip
 8006a34:	140c      	asrs	r4, r1, #16
 8006a36:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a3a:	b289      	uxth	r1, r1
 8006a3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a40:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006a44:	f846 1b04 	str.w	r1, [r6], #4
 8006a48:	e7de      	b.n	8006a08 <__mdiff+0xc8>
 8006a4a:	3f01      	subs	r7, #1
 8006a4c:	e7e8      	b.n	8006a20 <__mdiff+0xe0>
 8006a4e:	bf00      	nop
 8006a50:	0800757b 	.word	0x0800757b
 8006a54:	080075ec 	.word	0x080075ec

08006a58 <__d2b>:
 8006a58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006a62:	4690      	mov	r8, r2
 8006a64:	461d      	mov	r5, r3
 8006a66:	f7ff fcd1 	bl	800640c <_Balloc>
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	b930      	cbnz	r0, 8006a7c <__d2b+0x24>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	f240 310a 	movw	r1, #778	; 0x30a
 8006a74:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <__d2b+0xb0>)
 8006a76:	4825      	ldr	r0, [pc, #148]	; (8006b0c <__d2b+0xb4>)
 8006a78:	f000 faf8 	bl	800706c <__assert_func>
 8006a7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006a80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006a84:	bb2d      	cbnz	r5, 8006ad2 <__d2b+0x7a>
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f1b8 0300 	subs.w	r3, r8, #0
 8006a8c:	d026      	beq.n	8006adc <__d2b+0x84>
 8006a8e:	4668      	mov	r0, sp
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	f7ff fd83 	bl	800659c <__lo0bits>
 8006a96:	9900      	ldr	r1, [sp, #0]
 8006a98:	b1f0      	cbz	r0, 8006ad8 <__d2b+0x80>
 8006a9a:	9a01      	ldr	r2, [sp, #4]
 8006a9c:	f1c0 0320 	rsb	r3, r0, #32
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	40c2      	lsrs	r2, r0
 8006aa8:	6163      	str	r3, [r4, #20]
 8006aaa:	9201      	str	r2, [sp, #4]
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bf14      	ite	ne
 8006ab2:	2102      	movne	r1, #2
 8006ab4:	2101      	moveq	r1, #1
 8006ab6:	61a3      	str	r3, [r4, #24]
 8006ab8:	6121      	str	r1, [r4, #16]
 8006aba:	b1c5      	cbz	r5, 8006aee <__d2b+0x96>
 8006abc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ac0:	4405      	add	r5, r0
 8006ac2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ac6:	603d      	str	r5, [r7, #0]
 8006ac8:	6030      	str	r0, [r6, #0]
 8006aca:	4620      	mov	r0, r4
 8006acc:	b002      	add	sp, #8
 8006ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ad6:	e7d6      	b.n	8006a86 <__d2b+0x2e>
 8006ad8:	6161      	str	r1, [r4, #20]
 8006ada:	e7e7      	b.n	8006aac <__d2b+0x54>
 8006adc:	a801      	add	r0, sp, #4
 8006ade:	f7ff fd5d 	bl	800659c <__lo0bits>
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	9b01      	ldr	r3, [sp, #4]
 8006ae6:	6121      	str	r1, [r4, #16]
 8006ae8:	6163      	str	r3, [r4, #20]
 8006aea:	3020      	adds	r0, #32
 8006aec:	e7e5      	b.n	8006aba <__d2b+0x62>
 8006aee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006af2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006af6:	6038      	str	r0, [r7, #0]
 8006af8:	6918      	ldr	r0, [r3, #16]
 8006afa:	f7ff fd2f 	bl	800655c <__hi0bits>
 8006afe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006b02:	6031      	str	r1, [r6, #0]
 8006b04:	e7e1      	b.n	8006aca <__d2b+0x72>
 8006b06:	bf00      	nop
 8006b08:	0800757b 	.word	0x0800757b
 8006b0c:	080075ec 	.word	0x080075ec

08006b10 <_calloc_r>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	fba1 5402 	umull	r5, r4, r1, r2
 8006b16:	b934      	cbnz	r4, 8006b26 <_calloc_r+0x16>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f000 f875 	bl	8006c08 <_malloc_r>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	b928      	cbnz	r0, 8006b2e <_calloc_r+0x1e>
 8006b22:	4630      	mov	r0, r6
 8006b24:	bd70      	pop	{r4, r5, r6, pc}
 8006b26:	220c      	movs	r2, #12
 8006b28:	2600      	movs	r6, #0
 8006b2a:	6002      	str	r2, [r0, #0]
 8006b2c:	e7f9      	b.n	8006b22 <_calloc_r+0x12>
 8006b2e:	462a      	mov	r2, r5
 8006b30:	4621      	mov	r1, r4
 8006b32:	f7fd fdf7 	bl	8004724 <memset>
 8006b36:	e7f4      	b.n	8006b22 <_calloc_r+0x12>

08006b38 <_free_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d040      	beq.n	8006bc2 <_free_r+0x8a>
 8006b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b44:	1f0c      	subs	r4, r1, #4
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bfb8      	it	lt
 8006b4a:	18e4      	addlt	r4, r4, r3
 8006b4c:	f000 fb14 	bl	8007178 <__malloc_lock>
 8006b50:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <_free_r+0x8c>)
 8006b52:	6813      	ldr	r3, [r2, #0]
 8006b54:	b933      	cbnz	r3, 8006b64 <_free_r+0x2c>
 8006b56:	6063      	str	r3, [r4, #4]
 8006b58:	6014      	str	r4, [r2, #0]
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b60:	f000 bb10 	b.w	8007184 <__malloc_unlock>
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d908      	bls.n	8006b7a <_free_r+0x42>
 8006b68:	6820      	ldr	r0, [r4, #0]
 8006b6a:	1821      	adds	r1, r4, r0
 8006b6c:	428b      	cmp	r3, r1
 8006b6e:	bf01      	itttt	eq
 8006b70:	6819      	ldreq	r1, [r3, #0]
 8006b72:	685b      	ldreq	r3, [r3, #4]
 8006b74:	1809      	addeq	r1, r1, r0
 8006b76:	6021      	streq	r1, [r4, #0]
 8006b78:	e7ed      	b.n	8006b56 <_free_r+0x1e>
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	b10b      	cbz	r3, 8006b84 <_free_r+0x4c>
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d9fa      	bls.n	8006b7a <_free_r+0x42>
 8006b84:	6811      	ldr	r1, [r2, #0]
 8006b86:	1850      	adds	r0, r2, r1
 8006b88:	42a0      	cmp	r0, r4
 8006b8a:	d10b      	bne.n	8006ba4 <_free_r+0x6c>
 8006b8c:	6820      	ldr	r0, [r4, #0]
 8006b8e:	4401      	add	r1, r0
 8006b90:	1850      	adds	r0, r2, r1
 8006b92:	4283      	cmp	r3, r0
 8006b94:	6011      	str	r1, [r2, #0]
 8006b96:	d1e0      	bne.n	8006b5a <_free_r+0x22>
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	4401      	add	r1, r0
 8006b9e:	6011      	str	r1, [r2, #0]
 8006ba0:	6053      	str	r3, [r2, #4]
 8006ba2:	e7da      	b.n	8006b5a <_free_r+0x22>
 8006ba4:	d902      	bls.n	8006bac <_free_r+0x74>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	602b      	str	r3, [r5, #0]
 8006baa:	e7d6      	b.n	8006b5a <_free_r+0x22>
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	1821      	adds	r1, r4, r0
 8006bb0:	428b      	cmp	r3, r1
 8006bb2:	bf01      	itttt	eq
 8006bb4:	6819      	ldreq	r1, [r3, #0]
 8006bb6:	685b      	ldreq	r3, [r3, #4]
 8006bb8:	1809      	addeq	r1, r1, r0
 8006bba:	6021      	streq	r1, [r4, #0]
 8006bbc:	6063      	str	r3, [r4, #4]
 8006bbe:	6054      	str	r4, [r2, #4]
 8006bc0:	e7cb      	b.n	8006b5a <_free_r+0x22>
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20000b68 	.word	0x20000b68

08006bc8 <sbrk_aligned>:
 8006bc8:	b570      	push	{r4, r5, r6, lr}
 8006bca:	4e0e      	ldr	r6, [pc, #56]	; (8006c04 <sbrk_aligned+0x3c>)
 8006bcc:	460c      	mov	r4, r1
 8006bce:	6831      	ldr	r1, [r6, #0]
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	b911      	cbnz	r1, 8006bda <sbrk_aligned+0x12>
 8006bd4:	f000 f9e4 	bl	8006fa0 <_sbrk_r>
 8006bd8:	6030      	str	r0, [r6, #0]
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f000 f9df 	bl	8006fa0 <_sbrk_r>
 8006be2:	1c43      	adds	r3, r0, #1
 8006be4:	d00a      	beq.n	8006bfc <sbrk_aligned+0x34>
 8006be6:	1cc4      	adds	r4, r0, #3
 8006be8:	f024 0403 	bic.w	r4, r4, #3
 8006bec:	42a0      	cmp	r0, r4
 8006bee:	d007      	beq.n	8006c00 <sbrk_aligned+0x38>
 8006bf0:	1a21      	subs	r1, r4, r0
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	f000 f9d4 	bl	8006fa0 <_sbrk_r>
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d101      	bne.n	8006c00 <sbrk_aligned+0x38>
 8006bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8006c00:	4620      	mov	r0, r4
 8006c02:	bd70      	pop	{r4, r5, r6, pc}
 8006c04:	20000b6c 	.word	0x20000b6c

08006c08 <_malloc_r>:
 8006c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c0c:	1ccd      	adds	r5, r1, #3
 8006c0e:	f025 0503 	bic.w	r5, r5, #3
 8006c12:	3508      	adds	r5, #8
 8006c14:	2d0c      	cmp	r5, #12
 8006c16:	bf38      	it	cc
 8006c18:	250c      	movcc	r5, #12
 8006c1a:	2d00      	cmp	r5, #0
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	db01      	blt.n	8006c24 <_malloc_r+0x1c>
 8006c20:	42a9      	cmp	r1, r5
 8006c22:	d905      	bls.n	8006c30 <_malloc_r+0x28>
 8006c24:	230c      	movs	r3, #12
 8006c26:	2600      	movs	r6, #0
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c30:	4e2e      	ldr	r6, [pc, #184]	; (8006cec <_malloc_r+0xe4>)
 8006c32:	f000 faa1 	bl	8007178 <__malloc_lock>
 8006c36:	6833      	ldr	r3, [r6, #0]
 8006c38:	461c      	mov	r4, r3
 8006c3a:	bb34      	cbnz	r4, 8006c8a <_malloc_r+0x82>
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4638      	mov	r0, r7
 8006c40:	f7ff ffc2 	bl	8006bc8 <sbrk_aligned>
 8006c44:	1c43      	adds	r3, r0, #1
 8006c46:	4604      	mov	r4, r0
 8006c48:	d14d      	bne.n	8006ce6 <_malloc_r+0xde>
 8006c4a:	6834      	ldr	r4, [r6, #0]
 8006c4c:	4626      	mov	r6, r4
 8006c4e:	2e00      	cmp	r6, #0
 8006c50:	d140      	bne.n	8006cd4 <_malloc_r+0xcc>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	4631      	mov	r1, r6
 8006c56:	4638      	mov	r0, r7
 8006c58:	eb04 0803 	add.w	r8, r4, r3
 8006c5c:	f000 f9a0 	bl	8006fa0 <_sbrk_r>
 8006c60:	4580      	cmp	r8, r0
 8006c62:	d13a      	bne.n	8006cda <_malloc_r+0xd2>
 8006c64:	6821      	ldr	r1, [r4, #0]
 8006c66:	3503      	adds	r5, #3
 8006c68:	1a6d      	subs	r5, r5, r1
 8006c6a:	f025 0503 	bic.w	r5, r5, #3
 8006c6e:	3508      	adds	r5, #8
 8006c70:	2d0c      	cmp	r5, #12
 8006c72:	bf38      	it	cc
 8006c74:	250c      	movcc	r5, #12
 8006c76:	4638      	mov	r0, r7
 8006c78:	4629      	mov	r1, r5
 8006c7a:	f7ff ffa5 	bl	8006bc8 <sbrk_aligned>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d02b      	beq.n	8006cda <_malloc_r+0xd2>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	442b      	add	r3, r5
 8006c86:	6023      	str	r3, [r4, #0]
 8006c88:	e00e      	b.n	8006ca8 <_malloc_r+0xa0>
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	1b52      	subs	r2, r2, r5
 8006c8e:	d41e      	bmi.n	8006cce <_malloc_r+0xc6>
 8006c90:	2a0b      	cmp	r2, #11
 8006c92:	d916      	bls.n	8006cc2 <_malloc_r+0xba>
 8006c94:	1961      	adds	r1, r4, r5
 8006c96:	42a3      	cmp	r3, r4
 8006c98:	6025      	str	r5, [r4, #0]
 8006c9a:	bf18      	it	ne
 8006c9c:	6059      	strne	r1, [r3, #4]
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	bf08      	it	eq
 8006ca2:	6031      	streq	r1, [r6, #0]
 8006ca4:	5162      	str	r2, [r4, r5]
 8006ca6:	604b      	str	r3, [r1, #4]
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f104 060b 	add.w	r6, r4, #11
 8006cae:	f000 fa69 	bl	8007184 <__malloc_unlock>
 8006cb2:	f026 0607 	bic.w	r6, r6, #7
 8006cb6:	1d23      	adds	r3, r4, #4
 8006cb8:	1af2      	subs	r2, r6, r3
 8006cba:	d0b6      	beq.n	8006c2a <_malloc_r+0x22>
 8006cbc:	1b9b      	subs	r3, r3, r6
 8006cbe:	50a3      	str	r3, [r4, r2]
 8006cc0:	e7b3      	b.n	8006c2a <_malloc_r+0x22>
 8006cc2:	6862      	ldr	r2, [r4, #4]
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	bf0c      	ite	eq
 8006cc8:	6032      	streq	r2, [r6, #0]
 8006cca:	605a      	strne	r2, [r3, #4]
 8006ccc:	e7ec      	b.n	8006ca8 <_malloc_r+0xa0>
 8006cce:	4623      	mov	r3, r4
 8006cd0:	6864      	ldr	r4, [r4, #4]
 8006cd2:	e7b2      	b.n	8006c3a <_malloc_r+0x32>
 8006cd4:	4634      	mov	r4, r6
 8006cd6:	6876      	ldr	r6, [r6, #4]
 8006cd8:	e7b9      	b.n	8006c4e <_malloc_r+0x46>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	4638      	mov	r0, r7
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	f000 fa50 	bl	8007184 <__malloc_unlock>
 8006ce4:	e7a1      	b.n	8006c2a <_malloc_r+0x22>
 8006ce6:	6025      	str	r5, [r4, #0]
 8006ce8:	e7de      	b.n	8006ca8 <_malloc_r+0xa0>
 8006cea:	bf00      	nop
 8006cec:	20000b68 	.word	0x20000b68

08006cf0 <__sfputc_r>:
 8006cf0:	6893      	ldr	r3, [r2, #8]
 8006cf2:	b410      	push	{r4}
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	6093      	str	r3, [r2, #8]
 8006cfa:	da07      	bge.n	8006d0c <__sfputc_r+0x1c>
 8006cfc:	6994      	ldr	r4, [r2, #24]
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	db01      	blt.n	8006d06 <__sfputc_r+0x16>
 8006d02:	290a      	cmp	r1, #10
 8006d04:	d102      	bne.n	8006d0c <__sfputc_r+0x1c>
 8006d06:	bc10      	pop	{r4}
 8006d08:	f7fe ba02 	b.w	8005110 <__swbuf_r>
 8006d0c:	6813      	ldr	r3, [r2, #0]
 8006d0e:	1c58      	adds	r0, r3, #1
 8006d10:	6010      	str	r0, [r2, #0]
 8006d12:	7019      	strb	r1, [r3, #0]
 8006d14:	4608      	mov	r0, r1
 8006d16:	bc10      	pop	{r4}
 8006d18:	4770      	bx	lr

08006d1a <__sfputs_r>:
 8006d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	460f      	mov	r7, r1
 8006d20:	4614      	mov	r4, r2
 8006d22:	18d5      	adds	r5, r2, r3
 8006d24:	42ac      	cmp	r4, r5
 8006d26:	d101      	bne.n	8006d2c <__sfputs_r+0x12>
 8006d28:	2000      	movs	r0, #0
 8006d2a:	e007      	b.n	8006d3c <__sfputs_r+0x22>
 8006d2c:	463a      	mov	r2, r7
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d34:	f7ff ffdc 	bl	8006cf0 <__sfputc_r>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d1f3      	bne.n	8006d24 <__sfputs_r+0xa>
 8006d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d40 <_vfiprintf_r>:
 8006d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d44:	460d      	mov	r5, r1
 8006d46:	4614      	mov	r4, r2
 8006d48:	4698      	mov	r8, r3
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	b09d      	sub	sp, #116	; 0x74
 8006d4e:	b118      	cbz	r0, 8006d58 <_vfiprintf_r+0x18>
 8006d50:	6983      	ldr	r3, [r0, #24]
 8006d52:	b90b      	cbnz	r3, 8006d58 <_vfiprintf_r+0x18>
 8006d54:	f7ff fa2c 	bl	80061b0 <__sinit>
 8006d58:	4b89      	ldr	r3, [pc, #548]	; (8006f80 <_vfiprintf_r+0x240>)
 8006d5a:	429d      	cmp	r5, r3
 8006d5c:	d11b      	bne.n	8006d96 <_vfiprintf_r+0x56>
 8006d5e:	6875      	ldr	r5, [r6, #4]
 8006d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d62:	07d9      	lsls	r1, r3, #31
 8006d64:	d405      	bmi.n	8006d72 <_vfiprintf_r+0x32>
 8006d66:	89ab      	ldrh	r3, [r5, #12]
 8006d68:	059a      	lsls	r2, r3, #22
 8006d6a:	d402      	bmi.n	8006d72 <_vfiprintf_r+0x32>
 8006d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d6e:	f7ff fac2 	bl	80062f6 <__retarget_lock_acquire_recursive>
 8006d72:	89ab      	ldrh	r3, [r5, #12]
 8006d74:	071b      	lsls	r3, r3, #28
 8006d76:	d501      	bpl.n	8006d7c <_vfiprintf_r+0x3c>
 8006d78:	692b      	ldr	r3, [r5, #16]
 8006d7a:	b9eb      	cbnz	r3, 8006db8 <_vfiprintf_r+0x78>
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	4630      	mov	r0, r6
 8006d80:	f7fe fa18 	bl	80051b4 <__swsetup_r>
 8006d84:	b1c0      	cbz	r0, 8006db8 <_vfiprintf_r+0x78>
 8006d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d88:	07dc      	lsls	r4, r3, #31
 8006d8a:	d50e      	bpl.n	8006daa <_vfiprintf_r+0x6a>
 8006d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d90:	b01d      	add	sp, #116	; 0x74
 8006d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d96:	4b7b      	ldr	r3, [pc, #492]	; (8006f84 <_vfiprintf_r+0x244>)
 8006d98:	429d      	cmp	r5, r3
 8006d9a:	d101      	bne.n	8006da0 <_vfiprintf_r+0x60>
 8006d9c:	68b5      	ldr	r5, [r6, #8]
 8006d9e:	e7df      	b.n	8006d60 <_vfiprintf_r+0x20>
 8006da0:	4b79      	ldr	r3, [pc, #484]	; (8006f88 <_vfiprintf_r+0x248>)
 8006da2:	429d      	cmp	r5, r3
 8006da4:	bf08      	it	eq
 8006da6:	68f5      	ldreq	r5, [r6, #12]
 8006da8:	e7da      	b.n	8006d60 <_vfiprintf_r+0x20>
 8006daa:	89ab      	ldrh	r3, [r5, #12]
 8006dac:	0598      	lsls	r0, r3, #22
 8006dae:	d4ed      	bmi.n	8006d8c <_vfiprintf_r+0x4c>
 8006db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006db2:	f7ff faa1 	bl	80062f8 <__retarget_lock_release_recursive>
 8006db6:	e7e9      	b.n	8006d8c <_vfiprintf_r+0x4c>
 8006db8:	2300      	movs	r3, #0
 8006dba:	9309      	str	r3, [sp, #36]	; 0x24
 8006dbc:	2320      	movs	r3, #32
 8006dbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dc2:	2330      	movs	r3, #48	; 0x30
 8006dc4:	f04f 0901 	mov.w	r9, #1
 8006dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dcc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f8c <_vfiprintf_r+0x24c>
 8006dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dd4:	4623      	mov	r3, r4
 8006dd6:	469a      	mov	sl, r3
 8006dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ddc:	b10a      	cbz	r2, 8006de2 <_vfiprintf_r+0xa2>
 8006dde:	2a25      	cmp	r2, #37	; 0x25
 8006de0:	d1f9      	bne.n	8006dd6 <_vfiprintf_r+0x96>
 8006de2:	ebba 0b04 	subs.w	fp, sl, r4
 8006de6:	d00b      	beq.n	8006e00 <_vfiprintf_r+0xc0>
 8006de8:	465b      	mov	r3, fp
 8006dea:	4622      	mov	r2, r4
 8006dec:	4629      	mov	r1, r5
 8006dee:	4630      	mov	r0, r6
 8006df0:	f7ff ff93 	bl	8006d1a <__sfputs_r>
 8006df4:	3001      	adds	r0, #1
 8006df6:	f000 80aa 	beq.w	8006f4e <_vfiprintf_r+0x20e>
 8006dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dfc:	445a      	add	r2, fp
 8006dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8006e00:	f89a 3000 	ldrb.w	r3, [sl]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80a2 	beq.w	8006f4e <_vfiprintf_r+0x20e>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e14:	f10a 0a01 	add.w	sl, sl, #1
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	9307      	str	r3, [sp, #28]
 8006e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e20:	931a      	str	r3, [sp, #104]	; 0x68
 8006e22:	4654      	mov	r4, sl
 8006e24:	2205      	movs	r2, #5
 8006e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e2a:	4858      	ldr	r0, [pc, #352]	; (8006f8c <_vfiprintf_r+0x24c>)
 8006e2c:	f7ff fad2 	bl	80063d4 <memchr>
 8006e30:	9a04      	ldr	r2, [sp, #16]
 8006e32:	b9d8      	cbnz	r0, 8006e6c <_vfiprintf_r+0x12c>
 8006e34:	06d1      	lsls	r1, r2, #27
 8006e36:	bf44      	itt	mi
 8006e38:	2320      	movmi	r3, #32
 8006e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e3e:	0713      	lsls	r3, r2, #28
 8006e40:	bf44      	itt	mi
 8006e42:	232b      	movmi	r3, #43	; 0x2b
 8006e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e48:	f89a 3000 	ldrb.w	r3, [sl]
 8006e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e4e:	d015      	beq.n	8006e7c <_vfiprintf_r+0x13c>
 8006e50:	4654      	mov	r4, sl
 8006e52:	2000      	movs	r0, #0
 8006e54:	f04f 0c0a 	mov.w	ip, #10
 8006e58:	9a07      	ldr	r2, [sp, #28]
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e60:	3b30      	subs	r3, #48	; 0x30
 8006e62:	2b09      	cmp	r3, #9
 8006e64:	d94e      	bls.n	8006f04 <_vfiprintf_r+0x1c4>
 8006e66:	b1b0      	cbz	r0, 8006e96 <_vfiprintf_r+0x156>
 8006e68:	9207      	str	r2, [sp, #28]
 8006e6a:	e014      	b.n	8006e96 <_vfiprintf_r+0x156>
 8006e6c:	eba0 0308 	sub.w	r3, r0, r8
 8006e70:	fa09 f303 	lsl.w	r3, r9, r3
 8006e74:	4313      	orrs	r3, r2
 8006e76:	46a2      	mov	sl, r4
 8006e78:	9304      	str	r3, [sp, #16]
 8006e7a:	e7d2      	b.n	8006e22 <_vfiprintf_r+0xe2>
 8006e7c:	9b03      	ldr	r3, [sp, #12]
 8006e7e:	1d19      	adds	r1, r3, #4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	9103      	str	r1, [sp, #12]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	bfbb      	ittet	lt
 8006e88:	425b      	neglt	r3, r3
 8006e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e8e:	9307      	strge	r3, [sp, #28]
 8006e90:	9307      	strlt	r3, [sp, #28]
 8006e92:	bfb8      	it	lt
 8006e94:	9204      	strlt	r2, [sp, #16]
 8006e96:	7823      	ldrb	r3, [r4, #0]
 8006e98:	2b2e      	cmp	r3, #46	; 0x2e
 8006e9a:	d10c      	bne.n	8006eb6 <_vfiprintf_r+0x176>
 8006e9c:	7863      	ldrb	r3, [r4, #1]
 8006e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8006ea0:	d135      	bne.n	8006f0e <_vfiprintf_r+0x1ce>
 8006ea2:	9b03      	ldr	r3, [sp, #12]
 8006ea4:	3402      	adds	r4, #2
 8006ea6:	1d1a      	adds	r2, r3, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	9203      	str	r2, [sp, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bfb8      	it	lt
 8006eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eb4:	9305      	str	r3, [sp, #20]
 8006eb6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f90 <_vfiprintf_r+0x250>
 8006eba:	2203      	movs	r2, #3
 8006ebc:	4650      	mov	r0, sl
 8006ebe:	7821      	ldrb	r1, [r4, #0]
 8006ec0:	f7ff fa88 	bl	80063d4 <memchr>
 8006ec4:	b140      	cbz	r0, 8006ed8 <_vfiprintf_r+0x198>
 8006ec6:	2340      	movs	r3, #64	; 0x40
 8006ec8:	eba0 000a 	sub.w	r0, r0, sl
 8006ecc:	fa03 f000 	lsl.w	r0, r3, r0
 8006ed0:	9b04      	ldr	r3, [sp, #16]
 8006ed2:	3401      	adds	r4, #1
 8006ed4:	4303      	orrs	r3, r0
 8006ed6:	9304      	str	r3, [sp, #16]
 8006ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006edc:	2206      	movs	r2, #6
 8006ede:	482d      	ldr	r0, [pc, #180]	; (8006f94 <_vfiprintf_r+0x254>)
 8006ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ee4:	f7ff fa76 	bl	80063d4 <memchr>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d03f      	beq.n	8006f6c <_vfiprintf_r+0x22c>
 8006eec:	4b2a      	ldr	r3, [pc, #168]	; (8006f98 <_vfiprintf_r+0x258>)
 8006eee:	bb1b      	cbnz	r3, 8006f38 <_vfiprintf_r+0x1f8>
 8006ef0:	9b03      	ldr	r3, [sp, #12]
 8006ef2:	3307      	adds	r3, #7
 8006ef4:	f023 0307 	bic.w	r3, r3, #7
 8006ef8:	3308      	adds	r3, #8
 8006efa:	9303      	str	r3, [sp, #12]
 8006efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efe:	443b      	add	r3, r7
 8006f00:	9309      	str	r3, [sp, #36]	; 0x24
 8006f02:	e767      	b.n	8006dd4 <_vfiprintf_r+0x94>
 8006f04:	460c      	mov	r4, r1
 8006f06:	2001      	movs	r0, #1
 8006f08:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f0c:	e7a5      	b.n	8006e5a <_vfiprintf_r+0x11a>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f04f 0c0a 	mov.w	ip, #10
 8006f14:	4619      	mov	r1, r3
 8006f16:	3401      	adds	r4, #1
 8006f18:	9305      	str	r3, [sp, #20]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f20:	3a30      	subs	r2, #48	; 0x30
 8006f22:	2a09      	cmp	r2, #9
 8006f24:	d903      	bls.n	8006f2e <_vfiprintf_r+0x1ee>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0c5      	beq.n	8006eb6 <_vfiprintf_r+0x176>
 8006f2a:	9105      	str	r1, [sp, #20]
 8006f2c:	e7c3      	b.n	8006eb6 <_vfiprintf_r+0x176>
 8006f2e:	4604      	mov	r4, r0
 8006f30:	2301      	movs	r3, #1
 8006f32:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f36:	e7f0      	b.n	8006f1a <_vfiprintf_r+0x1da>
 8006f38:	ab03      	add	r3, sp, #12
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	462a      	mov	r2, r5
 8006f3e:	4630      	mov	r0, r6
 8006f40:	4b16      	ldr	r3, [pc, #88]	; (8006f9c <_vfiprintf_r+0x25c>)
 8006f42:	a904      	add	r1, sp, #16
 8006f44:	f7fd fc94 	bl	8004870 <_printf_float>
 8006f48:	4607      	mov	r7, r0
 8006f4a:	1c78      	adds	r0, r7, #1
 8006f4c:	d1d6      	bne.n	8006efc <_vfiprintf_r+0x1bc>
 8006f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f50:	07d9      	lsls	r1, r3, #31
 8006f52:	d405      	bmi.n	8006f60 <_vfiprintf_r+0x220>
 8006f54:	89ab      	ldrh	r3, [r5, #12]
 8006f56:	059a      	lsls	r2, r3, #22
 8006f58:	d402      	bmi.n	8006f60 <_vfiprintf_r+0x220>
 8006f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f5c:	f7ff f9cc 	bl	80062f8 <__retarget_lock_release_recursive>
 8006f60:	89ab      	ldrh	r3, [r5, #12]
 8006f62:	065b      	lsls	r3, r3, #25
 8006f64:	f53f af12 	bmi.w	8006d8c <_vfiprintf_r+0x4c>
 8006f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f6a:	e711      	b.n	8006d90 <_vfiprintf_r+0x50>
 8006f6c:	ab03      	add	r3, sp, #12
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	462a      	mov	r2, r5
 8006f72:	4630      	mov	r0, r6
 8006f74:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <_vfiprintf_r+0x25c>)
 8006f76:	a904      	add	r1, sp, #16
 8006f78:	f7fd ff16 	bl	8004da8 <_printf_i>
 8006f7c:	e7e4      	b.n	8006f48 <_vfiprintf_r+0x208>
 8006f7e:	bf00      	nop
 8006f80:	080075ac 	.word	0x080075ac
 8006f84:	080075cc 	.word	0x080075cc
 8006f88:	0800758c 	.word	0x0800758c
 8006f8c:	08007744 	.word	0x08007744
 8006f90:	0800774a 	.word	0x0800774a
 8006f94:	0800774e 	.word	0x0800774e
 8006f98:	08004871 	.word	0x08004871
 8006f9c:	08006d1b 	.word	0x08006d1b

08006fa0 <_sbrk_r>:
 8006fa0:	b538      	push	{r3, r4, r5, lr}
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4d05      	ldr	r5, [pc, #20]	; (8006fbc <_sbrk_r+0x1c>)
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4608      	mov	r0, r1
 8006faa:	602b      	str	r3, [r5, #0]
 8006fac:	f7fb f842 	bl	8002034 <_sbrk>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_sbrk_r+0x1a>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_sbrk_r+0x1a>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	20000b70 	.word	0x20000b70

08006fc0 <__sread>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc8:	f000 f8e2 	bl	8007190 <_read_r>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	bfab      	itete	ge
 8006fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8006fd4:	181b      	addge	r3, r3, r0
 8006fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fda:	bfac      	ite	ge
 8006fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fde:	81a3      	strhlt	r3, [r4, #12]
 8006fe0:	bd10      	pop	{r4, pc}

08006fe2 <__swrite>:
 8006fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe6:	461f      	mov	r7, r3
 8006fe8:	898b      	ldrh	r3, [r1, #12]
 8006fea:	4605      	mov	r5, r0
 8006fec:	05db      	lsls	r3, r3, #23
 8006fee:	460c      	mov	r4, r1
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	d505      	bpl.n	8007000 <__swrite+0x1e>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ffc:	f000 f898 	bl	8007130 <_lseek_r>
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	4632      	mov	r2, r6
 8007004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007008:	81a3      	strh	r3, [r4, #12]
 800700a:	4628      	mov	r0, r5
 800700c:	463b      	mov	r3, r7
 800700e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007016:	f000 b817 	b.w	8007048 <_write_r>

0800701a <__sseek>:
 800701a:	b510      	push	{r4, lr}
 800701c:	460c      	mov	r4, r1
 800701e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007022:	f000 f885 	bl	8007130 <_lseek_r>
 8007026:	1c43      	adds	r3, r0, #1
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	bf15      	itete	ne
 800702c:	6560      	strne	r0, [r4, #84]	; 0x54
 800702e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007036:	81a3      	strheq	r3, [r4, #12]
 8007038:	bf18      	it	ne
 800703a:	81a3      	strhne	r3, [r4, #12]
 800703c:	bd10      	pop	{r4, pc}

0800703e <__sclose>:
 800703e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007042:	f000 b831 	b.w	80070a8 <_close_r>
	...

08007048 <_write_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	4611      	mov	r1, r2
 8007050:	2200      	movs	r2, #0
 8007052:	4d05      	ldr	r5, [pc, #20]	; (8007068 <_write_r+0x20>)
 8007054:	602a      	str	r2, [r5, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f7fa ffa0 	bl	8001f9c <_write>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_write_r+0x1e>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_write_r+0x1e>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	20000b70 	.word	0x20000b70

0800706c <__assert_func>:
 800706c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800706e:	4614      	mov	r4, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4b09      	ldr	r3, [pc, #36]	; (8007098 <__assert_func+0x2c>)
 8007074:	4605      	mov	r5, r0
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68d8      	ldr	r0, [r3, #12]
 800707a:	b14c      	cbz	r4, 8007090 <__assert_func+0x24>
 800707c:	4b07      	ldr	r3, [pc, #28]	; (800709c <__assert_func+0x30>)
 800707e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007082:	9100      	str	r1, [sp, #0]
 8007084:	462b      	mov	r3, r5
 8007086:	4906      	ldr	r1, [pc, #24]	; (80070a0 <__assert_func+0x34>)
 8007088:	f000 f81e 	bl	80070c8 <fiprintf>
 800708c:	f000 f89f 	bl	80071ce <abort>
 8007090:	4b04      	ldr	r3, [pc, #16]	; (80070a4 <__assert_func+0x38>)
 8007092:	461c      	mov	r4, r3
 8007094:	e7f3      	b.n	800707e <__assert_func+0x12>
 8007096:	bf00      	nop
 8007098:	20000010 	.word	0x20000010
 800709c:	08007755 	.word	0x08007755
 80070a0:	08007762 	.word	0x08007762
 80070a4:	08007790 	.word	0x08007790

080070a8 <_close_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	2300      	movs	r3, #0
 80070ac:	4d05      	ldr	r5, [pc, #20]	; (80070c4 <_close_r+0x1c>)
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f7fa ff8e 	bl	8001fd4 <_close>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_close_r+0x1a>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_close_r+0x1a>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	20000b70 	.word	0x20000b70

080070c8 <fiprintf>:
 80070c8:	b40e      	push	{r1, r2, r3}
 80070ca:	b503      	push	{r0, r1, lr}
 80070cc:	4601      	mov	r1, r0
 80070ce:	ab03      	add	r3, sp, #12
 80070d0:	4805      	ldr	r0, [pc, #20]	; (80070e8 <fiprintf+0x20>)
 80070d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d6:	6800      	ldr	r0, [r0, #0]
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	f7ff fe31 	bl	8006d40 <_vfiprintf_r>
 80070de:	b002      	add	sp, #8
 80070e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070e4:	b003      	add	sp, #12
 80070e6:	4770      	bx	lr
 80070e8:	20000010 	.word	0x20000010

080070ec <_fstat_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	2300      	movs	r3, #0
 80070f0:	4d06      	ldr	r5, [pc, #24]	; (800710c <_fstat_r+0x20>)
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	602b      	str	r3, [r5, #0]
 80070fa:	f7fa ff76 	bl	8001fea <_fstat>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d102      	bne.n	8007108 <_fstat_r+0x1c>
 8007102:	682b      	ldr	r3, [r5, #0]
 8007104:	b103      	cbz	r3, 8007108 <_fstat_r+0x1c>
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	bd38      	pop	{r3, r4, r5, pc}
 800710a:	bf00      	nop
 800710c:	20000b70 	.word	0x20000b70

08007110 <_isatty_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	2300      	movs	r3, #0
 8007114:	4d05      	ldr	r5, [pc, #20]	; (800712c <_isatty_r+0x1c>)
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	f7fa ff74 	bl	8002008 <_isatty>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_isatty_r+0x1a>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_isatty_r+0x1a>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20000b70 	.word	0x20000b70

08007130 <_lseek_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	4608      	mov	r0, r1
 8007136:	4611      	mov	r1, r2
 8007138:	2200      	movs	r2, #0
 800713a:	4d05      	ldr	r5, [pc, #20]	; (8007150 <_lseek_r+0x20>)
 800713c:	602a      	str	r2, [r5, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f7fa ff6c 	bl	800201c <_lseek>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_lseek_r+0x1e>
 8007148:	682b      	ldr	r3, [r5, #0]
 800714a:	b103      	cbz	r3, 800714e <_lseek_r+0x1e>
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	20000b70 	.word	0x20000b70

08007154 <__ascii_mbtowc>:
 8007154:	b082      	sub	sp, #8
 8007156:	b901      	cbnz	r1, 800715a <__ascii_mbtowc+0x6>
 8007158:	a901      	add	r1, sp, #4
 800715a:	b142      	cbz	r2, 800716e <__ascii_mbtowc+0x1a>
 800715c:	b14b      	cbz	r3, 8007172 <__ascii_mbtowc+0x1e>
 800715e:	7813      	ldrb	r3, [r2, #0]
 8007160:	600b      	str	r3, [r1, #0]
 8007162:	7812      	ldrb	r2, [r2, #0]
 8007164:	1e10      	subs	r0, r2, #0
 8007166:	bf18      	it	ne
 8007168:	2001      	movne	r0, #1
 800716a:	b002      	add	sp, #8
 800716c:	4770      	bx	lr
 800716e:	4610      	mov	r0, r2
 8007170:	e7fb      	b.n	800716a <__ascii_mbtowc+0x16>
 8007172:	f06f 0001 	mvn.w	r0, #1
 8007176:	e7f8      	b.n	800716a <__ascii_mbtowc+0x16>

08007178 <__malloc_lock>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__malloc_lock+0x8>)
 800717a:	f7ff b8bc 	b.w	80062f6 <__retarget_lock_acquire_recursive>
 800717e:	bf00      	nop
 8007180:	20000b64 	.word	0x20000b64

08007184 <__malloc_unlock>:
 8007184:	4801      	ldr	r0, [pc, #4]	; (800718c <__malloc_unlock+0x8>)
 8007186:	f7ff b8b7 	b.w	80062f8 <__retarget_lock_release_recursive>
 800718a:	bf00      	nop
 800718c:	20000b64 	.word	0x20000b64

08007190 <_read_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4604      	mov	r4, r0
 8007194:	4608      	mov	r0, r1
 8007196:	4611      	mov	r1, r2
 8007198:	2200      	movs	r2, #0
 800719a:	4d05      	ldr	r5, [pc, #20]	; (80071b0 <_read_r+0x20>)
 800719c:	602a      	str	r2, [r5, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f7fa fedf 	bl	8001f62 <_read>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d102      	bne.n	80071ae <_read_r+0x1e>
 80071a8:	682b      	ldr	r3, [r5, #0]
 80071aa:	b103      	cbz	r3, 80071ae <_read_r+0x1e>
 80071ac:	6023      	str	r3, [r4, #0]
 80071ae:	bd38      	pop	{r3, r4, r5, pc}
 80071b0:	20000b70 	.word	0x20000b70

080071b4 <__ascii_wctomb>:
 80071b4:	4603      	mov	r3, r0
 80071b6:	4608      	mov	r0, r1
 80071b8:	b141      	cbz	r1, 80071cc <__ascii_wctomb+0x18>
 80071ba:	2aff      	cmp	r2, #255	; 0xff
 80071bc:	d904      	bls.n	80071c8 <__ascii_wctomb+0x14>
 80071be:	228a      	movs	r2, #138	; 0x8a
 80071c0:	f04f 30ff 	mov.w	r0, #4294967295
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	4770      	bx	lr
 80071c8:	2001      	movs	r0, #1
 80071ca:	700a      	strb	r2, [r1, #0]
 80071cc:	4770      	bx	lr

080071ce <abort>:
 80071ce:	2006      	movs	r0, #6
 80071d0:	b508      	push	{r3, lr}
 80071d2:	f000 f82b 	bl	800722c <raise>
 80071d6:	2001      	movs	r0, #1
 80071d8:	f7fa feb9 	bl	8001f4e <_exit>

080071dc <_raise_r>:
 80071dc:	291f      	cmp	r1, #31
 80071de:	b538      	push	{r3, r4, r5, lr}
 80071e0:	4604      	mov	r4, r0
 80071e2:	460d      	mov	r5, r1
 80071e4:	d904      	bls.n	80071f0 <_raise_r+0x14>
 80071e6:	2316      	movs	r3, #22
 80071e8:	6003      	str	r3, [r0, #0]
 80071ea:	f04f 30ff 	mov.w	r0, #4294967295
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071f2:	b112      	cbz	r2, 80071fa <_raise_r+0x1e>
 80071f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071f8:	b94b      	cbnz	r3, 800720e <_raise_r+0x32>
 80071fa:	4620      	mov	r0, r4
 80071fc:	f000 f830 	bl	8007260 <_getpid_r>
 8007200:	462a      	mov	r2, r5
 8007202:	4601      	mov	r1, r0
 8007204:	4620      	mov	r0, r4
 8007206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800720a:	f000 b817 	b.w	800723c <_kill_r>
 800720e:	2b01      	cmp	r3, #1
 8007210:	d00a      	beq.n	8007228 <_raise_r+0x4c>
 8007212:	1c59      	adds	r1, r3, #1
 8007214:	d103      	bne.n	800721e <_raise_r+0x42>
 8007216:	2316      	movs	r3, #22
 8007218:	6003      	str	r3, [r0, #0]
 800721a:	2001      	movs	r0, #1
 800721c:	e7e7      	b.n	80071ee <_raise_r+0x12>
 800721e:	2400      	movs	r4, #0
 8007220:	4628      	mov	r0, r5
 8007222:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007226:	4798      	blx	r3
 8007228:	2000      	movs	r0, #0
 800722a:	e7e0      	b.n	80071ee <_raise_r+0x12>

0800722c <raise>:
 800722c:	4b02      	ldr	r3, [pc, #8]	; (8007238 <raise+0xc>)
 800722e:	4601      	mov	r1, r0
 8007230:	6818      	ldr	r0, [r3, #0]
 8007232:	f7ff bfd3 	b.w	80071dc <_raise_r>
 8007236:	bf00      	nop
 8007238:	20000010 	.word	0x20000010

0800723c <_kill_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	2300      	movs	r3, #0
 8007240:	4d06      	ldr	r5, [pc, #24]	; (800725c <_kill_r+0x20>)
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	4611      	mov	r1, r2
 8007248:	602b      	str	r3, [r5, #0]
 800724a:	f7fa fe70 	bl	8001f2e <_kill>
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d102      	bne.n	8007258 <_kill_r+0x1c>
 8007252:	682b      	ldr	r3, [r5, #0]
 8007254:	b103      	cbz	r3, 8007258 <_kill_r+0x1c>
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	bd38      	pop	{r3, r4, r5, pc}
 800725a:	bf00      	nop
 800725c:	20000b70 	.word	0x20000b70

08007260 <_getpid_r>:
 8007260:	f7fa be5e 	b.w	8001f20 <_getpid>

08007264 <sqrt>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	4606      	mov	r6, r0
 8007268:	460f      	mov	r7, r1
 800726a:	f000 f81f 	bl	80072ac <__ieee754_sqrt>
 800726e:	4632      	mov	r2, r6
 8007270:	4604      	mov	r4, r0
 8007272:	460d      	mov	r5, r1
 8007274:	463b      	mov	r3, r7
 8007276:	4630      	mov	r0, r6
 8007278:	4639      	mov	r1, r7
 800727a:	f7f9 fbc7 	bl	8000a0c <__aeabi_dcmpun>
 800727e:	b990      	cbnz	r0, 80072a6 <sqrt+0x42>
 8007280:	2200      	movs	r2, #0
 8007282:	2300      	movs	r3, #0
 8007284:	4630      	mov	r0, r6
 8007286:	4639      	mov	r1, r7
 8007288:	f7f9 fb98 	bl	80009bc <__aeabi_dcmplt>
 800728c:	b158      	cbz	r0, 80072a6 <sqrt+0x42>
 800728e:	f7fd fa1f 	bl	80046d0 <__errno>
 8007292:	2321      	movs	r3, #33	; 0x21
 8007294:	2200      	movs	r2, #0
 8007296:	6003      	str	r3, [r0, #0]
 8007298:	2300      	movs	r3, #0
 800729a:	4610      	mov	r0, r2
 800729c:	4619      	mov	r1, r3
 800729e:	f7f9 fa45 	bl	800072c <__aeabi_ddiv>
 80072a2:	4604      	mov	r4, r0
 80072a4:	460d      	mov	r5, r1
 80072a6:	4620      	mov	r0, r4
 80072a8:	4629      	mov	r1, r5
 80072aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072ac <__ieee754_sqrt>:
 80072ac:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007408 <__ieee754_sqrt+0x15c>
 80072b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b4:	ea3c 0c01 	bics.w	ip, ip, r1
 80072b8:	4606      	mov	r6, r0
 80072ba:	460d      	mov	r5, r1
 80072bc:	460c      	mov	r4, r1
 80072be:	460a      	mov	r2, r1
 80072c0:	4607      	mov	r7, r0
 80072c2:	4603      	mov	r3, r0
 80072c4:	d10f      	bne.n	80072e6 <__ieee754_sqrt+0x3a>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	f7f9 f905 	bl	80004d8 <__aeabi_dmul>
 80072ce:	4602      	mov	r2, r0
 80072d0:	460b      	mov	r3, r1
 80072d2:	4630      	mov	r0, r6
 80072d4:	4629      	mov	r1, r5
 80072d6:	f7f8 ff49 	bl	800016c <__adddf3>
 80072da:	4606      	mov	r6, r0
 80072dc:	460d      	mov	r5, r1
 80072de:	4630      	mov	r0, r6
 80072e0:	4629      	mov	r1, r5
 80072e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e6:	2900      	cmp	r1, #0
 80072e8:	dc0e      	bgt.n	8007308 <__ieee754_sqrt+0x5c>
 80072ea:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80072ee:	ea5c 0707 	orrs.w	r7, ip, r7
 80072f2:	d0f4      	beq.n	80072de <__ieee754_sqrt+0x32>
 80072f4:	b141      	cbz	r1, 8007308 <__ieee754_sqrt+0x5c>
 80072f6:	4602      	mov	r2, r0
 80072f8:	460b      	mov	r3, r1
 80072fa:	f7f8 ff35 	bl	8000168 <__aeabi_dsub>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	f7f9 fa13 	bl	800072c <__aeabi_ddiv>
 8007306:	e7e8      	b.n	80072da <__ieee754_sqrt+0x2e>
 8007308:	1521      	asrs	r1, r4, #20
 800730a:	d075      	beq.n	80073f8 <__ieee754_sqrt+0x14c>
 800730c:	07cc      	lsls	r4, r1, #31
 800730e:	f04f 0400 	mov.w	r4, #0
 8007312:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007316:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800731a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800731e:	bf5e      	ittt	pl
 8007320:	0fd9      	lsrpl	r1, r3, #31
 8007322:	005b      	lslpl	r3, r3, #1
 8007324:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007328:	0fd9      	lsrs	r1, r3, #31
 800732a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800732e:	2516      	movs	r5, #22
 8007330:	4620      	mov	r0, r4
 8007332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007336:	107f      	asrs	r7, r7, #1
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	1846      	adds	r6, r0, r1
 800733c:	4296      	cmp	r6, r2
 800733e:	bfde      	ittt	le
 8007340:	1b92      	suble	r2, r2, r6
 8007342:	1870      	addle	r0, r6, r1
 8007344:	1864      	addle	r4, r4, r1
 8007346:	0052      	lsls	r2, r2, #1
 8007348:	3d01      	subs	r5, #1
 800734a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800734e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007352:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007356:	d1f0      	bne.n	800733a <__ieee754_sqrt+0x8e>
 8007358:	4629      	mov	r1, r5
 800735a:	f04f 0e20 	mov.w	lr, #32
 800735e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007362:	4282      	cmp	r2, r0
 8007364:	eb06 0c05 	add.w	ip, r6, r5
 8007368:	dc02      	bgt.n	8007370 <__ieee754_sqrt+0xc4>
 800736a:	d113      	bne.n	8007394 <__ieee754_sqrt+0xe8>
 800736c:	459c      	cmp	ip, r3
 800736e:	d811      	bhi.n	8007394 <__ieee754_sqrt+0xe8>
 8007370:	f1bc 0f00 	cmp.w	ip, #0
 8007374:	eb0c 0506 	add.w	r5, ip, r6
 8007378:	da43      	bge.n	8007402 <__ieee754_sqrt+0x156>
 800737a:	2d00      	cmp	r5, #0
 800737c:	db41      	blt.n	8007402 <__ieee754_sqrt+0x156>
 800737e:	f100 0801 	add.w	r8, r0, #1
 8007382:	1a12      	subs	r2, r2, r0
 8007384:	4640      	mov	r0, r8
 8007386:	459c      	cmp	ip, r3
 8007388:	bf88      	it	hi
 800738a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800738e:	eba3 030c 	sub.w	r3, r3, ip
 8007392:	4431      	add	r1, r6
 8007394:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007398:	f1be 0e01 	subs.w	lr, lr, #1
 800739c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80073a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80073a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80073a8:	d1db      	bne.n	8007362 <__ieee754_sqrt+0xb6>
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d006      	beq.n	80073bc <__ieee754_sqrt+0x110>
 80073ae:	1c48      	adds	r0, r1, #1
 80073b0:	bf0b      	itete	eq
 80073b2:	4671      	moveq	r1, lr
 80073b4:	3101      	addne	r1, #1
 80073b6:	3401      	addeq	r4, #1
 80073b8:	f021 0101 	bicne.w	r1, r1, #1
 80073bc:	1063      	asrs	r3, r4, #1
 80073be:	0849      	lsrs	r1, r1, #1
 80073c0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80073c4:	07e2      	lsls	r2, r4, #31
 80073c6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80073ca:	bf48      	it	mi
 80073cc:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80073d0:	460e      	mov	r6, r1
 80073d2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80073d6:	e782      	b.n	80072de <__ieee754_sqrt+0x32>
 80073d8:	0ada      	lsrs	r2, r3, #11
 80073da:	3815      	subs	r0, #21
 80073dc:	055b      	lsls	r3, r3, #21
 80073de:	2a00      	cmp	r2, #0
 80073e0:	d0fa      	beq.n	80073d8 <__ieee754_sqrt+0x12c>
 80073e2:	02d5      	lsls	r5, r2, #11
 80073e4:	d50a      	bpl.n	80073fc <__ieee754_sqrt+0x150>
 80073e6:	f1c1 0420 	rsb	r4, r1, #32
 80073ea:	fa23 f404 	lsr.w	r4, r3, r4
 80073ee:	1e4d      	subs	r5, r1, #1
 80073f0:	408b      	lsls	r3, r1
 80073f2:	4322      	orrs	r2, r4
 80073f4:	1b41      	subs	r1, r0, r5
 80073f6:	e789      	b.n	800730c <__ieee754_sqrt+0x60>
 80073f8:	4608      	mov	r0, r1
 80073fa:	e7f0      	b.n	80073de <__ieee754_sqrt+0x132>
 80073fc:	0052      	lsls	r2, r2, #1
 80073fe:	3101      	adds	r1, #1
 8007400:	e7ef      	b.n	80073e2 <__ieee754_sqrt+0x136>
 8007402:	4680      	mov	r8, r0
 8007404:	e7bd      	b.n	8007382 <__ieee754_sqrt+0xd6>
 8007406:	bf00      	nop
 8007408:	7ff00000 	.word	0x7ff00000

0800740c <_init>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr

08007418 <_fini>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr
